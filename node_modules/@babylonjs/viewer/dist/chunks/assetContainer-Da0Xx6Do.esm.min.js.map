{"version":3,"file":"assetContainer-Da0Xx6Do.esm.min.js","sources":["../../../../../dev/core/dist/Meshes/instancedMesh.js","../../../../../dev/core/dist/assetContainer.js"],"sourcesContent":["import { Matrix, TmpVectors } from \"../Maths/math.vector\";\nimport { Logger } from \"../Misc/logger\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\nimport { Mesh } from \"../Meshes/mesh\";\nimport { DeepCopier } from \"../Misc/deepCopier\";\nimport { TransformNode } from \"./transformNode\";\nimport { VertexBuffer } from \"../Buffers/buffer\";\nimport { Tools } from \"../Misc/tools\";\nimport { RegisterClass } from \"../Misc/typeStore\";\nMesh._instancedMeshFactory = (name, mesh) => {\n    const instance = new InstancedMesh(name, mesh);\n    if (mesh.instancedBuffers) {\n        instance.instancedBuffers = {};\n        for (const key in mesh.instancedBuffers) {\n            instance.instancedBuffers[key] = mesh.instancedBuffers[key];\n        }\n    }\n    return instance;\n};\n/**\n * Creates an instance based on a source mesh.\n */\nexport class InstancedMesh extends AbstractMesh {\n    /**\n     * Creates a new InstancedMesh object from the mesh source.\n     * @param name defines the name of the instance\n     * @param source the mesh to create the instance from\n     */\n    constructor(name, source) {\n        super(name, source.getScene());\n        /** @internal */\n        this._indexInSourceMeshInstanceArray = -1;\n        /** @internal */\n        this._distanceToCamera = 0;\n        source.addInstance(this);\n        this._sourceMesh = source;\n        this._unIndexed = source._unIndexed;\n        this.position.copyFrom(source.position);\n        this.rotation.copyFrom(source.rotation);\n        this.scaling.copyFrom(source.scaling);\n        if (source.rotationQuaternion) {\n            this.rotationQuaternion = source.rotationQuaternion.clone();\n        }\n        this.animations = source.animations.slice();\n        for (const range of source.getAnimationRanges()) {\n            if (range != null) {\n                this.createAnimationRange(range.name, range.from, range.to);\n            }\n        }\n        this.infiniteDistance = source.infiniteDistance;\n        this.setPivotMatrix(source.getPivotMatrix());\n        if (!source.skeleton && !source.morphTargetManager && source.hasBoundingInfo) {\n            // without skeleton or morphTargetManager, use bounding info of source mesh directly\n            const boundingInfo = source.getBoundingInfo();\n            this.buildBoundingInfo(boundingInfo.minimum, boundingInfo.maximum);\n        }\n        else {\n            this.refreshBoundingInfo(true, true);\n        }\n        this._syncSubMeshes();\n    }\n    /**\n     * @returns the string \"InstancedMesh\".\n     */\n    getClassName() {\n        return \"InstancedMesh\";\n    }\n    /** Gets the list of lights affecting that mesh */\n    get lightSources() {\n        return this._sourceMesh._lightSources;\n    }\n    _resyncLightSources() {\n        // Do nothing as all the work will be done by source mesh\n    }\n    _resyncLightSource() {\n        // Do nothing as all the work will be done by source mesh\n    }\n    _removeLightSource() {\n        // Do nothing as all the work will be done by source mesh\n    }\n    // Methods\n    /**\n     * If the source mesh receives shadows\n     */\n    get receiveShadows() {\n        return this._sourceMesh.receiveShadows;\n    }\n    set receiveShadows(_value) {\n        if (this._sourceMesh?.receiveShadows !== _value) {\n            Tools.Warn(\"Setting receiveShadows on an instanced mesh has no effect\");\n        }\n    }\n    /**\n     * The material of the source mesh\n     */\n    get material() {\n        return this._sourceMesh.material;\n    }\n    set material(_value) {\n        if (this._sourceMesh?.material !== _value) {\n            Tools.Warn(\"Setting material on an instanced mesh has no effect\");\n        }\n    }\n    /**\n     * Visibility of the source mesh\n     */\n    get visibility() {\n        return this._sourceMesh.visibility;\n    }\n    set visibility(_value) {\n        if (this._sourceMesh?.visibility !== _value) {\n            Tools.Warn(\"Setting visibility on an instanced mesh has no effect\");\n        }\n    }\n    /**\n     * Skeleton of the source mesh\n     */\n    get skeleton() {\n        return this._sourceMesh.skeleton;\n    }\n    set skeleton(_value) {\n        if (this._sourceMesh?.skeleton !== _value) {\n            Tools.Warn(\"Setting skeleton on an instanced mesh has no effect\");\n        }\n    }\n    /**\n     * Rendering ground id of the source mesh\n     */\n    get renderingGroupId() {\n        return this._sourceMesh.renderingGroupId;\n    }\n    set renderingGroupId(value) {\n        if (!this._sourceMesh || value === this._sourceMesh.renderingGroupId) {\n            return;\n        }\n        //no-op with warning\n        Logger.Warn(\"Note - setting renderingGroupId of an instanced mesh has no effect on the scene\");\n    }\n    /**\n     * @returns the total number of vertices (integer).\n     */\n    getTotalVertices() {\n        return this._sourceMesh ? this._sourceMesh.getTotalVertices() : 0;\n    }\n    /**\n     * Returns a positive integer : the total number of indices in this mesh geometry.\n     * @returns the number of indices or zero if the mesh has no geometry.\n     */\n    getTotalIndices() {\n        return this._sourceMesh.getTotalIndices();\n    }\n    /**\n     * The source mesh of the instance\n     */\n    get sourceMesh() {\n        return this._sourceMesh;\n    }\n    /**\n     * Gets the mesh internal Geometry object\n     */\n    get geometry() {\n        return this._sourceMesh._geometry;\n    }\n    /**\n     * Creates a new InstancedMesh object from the mesh model.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\n     * @param name defines the name of the new instance\n     * @returns a new InstancedMesh\n     */\n    createInstance(name) {\n        return this._sourceMesh.createInstance(name);\n    }\n    /**\n     * Is this node ready to be used/rendered\n     * @param completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\n     * @returns {boolean} is it ready\n     */\n    isReady(completeCheck = false) {\n        return this._sourceMesh.isReady(completeCheck, true);\n    }\n    /**\n     * Returns an array of integers or a typed array (Int32Array, Uint32Array, Uint16Array) populated with the mesh indices.\n     * @param kind kind of verticies to retrieve (eg. positions, normals, uvs, etc.)\n     * @param copyWhenShared If true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\n     * @param forceCopy defines a boolean forcing the copy of the buffer no matter what the value of copyWhenShared is\n     * @returns a float array or a Float32Array of the requested kind of data : positions, normals, uvs, etc.\n     */\n    getVerticesData(kind, copyWhenShared, forceCopy) {\n        return this._sourceMesh.getVerticesData(kind, copyWhenShared, forceCopy);\n    }\n    copyVerticesData(kind, vertexData) {\n        this._sourceMesh.copyVerticesData(kind, vertexData);\n    }\n    /**\n     * Sets the vertex data of the mesh geometry for the requested `kind`.\n     * If the mesh has no geometry, a new Geometry object is set to the mesh and then passed this vertex data.\n     * The `data` are either a numeric array either a Float32Array.\n     * The parameter `updatable` is passed as is to the underlying Geometry object constructor (if initially none) or updater.\n     * The parameter `stride` is an optional positive integer, it is usually automatically deducted from the `kind` (3 for positions or normals, 2 for UV, etc).\n     * Note that a new underlying VertexBuffer object is created each call.\n     * If the `kind` is the `PositionKind`, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\n     *\n     * Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     *\n     * Returns the Mesh.\n     * @param kind defines vertex data kind\n     * @param data defines the data source\n     * @param updatable defines if the data must be flagged as updatable (false as default)\n     * @param stride defines the vertex stride (optional)\n     * @returns the current mesh\n     */\n    setVerticesData(kind, data, updatable, stride) {\n        if (this.sourceMesh) {\n            this.sourceMesh.setVerticesData(kind, data, updatable, stride);\n        }\n        return this.sourceMesh;\n    }\n    /**\n     * Updates the existing vertex data of the mesh geometry for the requested `kind`.\n     * If the mesh has no geometry, it is simply returned as it is.\n     * The `data` are either a numeric array either a Float32Array.\n     * No new underlying VertexBuffer object is created.\n     * If the `kind` is the `PositionKind` and if `updateExtends` is true, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\n     * If the parameter `makeItUnique` is true, a new global geometry is created from this positions and is set to the mesh.\n     *\n     * Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     *\n     * Returns the Mesh.\n     * @param kind defines vertex data kind\n     * @param data defines the data source\n     * @param updateExtends defines if extends info of the mesh must be updated (can be null). This is mostly useful for \"position\" kind\n     * @param makeItUnique defines it the updated vertex buffer must be flagged as unique (false by default)\n     * @returns the source mesh\n     */\n    updateVerticesData(kind, data, updateExtends, makeItUnique) {\n        if (this.sourceMesh) {\n            this.sourceMesh.updateVerticesData(kind, data, updateExtends, makeItUnique);\n        }\n        return this.sourceMesh;\n    }\n    /**\n     * Sets the mesh indices.\n     * Expects an array populated with integers or a typed array (Int32Array, Uint32Array, Uint16Array).\n     * If the mesh has no geometry, a new Geometry object is created and set to the mesh.\n     * This method creates a new index buffer each call.\n     * Returns the Mesh.\n     * @param indices the source data\n     * @param totalVertices defines the total number of vertices referenced by indices (could be null)\n     * @returns source mesh\n     */\n    setIndices(indices, totalVertices = null) {\n        if (this.sourceMesh) {\n            this.sourceMesh.setIndices(indices, totalVertices);\n        }\n        return this.sourceMesh;\n    }\n    /**\n     * Boolean : True if the mesh owns the requested kind of data.\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @returns true if data kind is present\n     */\n    isVerticesDataPresent(kind) {\n        return this._sourceMesh.isVerticesDataPresent(kind);\n    }\n    /**\n     * @returns an array of indices (IndicesArray).\n     */\n    getIndices() {\n        return this._sourceMesh.getIndices();\n    }\n    get _positions() {\n        return this._sourceMesh._positions;\n    }\n    refreshBoundingInfo(applySkeletonOrOptions = false, applyMorph = false) {\n        if (this.hasBoundingInfo && this.getBoundingInfo().isLocked) {\n            return this;\n        }\n        let options;\n        if (typeof applySkeletonOrOptions === \"object\") {\n            options = applySkeletonOrOptions;\n        }\n        else {\n            options = {\n                applySkeleton: applySkeletonOrOptions,\n                applyMorph: applyMorph,\n            };\n        }\n        const bias = this._sourceMesh.geometry ? this._sourceMesh.geometry.boundingBias : null;\n        this._refreshBoundingInfo(this._sourceMesh._getData(options, null, VertexBuffer.PositionKind), bias);\n        return this;\n    }\n    /** @internal */\n    _preActivate() {\n        if (this._currentLOD) {\n            this._currentLOD._preActivate();\n        }\n        return this;\n    }\n    /**\n     * @internal\n     */\n    _activate(renderId, intermediateRendering) {\n        super._activate(renderId, intermediateRendering);\n        if (!this._sourceMesh.subMeshes) {\n            Logger.Warn(\"Instances should only be created for meshes with geometry.\");\n        }\n        if (this._currentLOD) {\n            const differentSign = this._currentLOD._getWorldMatrixDeterminant() >= 0 !== this._getWorldMatrixDeterminant() >= 0;\n            if (differentSign) {\n                this._internalAbstractMeshDataInfo._actAsRegularMesh = true;\n                return true;\n            }\n            this._internalAbstractMeshDataInfo._actAsRegularMesh = false;\n            this._currentLOD._registerInstanceForRenderId(this, renderId);\n            if (intermediateRendering) {\n                if (!this._currentLOD._internalAbstractMeshDataInfo._isActiveIntermediate) {\n                    this._currentLOD._internalAbstractMeshDataInfo._onlyForInstancesIntermediate = true;\n                    return true;\n                }\n            }\n            else {\n                if (!this._currentLOD._internalAbstractMeshDataInfo._isActive) {\n                    this._currentLOD._internalAbstractMeshDataInfo._onlyForInstances = true;\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /** @internal */\n    _postActivate() {\n        if (this._sourceMesh.edgesShareWithInstances && this._sourceMesh._edgesRenderer && this._sourceMesh._edgesRenderer.isEnabled && this._sourceMesh._renderingGroup) {\n            // we are using the edge renderer of the source mesh\n            this._sourceMesh._renderingGroup._edgesRenderers.pushNoDuplicate(this._sourceMesh._edgesRenderer);\n            this._sourceMesh._edgesRenderer.customInstances.push(this.getWorldMatrix());\n        }\n        else if (this._edgesRenderer && this._edgesRenderer.isEnabled && this._sourceMesh._renderingGroup) {\n            // we are using the edge renderer defined for this instance\n            this._sourceMesh._renderingGroup._edgesRenderers.push(this._edgesRenderer);\n        }\n    }\n    getWorldMatrix() {\n        if (this._currentLOD &&\n            this._currentLOD !== this._sourceMesh &&\n            this._currentLOD.billboardMode !== TransformNode.BILLBOARDMODE_NONE &&\n            this._currentLOD._masterMesh !== this) {\n            if (!this._billboardWorldMatrix) {\n                this._billboardWorldMatrix = new Matrix();\n            }\n            const tempMaster = this._currentLOD._masterMesh;\n            this._currentLOD._masterMesh = this;\n            TmpVectors.Vector3[7].copyFrom(this._currentLOD.position);\n            this._currentLOD.position.set(0, 0, 0);\n            this._billboardWorldMatrix.copyFrom(this._currentLOD.computeWorldMatrix(true));\n            this._currentLOD.position.copyFrom(TmpVectors.Vector3[7]);\n            this._currentLOD._masterMesh = tempMaster;\n            return this._billboardWorldMatrix;\n        }\n        return super.getWorldMatrix();\n    }\n    get isAnInstance() {\n        return true;\n    }\n    /**\n     * Returns the current associated LOD AbstractMesh.\n     * @param camera defines the camera to use to pick the LOD level\n     * @returns a Mesh or `null` if no LOD is associated with the AbstractMesh\n     */\n    getLOD(camera) {\n        if (!camera) {\n            return this;\n        }\n        const sourceMeshLODLevels = this.sourceMesh.getLODLevels();\n        if (!sourceMeshLODLevels || sourceMeshLODLevels.length === 0) {\n            this._currentLOD = this.sourceMesh;\n        }\n        else {\n            const boundingInfo = this.getBoundingInfo();\n            this._currentLOD = this.sourceMesh.getLOD(camera, boundingInfo.boundingSphere);\n        }\n        return this._currentLOD;\n    }\n    /**\n     * @internal\n     */\n    _preActivateForIntermediateRendering(renderId) {\n        return this.sourceMesh._preActivateForIntermediateRendering(renderId);\n    }\n    /** @internal */\n    _syncSubMeshes() {\n        this.releaseSubMeshes();\n        if (this._sourceMesh.subMeshes) {\n            for (let index = 0; index < this._sourceMesh.subMeshes.length; index++) {\n                this._sourceMesh.subMeshes[index].clone(this, this._sourceMesh);\n            }\n        }\n        return this;\n    }\n    /** @internal */\n    _generatePointsArray() {\n        return this._sourceMesh._generatePointsArray();\n    }\n    /** @internal */\n    _updateBoundingInfo() {\n        if (this.hasBoundingInfo) {\n            this.getBoundingInfo().update(this.worldMatrixFromCache);\n        }\n        else {\n            this.buildBoundingInfo(this.absolutePosition, this.absolutePosition, this.worldMatrixFromCache);\n        }\n        this._updateSubMeshesBoundingInfo(this.worldMatrixFromCache);\n        return this;\n    }\n    /**\n     * Creates a new InstancedMesh from the current mesh.\n     *\n     * Returns the clone.\n     * @param name the cloned mesh name\n     * @param newParent the optional Node to parent the clone to.\n     * @param doNotCloneChildren if `true` the model children aren't cloned.\n     * @param newSourceMesh if set this mesh will be used as the source mesh instead of ths instance's one\n     * @returns the clone\n     */\n    clone(name, newParent = null, doNotCloneChildren, newSourceMesh) {\n        const result = (newSourceMesh || this._sourceMesh).createInstance(name);\n        // Deep copy\n        DeepCopier.DeepCopy(this, result, [\n            \"name\",\n            \"subMeshes\",\n            \"uniqueId\",\n            \"parent\",\n            \"lightSources\",\n            \"receiveShadows\",\n            \"material\",\n            \"visibility\",\n            \"skeleton\",\n            \"sourceMesh\",\n            \"isAnInstance\",\n            \"facetNb\",\n            \"isFacetDataEnabled\",\n            \"isBlocked\",\n            \"useBones\",\n            \"hasInstances\",\n            \"collider\",\n            \"edgesRenderer\",\n            \"forward\",\n            \"up\",\n            \"right\",\n            \"absolutePosition\",\n            \"absoluteScaling\",\n            \"absoluteRotationQuaternion\",\n            \"isWorldMatrixFrozen\",\n            \"nonUniformScaling\",\n            \"behaviors\",\n            \"worldMatrixFromCache\",\n            \"hasThinInstances\",\n            \"hasBoundingInfo\",\n            \"geometry\",\n        ], []);\n        // Bounding info\n        this.refreshBoundingInfo();\n        // Parent\n        if (newParent) {\n            result.parent = newParent;\n        }\n        if (!doNotCloneChildren) {\n            // Children\n            for (let index = 0; index < this.getScene().meshes.length; index++) {\n                const mesh = this.getScene().meshes[index];\n                if (mesh.parent === this) {\n                    mesh.clone(mesh.name, result);\n                }\n            }\n        }\n        result.computeWorldMatrix(true);\n        this.onClonedObservable.notifyObservers(result);\n        return result;\n    }\n    /**\n     * Disposes the InstancedMesh.\n     * Returns nothing.\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\n     */\n    dispose(doNotRecurse, disposeMaterialAndTextures = false) {\n        // Remove from mesh\n        this._sourceMesh.removeInstance(this);\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\n    }\n    /**\n     * @internal\n     */\n    _serializeAsParent(serializationObject) {\n        super._serializeAsParent(serializationObject);\n        serializationObject.parentId = this._sourceMesh.uniqueId;\n        serializationObject.parentInstanceIndex = this._indexInSourceMeshInstanceArray;\n    }\n    /**\n     * Instantiate (when possible) or clone that node with its hierarchy\n     * @param newParent defines the new parent to use for the instance (or clone)\n     * @param options defines options to configure how copy is done\n     * @param options.doNotInstantiate defines if the model must be instantiated or just cloned\n     * @param options.newSourcedMesh newSourcedMesh the new source mesh for the instance (or clone)\n     * @param onNewNodeCreated defines an option callback to call when a clone or an instance is created\n     * @returns an instance (or a clone) of the current node with its hierarchy\n     */\n    instantiateHierarchy(newParent = null, options, onNewNodeCreated) {\n        const clone = this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true, options && options.newSourcedMesh);\n        if (clone) {\n            if (onNewNodeCreated) {\n                onNewNodeCreated(this, clone);\n            }\n        }\n        for (const child of this.getChildTransformNodes(true)) {\n            child.instantiateHierarchy(clone, options, onNewNodeCreated);\n        }\n        return clone;\n    }\n}\nMesh.prototype.registerInstancedBuffer = function (kind, stride) {\n    // Remove existing one\n    this._userInstancedBuffersStorage?.vertexBuffers[kind]?.dispose();\n    // Creates the instancedBuffer field if not present\n    if (!this.instancedBuffers) {\n        this.instancedBuffers = {};\n        for (const instance of this.instances) {\n            instance.instancedBuffers = {};\n        }\n    }\n    if (!this._userInstancedBuffersStorage) {\n        this._userInstancedBuffersStorage = {\n            data: {},\n            vertexBuffers: {},\n            strides: {},\n            sizes: {},\n            vertexArrayObjects: this.getEngine().getCaps().vertexArrayObject ? {} : undefined,\n        };\n    }\n    // Creates an empty property for this kind\n    this.instancedBuffers[kind] = null;\n    this._userInstancedBuffersStorage.strides[kind] = stride;\n    this._userInstancedBuffersStorage.sizes[kind] = stride * 32; // Initial size\n    this._userInstancedBuffersStorage.data[kind] = new Float32Array(this._userInstancedBuffersStorage.sizes[kind]);\n    this._userInstancedBuffersStorage.vertexBuffers[kind] = new VertexBuffer(this.getEngine(), this._userInstancedBuffersStorage.data[kind], kind, true, false, stride, true);\n    for (const instance of this.instances) {\n        instance.instancedBuffers[kind] = null;\n    }\n    this._invalidateInstanceVertexArrayObject();\n    this._markSubMeshesAsAttributesDirty();\n};\nMesh.prototype._processInstancedBuffers = function (visibleInstances, renderSelf) {\n    const instanceCount = visibleInstances ? visibleInstances.length : 0;\n    for (const kind in this.instancedBuffers) {\n        let size = this._userInstancedBuffersStorage.sizes[kind];\n        const stride = this._userInstancedBuffersStorage.strides[kind];\n        // Resize if required\n        const expectedSize = (instanceCount + 1) * stride;\n        while (size < expectedSize) {\n            size *= 2;\n        }\n        if (this._userInstancedBuffersStorage.data[kind].length != size) {\n            this._userInstancedBuffersStorage.data[kind] = new Float32Array(size);\n            this._userInstancedBuffersStorage.sizes[kind] = size;\n            if (this._userInstancedBuffersStorage.vertexBuffers[kind]) {\n                this._userInstancedBuffersStorage.vertexBuffers[kind].dispose();\n                this._userInstancedBuffersStorage.vertexBuffers[kind] = null;\n            }\n        }\n        const data = this._userInstancedBuffersStorage.data[kind];\n        // Update data buffer\n        let offset = 0;\n        if (renderSelf) {\n            const value = this.instancedBuffers[kind];\n            if (value.toArray) {\n                value.toArray(data, offset);\n            }\n            else if (value.copyToArray) {\n                value.copyToArray(data, offset);\n            }\n            else {\n                data[offset] = value;\n            }\n            offset += stride;\n        }\n        for (let instanceIndex = 0; instanceIndex < instanceCount; instanceIndex++) {\n            const instance = visibleInstances[instanceIndex];\n            const value = instance.instancedBuffers[kind];\n            if (value.toArray) {\n                value.toArray(data, offset);\n            }\n            else if (value.copyToArray) {\n                value.copyToArray(data, offset);\n            }\n            else {\n                data[offset] = value;\n            }\n            offset += stride;\n        }\n        // Update vertex buffer\n        if (!this._userInstancedBuffersStorage.vertexBuffers[kind]) {\n            this._userInstancedBuffersStorage.vertexBuffers[kind] = new VertexBuffer(this.getEngine(), this._userInstancedBuffersStorage.data[kind], kind, true, false, stride, true);\n            this._invalidateInstanceVertexArrayObject();\n        }\n        else {\n            this._userInstancedBuffersStorage.vertexBuffers[kind].updateDirectly(data, 0);\n        }\n    }\n};\nMesh.prototype._invalidateInstanceVertexArrayObject = function () {\n    if (!this._userInstancedBuffersStorage || this._userInstancedBuffersStorage.vertexArrayObjects === undefined) {\n        return;\n    }\n    for (const kind in this._userInstancedBuffersStorage.vertexArrayObjects) {\n        this.getEngine().releaseVertexArrayObject(this._userInstancedBuffersStorage.vertexArrayObjects[kind]);\n    }\n    this._userInstancedBuffersStorage.vertexArrayObjects = {};\n};\nMesh.prototype._disposeInstanceSpecificData = function () {\n    if (this._instanceDataStorage.instancesBuffer) {\n        this._instanceDataStorage.instancesBuffer.dispose();\n        this._instanceDataStorage.instancesBuffer = null;\n    }\n    while (this.instances.length) {\n        this.instances[0].dispose();\n    }\n    for (const kind in this.instancedBuffers) {\n        if (this._userInstancedBuffersStorage.vertexBuffers[kind]) {\n            this._userInstancedBuffersStorage.vertexBuffers[kind].dispose();\n        }\n    }\n    this._invalidateInstanceVertexArrayObject();\n    this.instancedBuffers = {};\n};\n// Register Class Name\nRegisterClass(\"BABYLON.InstancedMesh\", InstancedMesh);\n//# sourceMappingURL=instancedMesh.js.map","import { Mesh } from \"./Meshes/mesh\";\nimport { TransformNode } from \"./Meshes/transformNode\";\nimport { AbstractMesh } from \"./Meshes/abstractMesh\";\nimport { Logger } from \"./Misc/logger\";\nimport { EngineStore } from \"./Engines/engineStore\";\nimport { InstancedMesh } from \"./Meshes/instancedMesh\";\nimport { Light } from \"./Lights/light\";\nimport { Camera } from \"./Cameras/camera\";\nimport { Tools } from \"./Misc/tools\";\nimport { Tags } from \"./Misc/tags\";\n/**\n * Root class for AssetContainer and KeepAssets\n */\nexport class AbstractAssetContainer {\n    constructor() {\n        /**\n         * Gets the list of root nodes (ie. nodes with no parent)\n         */\n        this.rootNodes = [];\n        /** All of the cameras added to this scene\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\n         */\n        this.cameras = [];\n        /**\n         * All of the lights added to this scene\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\n         */\n        this.lights = [];\n        /**\n         * All of the (abstract) meshes added to this scene\n         */\n        this.meshes = [];\n        /**\n         * The list of skeletons added to the scene\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/bonesSkeletons\n         */\n        this.skeletons = [];\n        /**\n         * All of the particle systems added to this scene\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/particles/particle_system/particle_system_intro\n         */\n        this.particleSystems = [];\n        /**\n         * Gets a list of Animations associated with the scene\n         */\n        this.animations = [];\n        /**\n         * All of the animation groups added to this scene\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/groupAnimations\n         */\n        this.animationGroups = [];\n        /**\n         * All of the multi-materials added to this scene\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/multiMaterials\n         */\n        this.multiMaterials = [];\n        /**\n         * All of the materials added to this scene\n         * In the context of a Scene, it is not supposed to be modified manually.\n         * Any addition or removal should be done using the addMaterial and removeMaterial Scene methods.\n         * Note also that the order of the Material within the array is not significant and might change.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\n         */\n        this.materials = [];\n        /**\n         * The list of morph target managers added to the scene\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph\n         */\n        this.morphTargetManagers = [];\n        /**\n         * The list of geometries used in the scene.\n         */\n        this.geometries = [];\n        /**\n         * All of the transform nodes added to this scene\n         * In the context of a Scene, it is not supposed to be modified manually.\n         * Any addition or removal should be done using the addTransformNode and removeTransformNode Scene methods.\n         * Note also that the order of the TransformNode within the array is not significant and might change.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/parent_pivot/transform_node\n         */\n        this.transformNodes = [];\n        /**\n         * ActionManagers available on the scene.\n         * @deprecated\n         */\n        this.actionManagers = [];\n        /**\n         * Textures to keep.\n         */\n        this.textures = [];\n        /** @internal */\n        this._environmentTexture = null;\n        /**\n         * The list of postprocesses added to the scene\n         */\n        this.postProcesses = [];\n        /**\n         * The list of sounds\n         */\n        this.sounds = null;\n        /**\n         * The list of effect layers added to the scene\n         */\n        this.effectLayers = [];\n        /**\n         * The list of layers added to the scene\n         */\n        this.layers = [];\n        /**\n         * The list of reflection probes added to the scene\n         */\n        this.reflectionProbes = [];\n    }\n    /**\n     * Texture used in all pbr material as the reflection texture.\n     * As in the majority of the scene they are the same (exception for multi room and so on),\n     * this is easier to reference from here than from all the materials.\n     */\n    get environmentTexture() {\n        return this._environmentTexture;\n    }\n    set environmentTexture(value) {\n        this._environmentTexture = value;\n    }\n    /**\n     * @returns all meshes, lights, cameras, transformNodes and bones\n     */\n    getNodes() {\n        let nodes = [];\n        nodes = nodes.concat(this.meshes);\n        nodes = nodes.concat(this.lights);\n        nodes = nodes.concat(this.cameras);\n        nodes = nodes.concat(this.transformNodes); // dummies\n        for (const skeleton of this.skeletons) {\n            nodes = nodes.concat(skeleton.bones);\n        }\n        return nodes;\n    }\n}\n/**\n * Set of assets to keep when moving a scene into an asset container.\n */\nexport class KeepAssets extends AbstractAssetContainer {\n}\n/**\n * Class used to store the output of the AssetContainer.instantiateAllMeshesToScene function\n */\nexport class InstantiatedEntries {\n    constructor() {\n        /**\n         * List of new root nodes (eg. nodes with no parent)\n         */\n        this.rootNodes = [];\n        /**\n         * List of new skeletons\n         */\n        this.skeletons = [];\n        /**\n         * List of new animation groups\n         */\n        this.animationGroups = [];\n    }\n    /**\n     * Disposes the instantiated entries from the scene\n     */\n    dispose() {\n        const rootNodes = this.rootNodes;\n        for (const rootNode of rootNodes) {\n            rootNode.dispose();\n        }\n        rootNodes.length = 0;\n        const skeletons = this.skeletons;\n        for (const skeleton of skeletons) {\n            skeleton.dispose();\n        }\n        skeletons.length = 0;\n        const animationGroups = this.animationGroups;\n        for (const animationGroup of animationGroups) {\n            animationGroup.dispose();\n        }\n        animationGroups.length = 0;\n    }\n}\n/**\n * Container with a set of assets that can be added or removed from a scene.\n */\nexport class AssetContainer extends AbstractAssetContainer {\n    /**\n     * Instantiates an AssetContainer.\n     * @param scene The scene the AssetContainer belongs to.\n     */\n    constructor(scene) {\n        super();\n        this._wasAddedToScene = false;\n        scene = scene || EngineStore.LastCreatedScene;\n        if (!scene) {\n            return;\n        }\n        this.scene = scene;\n        this[\"proceduralTextures\"] = [];\n        scene.onDisposeObservable.add(() => {\n            if (!this._wasAddedToScene) {\n                this.dispose();\n            }\n        });\n        this._onContextRestoredObserver = scene.getEngine().onContextRestoredObservable.add(() => {\n            for (const geometry of this.geometries) {\n                geometry._rebuild();\n            }\n            for (const mesh of this.meshes) {\n                mesh._rebuild();\n            }\n            for (const system of this.particleSystems) {\n                system.rebuild();\n            }\n            for (const texture of this.textures) {\n                texture._rebuild();\n            }\n        });\n    }\n    /**\n     * Given a list of nodes, return a topological sorting of them.\n     * @param nodes\n     * @returns a sorted array of nodes\n     */\n    _topologicalSort(nodes) {\n        const nodesUidMap = new Map();\n        for (const node of nodes) {\n            nodesUidMap.set(node.uniqueId, node);\n        }\n        const dependencyGraph = {\n            dependsOn: new Map(), // given a node id, what are the ids of the nodes it depends on\n            dependedBy: new Map(), // given a node id, what are the ids of the nodes that depend on it\n        };\n        // Build the dependency graph given the list of nodes\n        // First pass: Initialize the empty dependency graph\n        for (const node of nodes) {\n            const nodeId = node.uniqueId;\n            dependencyGraph.dependsOn.set(nodeId, new Set());\n            dependencyGraph.dependedBy.set(nodeId, new Set());\n        }\n        // Second pass: Populate the dependency graph. We assume that we\n        // don't need to check for cycles here, as the scene graph cannot\n        // contain cycles. Our graph also already contains all transitive\n        // dependencies because getDescendants returns the transitive\n        // dependencies by default.\n        for (const node of nodes) {\n            const nodeId = node.uniqueId;\n            const dependsOn = dependencyGraph.dependsOn.get(nodeId);\n            if (node instanceof InstancedMesh) {\n                const masterMesh = node.sourceMesh;\n                if (nodesUidMap.has(masterMesh.uniqueId)) {\n                    dependsOn.add(masterMesh.uniqueId);\n                    dependencyGraph.dependedBy.get(masterMesh.uniqueId).add(nodeId);\n                }\n            }\n            const dependedBy = dependencyGraph.dependedBy.get(nodeId);\n            for (const child of node.getDescendants()) {\n                const childId = child.uniqueId;\n                if (nodesUidMap.has(childId)) {\n                    dependedBy.add(childId);\n                    const childDependsOn = dependencyGraph.dependsOn.get(childId);\n                    childDependsOn.add(nodeId);\n                }\n            }\n        }\n        // Third pass: Topological sort\n        const sortedNodes = [];\n        // First: Find all nodes that have no dependencies\n        const leaves = [];\n        for (const node of nodes) {\n            const nodeId = node.uniqueId;\n            if (dependencyGraph.dependsOn.get(nodeId).size === 0) {\n                leaves.push(node);\n                nodesUidMap.delete(nodeId);\n            }\n        }\n        const visitList = leaves;\n        while (visitList.length > 0) {\n            const nodeToVisit = visitList.shift();\n            sortedNodes.push(nodeToVisit);\n            // Remove the node from the dependency graph\n            // When a node is visited, we know that dependsOn is empty.\n            // So we only need to remove the node from dependedBy.\n            const dependedByVisitedNode = dependencyGraph.dependedBy.get(nodeToVisit.uniqueId);\n            // Array.from(x.values()) is to make the TS compiler happy\n            for (const dependedByVisitedNodeId of Array.from(dependedByVisitedNode.values())) {\n                const dependsOnDependedByVisitedNode = dependencyGraph.dependsOn.get(dependedByVisitedNodeId);\n                dependsOnDependedByVisitedNode.delete(nodeToVisit.uniqueId);\n                if (dependsOnDependedByVisitedNode.size === 0 && nodesUidMap.get(dependedByVisitedNodeId)) {\n                    visitList.push(nodesUidMap.get(dependedByVisitedNodeId));\n                    nodesUidMap.delete(dependedByVisitedNodeId);\n                }\n            }\n        }\n        if (nodesUidMap.size > 0) {\n            Logger.Error(\"SceneSerializer._topologicalSort: There were unvisited nodes:\");\n            nodesUidMap.forEach((node) => {\n                Logger.Error(node.name);\n            });\n        }\n        return sortedNodes;\n    }\n    _addNodeAndDescendantsToList(list, addedIds, rootNode, predicate) {\n        if (!rootNode || (predicate && !predicate(rootNode)) || addedIds.has(rootNode.uniqueId)) {\n            return;\n        }\n        list.push(rootNode);\n        addedIds.add(rootNode.uniqueId);\n        for (const child of rootNode.getDescendants(true)) {\n            this._addNodeAndDescendantsToList(list, addedIds, child, predicate);\n        }\n    }\n    /**\n     * Check if a specific node is contained in this asset container.\n     * @param node the node to check\n     * @returns true if the node is contained in this container, otherwise false.\n     */\n    _isNodeInContainer(node) {\n        if (node instanceof AbstractMesh && this.meshes.indexOf(node) !== -1) {\n            return true;\n        }\n        if (node instanceof TransformNode && this.transformNodes.indexOf(node) !== -1) {\n            return true;\n        }\n        if (node instanceof Light && this.lights.indexOf(node) !== -1) {\n            return true;\n        }\n        if (node instanceof Camera && this.cameras.indexOf(node) !== -1) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * For every node in the scene, check if its parent node is also in the scene.\n     * @returns true if every node's parent is also in the scene, otherwise false.\n     */\n    _isValidHierarchy() {\n        for (const node of this.meshes) {\n            if (node.parent && !this._isNodeInContainer(node.parent)) {\n                Logger.Warn(`Node ${node.name} has a parent that is not in the container.`);\n                return false;\n            }\n        }\n        for (const node of this.transformNodes) {\n            if (node.parent && !this._isNodeInContainer(node.parent)) {\n                Logger.Warn(`Node ${node.name} has a parent that is not in the container.`);\n                return false;\n            }\n        }\n        for (const node of this.lights) {\n            if (node.parent && !this._isNodeInContainer(node.parent)) {\n                Logger.Warn(`Node ${node.name} has a parent that is not in the container.`);\n                return false;\n            }\n        }\n        for (const node of this.cameras) {\n            if (node.parent && !this._isNodeInContainer(node.parent)) {\n                Logger.Warn(`Node ${node.name} has a parent that is not in the container.`);\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Instantiate or clone all meshes and add the new ones to the scene.\n     * Skeletons and animation groups will all be cloned\n     * @param nameFunction defines an optional function used to get new names for clones\n     * @param cloneMaterials defines an optional boolean that defines if materials must be cloned as well (false by default)\n     * @param options defines an optional list of options to control how to instantiate / clone models\n     * @param options.doNotInstantiate defines if the model must be instantiated or just cloned\n     * @param options.predicate defines a predicate used to filter whih mesh to instantiate/clone\n     * @returns a list of rootNodes, skeletons and animation groups that were duplicated\n     */\n    instantiateModelsToScene(nameFunction, cloneMaterials = false, options) {\n        if (!this._isValidHierarchy()) {\n            Tools.Warn(\"SceneSerializer.InstantiateModelsToScene: The Asset Container hierarchy is not valid.\");\n        }\n        const conversionMap = {};\n        const storeMap = {};\n        const result = new InstantiatedEntries();\n        const alreadySwappedSkeletons = [];\n        const alreadySwappedMaterials = [];\n        const localOptions = {\n            doNotInstantiate: true,\n            ...options,\n        };\n        const onClone = (source, clone) => {\n            conversionMap[source.uniqueId] = clone.uniqueId;\n            storeMap[clone.uniqueId] = clone;\n            if (nameFunction) {\n                clone.name = nameFunction(source.name);\n            }\n            if (clone instanceof Mesh) {\n                const clonedMesh = clone;\n                if (clonedMesh.morphTargetManager) {\n                    const oldMorphTargetManager = source.morphTargetManager;\n                    clonedMesh.morphTargetManager = oldMorphTargetManager.clone();\n                    for (let index = 0; index < oldMorphTargetManager.numTargets; index++) {\n                        const oldTarget = oldMorphTargetManager.getTarget(index);\n                        const newTarget = clonedMesh.morphTargetManager.getTarget(index);\n                        conversionMap[oldTarget.uniqueId] = newTarget.uniqueId;\n                        storeMap[newTarget.uniqueId] = newTarget;\n                    }\n                }\n            }\n        };\n        const nodesToSort = [];\n        const idsOnSortList = new Set();\n        for (const transformNode of this.transformNodes) {\n            if (transformNode.parent === null) {\n                this._addNodeAndDescendantsToList(nodesToSort, idsOnSortList, transformNode, localOptions.predicate);\n            }\n        }\n        for (const mesh of this.meshes) {\n            if (mesh.parent === null) {\n                this._addNodeAndDescendantsToList(nodesToSort, idsOnSortList, mesh, localOptions.predicate);\n            }\n        }\n        // Topologically sort nodes by parenting/instancing relationships so that all resources are in place\n        // when a given node is instantiated.\n        const sortedNodes = this._topologicalSort(nodesToSort);\n        const onNewCreated = (source, clone) => {\n            onClone(source, clone);\n            if (source.parent) {\n                const replicatedParentId = conversionMap[source.parent.uniqueId];\n                const replicatedParent = storeMap[replicatedParentId];\n                if (replicatedParent) {\n                    clone.parent = replicatedParent;\n                }\n                else {\n                    clone.parent = source.parent;\n                }\n            }\n            if (clone.position && source.position) {\n                clone.position.copyFrom(source.position);\n            }\n            if (clone.rotationQuaternion && source.rotationQuaternion) {\n                clone.rotationQuaternion.copyFrom(source.rotationQuaternion);\n            }\n            if (clone.rotation && source.rotation) {\n                clone.rotation.copyFrom(source.rotation);\n            }\n            if (clone.scaling && source.scaling) {\n                clone.scaling.copyFrom(source.scaling);\n            }\n            if (clone.material) {\n                const mesh = clone;\n                if (mesh.material) {\n                    if (cloneMaterials) {\n                        const sourceMaterial = source.material;\n                        if (alreadySwappedMaterials.indexOf(sourceMaterial) === -1) {\n                            let swap = sourceMaterial.clone(nameFunction ? nameFunction(sourceMaterial.name) : \"Clone of \" + sourceMaterial.name);\n                            alreadySwappedMaterials.push(sourceMaterial);\n                            conversionMap[sourceMaterial.uniqueId] = swap.uniqueId;\n                            storeMap[swap.uniqueId] = swap;\n                            if (sourceMaterial.getClassName() === \"MultiMaterial\") {\n                                const multi = sourceMaterial;\n                                for (const material of multi.subMaterials) {\n                                    if (!material) {\n                                        continue;\n                                    }\n                                    swap = material.clone(nameFunction ? nameFunction(material.name) : \"Clone of \" + material.name);\n                                    alreadySwappedMaterials.push(material);\n                                    conversionMap[material.uniqueId] = swap.uniqueId;\n                                    storeMap[swap.uniqueId] = swap;\n                                }\n                                multi.subMaterials = multi.subMaterials.map((m) => m && storeMap[conversionMap[m.uniqueId]]);\n                            }\n                        }\n                        if (mesh.getClassName() !== \"InstancedMesh\") {\n                            mesh.material = storeMap[conversionMap[sourceMaterial.uniqueId]];\n                        }\n                    }\n                    else {\n                        if (mesh.material.getClassName() === \"MultiMaterial\") {\n                            if (this.scene.multiMaterials.indexOf(mesh.material) === -1) {\n                                this.scene.addMultiMaterial(mesh.material);\n                            }\n                        }\n                        else {\n                            if (this.scene.materials.indexOf(mesh.material) === -1) {\n                                this.scene.addMaterial(mesh.material);\n                            }\n                        }\n                    }\n                }\n            }\n            if (clone.parent === null) {\n                result.rootNodes.push(clone);\n            }\n        };\n        for (const node of sortedNodes) {\n            if (node.getClassName() === \"InstancedMesh\") {\n                const instancedNode = node;\n                const sourceMesh = instancedNode.sourceMesh;\n                const replicatedSourceId = conversionMap[sourceMesh.uniqueId];\n                const replicatedSource = typeof replicatedSourceId === \"number\" ? storeMap[replicatedSourceId] : sourceMesh;\n                const replicatedInstancedNode = replicatedSource.createInstance(instancedNode.name);\n                onNewCreated(instancedNode, replicatedInstancedNode);\n            }\n            else {\n                // Mesh or TransformNode\n                let canInstance = true;\n                if (node.getClassName() === \"TransformNode\" ||\n                    node.getClassName() === \"Node\" ||\n                    node.skeleton ||\n                    !node.getTotalVertices ||\n                    node.getTotalVertices() === 0) {\n                    // Transform nodes, skinned meshes, and meshes with no vertices can never be instanced!\n                    canInstance = false;\n                }\n                else if (localOptions.doNotInstantiate) {\n                    if (typeof localOptions.doNotInstantiate === \"function\") {\n                        canInstance = !localOptions.doNotInstantiate(node);\n                    }\n                    else {\n                        canInstance = !localOptions.doNotInstantiate;\n                    }\n                }\n                const replicatedNode = canInstance ? node.createInstance(`instance of ${node.name}`) : node.clone(`Clone of ${node.name}`, null, true);\n                if (!replicatedNode) {\n                    throw new Error(`Could not clone or instantiate node on Asset Container ${node.name}`);\n                }\n                onNewCreated(node, replicatedNode);\n            }\n        }\n        for (const s of this.skeletons) {\n            if (localOptions.predicate && !localOptions.predicate(s)) {\n                continue;\n            }\n            const clone = s.clone(nameFunction ? nameFunction(s.name) : \"Clone of \" + s.name);\n            for (const m of this.meshes) {\n                if (m.skeleton === s && !m.isAnInstance) {\n                    const copy = storeMap[conversionMap[m.uniqueId]];\n                    if (!copy || copy.isAnInstance) {\n                        continue;\n                    }\n                    copy.skeleton = clone;\n                    if (alreadySwappedSkeletons.indexOf(clone) !== -1) {\n                        continue;\n                    }\n                    alreadySwappedSkeletons.push(clone);\n                    // Check if bones are mesh linked\n                    for (const bone of clone.bones) {\n                        if (bone._linkedTransformNode) {\n                            bone._linkedTransformNode = storeMap[conversionMap[bone._linkedTransformNode.uniqueId]];\n                        }\n                    }\n                }\n            }\n            result.skeletons.push(clone);\n        }\n        for (const o of this.animationGroups) {\n            if (localOptions.predicate && !localOptions.predicate(o)) {\n                continue;\n            }\n            const clone = o.clone(nameFunction ? nameFunction(o.name) : \"Clone of \" + o.name, (oldTarget) => {\n                const newTarget = storeMap[conversionMap[oldTarget.uniqueId]];\n                return newTarget || oldTarget;\n            });\n            result.animationGroups.push(clone);\n        }\n        return result;\n    }\n    /**\n     * Adds all the assets from the container to the scene.\n     */\n    addAllToScene() {\n        if (this._wasAddedToScene) {\n            return;\n        }\n        if (!this._isValidHierarchy()) {\n            Tools.Warn(\"SceneSerializer.addAllToScene: The Asset Container hierarchy is not valid.\");\n        }\n        this._wasAddedToScene = true;\n        this.addToScene(null);\n        if (this.environmentTexture) {\n            this.scene.environmentTexture = this.environmentTexture;\n        }\n        for (const component of this.scene._serializableComponents) {\n            component.addFromContainer(this);\n        }\n        this.scene.getEngine().onContextRestoredObservable.remove(this._onContextRestoredObserver);\n        this._onContextRestoredObserver = null;\n    }\n    /**\n     * Adds assets from the container to the scene.\n     * @param predicate defines a predicate used to select which entity will be added (can be null)\n     */\n    addToScene(predicate = null) {\n        const addedNodes = [];\n        for (const o of this.cameras) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.addCamera(o);\n            addedNodes.push(o);\n        }\n        for (const o of this.lights) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.addLight(o);\n            addedNodes.push(o);\n        }\n        for (const o of this.meshes) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.addMesh(o);\n            addedNodes.push(o);\n        }\n        for (const o of this.skeletons) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.addSkeleton(o);\n        }\n        for (const o of this.animations) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.addAnimation(o);\n        }\n        for (const o of this.animationGroups) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.addAnimationGroup(o);\n        }\n        for (const o of this.multiMaterials) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.addMultiMaterial(o);\n        }\n        for (const o of this.materials) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.addMaterial(o);\n        }\n        for (const o of this.morphTargetManagers) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.addMorphTargetManager(o);\n        }\n        for (const o of this.geometries) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.addGeometry(o);\n        }\n        for (const o of this.transformNodes) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.addTransformNode(o);\n            addedNodes.push(o);\n        }\n        for (const o of this.actionManagers) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.addActionManager(o);\n        }\n        for (const o of this.textures) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.addTexture(o);\n        }\n        for (const o of this.reflectionProbes) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.addReflectionProbe(o);\n        }\n        for (const addedNode of addedNodes) {\n            // If node was added to the scene, but parent is not in the scene, break the relationship\n            if (addedNode.parent && this.scene.getNodes().indexOf(addedNode.parent) === -1) {\n                // Use setParent to keep transform if possible\n                if (addedNode.setParent) {\n                    addedNode.setParent(null);\n                }\n                else {\n                    addedNode.parent = null;\n                }\n            }\n        }\n    }\n    /**\n     * Removes all the assets in the container from the scene\n     */\n    removeAllFromScene() {\n        if (!this._isValidHierarchy()) {\n            Tools.Warn(\"SceneSerializer.removeAllFromScene: The Asset Container hierarchy is not valid.\");\n        }\n        this._wasAddedToScene = false;\n        this.removeFromScene(null);\n        if (this.environmentTexture === this.scene.environmentTexture) {\n            this.scene.environmentTexture = null;\n        }\n        for (const component of this.scene._serializableComponents) {\n            component.removeFromContainer(this);\n        }\n    }\n    /**\n     * Removes assets in the container from the scene\n     * @param predicate defines a predicate used to select which entity will be added (can be null)\n     */\n    removeFromScene(predicate = null) {\n        for (const o of this.cameras) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.removeCamera(o);\n        }\n        for (const o of this.lights) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.removeLight(o);\n        }\n        for (const o of this.meshes) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.removeMesh(o, true);\n        }\n        for (const o of this.skeletons) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.removeSkeleton(o);\n        }\n        for (const o of this.animations) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.removeAnimation(o);\n        }\n        for (const o of this.animationGroups) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.removeAnimationGroup(o);\n        }\n        for (const o of this.multiMaterials) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.removeMultiMaterial(o);\n        }\n        for (const o of this.materials) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.removeMaterial(o);\n        }\n        for (const o of this.morphTargetManagers) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.removeMorphTargetManager(o);\n        }\n        for (const o of this.geometries) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.removeGeometry(o);\n        }\n        for (const o of this.transformNodes) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.removeTransformNode(o);\n        }\n        for (const o of this.actionManagers) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.removeActionManager(o);\n        }\n        for (const o of this.textures) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.removeTexture(o);\n        }\n        for (const o of this.reflectionProbes) {\n            if (predicate && !predicate(o)) {\n                continue;\n            }\n            this.scene.removeReflectionProbe(o);\n        }\n    }\n    /**\n     * Disposes all the assets in the container\n     */\n    dispose() {\n        const cameras = this.cameras.slice(0);\n        for (const camera of cameras) {\n            camera.dispose();\n        }\n        this.cameras.length = 0;\n        const lights = this.lights.slice(0);\n        for (const light of lights) {\n            light.dispose();\n        }\n        this.lights.length = 0;\n        const meshes = this.meshes.slice(0);\n        for (const mesh of meshes) {\n            mesh.dispose();\n        }\n        this.meshes.length = 0;\n        const skeletons = this.skeletons.slice(0);\n        for (const skeleton of skeletons) {\n            skeleton.dispose();\n        }\n        this.skeletons.length = 0;\n        const animationGroups = this.animationGroups.slice(0);\n        for (const animationGroup of animationGroups) {\n            animationGroup.dispose();\n        }\n        this.animationGroups.length = 0;\n        const multiMaterials = this.multiMaterials.slice(0);\n        for (const multiMaterial of multiMaterials) {\n            multiMaterial.dispose();\n        }\n        this.multiMaterials.length = 0;\n        const materials = this.materials.slice(0);\n        for (const material of materials) {\n            material.dispose();\n        }\n        this.materials.length = 0;\n        const geometries = this.geometries.slice(0);\n        for (const geometry of geometries) {\n            geometry.dispose();\n        }\n        this.geometries.length = 0;\n        const transformNodes = this.transformNodes.slice(0);\n        for (const transformNode of transformNodes) {\n            transformNode.dispose();\n        }\n        this.transformNodes.length = 0;\n        const actionManagers = this.actionManagers.slice(0);\n        for (const actionManager of actionManagers) {\n            actionManager.dispose();\n        }\n        this.actionManagers.length = 0;\n        const textures = this.textures.slice(0);\n        for (const texture of textures) {\n            texture.dispose();\n        }\n        this.textures.length = 0;\n        const reflectionProbes = this.reflectionProbes.slice(0);\n        for (const reflectionProbe of reflectionProbes) {\n            reflectionProbe.dispose();\n        }\n        this.reflectionProbes.length = 0;\n        const morphTargetManagers = this.morphTargetManagers.slice(0);\n        for (const morphTargetManager of morphTargetManagers) {\n            morphTargetManager.dispose();\n        }\n        this.morphTargetManagers.length = 0;\n        if (this.environmentTexture) {\n            this.environmentTexture.dispose();\n            this.environmentTexture = null;\n        }\n        for (const component of this.scene._serializableComponents) {\n            component.removeFromContainer(this, true);\n        }\n        if (this._onContextRestoredObserver) {\n            this.scene.getEngine().onContextRestoredObservable.remove(this._onContextRestoredObserver);\n            this._onContextRestoredObserver = null;\n        }\n    }\n    _moveAssets(sourceAssets, targetAssets, keepAssets) {\n        if (!sourceAssets || !targetAssets) {\n            return;\n        }\n        for (const asset of sourceAssets) {\n            let move = true;\n            if (keepAssets) {\n                for (const keepAsset of keepAssets) {\n                    if (asset === keepAsset) {\n                        move = false;\n                        break;\n                    }\n                }\n            }\n            if (move) {\n                targetAssets.push(asset);\n                asset._parentContainer = this;\n            }\n        }\n    }\n    /**\n     * Removes all the assets contained in the scene and adds them to the container.\n     * @param keepAssets Set of assets to keep in the scene. (default: empty)\n     */\n    moveAllFromScene(keepAssets) {\n        this._wasAddedToScene = false;\n        if (keepAssets === undefined) {\n            keepAssets = new KeepAssets();\n        }\n        for (const key in this) {\n            if (Object.prototype.hasOwnProperty.call(this, key)) {\n                this[key] = this[key] || (key === \"_environmentTexture\" ? null : []);\n                this._moveAssets(this.scene[key], this[key], keepAssets[key]);\n            }\n        }\n        this.environmentTexture = this.scene.environmentTexture;\n        this.removeAllFromScene();\n    }\n    /**\n     * Adds all meshes in the asset container to a root mesh that can be used to position all the contained meshes. The root mesh is then added to the front of the meshes in the assetContainer.\n     * @returns the root mesh\n     */\n    createRootMesh() {\n        const rootMesh = new Mesh(\"assetContainerRootMesh\", this.scene);\n        for (const m of this.meshes) {\n            if (!m.parent) {\n                rootMesh.addChild(m);\n            }\n        }\n        this.meshes.unshift(rootMesh);\n        return rootMesh;\n    }\n    /**\n     * Merge animations (direct and animation groups) from this asset container into a scene\n     * @param scene is the instance of BABYLON.Scene to append to (default: last created scene)\n     * @param animatables set of animatables to retarget to a node from the scene\n     * @param targetConverter defines a function used to convert animation targets from the asset container to the scene (default: search node by name)\n     * @returns an array of the new AnimationGroup added to the scene (empty array if none)\n     */\n    mergeAnimationsTo(scene = EngineStore.LastCreatedScene, animatables, targetConverter = null) {\n        if (!scene) {\n            Logger.Error(\"No scene available to merge animations to\");\n            return [];\n        }\n        const _targetConverter = targetConverter\n            ? targetConverter\n            : (target) => {\n                let node = null;\n                const targetProperty = target.animations.length ? target.animations[0].targetProperty : \"\";\n                /*\n            BabylonJS adds special naming to targets that are children of nodes.\n            This name attempts to remove that special naming to get the parent nodes name in case the target\n            can't be found in the node tree\n\n            Ex: Torso_primitive0 likely points to a Mesh primitive. We take away primitive0 and are left with \"Torso\" which is the name\n            of the primitive's parent.\n        */\n                const name = target.name.split(\".\").join(\"\").split(\"_primitive\")[0];\n                switch (targetProperty) {\n                    case \"position\":\n                    case \"rotationQuaternion\":\n                        node = scene.getTransformNodeByName(target.name) || scene.getTransformNodeByName(name);\n                        break;\n                    case \"influence\":\n                        node = scene.getMorphTargetByName(target.name) || scene.getMorphTargetByName(name);\n                        break;\n                    default:\n                        node = scene.getNodeByName(target.name) || scene.getNodeByName(name);\n                }\n                return node;\n            };\n        // Copy new node animations\n        const nodesInAC = this.getNodes();\n        for (const nodeInAC of nodesInAC) {\n            const nodeInScene = _targetConverter(nodeInAC);\n            if (nodeInScene !== null) {\n                // Remove old animations with same target property as a new one\n                for (const animationInAC of nodeInAC.animations) {\n                    // Doing treatment on an array for safety measure\n                    const animationsWithSameProperty = nodeInScene.animations.filter((animationInScene) => {\n                        return animationInScene.targetProperty === animationInAC.targetProperty;\n                    });\n                    for (const animationWithSameProperty of animationsWithSameProperty) {\n                        const index = nodeInScene.animations.indexOf(animationWithSameProperty, 0);\n                        if (index > -1) {\n                            nodeInScene.animations.splice(index, 1);\n                        }\n                    }\n                }\n                // Append new animations\n                nodeInScene.animations = nodeInScene.animations.concat(nodeInAC.animations);\n            }\n        }\n        const newAnimationGroups = [];\n        // Copy new animation groups\n        const animationGroups = this.animationGroups.slice();\n        for (const animationGroupInAC of animationGroups) {\n            // Clone the animation group and all its animatables\n            newAnimationGroups.push(animationGroupInAC.clone(animationGroupInAC.name, _targetConverter));\n            // Remove animatables related to the asset container\n            for (const animatable of animationGroupInAC.animatables) {\n                animatable.stop();\n            }\n        }\n        // Retarget animatables\n        for (const animatable of animatables) {\n            const target = _targetConverter(animatable.target);\n            if (target) {\n                // Clone the animatable and retarget it\n                scene.beginAnimation(target, animatable.fromFrame, animatable.toFrame, animatable.loopAnimation, animatable.speedRatio, animatable.onAnimationEnd ? animatable.onAnimationEnd : undefined, undefined, true, undefined, animatable.onAnimationLoop ? animatable.onAnimationLoop : undefined);\n                // Stop animation for the target in the asset container\n                scene.stopAnimation(animatable.target);\n            }\n        }\n        return newAnimationGroups;\n    }\n    /**\n     * @since 6.15.0\n     * This method checks for any node that has no parent\n     * and is not in the rootNodes array, and adds the node\n     * there, if so.\n     */\n    populateRootNodes() {\n        this.rootNodes.length = 0;\n        for (const m of this.meshes) {\n            if (!m.parent && this.rootNodes.indexOf(m) === -1) {\n                this.rootNodes.push(m);\n            }\n        }\n        for (const t of this.transformNodes) {\n            if (!t.parent && this.rootNodes.indexOf(t) === -1) {\n                this.rootNodes.push(t);\n            }\n        }\n        for (const l of this.lights) {\n            if (!l.parent && this.rootNodes.indexOf(l) === -1) {\n                this.rootNodes.push(l);\n            }\n        }\n        for (const c of this.cameras) {\n            if (!c.parent && this.rootNodes.indexOf(c) === -1) {\n                this.rootNodes.push(c);\n            }\n        }\n    }\n    /**\n     * @since 6.26.0\n     * Given a root asset, this method will traverse its hierarchy and add it, its children and any materials/skeletons/animation groups to the container.\n     * @param root root node\n     */\n    addAllAssetsToContainer(root) {\n        if (!root) {\n            return;\n        }\n        const nodesToVisit = [];\n        const visitedNodes = new Set();\n        nodesToVisit.push(root);\n        while (nodesToVisit.length > 0) {\n            const nodeToVisit = nodesToVisit.pop();\n            if (nodeToVisit instanceof Mesh) {\n                if (nodeToVisit.geometry && this.geometries.indexOf(nodeToVisit.geometry) === -1) {\n                    this.geometries.push(nodeToVisit.geometry);\n                }\n                this.meshes.push(nodeToVisit);\n            }\n            else if (nodeToVisit instanceof InstancedMesh) {\n                this.meshes.push(nodeToVisit);\n            }\n            else if (nodeToVisit instanceof TransformNode) {\n                this.transformNodes.push(nodeToVisit);\n            }\n            else if (nodeToVisit instanceof Light) {\n                this.lights.push(nodeToVisit);\n            }\n            else if (nodeToVisit instanceof Camera) {\n                this.cameras.push(nodeToVisit);\n            }\n            if (nodeToVisit instanceof AbstractMesh) {\n                if (nodeToVisit.material && this.materials.indexOf(nodeToVisit.material) === -1) {\n                    this.materials.push(nodeToVisit.material);\n                    for (const texture of nodeToVisit.material.getActiveTextures()) {\n                        if (this.textures.indexOf(texture) === -1) {\n                            this.textures.push(texture);\n                        }\n                    }\n                }\n                if (nodeToVisit.skeleton && this.skeletons.indexOf(nodeToVisit.skeleton) === -1) {\n                    this.skeletons.push(nodeToVisit.skeleton);\n                }\n                if (nodeToVisit.morphTargetManager && this.morphTargetManagers.indexOf(nodeToVisit.morphTargetManager) === -1) {\n                    this.morphTargetManagers.push(nodeToVisit.morphTargetManager);\n                }\n            }\n            for (const child of nodeToVisit.getChildren()) {\n                if (!visitedNodes.has(child)) {\n                    nodesToVisit.push(child);\n                }\n            }\n            visitedNodes.add(nodeToVisit);\n        }\n        this.populateRootNodes();\n    }\n    /**\n     * Get from a list of objects by tags\n     * @param list the list of objects to use\n     * @param tagsQuery the query to use\n     * @param filter a predicate to filter for tags\n     * @returns\n     */\n    _getByTags(list, tagsQuery, filter) {\n        if (tagsQuery === undefined) {\n            // returns the complete list (could be done with Tags.MatchesQuery but no need to have a for-loop here)\n            return list;\n        }\n        const listByTags = [];\n        for (const i in list) {\n            const item = list[i];\n            if (Tags && Tags.MatchesQuery(item, tagsQuery) && (!filter || filter(item))) {\n                listByTags.push(item);\n            }\n        }\n        return listByTags;\n    }\n    /**\n     * Get a list of meshes by tags\n     * @param tagsQuery defines the tags query to use\n     * @param filter defines a predicate used to filter results\n     * @returns an array of Mesh\n     */\n    getMeshesByTags(tagsQuery, filter) {\n        return this._getByTags(this.meshes, tagsQuery, filter);\n    }\n    /**\n     * Get a list of cameras by tags\n     * @param tagsQuery defines the tags query to use\n     * @param filter defines a predicate used to filter results\n     * @returns an array of Camera\n     */\n    getCamerasByTags(tagsQuery, filter) {\n        return this._getByTags(this.cameras, tagsQuery, filter);\n    }\n    /**\n     * Get a list of lights by tags\n     * @param tagsQuery defines the tags query to use\n     * @param filter defines a predicate used to filter results\n     * @returns an array of Light\n     */\n    getLightsByTags(tagsQuery, filter) {\n        return this._getByTags(this.lights, tagsQuery, filter);\n    }\n    /**\n     * Get a list of materials by tags\n     * @param tagsQuery defines the tags query to use\n     * @param filter defines a predicate used to filter results\n     * @returns an array of Material\n     */\n    getMaterialsByTags(tagsQuery, filter) {\n        return this._getByTags(this.materials, tagsQuery, filter).concat(this._getByTags(this.multiMaterials, tagsQuery, filter));\n    }\n    /**\n     * Get a list of transform nodes by tags\n     * @param tagsQuery defines the tags query to use\n     * @param filter defines a predicate used to filter results\n     * @returns an array of TransformNode\n     */\n    getTransformNodesByTags(tagsQuery, filter) {\n        return this._getByTags(this.transformNodes, tagsQuery, filter);\n    }\n}\n//# sourceMappingURL=assetContainer.js.map"],"names":["Mesh","_instancedMeshFactory","name","mesh","instance","InstancedMesh","instancedBuffers","key","AbstractMesh","constructor","source","super","getScene","this","_indexInSourceMeshInstanceArray","_distanceToCamera","addInstance","_sourceMesh","_unIndexed","position","copyFrom","rotation","scaling","rotationQuaternion","clone","animations","slice","range","getAnimationRanges","createAnimationRange","from","to","infiniteDistance","setPivotMatrix","getPivotMatrix","skeleton","morphTargetManager","hasBoundingInfo","refreshBoundingInfo","boundingInfo","getBoundingInfo","buildBoundingInfo","minimum","maximum","_syncSubMeshes","getClassName","lightSources","_lightSources","_resyncLightSources","_resyncLightSource","_removeLightSource","receiveShadows","_value","Tools","Warn","material","visibility","renderingGroupId","value","Logger","getTotalVertices","getTotalIndices","sourceMesh","geometry","_geometry","createInstance","isReady","completeCheck","getVerticesData","kind","copyWhenShared","forceCopy","copyVerticesData","vertexData","setVerticesData","data","updatable","stride","updateVerticesData","updateExtends","makeItUnique","setIndices","indices","totalVertices","isVerticesDataPresent","getIndices","_positions","applySkeletonOrOptions","applyMorph","isLocked","options","applySkeleton","bias","boundingBias","_refreshBoundingInfo","_getData","VertexBuffer","PositionKind","_preActivate","_currentLOD","_activate","renderId","intermediateRendering","subMeshes","_getWorldMatrixDeterminant","_internalAbstractMeshDataInfo","_actAsRegularMesh","_registerInstanceForRenderId","_isActiveIntermediate","_onlyForInstancesIntermediate","_isActive","_onlyForInstances","_postActivate","edgesShareWithInstances","_edgesRenderer","isEnabled","_renderingGroup","_edgesRenderers","pushNoDuplicate","customInstances","push","getWorldMatrix","billboardMode","TransformNode","BILLBOARDMODE_NONE","_masterMesh","_billboardWorldMatrix","Matrix","tempMaster","TmpVectors","Vector3","set","computeWorldMatrix","isAnInstance","getLOD","camera","sourceMeshLODLevels","getLODLevels","length","boundingSphere","_preActivateForIntermediateRendering","releaseSubMeshes","index","_generatePointsArray","_updateBoundingInfo","update","worldMatrixFromCache","absolutePosition","_updateSubMeshesBoundingInfo","newParent","doNotCloneChildren","newSourceMesh","result","DeepCopier","DeepCopy","parent","meshes","onClonedObservable","notifyObservers","dispose","doNotRecurse","disposeMaterialAndTextures","removeInstance","_serializeAsParent","serializationObject","parentId","uniqueId","parentInstanceIndex","instantiateHierarchy","onNewNodeCreated","id","newSourcedMesh","child","getChildTransformNodes","prototype","registerInstancedBuffer","_userInstancedBuffersStorage","vertexBuffers","instances","strides","sizes","vertexArrayObjects","getEngine","getCaps","vertexArrayObject","undefined","Float32Array","_invalidateInstanceVertexArrayObject","_markSubMeshesAsAttributesDirty","_processInstancedBuffers","visibleInstances","renderSelf","instanceCount","size","expectedSize","offset","toArray","copyToArray","instanceIndex","updateDirectly","releaseVertexArrayObject","_disposeInstanceSpecificData","_instanceDataStorage","instancesBuffer","RegisterClass","AbstractAssetContainer","rootNodes","cameras","lights","skeletons","particleSystems","animationGroups","multiMaterials","materials","morphTargetManagers","geometries","transformNodes","actionManagers","textures","_environmentTexture","postProcesses","sounds","effectLayers","layers","reflectionProbes","environmentTexture","getNodes","nodes","concat","bones","KeepAssets","InstantiatedEntries","rootNode","animationGroup","AssetContainer","scene","_wasAddedToScene","EngineStore","LastCreatedScene","onDisposeObservable","add","_onContextRestoredObserver","onContextRestoredObservable","_rebuild","system","rebuild","texture","_topologicalSort","nodesUidMap","Map","node","dependencyGraph","dependsOn","dependedBy","nodeId","Set","get","masterMesh","has","getDescendants","childId","sortedNodes","leaves","delete","visitList","nodeToVisit","shift","dependedByVisitedNode","dependedByVisitedNodeId","Array","values","dependsOnDependedByVisitedNode","Error","forEach","_addNodeAndDescendantsToList","list","addedIds","predicate","_isNodeInContainer","indexOf","Light","Camera","_isValidHierarchy","instantiateModelsToScene","nameFunction","cloneMaterials","conversionMap","storeMap","alreadySwappedSkeletons","alreadySwappedMaterials","localOptions","doNotInstantiate","nodesToSort","idsOnSortList","transformNode","onNewCreated","clonedMesh","oldMorphTargetManager","numTargets","oldTarget","getTarget","newTarget","onClone","replicatedParentId","replicatedParent","sourceMaterial","swap","multi","subMaterials","map","m","addMultiMaterial","addMaterial","instancedNode","replicatedSourceId","canInstance","replicatedNode","s","copy","bone","_linkedTransformNode","o","addAllToScene","addToScene","component","_serializableComponents","addFromContainer","remove","addedNodes","addCamera","addLight","addMesh","addSkeleton","addAnimation","addAnimationGroup","addMorphTargetManager","addGeometry","addTransformNode","addActionManager","addTexture","addReflectionProbe","addedNode","setParent","removeAllFromScene","removeFromScene","removeFromContainer","removeCamera","removeLight","removeMesh","removeSkeleton","removeAnimation","removeAnimationGroup","removeMultiMaterial","removeMaterial","removeMorphTargetManager","removeGeometry","removeTransformNode","removeActionManager","removeTexture","removeReflectionProbe","light","multiMaterial","actionManager","reflectionProbe","_moveAssets","sourceAssets","targetAssets","keepAssets","asset","move","keepAsset","_parentContainer","moveAllFromScene","Object","hasOwnProperty","call","createRootMesh","rootMesh","addChild","unshift","mergeAnimationsTo","animatables","targetConverter","_targetConverter","target","targetProperty","split","join","getTransformNodeByName","getMorphTargetByName","getNodeByName","nodesInAC","nodeInAC","nodeInScene","animationInAC","animationsWithSameProperty","filter","animationInScene","animationWithSameProperty","splice","newAnimationGroups","animationGroupInAC","animatable","stop","beginAnimation","fromFrame","toFrame","loopAnimation","speedRatio","onAnimationEnd","onAnimationLoop","stopAnimation","populateRootNodes","t","l","c","addAllAssetsToContainer","root","nodesToVisit","visitedNodes","pop","getActiveTextures","getChildren","_getByTags","tagsQuery","listByTags","i","item","Tags","MatchesQuery","getMeshesByTags","getCamerasByTags","getLightsByTags","getMaterialsByTags","getTransformNodesByTags"],"mappings":"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"}