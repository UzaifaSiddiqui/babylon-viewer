{"version":3,"file":"declarationMapper-ZR2ND5pQ.esm.js","sources":["../../../../../dev/core/dist/FlowGraph/CustomTypes/flowGraphInteger.js","../../../../../dev/core/dist/FlowGraph/CustomTypes/flowGraphMatrix.js","../../../../../dev/core/dist/FlowGraph/flowGraphRichTypes.js","../../../../../dev/loaders/dist/glTF/2.0/Extensions/KHR_interactivity/declarationMapper.js"],"sourcesContent":["import { RegisterClass } from \"../../Misc/typeStore\";\n/**\n * Class that represents an integer value.\n */\nexport class FlowGraphInteger {\n    constructor(value) {\n        this.value = this._toInt(value);\n    }\n    /**\n     * Converts a float to an integer.\n     * @param n the float to convert\n     * @returns the result of n | 0 - converting it to a int\n     */\n    _toInt(n) {\n        return n | 0;\n    }\n    /**\n     * Adds two integers together.\n     * @param other the other integer to add\n     * @returns a FlowGraphInteger with the result of the addition\n     */\n    add(other) {\n        return new FlowGraphInteger(this.value + other.value);\n    }\n    /**\n     * Subtracts two integers.\n     * @param other the other integer to subtract\n     * @returns a FlowGraphInteger with the result of the subtraction\n     */\n    subtract(other) {\n        return new FlowGraphInteger(this.value - other.value);\n    }\n    /**\n     * Multiplies two integers.\n     * @param other the other integer to multiply\n     * @returns a FlowGraphInteger with the result of the multiplication\n     */\n    multiply(other) {\n        return new FlowGraphInteger(Math.imul(this.value, other.value));\n    }\n    /**\n     * Divides two integers.\n     * @param other the other integer to divide\n     * @returns a FlowGraphInteger with the result of the division\n     */\n    divide(other) {\n        return new FlowGraphInteger(this.value / other.value);\n    }\n    /**\n     * The class name of this type.\n     * @returns\n     */\n    getClassName() {\n        return FlowGraphInteger.ClassName;\n    }\n    /**\n     * Compares two integers for equality.\n     * @param other the other integer to compare\n     * @returns\n     */\n    equals(other) {\n        return this.value === other.value;\n    }\n    /**\n     * Parses a FlowGraphInteger from a serialization object.\n     * @param value te number to parse\n     * @returns\n     */\n    static FromValue(value) {\n        return new FlowGraphInteger(value);\n    }\n    toString() {\n        return this.value.toString();\n    }\n}\nFlowGraphInteger.ClassName = \"FlowGraphInteger\";\nRegisterClass(\"FlowGraphInteger\", FlowGraphInteger);\n//# sourceMappingURL=flowGraphInteger.js.map","import { Vector3, Vector2 } from \"core/Maths/math.vector\";\n// Note - the matrix classes are basically column-major, and work similarly to Babylon.js' Matrix class.\n/**\n * A 2x2 matrix.\n */\nexport class FlowGraphMatrix2D {\n    constructor(m = [1, 0, 0, 1]) {\n        this._m = m;\n    }\n    get m() {\n        return this._m;\n    }\n    transformVector(v) {\n        return this.transformVectorToRef(v, new Vector2());\n    }\n    transformVectorToRef(v, result) {\n        result.x = v.x * this._m[0] + v.y * this._m[1];\n        result.y = v.x * this._m[2] + v.y * this._m[3];\n        return result;\n    }\n    asArray() {\n        return this.toArray();\n    }\n    toArray(emptyArray = []) {\n        for (let i = 0; i < 4; i++) {\n            emptyArray[i] = this._m[i];\n        }\n        return emptyArray;\n    }\n    fromArray(array) {\n        for (let i = 0; i < 4; i++) {\n            this._m[i] = array[i];\n        }\n        return this;\n    }\n    multiplyToRef(other, result) {\n        const otherMatrix = other._m;\n        const thisMatrix = this._m;\n        const r = result._m;\n        // other * this\n        r[0] = otherMatrix[0] * thisMatrix[0] + otherMatrix[1] * thisMatrix[2];\n        r[1] = otherMatrix[0] * thisMatrix[1] + otherMatrix[1] * thisMatrix[3];\n        r[2] = otherMatrix[2] * thisMatrix[0] + otherMatrix[3] * thisMatrix[2];\n        r[3] = otherMatrix[2] * thisMatrix[1] + otherMatrix[3] * thisMatrix[3];\n        return result;\n    }\n    multiply(other) {\n        return this.multiplyToRef(other, new FlowGraphMatrix2D());\n    }\n    divideToRef(other, result) {\n        const m = this._m;\n        const o = other._m;\n        const r = result._m;\n        r[0] = m[0] / o[0];\n        r[1] = m[1] / o[1];\n        r[2] = m[2] / o[2];\n        r[3] = m[3] / o[3];\n        return result;\n    }\n    divide(other) {\n        return this.divideToRef(other, new FlowGraphMatrix2D());\n    }\n    addToRef(other, result) {\n        const m = this._m;\n        const o = other.m;\n        const r = result.m;\n        r[0] = m[0] + o[0];\n        r[1] = m[1] + o[1];\n        r[2] = m[2] + o[2];\n        r[3] = m[3] + o[3];\n        return result;\n    }\n    add(other) {\n        return this.addToRef(other, new FlowGraphMatrix2D());\n    }\n    subtractToRef(other, result) {\n        const m = this._m;\n        const o = other.m;\n        const r = result.m;\n        r[0] = m[0] - o[0];\n        r[1] = m[1] - o[1];\n        r[2] = m[2] - o[2];\n        r[3] = m[3] - o[3];\n        return result;\n    }\n    subtract(other) {\n        return this.subtractToRef(other, new FlowGraphMatrix2D());\n    }\n    transpose() {\n        const m = this._m;\n        return new FlowGraphMatrix2D([m[0], m[2], m[1], m[3]]);\n    }\n    determinant() {\n        const m = this._m;\n        return m[0] * m[3] - m[1] * m[2];\n    }\n    inverse() {\n        const det = this.determinant();\n        if (det === 0) {\n            throw new Error(\"Matrix is not invertible\");\n        }\n        const m = this._m;\n        const invDet = 1 / det;\n        return new FlowGraphMatrix2D([m[3] * invDet, -m[1] * invDet, -m[2] * invDet, m[0] * invDet]);\n    }\n    equals(other, epsilon = 0) {\n        const m = this._m;\n        const o = other.m;\n        if (epsilon === 0) {\n            return m[0] === o[0] && m[1] === o[1] && m[2] === o[2] && m[3] === o[3];\n        }\n        return Math.abs(m[0] - o[0]) < epsilon && Math.abs(m[1] - o[1]) < epsilon && Math.abs(m[2] - o[2]) < epsilon && Math.abs(m[3] - o[3]) < epsilon;\n    }\n    getClassName() {\n        return \"FlowGraphMatrix2D\";\n    }\n    toString() {\n        return `FlowGraphMatrix2D(${this._m.join(\", \")})`;\n    }\n}\n/**\n * A 3x3 matrix.\n */\nexport class FlowGraphMatrix3D {\n    constructor(array = [1, 0, 0, 0, 1, 0, 0, 0, 1]) {\n        this._m = array;\n    }\n    get m() {\n        return this._m;\n    }\n    transformVector(v) {\n        return this.transformVectorToRef(v, new Vector3());\n    }\n    transformVectorToRef(v, result) {\n        const m = this._m;\n        result.x = v.x * m[0] + v.y * m[1] + v.z * m[2];\n        result.y = v.x * m[3] + v.y * m[4] + v.z * m[5];\n        result.z = v.x * m[6] + v.y * m[7] + v.z * m[8];\n        return result;\n    }\n    multiplyToRef(other, result) {\n        const otherMatrix = other._m;\n        const thisMatrix = this._m;\n        const r = result.m;\n        r[0] = otherMatrix[0] * thisMatrix[0] + otherMatrix[1] * thisMatrix[3] + otherMatrix[2] * thisMatrix[6];\n        r[1] = otherMatrix[0] * thisMatrix[1] + otherMatrix[1] * thisMatrix[4] + otherMatrix[2] * thisMatrix[7];\n        r[2] = otherMatrix[0] * thisMatrix[2] + otherMatrix[1] * thisMatrix[5] + otherMatrix[2] * thisMatrix[8];\n        r[3] = otherMatrix[3] * thisMatrix[0] + otherMatrix[4] * thisMatrix[3] + otherMatrix[5] * thisMatrix[6];\n        r[4] = otherMatrix[3] * thisMatrix[1] + otherMatrix[4] * thisMatrix[4] + otherMatrix[5] * thisMatrix[7];\n        r[5] = otherMatrix[3] * thisMatrix[2] + otherMatrix[4] * thisMatrix[5] + otherMatrix[5] * thisMatrix[8];\n        r[6] = otherMatrix[6] * thisMatrix[0] + otherMatrix[7] * thisMatrix[3] + otherMatrix[8] * thisMatrix[6];\n        r[7] = otherMatrix[6] * thisMatrix[1] + otherMatrix[7] * thisMatrix[4] + otherMatrix[8] * thisMatrix[7];\n        r[8] = otherMatrix[6] * thisMatrix[2] + otherMatrix[7] * thisMatrix[5] + otherMatrix[8] * thisMatrix[8];\n        return result;\n    }\n    multiply(other) {\n        return this.multiplyToRef(other, new FlowGraphMatrix3D());\n    }\n    divideToRef(other, result) {\n        const m = this._m;\n        const o = other.m;\n        const r = result.m;\n        r[0] = m[0] / o[0];\n        r[1] = m[1] / o[1];\n        r[2] = m[2] / o[2];\n        r[3] = m[3] / o[3];\n        r[4] = m[4] / o[4];\n        r[5] = m[5] / o[5];\n        r[6] = m[6] / o[6];\n        r[7] = m[7] / o[7];\n        r[8] = m[8] / o[8];\n        return result;\n    }\n    divide(other) {\n        return this.divideToRef(other, new FlowGraphMatrix3D());\n    }\n    addToRef(other, result) {\n        const m = this._m;\n        const o = other.m;\n        const r = result.m;\n        r[0] = m[0] + o[0];\n        r[1] = m[1] + o[1];\n        r[2] = m[2] + o[2];\n        r[3] = m[3] + o[3];\n        r[4] = m[4] + o[4];\n        r[5] = m[5] + o[5];\n        r[6] = m[6] + o[6];\n        r[7] = m[7] + o[7];\n        r[8] = m[8] + o[8];\n        return result;\n    }\n    add(other) {\n        return this.addToRef(other, new FlowGraphMatrix3D());\n    }\n    subtractToRef(other, result) {\n        const m = this._m;\n        const o = other.m;\n        const r = result.m;\n        r[0] = m[0] - o[0];\n        r[1] = m[1] - o[1];\n        r[2] = m[2] - o[2];\n        r[3] = m[3] - o[3];\n        r[4] = m[4] - o[4];\n        r[5] = m[5] - o[5];\n        r[6] = m[6] - o[6];\n        r[7] = m[7] - o[7];\n        r[8] = m[8] - o[8];\n        return result;\n    }\n    subtract(other) {\n        return this.subtractToRef(other, new FlowGraphMatrix3D());\n    }\n    toArray(emptyArray = []) {\n        for (let i = 0; i < 9; i++) {\n            emptyArray[i] = this._m[i];\n        }\n        return emptyArray;\n    }\n    asArray() {\n        return this.toArray();\n    }\n    fromArray(array) {\n        for (let i = 0; i < 9; i++) {\n            this._m[i] = array[i];\n        }\n        return this;\n    }\n    transpose() {\n        const m = this._m;\n        return new FlowGraphMatrix3D([m[0], m[3], m[6], m[1], m[4], m[7], m[2], m[5], m[8]]);\n    }\n    determinant() {\n        const m = this._m;\n        return m[0] * (m[4] * m[8] - m[5] * m[7]) - m[1] * (m[3] * m[8] - m[5] * m[6]) + m[2] * (m[3] * m[7] - m[4] * m[6]);\n    }\n    inverse() {\n        const det = this.determinant();\n        if (det === 0) {\n            throw new Error(\"Matrix is not invertible\");\n        }\n        const m = this._m;\n        const invDet = 1 / det;\n        return new FlowGraphMatrix3D([\n            (m[4] * m[8] - m[5] * m[7]) * invDet,\n            (m[2] * m[7] - m[1] * m[8]) * invDet,\n            (m[1] * m[5] - m[2] * m[4]) * invDet,\n            (m[5] * m[6] - m[3] * m[8]) * invDet,\n            (m[0] * m[8] - m[2] * m[6]) * invDet,\n            (m[2] * m[3] - m[0] * m[5]) * invDet,\n            (m[3] * m[7] - m[4] * m[6]) * invDet,\n            (m[1] * m[6] - m[0] * m[7]) * invDet,\n            (m[0] * m[4] - m[1] * m[3]) * invDet,\n        ]);\n    }\n    equals(other, epsilon = 0) {\n        const m = this._m;\n        const o = other.m;\n        // performance shortcut\n        if (epsilon === 0) {\n            return m[0] === o[0] && m[1] === o[1] && m[2] === o[2] && m[3] === o[3] && m[4] === o[4] && m[5] === o[5] && m[6] === o[6] && m[7] === o[7] && m[8] === o[8];\n        }\n        return (Math.abs(m[0] - o[0]) < epsilon &&\n            Math.abs(m[1] - o[1]) < epsilon &&\n            Math.abs(m[2] - o[2]) < epsilon &&\n            Math.abs(m[3] - o[3]) < epsilon &&\n            Math.abs(m[4] - o[4]) < epsilon &&\n            Math.abs(m[5] - o[5]) < epsilon &&\n            Math.abs(m[6] - o[6]) < epsilon &&\n            Math.abs(m[7] - o[7]) < epsilon &&\n            Math.abs(m[8] - o[8]) < epsilon);\n    }\n    getClassName() {\n        return \"FlowGraphMatrix3D\";\n    }\n    toString() {\n        return `FlowGraphMatrix3D(${this._m.join(\", \")})`;\n    }\n}\n//# sourceMappingURL=flowGraphMatrix.js.map","import { Vector2, Vector3, Vector4, Matrix, Quaternion } from \"../Maths/math.vector\";\nimport { Color3, Color4 } from \"../Maths/math.color\";\nimport { FlowGraphInteger } from \"./CustomTypes/flowGraphInteger\";\nimport { Constants } from \"core/Engines/constants\";\nimport { FlowGraphMatrix2D, FlowGraphMatrix3D } from \"./CustomTypes/flowGraphMatrix\";\n/**\n * The types supported by the flow graph.\n */\nexport var FlowGraphTypes;\n(function (FlowGraphTypes) {\n    FlowGraphTypes[\"Any\"] = \"any\";\n    FlowGraphTypes[\"String\"] = \"string\";\n    FlowGraphTypes[\"Number\"] = \"number\";\n    FlowGraphTypes[\"Boolean\"] = \"boolean\";\n    FlowGraphTypes[\"Object\"] = \"object\";\n    FlowGraphTypes[\"Integer\"] = \"FlowGraphInteger\";\n    FlowGraphTypes[\"Vector2\"] = \"Vector2\";\n    FlowGraphTypes[\"Vector3\"] = \"Vector3\";\n    FlowGraphTypes[\"Vector4\"] = \"Vector4\";\n    FlowGraphTypes[\"Quaternion\"] = \"Quaternion\";\n    FlowGraphTypes[\"Matrix\"] = \"Matrix\";\n    FlowGraphTypes[\"Matrix2D\"] = \"Matrix2D\";\n    FlowGraphTypes[\"Matrix3D\"] = \"Matrix3D\";\n    FlowGraphTypes[\"Color3\"] = \"Color3\";\n    FlowGraphTypes[\"Color4\"] = \"Color4\";\n})(FlowGraphTypes || (FlowGraphTypes = {}));\n/**\n * A rich type represents extra information about a type,\n * such as its name and a default value constructor.\n */\nexport class RichType {\n    constructor(\n    /**\n     * The name given to the type.\n     */\n    typeName, \n    /**\n     * The default value of the type.\n     */\n    defaultValue, \n    /**\n     * [-1] The ANIMATIONTYPE of the type, if available\n     */\n    animationType = -1) {\n        this.typeName = typeName;\n        this.defaultValue = defaultValue;\n        this.animationType = animationType;\n    }\n    /**\n     * Serializes this rich type into a serialization object.\n     * @param serializationObject the object to serialize to\n     */\n    serialize(serializationObject) {\n        serializationObject.typeName = this.typeName;\n        serializationObject.defaultValue = this.defaultValue;\n    }\n}\nexport const RichTypeAny = new RichType(\"any\" /* FlowGraphTypes.Any */, undefined);\nexport const RichTypeString = new RichType(\"string\" /* FlowGraphTypes.String */, \"\");\nexport const RichTypeNumber = new RichType(\"number\" /* FlowGraphTypes.Number */, 0, Constants.ANIMATIONTYPE_FLOAT);\nexport const RichTypeBoolean = new RichType(\"boolean\" /* FlowGraphTypes.Boolean */, false);\nexport const RichTypeVector2 = new RichType(\"Vector2\" /* FlowGraphTypes.Vector2 */, Vector2.Zero(), Constants.ANIMATIONTYPE_VECTOR2);\nexport const RichTypeVector3 = new RichType(\"Vector3\" /* FlowGraphTypes.Vector3 */, Vector3.Zero(), Constants.ANIMATIONTYPE_VECTOR3);\nexport const RichTypeVector4 = new RichType(\"Vector4\" /* FlowGraphTypes.Vector4 */, Vector4.Zero());\nexport const RichTypeMatrix = new RichType(\"Matrix\" /* FlowGraphTypes.Matrix */, Matrix.Identity(), Constants.ANIMATIONTYPE_MATRIX);\nexport const RichTypeMatrix2D = new RichType(\"Matrix2D\" /* FlowGraphTypes.Matrix2D */, new FlowGraphMatrix2D());\nexport const RichTypeMatrix3D = new RichType(\"Matrix3D\" /* FlowGraphTypes.Matrix3D */, new FlowGraphMatrix3D());\nexport const RichTypeColor3 = new RichType(\"Color3\" /* FlowGraphTypes.Color3 */, Color3.Black(), Constants.ANIMATIONTYPE_COLOR3);\nexport const RichTypeColor4 = new RichType(\"Color4\" /* FlowGraphTypes.Color4 */, new Color4(0, 0, 0, 0), Constants.ANIMATIONTYPE_COLOR4);\nexport const RichTypeQuaternion = new RichType(\"Quaternion\" /* FlowGraphTypes.Quaternion */, Quaternion.Identity(), Constants.ANIMATIONTYPE_QUATERNION);\nRichTypeQuaternion.typeTransformer = (value) => {\n    if (value.getClassName) {\n        if (value.getClassName() === \"Vector4\" /* FlowGraphTypes.Vector4 */) {\n            return Quaternion.FromArray(value.asArray());\n        }\n        else if (value.getClassName() === \"Vector3\" /* FlowGraphTypes.Vector3 */) {\n            return Quaternion.FromEulerVector(value);\n        }\n        else if (value.getClassName() === \"Matrix\" /* FlowGraphTypes.Matrix */) {\n            return Quaternion.FromRotationMatrix(value);\n        }\n    }\n    return value;\n};\nexport const RichTypeFlowGraphInteger = new RichType(\"FlowGraphInteger\" /* FlowGraphTypes.Integer */, new FlowGraphInteger(0), Constants.ANIMATIONTYPE_FLOAT);\n/**\n * Given a value, try to deduce its rich type.\n * @param value the value to deduce the rich type from\n * @returns the value's rich type, or RichTypeAny if the type could not be deduced.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getRichTypeFromValue(value) {\n    const anyValue = value;\n    switch (typeof value) {\n        case \"string\" /* FlowGraphTypes.String */:\n            return RichTypeString;\n        case \"number\" /* FlowGraphTypes.Number */:\n            return RichTypeNumber;\n        case \"boolean\" /* FlowGraphTypes.Boolean */:\n            return RichTypeBoolean;\n        case \"object\" /* FlowGraphTypes.Object */:\n            if (anyValue.getClassName) {\n                switch (anyValue.getClassName()) {\n                    case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n                        return RichTypeVector2;\n                    case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n                        return RichTypeVector3;\n                    case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n                        return RichTypeVector4;\n                    case \"Matrix\" /* FlowGraphTypes.Matrix */:\n                        return RichTypeMatrix;\n                    case \"Color3\" /* FlowGraphTypes.Color3 */:\n                        return RichTypeColor3;\n                    case \"Color4\" /* FlowGraphTypes.Color4 */:\n                        return RichTypeColor4;\n                    case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n                        return RichTypeQuaternion;\n                    case \"FlowGraphInteger\" /* FlowGraphTypes.Integer */:\n                        return RichTypeFlowGraphInteger;\n                    case \"Matrix2D\" /* FlowGraphTypes.Matrix2D */:\n                        return RichTypeMatrix2D;\n                    case \"Matrix3D\" /* FlowGraphTypes.Matrix3D */:\n                        return RichTypeMatrix3D;\n                }\n            }\n            return RichTypeAny;\n        default:\n            return RichTypeAny;\n    }\n}\n/**\n * Given a flow graph type, return the rich type that corresponds to it.\n * @param flowGraphType the flow graph type\n * @returns the rich type that corresponds to the flow graph type\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getRichTypeByFlowGraphType(flowGraphType) {\n    switch (flowGraphType) {\n        case \"string\" /* FlowGraphTypes.String */:\n            return RichTypeString;\n        case \"number\" /* FlowGraphTypes.Number */:\n            return RichTypeNumber;\n        case \"boolean\" /* FlowGraphTypes.Boolean */:\n            return RichTypeBoolean;\n        case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n            return RichTypeVector2;\n        case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n            return RichTypeVector3;\n        case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n            return RichTypeVector4;\n        case \"Matrix\" /* FlowGraphTypes.Matrix */:\n            return RichTypeMatrix;\n        case \"Color3\" /* FlowGraphTypes.Color3 */:\n            return RichTypeColor3;\n        case \"Color4\" /* FlowGraphTypes.Color4 */:\n            return RichTypeColor4;\n        case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n            return RichTypeQuaternion;\n        case \"FlowGraphInteger\" /* FlowGraphTypes.Integer */:\n            return RichTypeFlowGraphInteger;\n        case \"Matrix2D\" /* FlowGraphTypes.Matrix2D */:\n            return RichTypeMatrix2D;\n        case \"Matrix3D\" /* FlowGraphTypes.Matrix3D */:\n            return RichTypeMatrix3D;\n        default:\n            return RichTypeAny;\n    }\n}\n/**\n * get the animation type for a given flow graph type\n * @param flowGraphType the flow graph type\n * @returns the animation type for this flow graph type\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getAnimationTypeByFlowGraphType(flowGraphType) {\n    switch (flowGraphType) {\n        case \"number\" /* FlowGraphTypes.Number */:\n            return Constants.ANIMATIONTYPE_FLOAT;\n        case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n            return Constants.ANIMATIONTYPE_VECTOR2;\n        case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n            return Constants.ANIMATIONTYPE_VECTOR3;\n        case \"Matrix\" /* FlowGraphTypes.Matrix */:\n            return Constants.ANIMATIONTYPE_MATRIX;\n        case \"Color3\" /* FlowGraphTypes.Color3 */:\n            return Constants.ANIMATIONTYPE_COLOR3;\n        case \"Color4\" /* FlowGraphTypes.Color4 */:\n            return Constants.ANIMATIONTYPE_COLOR4;\n        case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n            return Constants.ANIMATIONTYPE_QUATERNION;\n        default:\n            return Constants.ANIMATIONTYPE_FLOAT;\n    }\n}\n/**\n * Given an animation type, return the rich type that corresponds to it.\n * @param animationType the animation type\n * @returns the rich type that corresponds to the animation type\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getRichTypeByAnimationType(animationType) {\n    switch (animationType) {\n        case Constants.ANIMATIONTYPE_FLOAT:\n            return RichTypeNumber;\n        case Constants.ANIMATIONTYPE_VECTOR2:\n            return RichTypeVector2;\n        case Constants.ANIMATIONTYPE_VECTOR3:\n            return RichTypeVector3;\n        case Constants.ANIMATIONTYPE_MATRIX:\n            return RichTypeMatrix;\n        case Constants.ANIMATIONTYPE_COLOR3:\n            return RichTypeColor3;\n        case Constants.ANIMATIONTYPE_COLOR4:\n            return RichTypeColor4;\n        case Constants.ANIMATIONTYPE_QUATERNION:\n            return RichTypeQuaternion;\n        default:\n            return RichTypeAny;\n    }\n}\n//# sourceMappingURL=flowGraphRichTypes.js.map","import { Logger } from \"core/Misc/logger\";\nimport { getAnimationTypeByFlowGraphType } from \"core/FlowGraph/flowGraphRichTypes\";\nexport function getMappingForFullOperationName(fullOperationName) {\n    const [op, extension] = fullOperationName.split(\":\");\n    return getMappingForDeclaration({ op, extension });\n}\nexport function getMappingForDeclaration(declaration, returnNoOpIfNotAvailable = true) {\n    const mapping = declaration.extension ? gltfExtensionsToFlowGraphMapping[declaration.extension]?.[declaration.op] : gltfToFlowGraphMapping[declaration.op];\n    if (!mapping) {\n        Logger.Warn(`No mapping found for operation ${declaration.op} and extension ${declaration.extension || \"KHR_interactivity\"}`);\n        if (returnNoOpIfNotAvailable) {\n            const inputs = {};\n            const outputs = {\n                flows: {},\n            };\n            if (declaration.inputValueSockets) {\n                inputs.values = {};\n                for (const key in declaration.inputValueSockets) {\n                    inputs.values[key] = {\n                        name: key,\n                    };\n                }\n            }\n            if (declaration.outputValueSockets) {\n                outputs.values = {};\n                Object.keys(declaration.outputValueSockets).forEach((key) => {\n                    outputs.values[key] = {\n                        name: key,\n                    };\n                });\n            }\n            return {\n                blocks: [], // no blocks, just mapping\n                inputs,\n                outputs,\n            };\n        }\n    }\n    return mapping;\n}\n/**\n * This function will add new mapping to glTF interactivity.\n * Other extensions can define new types of blocks, this is the way to let interactivity know how to parse them.\n * @param key the type of node, i.e. \"variable/get\"\n * @param extension the extension of the interactivity operation, i.e. \"KHR_selectability\"\n * @param mapping The mapping object. See documentation or examples below.\n */\nexport function addNewInteractivityFlowGraphMapping(key, extension, mapping) {\n    gltfExtensionsToFlowGraphMapping[extension] ||= {};\n    gltfExtensionsToFlowGraphMapping[extension][key] = mapping;\n}\nconst gltfExtensionsToFlowGraphMapping = {\n    /**\n     * This is the BABYLON extension for glTF interactivity.\n     * It defines babylon-specific blocks and operations.\n     */\n    BABYLON: {\n        /**\n         * flow/log is a flow node that logs input to the console.\n         * It has \"in\" and \"out\" flows, and takes a message as input.\n         * The message can be any type of value.\n         * The message is logged to the console when the \"in\" flow is triggered.\n         * The \"out\" flow is triggered when the message is logged.\n         */\n        \"flow/log\": {\n            blocks: [\"FlowGraphConsoleLogBlock\" /* FlowGraphBlockNames.ConsoleLog */],\n            inputs: {\n                values: {\n                    message: { name: \"message\" },\n                },\n            },\n        },\n    },\n};\n// this mapper is just a way to convert the glTF nodes to FlowGraph nodes in terms of input/output connection names and values.\nconst gltfToFlowGraphMapping = {\n    \"event/onStart\": {\n        blocks: [\"FlowGraphSceneReadyEventBlock\" /* FlowGraphBlockNames.SceneReadyEvent */],\n        outputs: {\n            flows: {\n                out: { name: \"done\" },\n            },\n        },\n    },\n    \"event/onTick\": {\n        blocks: [\"FlowGraphSceneTickEventBlock\" /* FlowGraphBlockNames.SceneTickEvent */],\n        inputs: {},\n        outputs: {\n            values: {\n                timeSinceLastTick: { name: \"deltaTime\", gltfType: \"number\" /*, dataTransformer: (time: number) => time / 1000*/ },\n            },\n            flows: {\n                out: { name: \"done\" },\n            },\n        },\n    },\n    \"event/send\": {\n        blocks: [\"FlowGraphSendCustomEventBlock\" /* FlowGraphBlockNames.SendCustomEvent */],\n        extraProcessor(gltfBlock, declaration, _mapping, parser, serializedObjects) {\n            // set eventId and eventData. The configuration object of the glTF should have a single object.\n            // validate that we are running it on the right block.\n            if (declaration.op !== \"event/send\" || !gltfBlock.configuration || Object.keys(gltfBlock.configuration).length !== 1) {\n                throw new Error(\"Receive event should have a single configuration object, the event itself\");\n            }\n            const eventConfiguration = gltfBlock.configuration[\"event\"];\n            const eventId = eventConfiguration.value[0];\n            if (typeof eventId !== \"number\") {\n                throw new Error(\"Event id should be a number\");\n            }\n            const event = parser.arrays.events[eventId];\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.eventId = event.eventId;\n            serializedObject.config.eventData = event.eventData;\n            return serializedObjects;\n        },\n    },\n    \"event/receive\": {\n        blocks: [\"FlowGraphReceiveCustomEventBlock\" /* FlowGraphBlockNames.ReceiveCustomEvent */],\n        outputs: {\n            flows: {\n                out: { name: \"done\" },\n            },\n        },\n        validation(gltfBlock, interactivityGraph) {\n            if (!gltfBlock.configuration) {\n                Logger.Error(\"Receive event should have a configuration object\");\n                return { valid: false, error: \"Receive event should have a configuration object\" };\n            }\n            const eventConfiguration = gltfBlock.configuration[\"event\"];\n            if (!eventConfiguration) {\n                Logger.Error(\"Receive event should have a single configuration object, the event itself\");\n                return { valid: false, error: \"Receive event should have a single configuration object, the event itself\" };\n            }\n            const eventId = eventConfiguration.value[0];\n            if (typeof eventId !== \"number\") {\n                Logger.Error(\"Event id should be a number\");\n                return { valid: false, error: \"Event id should be a number\" };\n            }\n            const event = interactivityGraph.events?.[eventId];\n            if (!event) {\n                Logger.Error(`Event with id ${eventId} not found`);\n                return { valid: false, error: `Event with id ${eventId} not found` };\n            }\n            return { valid: true };\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, parser, serializedObjects) {\n            // set eventId and eventData. The configuration object of the glTF should have a single object.\n            // validate that we are running it on the right block.\n            if (declaration.op !== \"event/receive\" || !gltfBlock.configuration || Object.keys(gltfBlock.configuration).length !== 1) {\n                throw new Error(\"Receive event should have a single configuration object, the event itself\");\n            }\n            const eventConfiguration = gltfBlock.configuration[\"event\"];\n            const eventId = eventConfiguration.value[0];\n            if (typeof eventId !== \"number\") {\n                throw new Error(\"Event id should be a number\");\n            }\n            const event = parser.arrays.events[eventId];\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.eventId = event.eventId;\n            serializedObject.config.eventData = event.eventData;\n            return serializedObjects;\n        },\n    },\n    \"math/e\": getSimpleInputMapping(\"FlowGraphEBlock\" /* FlowGraphBlockNames.E */),\n    \"math/pi\": getSimpleInputMapping(\"FlowGraphPIBlock\" /* FlowGraphBlockNames.PI */),\n    \"math/inf\": getSimpleInputMapping(\"FlowGraphInfBlock\" /* FlowGraphBlockNames.Inf */),\n    \"math/nan\": getSimpleInputMapping(\"FlowGraphNaNBlock\" /* FlowGraphBlockNames.NaN */),\n    \"math/abs\": getSimpleInputMapping(\"FlowGraphAbsBlock\" /* FlowGraphBlockNames.Abs */),\n    \"math/sign\": getSimpleInputMapping(\"FlowGraphSignBlock\" /* FlowGraphBlockNames.Sign */),\n    \"math/trunc\": getSimpleInputMapping(\"FlowGraphTruncBlock\" /* FlowGraphBlockNames.Trunc */),\n    \"math/floor\": getSimpleInputMapping(\"FlowGraphFloorBlock\" /* FlowGraphBlockNames.Floor */),\n    \"math/ceil\": getSimpleInputMapping(\"FlowGraphCeilBlock\" /* FlowGraphBlockNames.Ceil */),\n    \"math/round\": {\n        blocks: [\"FlowGraphRoundBlock\" /* FlowGraphBlockNames.Round */],\n        configuration: {},\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.roundHalfAwayFromZero = true;\n            return serializedObjects;\n        },\n    },\n    \"math/fract\": getSimpleInputMapping(\"FlowGraphFractBlock\" /* FlowGraphBlockNames.Fraction */),\n    \"math/neg\": getSimpleInputMapping(\"FlowGraphNegationBlock\" /* FlowGraphBlockNames.Negation */),\n    \"math/add\": getSimpleInputMapping(\"FlowGraphAddBlock\" /* FlowGraphBlockNames.Add */, [\"a\", \"b\"], true),\n    \"math/sub\": getSimpleInputMapping(\"FlowGraphSubtractBlock\" /* FlowGraphBlockNames.Subtract */, [\"a\", \"b\"], true),\n    \"math/mul\": {\n        blocks: [\"FlowGraphMultiplyBlock\" /* FlowGraphBlockNames.Multiply */],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.useMatrixPerComponent = true;\n            serializedObjects[0].config.preventIntegerFloatArithmetic = true;\n            // try to infer the type or fallback to Integer\n            // check the gltf block for the inputs, see if they have a type\n            let type = -1;\n            Object.keys(_gltfBlock.values || {}).find((value) => {\n                if (_gltfBlock.values?.[value].type !== undefined) {\n                    type = _gltfBlock.values[value].type;\n                    return true;\n                }\n                return false;\n            });\n            if (type !== -1) {\n                serializedObjects[0].config.type = _parser.arrays.types[type].flowGraphType;\n            }\n            return serializedObjects;\n        },\n        validation(gltfBlock) {\n            if (gltfBlock.values) {\n                // make sure types are the same\n                return ValidateTypes(gltfBlock);\n            }\n            return { valid: true };\n        },\n    },\n    \"math/div\": getSimpleInputMapping(\"FlowGraphDivideBlock\" /* FlowGraphBlockNames.Divide */, [\"a\", \"b\"], true),\n    \"math/rem\": getSimpleInputMapping(\"FlowGraphModuloBlock\" /* FlowGraphBlockNames.Modulo */, [\"a\", \"b\"]),\n    \"math/min\": getSimpleInputMapping(\"FlowGraphMinBlock\" /* FlowGraphBlockNames.Min */, [\"a\", \"b\"]),\n    \"math/max\": getSimpleInputMapping(\"FlowGraphMaxBlock\" /* FlowGraphBlockNames.Max */, [\"a\", \"b\"]),\n    \"math/clamp\": getSimpleInputMapping(\"FlowGraphClampBlock\" /* FlowGraphBlockNames.Clamp */, [\"a\", \"b\", \"c\"]),\n    \"math/saturate\": getSimpleInputMapping(\"FlowGraphSaturateBlock\" /* FlowGraphBlockNames.Saturate */),\n    \"math/mix\": getSimpleInputMapping(\"FlowGraphMathInterpolationBlock\" /* FlowGraphBlockNames.MathInterpolation */, [\"a\", \"b\", \"c\"]),\n    \"math/eq\": getSimpleInputMapping(\"FlowGraphEqualityBlock\" /* FlowGraphBlockNames.Equality */, [\"a\", \"b\"]),\n    \"math/lt\": getSimpleInputMapping(\"FlowGraphLessThanBlock\" /* FlowGraphBlockNames.LessThan */, [\"a\", \"b\"]),\n    \"math/le\": getSimpleInputMapping(\"FlowGraphLessThanOrEqualBlock\" /* FlowGraphBlockNames.LessThanOrEqual */, [\"a\", \"b\"]),\n    \"math/gt\": getSimpleInputMapping(\"FlowGraphGreaterThanBlock\" /* FlowGraphBlockNames.GreaterThan */, [\"a\", \"b\"]),\n    \"math/ge\": getSimpleInputMapping(\"FlowGraphGreaterThanOrEqualBlock\" /* FlowGraphBlockNames.GreaterThanOrEqual */, [\"a\", \"b\"]),\n    \"math/isnan\": getSimpleInputMapping(\"FlowGraphIsNaNBlock\" /* FlowGraphBlockNames.IsNaN */),\n    \"math/isinf\": getSimpleInputMapping(\"FlowGraphIsInfBlock\" /* FlowGraphBlockNames.IsInfinity */),\n    \"math/select\": {\n        blocks: [\"FlowGraphConditionalBlock\" /* FlowGraphBlockNames.Conditional */],\n        inputs: {\n            values: {\n                condition: { name: \"condition\" },\n                // Should we validate those have the same type here, or assume it is already validated?\n                a: { name: \"onTrue\" },\n                b: { name: \"onFalse\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"output\" },\n            },\n        },\n    },\n    \"math/random\": {\n        blocks: [\"FlowGraphRandomBlock\" /* FlowGraphBlockNames.Random */],\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/sin\": getSimpleInputMapping(\"FlowGraphSinBlock\" /* FlowGraphBlockNames.Sin */),\n    \"math/cos\": getSimpleInputMapping(\"FlowGraphCosBlock\" /* FlowGraphBlockNames.Cos */),\n    \"math/tan\": getSimpleInputMapping(\"FlowGraphTanBlock\" /* FlowGraphBlockNames.Tan */),\n    \"math/asin\": getSimpleInputMapping(\"FlowGraphASinBlock\" /* FlowGraphBlockNames.Asin */),\n    \"math/acos\": getSimpleInputMapping(\"FlowGraphACosBlock\" /* FlowGraphBlockNames.Acos */),\n    \"math/atan\": getSimpleInputMapping(\"FlowGraphATanBlock\" /* FlowGraphBlockNames.Atan */),\n    \"math/atan2\": getSimpleInputMapping(\"FlowGraphATan2Block\" /* FlowGraphBlockNames.Atan2 */, [\"a\", \"b\"]),\n    \"math/sinh\": getSimpleInputMapping(\"FlowGraphSinhBlock\" /* FlowGraphBlockNames.Sinh */),\n    \"math/cosh\": getSimpleInputMapping(\"FlowGraphCoshBlock\" /* FlowGraphBlockNames.Cosh */),\n    \"math/tanh\": getSimpleInputMapping(\"FlowGraphTanhBlock\" /* FlowGraphBlockNames.Tanh */),\n    \"math/asinh\": getSimpleInputMapping(\"FlowGraphASinhBlock\" /* FlowGraphBlockNames.Asinh */),\n    \"math/acosh\": getSimpleInputMapping(\"FlowGraphACoshBlock\" /* FlowGraphBlockNames.Acosh */),\n    \"math/atanh\": getSimpleInputMapping(\"FlowGraphATanhBlock\" /* FlowGraphBlockNames.Atanh */),\n    \"math/exp\": getSimpleInputMapping(\"FlowGraphExponentialBlock\" /* FlowGraphBlockNames.Exponential */),\n    \"math/log\": getSimpleInputMapping(\"FlowGraphLogBlock\" /* FlowGraphBlockNames.Log */),\n    \"math/log2\": getSimpleInputMapping(\"FlowGraphLog2Block\" /* FlowGraphBlockNames.Log2 */),\n    \"math/log10\": getSimpleInputMapping(\"FlowGraphLog10Block\" /* FlowGraphBlockNames.Log10 */),\n    \"math/sqrt\": getSimpleInputMapping(\"FlowGraphSquareRootBlock\" /* FlowGraphBlockNames.SquareRoot */),\n    \"math/cbrt\": getSimpleInputMapping(\"FlowGraphCubeRootBlock\" /* FlowGraphBlockNames.CubeRoot */),\n    \"math/pow\": getSimpleInputMapping(\"FlowGraphPowerBlock\" /* FlowGraphBlockNames.Power */, [\"a\", \"b\"]),\n    \"math/length\": getSimpleInputMapping(\"FlowGraphLengthBlock\" /* FlowGraphBlockNames.Length */),\n    \"math/normalize\": getSimpleInputMapping(\"FlowGraphNormalizeBlock\" /* FlowGraphBlockNames.Normalize */),\n    \"math/dot\": getSimpleInputMapping(\"FlowGraphDotBlock\" /* FlowGraphBlockNames.Dot */, [\"a\", \"b\"]),\n    \"math/cross\": getSimpleInputMapping(\"FlowGraphCrossBlock\" /* FlowGraphBlockNames.Cross */, [\"a\", \"b\"]),\n    \"math/rotate2D\": getSimpleInputMapping(\"FlowGraphRotate2DBlock\" /* FlowGraphBlockNames.Rotate2D */, [\"a\", \"b\"]),\n    \"math/rotate3D\": getSimpleInputMapping(\"FlowGraphRotate3DBlock\" /* FlowGraphBlockNames.Rotate3D */, [\"a\", \"b\"]),\n    \"math/transform\": {\n        // glTF transform is vectorN with matrixN\n        blocks: [\"FlowGraphTransformVectorBlock\" /* FlowGraphBlockNames.TransformVector */],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/combine2\": {\n        blocks: [\"FlowGraphCombineVector2Block\" /* FlowGraphBlockNames.CombineVector2 */],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/combine3\": {\n        blocks: [\"FlowGraphCombineVector3Block\" /* FlowGraphBlockNames.CombineVector3 */],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/combine4\": {\n        blocks: [\"FlowGraphCombineVector4Block\" /* FlowGraphBlockNames.CombineVector4 */],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    // one input, N outputs! outputs named using numbers.\n    \"math/extract2\": {\n        blocks: [\"FlowGraphExtractVector2Block\" /* FlowGraphBlockNames.ExtractVector2 */],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n            },\n        },\n    },\n    \"math/extract3\": {\n        blocks: [\"FlowGraphExtractVector3Block\" /* FlowGraphBlockNames.ExtractVector3 */],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n            },\n        },\n    },\n    \"math/extract4\": {\n        blocks: [\"FlowGraphExtractVector4Block\" /* FlowGraphBlockNames.ExtractVector4 */],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n            },\n        },\n    },\n    \"math/transpose\": getSimpleInputMapping(\"FlowGraphTransposeBlock\" /* FlowGraphBlockNames.Transpose */),\n    \"math/determinant\": getSimpleInputMapping(\"FlowGraphDeterminantBlock\" /* FlowGraphBlockNames.Determinant */),\n    \"math/inverse\": getSimpleInputMapping(\"FlowGraphInvertMatrixBlock\" /* FlowGraphBlockNames.InvertMatrix */),\n    \"math/matmul\": getSimpleInputMapping(\"FlowGraphMatrixMultiplicationBlock\" /* FlowGraphBlockNames.MatrixMultiplication */, [\"a\", \"b\"]),\n    \"math/matCompose\": {\n        blocks: [\"FlowGraphMatrixCompose\" /* FlowGraphBlockNames.MatrixCompose */],\n        inputs: {\n            values: {\n                translation: { name: \"position\", gltfType: \"float3\" },\n                rotation: { name: \"rotationQuaternion\", gltfType: \"float4\" },\n                scale: { name: \"scaling\", gltfType: \"float3\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            const d = serializedObjects[0].dataInputs.find((input) => input.name === \"rotationQuaternion\");\n            if (!d) {\n                throw new Error(\"Rotation quaternion input not found\");\n            }\n            // if value is defined, set the type to quaternion\n            if (context._connectionValues[d.uniqueId]) {\n                context._connectionValues[d.uniqueId].type = \"Quaternion\" /* FlowGraphTypes.Quaternion */;\n            }\n            return serializedObjects;\n        },\n    },\n    \"math/matDecompose\": {\n        blocks: [\"FlowGraphMatrixDecompose\" /* FlowGraphBlockNames.MatrixDecompose */],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                translation: { name: \"position\" },\n                rotation: { name: \"rotationQuaternion\" },\n                scale: { name: \"scaling\" },\n            },\n        },\n    },\n    \"math/quatConjugate\": getSimpleInputMapping(\"FlowGraphConjugateBlock\" /* FlowGraphBlockNames.Conjugate */, [\"a\"]),\n    \"math/quatMul\": {\n        blocks: [\"FlowGraphMultiplyBlock\" /* FlowGraphBlockNames.Multiply */],\n        inputs: {\n            values: {\n                a: { name: \"a\", gltfType: \"vector4\" },\n                b: { name: \"b\", gltfType: \"vector4\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.type = \"Quaternion\" /* FlowGraphTypes.Quaternion */;\n            return serializedObjects;\n        },\n    },\n    \"math/quatAngleBetween\": getSimpleInputMapping(\"FlowGraphAngleBetweenBlock\" /* FlowGraphBlockNames.AngleBetween */, [\"a\", \"b\"]),\n    \"math/quatFromAxisAngle\": {\n        blocks: [\"FlowGraphQuaternionFromAxisAngleBlock\" /* FlowGraphBlockNames.QuaternionFromAxisAngle */],\n        inputs: {\n            values: {\n                axis: { name: \"a\", gltfType: \"float3\" },\n                angle: { name: \"b\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/quatToAxisAngle\": getSimpleInputMapping(\"FlowGraphAxisAngleFromQuaternionBlock\" /* FlowGraphBlockNames.AxisAngleFromQuaternion */, [\"a\"]),\n    \"math/quatFromDirections\": getSimpleInputMapping(\"FlowGraphQuaternionFromDirectionsBlock\" /* FlowGraphBlockNames.QuaternionFromDirections */, [\"a\", \"b\"]),\n    \"math/combine2x2\": {\n        blocks: [\"FlowGraphCombineMatrix2DBlock\" /* FlowGraphBlockNames.CombineMatrix2D */],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.inputIsColumnMajor = true;\n            return serializedObjects;\n        },\n    },\n    \"math/extract2x2\": {\n        blocks: [\"FlowGraphExtractMatrix2DBlock\" /* FlowGraphBlockNames.ExtractMatrix2D */],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"float2x2\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n            },\n        },\n    },\n    \"math/combine3x3\": {\n        blocks: [\"FlowGraphCombineMatrix3DBlock\" /* FlowGraphBlockNames.CombineMatrix3D */],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n                e: { name: \"input_4\", gltfType: \"number\" },\n                f: { name: \"input_5\", gltfType: \"number\" },\n                g: { name: \"input_6\", gltfType: \"number\" },\n                h: { name: \"input_7\", gltfType: \"number\" },\n                i: { name: \"input_8\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.inputIsColumnMajor = true;\n            return serializedObjects;\n        },\n    },\n    \"math/extract3x3\": {\n        blocks: [\"FlowGraphExtractMatrix3DBlock\" /* FlowGraphBlockNames.ExtractMatrix3D */],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"float3x3\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n                \"4\": { name: \"output_4\" },\n                \"5\": { name: \"output_5\" },\n                \"6\": { name: \"output_6\" },\n                \"7\": { name: \"output_7\" },\n                \"8\": { name: \"output_8\" },\n            },\n        },\n    },\n    \"math/combine4x4\": {\n        blocks: [\"FlowGraphCombineMatrixBlock\" /* FlowGraphBlockNames.CombineMatrix */],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n                e: { name: \"input_4\", gltfType: \"number\" },\n                f: { name: \"input_5\", gltfType: \"number\" },\n                g: { name: \"input_6\", gltfType: \"number\" },\n                h: { name: \"input_7\", gltfType: \"number\" },\n                i: { name: \"input_8\", gltfType: \"number\" },\n                j: { name: \"input_9\", gltfType: \"number\" },\n                k: { name: \"input_10\", gltfType: \"number\" },\n                l: { name: \"input_11\", gltfType: \"number\" },\n                m: { name: \"input_12\", gltfType: \"number\" },\n                n: { name: \"input_13\", gltfType: \"number\" },\n                o: { name: \"input_14\", gltfType: \"number\" },\n                p: { name: \"input_15\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.inputIsColumnMajor = true;\n            return serializedObjects;\n        },\n    },\n    \"math/extract4x4\": {\n        blocks: [\"FlowGraphExtractMatrixBlock\" /* FlowGraphBlockNames.ExtractMatrix */],\n        configuration: {},\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n                \"4\": { name: \"output_4\" },\n                \"5\": { name: \"output_5\" },\n                \"6\": { name: \"output_6\" },\n                \"7\": { name: \"output_7\" },\n                \"8\": { name: \"output_8\" },\n                \"9\": { name: \"output_9\" },\n                \"10\": { name: \"output_10\" },\n                \"11\": { name: \"output_11\" },\n                \"12\": { name: \"output_12\" },\n                \"13\": { name: \"output_13\" },\n                \"14\": { name: \"output_14\" },\n                \"15\": { name: \"output_15\" },\n            },\n        },\n    },\n    \"math/not\": {\n        blocks: [\"FlowGraphBitwiseNotBlock\" /* FlowGraphBlockNames.BitwiseNot */],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            // try to infer the type or fallback to Integer\n            const socketIn = serializedObjects[0].dataInputs[0];\n            serializedObjects[0].config.valueType = context._connectionValues[socketIn.uniqueId]?.type ?? \"FlowGraphInteger\" /* FlowGraphTypes.Integer */;\n            return serializedObjects;\n        },\n    },\n    \"math/and\": {\n        blocks: [\"FlowGraphBitwiseAndBlock\" /* FlowGraphBlockNames.BitwiseAnd */],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            // try to infer the type or fallback to Integer\n            const socketInA = serializedObjects[0].dataInputs[0];\n            const socketInB = serializedObjects[0].dataInputs[1];\n            serializedObjects[0].config.valueType =\n                context._connectionValues[socketInA.uniqueId]?.type ?? context._connectionValues[socketInB.uniqueId]?.type ?? \"FlowGraphInteger\" /* FlowGraphTypes.Integer */;\n            return serializedObjects;\n        },\n    },\n    \"math/or\": {\n        blocks: [\"FlowGraphBitwiseOrBlock\" /* FlowGraphBlockNames.BitwiseOr */],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            // try to infer the type or fallback to Integer\n            const socketInA = serializedObjects[0].dataInputs[0];\n            const socketInB = serializedObjects[0].dataInputs[1];\n            serializedObjects[0].config.valueType =\n                context._connectionValues[socketInA.uniqueId]?.type ?? context._connectionValues[socketInB.uniqueId]?.type ?? \"FlowGraphInteger\" /* FlowGraphTypes.Integer */;\n            return serializedObjects;\n        },\n    },\n    \"math/xor\": {\n        blocks: [\"FlowGraphBitwiseXorBlock\" /* FlowGraphBlockNames.BitwiseXor */],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            // try to infer the type or fallback to Integer\n            const socketInA = serializedObjects[0].dataInputs[0];\n            const socketInB = serializedObjects[0].dataInputs[1];\n            serializedObjects[0].config.valueType =\n                context._connectionValues[socketInA.uniqueId]?.type ?? context._connectionValues[socketInB.uniqueId]?.type ?? \"FlowGraphInteger\" /* FlowGraphTypes.Integer */;\n            return serializedObjects;\n        },\n    },\n    \"math/asr\": getSimpleInputMapping(\"FlowGraphBitwiseRightShiftBlock\" /* FlowGraphBlockNames.BitwiseRightShift */, [\"a\", \"b\"]),\n    \"math/lsl\": getSimpleInputMapping(\"FlowGraphBitwiseLeftShiftBlock\" /* FlowGraphBlockNames.BitwiseLeftShift */, [\"a\", \"b\"]),\n    \"math/clz\": getSimpleInputMapping(\"FlowGraphLeadingZerosBlock\" /* FlowGraphBlockNames.LeadingZeros */),\n    \"math/ctz\": getSimpleInputMapping(\"FlowGraphTrailingZerosBlock\" /* FlowGraphBlockNames.TrailingZeros */),\n    \"math/popcnt\": getSimpleInputMapping(\"FlowGraphOneBitsCounterBlock\" /* FlowGraphBlockNames.OneBitsCounter */),\n    \"math/rad\": getSimpleInputMapping(\"FlowGraphDegToRadBlock\" /* FlowGraphBlockNames.DegToRad */),\n    \"math/deg\": getSimpleInputMapping(\"FlowGraphRadToDegBlock\" /* FlowGraphBlockNames.RadToDeg */),\n    \"type/boolToInt\": getSimpleInputMapping(\"FlowGraphBooleanToInt\" /* FlowGraphBlockNames.BooleanToInt */),\n    \"type/boolToFloat\": getSimpleInputMapping(\"FlowGraphBooleanToFloat\" /* FlowGraphBlockNames.BooleanToFloat */),\n    \"type/intToBool\": getSimpleInputMapping(\"FlowGraphIntToBoolean\" /* FlowGraphBlockNames.IntToBoolean */),\n    \"type/intToFloat\": getSimpleInputMapping(\"FlowGraphIntToFloat\" /* FlowGraphBlockNames.IntToFloat */),\n    \"type/floatToInt\": getSimpleInputMapping(\"FlowGraphFloatToInt\" /* FlowGraphBlockNames.FloatToInt */),\n    \"type/floatToBool\": getSimpleInputMapping(\"FlowGraphFloatToBoolean\" /* FlowGraphBlockNames.FloatToBoolean */),\n    // flows\n    \"flow/sequence\": {\n        blocks: [\"FlowGraphSequenceBlock\" /* FlowGraphBlockNames.Sequence */],\n        extraProcessor(gltfBlock, _declaration, _mapping, _arrays, serializedObjects) {\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.outputSignalCount = Object.keys(gltfBlock.flows || []).length;\n            serializedObject.signalOutputs.forEach((output, index) => {\n                output.name = \"out_\" + index;\n            });\n            return serializedObjects;\n        },\n    },\n    \"flow/branch\": {\n        blocks: [\"FlowGraphBranchBlock\" /* FlowGraphBlockNames.Branch */],\n        outputs: {\n            flows: {\n                true: { name: \"onTrue\" },\n                false: { name: \"onFalse\" },\n            },\n        },\n    },\n    \"flow/switch\": {\n        blocks: [\"FlowGraphSwitchBlock\" /* FlowGraphBlockNames.Switch */],\n        configuration: {\n            cases: { name: \"cases\", inOptions: true, defaultValue: [] },\n        },\n        inputs: {\n            values: {\n                selection: { name: \"case\" },\n                default: { name: \"default\" },\n            },\n        },\n        validation(gltfBlock) {\n            if (gltfBlock.configuration && gltfBlock.configuration.cases) {\n                const cases = gltfBlock.configuration.cases.value;\n                const onlyIntegers = cases.every((caseValue) => {\n                    // case value should be an integer. Since Number.isInteger(1.0) is true, we need to check if toString has only digits.\n                    return typeof caseValue === \"number\" && /^-?\\d+$/.test(caseValue.toString());\n                });\n                if (!onlyIntegers) {\n                    Logger.Warn(\"Switch cases should be integers. Using empty array instead.\");\n                    gltfBlock.configuration.cases.value = [];\n                    return { valid: true };\n                }\n                // check for duplicates\n                const uniqueCases = new Set(cases);\n                gltfBlock.configuration.cases.value = Array.from(uniqueCases);\n            }\n            return { valid: true };\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, _arrays, serializedObjects) {\n            // convert all names of output flow to out_$1 apart from \"default\"\n            if (declaration.op !== \"flow/switch\" || !gltfBlock.flows || Object.keys(gltfBlock.flows).length === 0) {\n                throw new Error(\"Switch should have a single configuration object, the cases array\");\n            }\n            const serializedObject = serializedObjects[0];\n            serializedObject.signalOutputs.forEach((output) => {\n                if (output.name !== \"default\") {\n                    output.name = \"out_\" + output.name;\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"flow/while\": {\n        blocks: [\"FlowGraphWhileLoopBlock\" /* FlowGraphBlockNames.WhileLoop */],\n        outputs: {\n            flows: {\n                loopBody: { name: \"executionFlow\" },\n            },\n        },\n    },\n    \"flow/for\": {\n        blocks: [\"FlowGraphForLoopBlock\" /* FlowGraphBlockNames.ForLoop */],\n        configuration: {\n            initialIndex: { name: \"initialIndex\", gltfType: \"number\", inOptions: true, defaultValue: 0 },\n        },\n        inputs: {\n            values: {\n                startIndex: { name: \"startIndex\", gltfType: \"number\" },\n                endIndex: { name: \"endIndex\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                index: { name: \"index\" },\n            },\n            flows: {\n                loopBody: { name: \"executionFlow\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects) {\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.incrementIndexWhenLoopDone = true;\n            return serializedObjects;\n        },\n    },\n    \"flow/doN\": {\n        blocks: [\"FlowGraphDoNBlock\" /* FlowGraphBlockNames.DoN */],\n        configuration: {},\n        inputs: {\n            values: {\n                n: { name: \"maxExecutions\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                currentCount: { name: \"executionCount\" },\n            },\n        },\n    },\n    \"flow/multiGate\": {\n        blocks: [\"FlowGraphMultiGateBlock\" /* FlowGraphBlockNames.MultiGate */],\n        configuration: {\n            isRandom: { name: \"isRandom\", gltfType: \"boolean\", inOptions: true, defaultValue: false },\n            isLoop: { name: \"isLoop\", gltfType: \"boolean\", inOptions: true, defaultValue: false },\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, _arrays, serializedObjects) {\n            if (declaration.op !== \"flow/multiGate\" || !gltfBlock.flows || Object.keys(gltfBlock.flows).length === 0) {\n                throw new Error(\"MultiGate should have a single configuration object, the number of output flows\");\n            }\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.outputSignalCount = Object.keys(gltfBlock.flows).length;\n            serializedObject.signalOutputs.forEach((output, index) => {\n                output.name = \"out_\" + index;\n            });\n            return serializedObjects;\n        },\n    },\n    \"flow/waitAll\": {\n        blocks: [\"FlowGraphWaitAllBlock\" /* FlowGraphBlockNames.WaitAll */],\n        configuration: {\n            inputFlows: { name: \"inputSignalCount\", gltfType: \"number\", inOptions: true, defaultValue: 0 },\n        },\n        inputs: {\n            flows: {\n                reset: { name: \"reset\" },\n                \"[segment]\": { name: \"in_$1\" },\n            },\n        },\n        validation(gltfBlock) {\n            // check that the configuration value is an integer\n            if (typeof gltfBlock.configuration?.inputFlows?.value[0] !== \"number\") {\n                gltfBlock.configuration = gltfBlock.configuration || {\n                    inputFlows: { value: [0] },\n                };\n                gltfBlock.configuration.inputFlows.value = [0];\n            }\n            return { valid: true };\n        },\n    },\n    \"flow/throttle\": {\n        blocks: [\"FlowGraphThrottleBlock\" /* FlowGraphBlockNames.Throttle */],\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n    },\n    \"flow/setDelay\": {\n        blocks: [\"FlowGraphSetDelayBlock\" /* FlowGraphBlockNames.SetDelay */],\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n    },\n    \"flow/cancelDelay\": {\n        blocks: [\"FlowGraphCancelDelayBlock\" /* FlowGraphBlockNames.CancelDelay */],\n    },\n    \"variable/get\": {\n        blocks: [\"FlowGraphGetVariableBlock\" /* FlowGraphBlockNames.GetVariable */],\n        validation(gltfBlock) {\n            if (!gltfBlock.configuration?.variable?.value) {\n                Logger.Error(\"Variable get block should have a variable configuration\");\n                return { valid: false, error: \"Variable get block should have a variable configuration\" };\n            }\n            return { valid: true };\n        },\n        configuration: {\n            variable: {\n                name: \"variable\",\n                gltfType: \"number\",\n                flowGraphType: \"string\",\n                inOptions: true,\n                isVariable: true,\n                dataTransformer(index, parser) {\n                    return [parser.getVariableName(index[0])];\n                },\n            },\n        },\n    },\n    \"variable/set\": {\n        blocks: [\"FlowGraphSetVariableBlock\" /* FlowGraphBlockNames.SetVariable */],\n        configuration: {\n            variable: {\n                name: \"variable\",\n                gltfType: \"number\",\n                flowGraphType: \"string\",\n                inOptions: true,\n                isVariable: true,\n                dataTransformer(index, parser) {\n                    return [parser.getVariableName(index[0])];\n                },\n            },\n        },\n    },\n    \"variable/setMultiple\": {\n        blocks: [\"FlowGraphSetVariableBlock\" /* FlowGraphBlockNames.SetVariable */],\n        configuration: {\n            variables: {\n                name: \"variables\",\n                gltfType: \"number\",\n                flowGraphType: \"string\",\n                inOptions: true,\n                dataTransformer(index, parser) {\n                    return [index[0].map((i) => parser.getVariableName(i))];\n                },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            // variable/get configuration\n            const serializedGetVariable = serializedObjects[0];\n            serializedGetVariable.dataInputs.forEach((input) => {\n                input.name = parser.getVariableName(+input.name);\n            });\n            return serializedObjects;\n        },\n    },\n    \"variable/interpolate\": {\n        blocks: [\n            \"FlowGraphInterpolationBlock\" /* FlowGraphBlockNames.ValueInterpolation */,\n            \"FlowGraphContextBlock\" /* FlowGraphBlockNames.Context */,\n            \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */,\n            \"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */,\n            \"FlowGraphGetVariableBlock\" /* FlowGraphBlockNames.GetVariable */,\n        ],\n        configuration: {\n            variable: {\n                name: \"propertyName\",\n                inOptions: true,\n                isVariable: true,\n                dataTransformer(index, parser) {\n                    return [parser.getVariableName(index[0])];\n                },\n            },\n            useSlerp: {\n                name: \"animationType\",\n                inOptions: true,\n                defaultValue: false,\n                dataTransformer: (value) => {\n                    if (value[0] === true) {\n                        return [\"Quaternion\" /* FlowGraphTypes.Quaternion */];\n                    }\n                    else {\n                        return [undefined];\n                    }\n                },\n            },\n        },\n        inputs: {\n            values: {\n                value: { name: \"value_1\" },\n                duration: { name: \"duration_1\", gltfType: \"number\" },\n                p1: { name: \"controlPoint1\", toBlock: \"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */ },\n                p2: { name: \"controlPoint2\", toBlock: \"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */ },\n            },\n            flows: {\n                in: { name: \"in\", toBlock: \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */ },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\", toBlock: \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */ },\n                out: { name: \"out\", toBlock: \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */ },\n                done: { name: \"done\", toBlock: \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */ },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"userVariables\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"animation\",\n                output: \"animation\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 0,\n                isVariable: true,\n            },\n            {\n                input: \"easingFunction\",\n                output: \"easingFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 3,\n                isVariable: true,\n            },\n            {\n                input: \"value_0\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 4,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            // is useSlerp is used, animationType should be set to be quaternion!\n            const serializedValueInterpolation = serializedObjects[0];\n            const propertyIndex = gltfBlock.configuration?.variable.value[0];\n            if (typeof propertyIndex !== \"number\") {\n                Logger.Error(\"Variable index is not defined for variable interpolation block\");\n                throw new Error(\"Variable index is not defined for variable interpolation block\");\n            }\n            const variable = parser.arrays.staticVariables[propertyIndex];\n            // if not set by useSlerp\n            if (typeof serializedValueInterpolation.config.animationType.value === \"undefined\") {\n                // get the value type\n                parser.arrays.staticVariables;\n                serializedValueInterpolation.config.animationType.value = getAnimationTypeByFlowGraphType(variable.type);\n            }\n            // variable/get configuration\n            const serializedGetVariable = serializedObjects[4];\n            serializedGetVariable.config ||= {};\n            serializedGetVariable.config.variable ||= {};\n            serializedGetVariable.config.variable.value = parser.getVariableName(propertyIndex);\n            // get the control points from the easing block\n            serializedObjects[3].config ||= {};\n            return serializedObjects;\n        },\n    },\n    \"pointer/get\": {\n        blocks: [\"FlowGraphGetPropertyBlock\" /* FlowGraphBlockNames.GetProperty */, \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */],\n        configuration: {\n            pointer: { name: \"jsonPointer\", toBlock: \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */ },\n        },\n        inputs: {\n            values: {\n                \"[segment]\": { name: \"$1\", toBlock: \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */ },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"object\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"propertyName\",\n                output: \"propertyName\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"customGetFunction\",\n                output: \"getFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            serializedObjects.forEach((serializedObject) => {\n                // check if it is the json pointer block\n                if (serializedObject.className === \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */) {\n                    serializedObject.config ||= {};\n                    serializedObject.config.outputValue = true;\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"pointer/set\": {\n        blocks: [\"FlowGraphSetPropertyBlock\" /* FlowGraphBlockNames.SetProperty */, \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */],\n        configuration: {\n            pointer: { name: \"jsonPointer\", toBlock: \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */ },\n        },\n        inputs: {\n            values: {\n                // must be defined due to the array taking over\n                value: { name: \"value\" },\n                \"[segment]\": { name: \"$1\", toBlock: \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */ },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"object\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"propertyName\",\n                output: \"propertyName\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"customSetFunction\",\n                output: \"setFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            serializedObjects.forEach((serializedObject) => {\n                // check if it is the json pointer block\n                if (serializedObject.className === \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */) {\n                    serializedObject.config ||= {};\n                    serializedObject.config.outputValue = true;\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"pointer/interpolate\": {\n        // interpolate, parse the pointer and play the animation generated. 3 blocks!\n        blocks: [\"FlowGraphInterpolationBlock\" /* FlowGraphBlockNames.ValueInterpolation */, \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */, \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */, \"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */],\n        configuration: {\n            pointer: { name: \"jsonPointer\", toBlock: \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */ },\n        },\n        inputs: {\n            values: {\n                value: { name: \"value_1\" },\n                \"[segment]\": { name: \"$1\", toBlock: \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */ },\n                duration: { name: \"duration_1\", gltfType: \"number\" /*, inOptions: true */ },\n                p1: { name: \"controlPoint1\", toBlock: \"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */ },\n                p2: { name: \"controlPoint2\", toBlock: \"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */ },\n            },\n            flows: {\n                in: { name: \"in\", toBlock: \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */ },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\", toBlock: \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */ },\n                out: { name: \"out\", toBlock: \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */ },\n                done: { name: \"done\", toBlock: \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */ },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"object\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"propertyName\",\n                output: \"propertyName\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"customBuildAnimation\",\n                output: \"generateAnimationsFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"animation\",\n                output: \"animation\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 0,\n                isVariable: true,\n            },\n            {\n                input: \"easingFunction\",\n                output: \"easingFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 3,\n                isVariable: true,\n            },\n            {\n                input: \"value_0\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            serializedObjects.forEach((serializedObject) => {\n                // check if it is the json pointer block\n                if (serializedObject.className === \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */) {\n                    serializedObject.config ||= {};\n                    serializedObject.config.outputValue = true;\n                }\n                else if (serializedObject.className === \"FlowGraphInterpolationBlock\" /* FlowGraphBlockNames.ValueInterpolation */) {\n                    serializedObject.config ||= {};\n                    Object.keys(gltfBlock.values || []).forEach((key) => {\n                        const value = gltfBlock.values?.[key];\n                        if (key === \"value\" && value) {\n                            // get the type of the value\n                            const type = value.type;\n                            if (type !== undefined) {\n                                serializedObject.config.animationType = parser.arrays.types[type].flowGraphType;\n                            }\n                        }\n                    });\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"animation/start\": {\n        blocks: [\"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */, \"FlowGraphArrayIndexBlock\" /* FlowGraphBlockNames.ArrayIndex */, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n        inputs: {\n            values: {\n                animation: { name: \"index\", gltfType: \"number\", toBlock: \"FlowGraphArrayIndexBlock\" /* FlowGraphBlockNames.ArrayIndex */ },\n                speed: { name: \"speed\", gltfType: \"number\" },\n                startTime: { name: \"from\", gltfType: \"number\", dataTransformer: (time, parser) => [time[0] * parser._animationTargetFps] },\n                endTime: { name: \"to\", gltfType: \"number\", dataTransformer: (time, parser) => [time[0] * parser._animationTargetFps] },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"animationGroup\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"array\",\n                output: \"animationGroups\",\n                inputBlockIndex: 1,\n                outputBlockIndex: 2,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects, _context, globalGLTF) {\n            // add the glTF to the configuration of the last serialized object\n            const serializedObject = serializedObjects[serializedObjects.length - 1];\n            serializedObject.config ||= {};\n            serializedObject.config.glTF = globalGLTF;\n            return serializedObjects;\n        },\n    },\n    \"animation/stop\": {\n        blocks: [\"FlowGraphStopAnimationBlock\" /* FlowGraphBlockNames.StopAnimation */, \"FlowGraphArrayIndexBlock\" /* FlowGraphBlockNames.ArrayIndex */, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n        inputs: {\n            values: {\n                animation: { name: \"index\", gltfType: \"number\", toBlock: \"FlowGraphArrayIndexBlock\" /* FlowGraphBlockNames.ArrayIndex */ },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"animationGroup\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"array\",\n                output: \"animationGroups\",\n                inputBlockIndex: 1,\n                outputBlockIndex: 2,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects, _context, globalGLTF) {\n            // add the glTF to the configuration of the last serialized object\n            const serializedObject = serializedObjects[serializedObjects.length - 1];\n            serializedObject.config ||= {};\n            serializedObject.config.glTF = globalGLTF;\n            return serializedObjects;\n        },\n    },\n    \"animation/stopAt\": {\n        blocks: [\"FlowGraphStopAnimationBlock\" /* FlowGraphBlockNames.StopAnimation */, \"FlowGraphArrayIndexBlock\" /* FlowGraphBlockNames.ArrayIndex */, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n        configuration: {},\n        inputs: {\n            values: {\n                animation: { name: \"index\", gltfType: \"number\", toBlock: \"FlowGraphArrayIndexBlock\" /* FlowGraphBlockNames.ArrayIndex */ },\n                stopTime: { name: \"stopAtFrame\", gltfType: \"number\", dataTransformer: (time, parser) => [time[0] * parser._animationTargetFps] },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"animationGroup\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"array\",\n                output: \"animationGroups\",\n                inputBlockIndex: 1,\n                outputBlockIndex: 2,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects, _context, globalGLTF) {\n            // add the glTF to the configuration of the last serialized object\n            const serializedObject = serializedObjects[serializedObjects.length - 1];\n            serializedObject.config ||= {};\n            serializedObject.config.glTF = globalGLTF;\n            return serializedObjects;\n        },\n    },\n    \"math/switch\": {\n        blocks: [\"FlowGraphDataSwitchBlock\" /* FlowGraphBlockNames.DataSwitch */],\n        configuration: {\n            cases: { name: \"cases\", inOptions: true, defaultValue: [] },\n        },\n        inputs: {\n            values: {\n                selection: { name: \"case\" },\n            },\n        },\n        validation(gltfBlock) {\n            if (gltfBlock.configuration && gltfBlock.configuration.cases) {\n                const cases = gltfBlock.configuration.cases.value;\n                const onlyIntegers = cases.every((caseValue) => {\n                    // case value should be an integer. Since Number.isInteger(1.0) is true, we need to check if toString has only digits.\n                    return typeof caseValue === \"number\" && /^-?\\d+$/.test(caseValue.toString());\n                });\n                if (!onlyIntegers) {\n                    Logger.Warn(\"Switch cases should be integers. Using empty array instead.\");\n                    gltfBlock.configuration.cases.value = [];\n                    return { valid: true };\n                }\n                // check for duplicates\n                const uniqueCases = new Set(cases);\n                gltfBlock.configuration.cases.value = Array.from(uniqueCases);\n            }\n            return { valid: true };\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects) {\n            const serializedObject = serializedObjects[0];\n            serializedObject.dataInputs.forEach((input) => {\n                if (input.name !== \"default\" && input.name !== \"case\") {\n                    input.name = \"in_\" + input.name;\n                }\n            });\n            serializedObject.config ||= {};\n            serializedObject.config.treatCasesAsIntegers = true;\n            return serializedObjects;\n        },\n    },\n    \"debug/log\": {\n        blocks: [\"FlowGraphConsoleLogBlock\" /* FlowGraphBlockNames.ConsoleLog */],\n        configuration: {\n            message: { name: \"messageTemplate\", inOptions: true },\n        },\n    },\n};\n// aliases for backwards compatibility\ngltfToFlowGraphMapping[\"math/compose\"] = gltfToFlowGraphMapping[\"math/matCompose\"];\ngltfToFlowGraphMapping[\"math/decompose\"] = gltfToFlowGraphMapping[\"math/matDecompose\"];\nfunction getSimpleInputMapping(type, inputs = [\"a\"], inferType) {\n    return {\n        blocks: [type],\n        inputs: {\n            values: inputs.reduce((acc, input) => {\n                acc[input] = { name: input };\n                return acc;\n            }, {}),\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            if (inferType) {\n                // configure it to work the way glTF specifies\n                serializedObjects[0].config ||= {};\n                serializedObjects[0].config.preventIntegerFloatArithmetic = true;\n                // try to infer the type or fallback to Integer\n                // check the gltf block for the inputs, see if they have a type\n                let type = -1;\n                Object.keys(gltfBlock.values || {}).find((value) => {\n                    if (gltfBlock.values?.[value].type !== undefined) {\n                        type = gltfBlock.values[value].type;\n                        return true;\n                    }\n                    return false;\n                });\n                if (type !== -1) {\n                    serializedObjects[0].config.type = _parser.arrays.types[type].flowGraphType;\n                }\n            }\n            return serializedObjects;\n        },\n        validation(gltfBlock) {\n            if (inferType) {\n                // make sure types are the same\n                return ValidateTypes(gltfBlock);\n            }\n            return { valid: true };\n        },\n    };\n}\nfunction ValidateTypes(gltfBlock) {\n    if (gltfBlock.values) {\n        const types = Object.keys(gltfBlock.values)\n            .map((key) => gltfBlock.values[key].type)\n            .filter((type) => type !== undefined);\n        const allSameType = types.every((type) => type === types[0]);\n        if (!allSameType) {\n            return { valid: false, error: \"All inputs must be of the same type\" };\n        }\n    }\n    return { valid: true };\n}\nexport function getAllSupportedNativeNodeTypes() {\n    return Object.keys(gltfToFlowGraphMapping);\n}\n/**\n *\n * These are the nodes from the specs:\n\n### Math Nodes\n1. **Constants**\n   - E (`math/e`) FlowGraphBlockNames.E\n   - Pi (`math/pi`) FlowGraphBlockNames.PI\n   - Infinity (`math/inf`) FlowGraphBlockNames.Inf\n   - Not a Number (`math/nan`) FlowGraphBlockNames.NaN\n2. **Arithmetic Nodes**\n   - Absolute Value (`math/abs`) FlowGraphBlockNames.Abs\n   - Sign (`math/sign`) FlowGraphBlockNames.Sign\n   - Truncate (`math/trunc`) FlowGraphBlockNames.Trunc\n   - Floor (`math/floor`) FlowGraphBlockNames.Floor\n   - Ceil (`math/ceil`) FlowGraphBlockNames.Ceil\n   - Round (`math/round`)  FlowGraphBlockNames.Round\n   - Fraction (`math/fract`) FlowGraphBlockNames.Fract\n   - Negation (`math/neg`) FlowGraphBlockNames.Negation\n   - Addition (`math/add`) FlowGraphBlockNames.Add\n   - Subtraction (`math/sub`) FlowGraphBlockNames.Subtract\n   - Multiplication (`math/mul`) FlowGraphBlockNames.Multiply\n   - Division (`math/div`) FlowGraphBlockNames.Divide\n   - Remainder (`math/rem`) FlowGraphBlockNames.Modulo\n   - Minimum (`math/min`) FlowGraphBlockNames.Min\n   - Maximum (`math/max`) FlowGraphBlockNames.Max\n   - Clamp (`math/clamp`) FlowGraphBlockNames.Clamp\n   - Saturate (`math/saturate`) FlowGraphBlockNames.Saturate\n   - Interpolate (`math/mix`) FlowGraphBlockNames.MathInterpolation\n3. **Comparison Nodes**\n   - Equality (`math/eq`) FlowGraphBlockNames.Equality\n   - Less Than (`math/lt`) FlowGraphBlockNames.LessThan\n   - Less Than Or Equal To (`math/le`) FlowGraphBlockNames.LessThanOrEqual\n   - Greater Than (`math/gt`) FlowGraphBlockNames.GreaterThan\n   - Greater Than Or Equal To (`math/ge`) FlowGraphBlockNames.GreaterThanOrEqual\n4. **Special Nodes**\n   - Is Not a Number (`math/isnan`) FlowGraphBlockNames.IsNaN\n   - Is Infinity (`math/isinf`) FlowGraphBlockNames.IsInfinity\n   - Select (`math/select`) FlowGraphBlockNames.Conditional\n   - Switch (`math/switch`) FlowGraphBlockNames.DataSwitch\n   - Random (`math/random`) FlowGraphBlockNames.Random\n5. **Angle and Trigonometry Nodes**\n   - Degrees-To-Radians (`math/rad`) FlowGraphBlockNames.DegToRad\n   - Radians-To-Degrees (`math/deg`) FlowGraphBlockNames.RadToDeg\n   - Sine (`math/sin`)  FlowGraphBlockNames.Sin\n   - Cosine (`math/cos`) FlowGraphBlockNames.Cos\n   - Tangent (`math/tan`) FlowGraphBlockNames.Tan\n   - Arcsine (`math/asin`) FlowGraphBlockNames.Asin\n   - Arccosine (`math/acos`) FlowGraphBlockNames.Acos\n   - Arctangent (`math/atan`) FlowGraphBlockNames.Atan\n   - Arctangent 2 (`math/atan2`) FlowGraphBlockNames.Atan2\n6. **Hyperbolic Nodes**\n   - Hyperbolic Sine (`math/sinh`) FlowGraphBlockNames.Sinh\n   - Hyperbolic Cosine (`math/cosh`) FlowGraphBlockNames.Cosh\n   - Hyperbolic Tangent (`math/tanh`) FlowGraphBlockNames.Tanh\n   - Inverse Hyperbolic Sine (`math/asinh`) FlowGraphBlockNames.Asinh\n   - Inverse Hyperbolic Cosine (`math/acosh`) FlowGraphBlockNames.Acosh\n   - Inverse Hyperbolic Tangent (`math/atanh`) FlowGraphBlockNames.Atanh\n7. **Exponential Nodes**\n   - Exponent (`math/exp`) FlowGraphBlockNames.Exponential\n   - Natural Logarithm (`math/log`) FlowGraphBlockNames.Log\n   - Base-2 Logarithm (`math/log2`) FlowGraphBlockNames.Log2\n   - Base-10 Logarithm (`math/log10`) FlowGraphBlockNames.Log10\n   - Square Root (`math/sqrt`) FlowGraphBlockNames.SquareRoot\n   - Cube Root (`math/cbrt`) FlowGraphBlockNames.CubeRoot\n   - Power (`math/pow`) FlowGraphBlockNames.Power\n8. **Vector Nodes**\n   - Length (`math/length`) FlowGraphBlockNames.Length\n   - Normalize (`math/normalize`) FlowGraphBlockNames.Normalize\n   - Dot Product (`math/dot`) FlowGraphBlockNames.Dot\n   - Cross Product (`math/cross`) FlowGraphBlockNames.Cross\n   - Rotate 2D (`math/rotate2D`) FlowGraphBlockNames.Rotate2D\n   - Rotate 3D (`math/rotate3D`) FlowGraphBlockNames.Rotate3D\n   - Transform (`math/transform`) FlowGraphBlockNames.TransformVector\n9. **Matrix Nodes**\n   - Transpose (`math/transpose`) FlowGraphBlockNames.Transpose\n   - Determinant (`math/determinant`) FlowGraphBlockNames.Determinant\n   - Inverse (`math/inverse`) FlowGraphBlockNames.InvertMatrix\n   - Multiplication (`math/matmul`) FlowGraphBlockNames.MatrixMultiplication\n   - Compose (`math/matCompose`) FlowGraphBlockNames.MatrixCompose\n   - Decompose (`math/matDecompose`) FlowGraphBlockNames.MatrixDecompose\n10. **Quaternion Nodes**\n    - Conjugate (`math/quatConjugate`) FlowGraphBlockNames.Conjugate\n    - Multiplication (`math/quatMul`) FlowGraphBlockNames.Multiply\n    - Angle Between Quaternions (`math/quatAngleBetween`) FlowGraphBlockNames.AngleBetween\n    - Quaternion From Axis Angle (`math/quatFromAxisAngle`) FlowGraphBlockNames.QuaternionFromAxisAngle\n    - Quaternion To Axis Angle (`math/quatToAxisAngle`) FlowGraphBlockNames.QuaternionToAxisAngle\n    - Quaternion From Two Directional Vectors (`math/quatFromDirections`) FlowGraphBlockNames.QuaternionFromDirections\n11. **Swizzle Nodes**\n    - Combine (`math/combine2`, `math/combine3`, `math/combine4`, `math/combine2x2`, `math/combine3x3`, `math/combine4x4`)\n        FlowGraphBlockNames.CombineVector2, FlowGraphBlockNames.CombineVector3, FlowGraphBlockNames.CombineVector4\n        FlowGraphBlockNames.CombineMatrix2D, FlowGraphBlockNames.CombineMatrix3D, FlowGraphBlockNames.CombineMatrix\n    - Extract (`math/extract2`, `math/extract3`, `math/extract4`, `math/extract2x2`, `math/extract3x3`, `math/extract4x4`)\n        FlowGraphBlockNames.ExtractVector2, FlowGraphBlockNames.ExtractVector3, FlowGraphBlockNames.ExtractVector4\n        FlowGraphBlockNames.ExtractMatrix2D, FlowGraphBlockNames.ExtractMatrix3D, FlowGraphBlockNames.ExtractMatrix\n12. **Integer Arithmetic Nodes**\n    - Absolute Value (`math/abs`) FlowGraphBlockNames.Abs\n    - Sign (`math/sign`) FlowGraphBlockNames.Sign\n    - Negation (`math/neg`) FlowGraphBlockNames.Negation\n    - Addition (`math/add`) FlowGraphBlockNames.Add\n    - Subtraction (`math/sub`) FlowGraphBlockNames.Subtract\n    - Multiplication (`math/mul`) FlowGraphBlockNames.Multiply\n    - Division (`math/div`) FlowGraphBlockNames.Divide\n    - Remainder (`math/rem`) FlowGraphBlockNames.Modulo\n    - Minimum (`math/min`) FlowGraphBlockNames.Min\n    - Maximum (`math/max`) FlowGraphBlockNames.Max\n    - Clamp (`math/clamp`) FlowGraphBlockNames.Clamp\n13. **Integer Comparison Nodes**\n    - Equality (`math/eq`) FlowGraphBlockNames.Equality\n    - Less Than (`math/lt`) FlowGraphBlockNames.LessThan\n    - Less Than Or Equal To (`math/le`) FlowGraphBlockNames.LessThanOrEqual\n    - Greater Than (`math/gt`) FlowGraphBlockNames.GreaterThan\n    - Greater Than Or Equal To (`math/ge`) FlowGraphBlockNames.GreaterThanOrEqual\n14. **Integer Bitwise Nodes**\n    - Bitwise NOT (`math/not`) FlowGraphBlockNames.BitwiseNot\n    - Bitwise AND (`math/and`) FlowGraphBlockNames.BitwiseAnd\n    - Bitwise OR (`math/or`) FlowGraphBlockNames.BitwiseOr\n    - Bitwise XOR (`math/xor`) FlowGraphBlockNames.BitwiseXor\n    - Right Shift (`math/asr`) FlowGraphBlockNames.BitwiseRightShift\n    - Left Shift (`math/lsl`) FlowGraphBlockNames.BitwiseLeftShift\n    - Count Leading Zeros (`math/clz`) FlowGraphBlockNames.LeadingZeros\n    - Count Trailing Zeros (`math/ctz`) FlowGraphBlockNames.TrailingZeros\n    - Count One Bits (`math/popcnt`) FlowGraphBlockNames.OneBitsCounter\n15. **Boolean Arithmetic Nodes**\n    - Equality (`math/eq`) FlowGraphBlockNames.Equality\n    - Boolean NOT (`math/not`) FlowGraphBlockNames.BitwiseNot\n    - Boolean AND (`math/and`) FlowGraphBlockNames.BitwiseAnd\n    - Boolean OR (`math/or`) FlowGraphBlockNames.BitwiseOr\n    - Boolean XOR (`math/xor`) FlowGraphBlockNames.BitwiseXor\n\n### Type Conversion Nodes\n1. **Boolean Conversion Nodes**\n   - Boolean to Integer (`type/boolToInt`) FlowGraphBlockNames.BooleanToInt\n   - Boolean to Float (`type/boolToFloat`) FlowGraphBlockNames.BooleanToFloat\n2. **Integer Conversion Nodes**\n   - Integer to Boolean (`type/intToBool`) FlowGraphBlockNames.IntToBoolean\n   - Integer to Float (`type/intToFloat`) FlowGraphBlockNames.IntToFloat\n3. **Float Conversion Nodes**\n   - Float to Boolean (`type/floatToBool`) FlowGraphBlockNames.FloatToBoolean\n   - Float to Integer (`type/floatToInt`) FlowGraphBlockNames.FloatToInt\n\n### Control Flow Nodes\n1. **Sync Nodes**\n   - Sequence (`flow/sequence`) FlowGraphBlockNames.Sequence\n   - Branch (`flow/branch`) FlowGraphBlockNames.Branch\n   - Switch (`flow/switch`) FlowGraphBlockNames.Switch\n   - While Loop (`flow/while`) FlowGraphBlockNames.WhileLoop\n   - For Loop (`flow/for`) FlowGraphBlockNames.ForLoop\n   - Do N (`flow/doN`) FlowGraphBlockNames.DoN\n   - Multi Gate (`flow/multiGate`) FlowGraphBlockNames.MultiGate\n   - Wait All (`flow/waitAll`) FlowGraphBlockNames.WaitAll\n   - Throttle (`flow/throttle`) FlowGraphBlockNames.Throttle\n2. **Delay Nodes**\n   - Set Delay (`flow/setDelay`) FlowGraphBlockNames.SetDelay\n   - Cancel Delay (`flow/cancelDelay`) FlowGraphBlockNames.CancelDelay\n\n### State Manipulation Nodes\n1. **Custom Variable Access**\n   - Variable Get (`variable/get`) FlowGraphBlockNames.GetVariable\n   - Variable Set (`variable/set`) FlowGraphBlockNames.SetVariable\n   - Variable Interpolate (`variable/interpolate`)\n2. **Object Model Access** // TODO fully test this!!!\n   - JSON Pointer Template Parsing (`pointer/get`) [FlowGraphBlockNames.GetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Effective JSON Pointer Generation (`pointer/set`) [FlowGraphBlockNames.SetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Pointer Get (`pointer/get`) [FlowGraphBlockNames.GetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Pointer Set (`pointer/set`) [FlowGraphBlockNames.SetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Pointer Interpolate (`pointer/interpolate`) [FlowGraphBlockNames.ValueInterpolation, FlowGraphBlockNames.JsonPointerParser, FlowGraphBlockNames.PlayAnimation, FlowGraphBlockNames.Easing]\n\n### Animation Control Nodes\n1. **Animation Play** (`animation/start`) FlowGraphBlockNames.PlayAnimation\n2. **Animation Stop** (`animation/stop`) FlowGraphBlockNames.StopAnimation\n3. **Animation Stop At** (`animation/stopAt`) FlowGraphBlockNames.StopAnimation\n\n### Event Nodes\n1. **Lifecycle Event Nodes**\n   - On Start (`event/onStart`) FlowGraphBlockNames.SceneReadyEvent\n   - On Tick (`event/onTick`) FlowGraphBlockNames.SceneTickEvent\n2. **Custom Event Nodes**\n   - Receive (`event/receive`) FlowGraphBlockNames.ReceiveCustomEvent\n   - Send (`event/send`) FlowGraphBlockNames.SendCustomEvent\n\n */\n//# sourceMappingURL=declarationMapper.js.map"],"names":[],"mappings":"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AC,GAAG,CAAC,CAAC,IAAI;AACpD,aAAa,MAAM,CAAC,CAAC,IAAI,KAAK,IAAI,KAAK,SAAS,CAAC;AACjD,QAAQ,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;AACpE,QAAQ,IAAI,CAAC,WAAW,EAAE;AAC1B,YAAY,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,qCAAqC,EAAE;AACjF;AACA;AACA,IAAI,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;AAC1B;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;"}