{"version":3,"file":"KHR_materials_diffuse_transmission-DgbyBE3X.esm.min.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/Extensions/KHR_materials_diffuse_transmission.js"],"sourcesContent":["import { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\nimport { GLTFLoader } from \"../glTFLoader\";\nimport { Color3 } from \"core/Maths/math.color\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nconst NAME = \"KHR_materials_diffuse_transmission\";\n/**\n * [Proposed Specification](https://github.com/KhronosGroup/glTF/pull/1825)\n * !!! Experimental Extension Subject to Changes !!!\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_diffuse_transmission {\n    /**\n     * @internal\n     */\n    constructor(loader) {\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        /**\n         * Defines a number that determines the order the extensions are applied.\n         */\n        this.order = 174;\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n        if (this.enabled) {\n            loader.parent.transparencyAsCoverage = true;\n        }\n    }\n    /** @internal */\n    dispose() {\n        this._loader = null;\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line no-restricted-syntax\n    loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n        return GLTFLoader.LoadExtensionAsync(context, material, this.name, async (extensionContext, extension) => {\n            const promises = new Array();\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n            promises.push(this._loadTranslucentPropertiesAsync(extensionContext, material, babylonMaterial, extension));\n            return await Promise.all(promises).then(() => { });\n        });\n    }\n    // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/promise-function-async\n    _loadTranslucentPropertiesAsync(context, material, babylonMaterial, extension) {\n        if (!(babylonMaterial instanceof PBRMaterial)) {\n            throw new Error(`${context}: Material type not supported`);\n        }\n        const pbrMaterial = babylonMaterial;\n        // Enables \"translucency\" texture which represents diffusely-transmitted light.\n        pbrMaterial.subSurface.isTranslucencyEnabled = true;\n        // Since this extension models thin-surface transmission only, we must make the\n        // internal IOR == 1.0 and set the thickness to 0.\n        pbrMaterial.subSurface.volumeIndexOfRefraction = 1.0;\n        pbrMaterial.subSurface.minimumThickness = 0.0;\n        pbrMaterial.subSurface.maximumThickness = 0.0;\n        // Tint color will be used for transmission.\n        pbrMaterial.subSurface.useAlbedoToTintTranslucency = false;\n        if (extension.diffuseTransmissionFactor !== undefined) {\n            pbrMaterial.subSurface.translucencyIntensity = extension.diffuseTransmissionFactor;\n        }\n        else {\n            pbrMaterial.subSurface.translucencyIntensity = 0.0;\n            pbrMaterial.subSurface.isTranslucencyEnabled = false;\n            return Promise.resolve();\n        }\n        const promises = new Array();\n        pbrMaterial.subSurface.useGltfStyleTextures = true;\n        if (extension.diffuseTransmissionTexture) {\n            extension.diffuseTransmissionTexture.nonColorData = true;\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/diffuseTransmissionTexture`, extension.diffuseTransmissionTexture).then((texture) => {\n                texture.name = `${babylonMaterial.name} (Diffuse Transmission)`;\n                pbrMaterial.subSurface.translucencyIntensityTexture = texture;\n            }));\n        }\n        if (extension.diffuseTransmissionColorFactor !== undefined) {\n            pbrMaterial.subSurface.translucencyColor = Color3.FromArray(extension.diffuseTransmissionColorFactor);\n        }\n        else {\n            pbrMaterial.subSurface.translucencyColor = Color3.White();\n        }\n        if (extension.diffuseTransmissionColorTexture) {\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/diffuseTransmissionColorTexture`, extension.diffuseTransmissionColorTexture).then((texture) => {\n                texture.name = `${babylonMaterial.name} (Diffuse Transmission Color)`;\n                pbrMaterial.subSurface.translucencyColorTexture = texture;\n            }));\n        }\n        return Promise.all(promises).then(() => { });\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_diffuse_transmission(loader));\n//# sourceMappingURL=KHR_materials_diffuse_transmission.js.map"],"names":["NAME","KHR_materials_diffuse_transmission","constructor","loader","this","name","order","_loader","enabled","isExtensionUsed","parent","transparencyAsCoverage","dispose","loadMaterialPropertiesAsync","context","material","babylonMaterial","GLTFLoader","LoadExtensionAsync","async","extensionContext","extension","promises","Array","push","_loadTranslucentPropertiesAsync","Promise","all","then","PBRMaterial","Error","pbrMaterial","subSurface","isTranslucencyEnabled","volumeIndexOfRefraction","minimumThickness","maximumThickness","useAlbedoToTintTranslucency","undefined","diffuseTransmissionFactor","translucencyIntensity","resolve","useGltfStyleTextures","diffuseTransmissionTexture","nonColorData","loadTextureInfoAsync","texture","translucencyIntensityTexture","diffuseTransmissionColorFactor","translucencyColor","Color3","FromArray","White","diffuseTransmissionColorTexture","translucencyColorTexture","unregisterGLTFExtension","registerGLTFExtension"],"mappings":"wVAIA,MAAMA,EAAO,qCAMN,MAAMC,EAIT,WAAAC,CAAYC,GAIRC,KAAKC,KAAOL,EAIZI,KAAKE,MAAQ,IACbF,KAAKG,QAAUJ,EACfC,KAAKI,QAAUJ,KAAKG,QAAQE,gBAAgBT,GACxCI,KAAKI,UACLL,EAAOO,OAAOC,wBAAyB,EAEnD,CAEI,OAAAC,GACIR,KAAKG,QAAU,IACvB,CAKI,2BAAAM,CAA4BC,EAASC,EAAUC,GAC3C,OAAOC,EAAWC,mBAAmBJ,EAASC,EAAUX,KAAKC,MAAMc,MAAOC,EAAkBC,KACxF,MAAMC,EAAW,IAAIC,MAGrB,OAFAD,EAASE,KAAKpB,KAAKG,QAAQM,4BAA4BC,EAASC,EAAUC,IAC1EM,EAASE,KAAKpB,KAAKqB,gCAAgCL,EAAkBL,EAAUC,EAAiBK,UACnFK,QAAQC,IAAIL,GAAUM,MAAK,WAEpD,CAEI,+BAAAH,CAAgCX,EAASC,EAAUC,EAAiBK,GAChE,KAAML,aAA2Ba,GAC7B,MAAM,IAAIC,MAAM,GAAGhB,kCAEvB,MAAMiB,EAAcf,EAUpB,GARAe,EAAYC,WAAWC,uBAAwB,EAG/CF,EAAYC,WAAWE,wBAA0B,EACjDH,EAAYC,WAAWG,iBAAmB,EAC1CJ,EAAYC,WAAWI,iBAAmB,EAE1CL,EAAYC,WAAWK,6BAA8B,OACTC,IAAxCjB,EAAUkB,0BAMV,OAFAR,EAAYC,WAAWQ,sBAAwB,EAC/CT,EAAYC,WAAWC,uBAAwB,EACxCP,QAAQe,UALfV,EAAYC,WAAWQ,sBAAwBnB,EAAUkB,0BAO7D,MAAMjB,EAAW,IAAIC,MAqBrB,OApBAQ,EAAYC,WAAWU,sBAAuB,EAC1CrB,EAAUsB,6BACVtB,EAAUsB,2BAA2BC,cAAe,EACpDtB,EAASE,KAAKpB,KAAKG,QAAQsC,qBAAqB,GAAG/B,+BAAsCO,EAAUsB,4BAA4Bf,MAAMkB,IACjIA,EAAQzC,KAAO,GAAGW,EAAgBX,8BAClC0B,EAAYC,WAAWe,6BAA+BD,YAGbR,IAA7CjB,EAAU2B,+BACVjB,EAAYC,WAAWiB,kBAAoBC,EAAOC,UAAU9B,EAAU2B,gCAGtEjB,EAAYC,WAAWiB,kBAAoBC,EAAOE,QAElD/B,EAAUgC,iCACV/B,EAASE,KAAKpB,KAAKG,QAAQsC,qBAAqB,GAAG/B,oCAA2CO,EAAUgC,iCAAiCzB,MAAMkB,IAC3IA,EAAQzC,KAAO,GAAGW,EAAgBX,oCAClC0B,EAAYC,WAAWsB,yBAA2BR,MAGnDpB,QAAQC,IAAIL,GAAUM,MAAK,QAC1C,EAEA2B,EAAwBvD,GACxBwD,EAAsBxD,GAAM,GAAOG,GAAW,IAAIF,EAAmCE"}