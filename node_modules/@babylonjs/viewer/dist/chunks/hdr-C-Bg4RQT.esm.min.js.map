{"version":3,"file":"hdr-C-Bg4RQT.esm.min.js","sources":["../../../../../dev/core/dist/Misc/HighDynamicRange/panoramaToCubemap.js","../../../../../dev/core/dist/Misc/HighDynamicRange/hdr.js"],"sourcesContent":["import { Vector3 } from \"../../Maths/math.vector\";\nimport { Constants } from \"../../Engines/constants\";\n/**\n * Helper class useful to convert panorama picture to their cubemap representation in 6 faces.\n */\nexport class PanoramaToCubeMapTools {\n    /**\n     * Converts a panorama stored in RGB right to left up to down format into a cubemap (6 faces).\n     *\n     * @param float32Array The source data.\n     * @param inputWidth The width of the input panorama.\n     * @param inputHeight The height of the input panorama.\n     * @param size The willing size of the generated cubemap (each faces will be size * size pixels)\n     * @param supersample enable supersampling the cubemap\n     * @returns The cubemap data\n     */\n    static ConvertPanoramaToCubemap(float32Array, inputWidth, inputHeight, size, supersample = false) {\n        if (!float32Array) {\n            // eslint-disable-next-line no-throw-literal\n            throw \"ConvertPanoramaToCubemap: input cannot be null\";\n        }\n        if (float32Array.length != inputWidth * inputHeight * 3) {\n            // eslint-disable-next-line no-throw-literal\n            throw \"ConvertPanoramaToCubemap: input size is wrong\";\n        }\n        const textureFront = this.CreateCubemapTexture(size, this.FACE_FRONT, float32Array, inputWidth, inputHeight, supersample);\n        const textureBack = this.CreateCubemapTexture(size, this.FACE_BACK, float32Array, inputWidth, inputHeight, supersample);\n        const textureLeft = this.CreateCubemapTexture(size, this.FACE_LEFT, float32Array, inputWidth, inputHeight, supersample);\n        const textureRight = this.CreateCubemapTexture(size, this.FACE_RIGHT, float32Array, inputWidth, inputHeight, supersample);\n        const textureUp = this.CreateCubemapTexture(size, this.FACE_UP, float32Array, inputWidth, inputHeight, supersample);\n        const textureDown = this.CreateCubemapTexture(size, this.FACE_DOWN, float32Array, inputWidth, inputHeight, supersample);\n        return {\n            front: textureFront,\n            back: textureBack,\n            left: textureLeft,\n            right: textureRight,\n            up: textureUp,\n            down: textureDown,\n            size: size,\n            type: Constants.TEXTURETYPE_FLOAT,\n            format: Constants.TEXTUREFORMAT_RGB,\n            gammaSpace: false,\n        };\n    }\n    static CreateCubemapTexture(texSize, faceData, float32Array, inputWidth, inputHeight, supersample = false) {\n        const buffer = new ArrayBuffer(texSize * texSize * 4 * 3);\n        const textureArray = new Float32Array(buffer);\n        // If supersampling, determine number of samples needed when source texture width is divided for 4 cube faces\n        const samples = supersample ? Math.max(1, Math.round(inputWidth / 4 / texSize)) : 1;\n        const sampleFactor = 1 / samples;\n        const sampleFactorSqr = sampleFactor * sampleFactor;\n        const rotDX1 = faceData[1].subtract(faceData[0]).scale(sampleFactor / texSize);\n        const rotDX2 = faceData[3].subtract(faceData[2]).scale(sampleFactor / texSize);\n        const dy = 1 / texSize;\n        let fy = 0;\n        for (let y = 0; y < texSize; y++) {\n            for (let sy = 0; sy < samples; sy++) {\n                let xv1 = faceData[0];\n                let xv2 = faceData[2];\n                for (let x = 0; x < texSize; x++) {\n                    for (let sx = 0; sx < samples; sx++) {\n                        const v = xv2.subtract(xv1).scale(fy).add(xv1);\n                        v.normalize();\n                        const color = this.CalcProjectionSpherical(v, float32Array, inputWidth, inputHeight);\n                        // 3 channels per pixels\n                        textureArray[y * texSize * 3 + x * 3 + 0] += color.r * sampleFactorSqr;\n                        textureArray[y * texSize * 3 + x * 3 + 1] += color.g * sampleFactorSqr;\n                        textureArray[y * texSize * 3 + x * 3 + 2] += color.b * sampleFactorSqr;\n                        xv1 = xv1.add(rotDX1);\n                        xv2 = xv2.add(rotDX2);\n                    }\n                }\n                fy += dy * sampleFactor;\n            }\n        }\n        return textureArray;\n    }\n    static CalcProjectionSpherical(vDir, float32Array, inputWidth, inputHeight) {\n        let theta = Math.atan2(vDir.z, vDir.x);\n        const phi = Math.acos(vDir.y);\n        while (theta < -Math.PI) {\n            theta += 2 * Math.PI;\n        }\n        while (theta > Math.PI) {\n            theta -= 2 * Math.PI;\n        }\n        let dx = theta / Math.PI;\n        const dy = phi / Math.PI;\n        // recenter.\n        dx = dx * 0.5 + 0.5;\n        let px = Math.round(dx * inputWidth);\n        if (px < 0) {\n            px = 0;\n        }\n        else if (px >= inputWidth) {\n            px = inputWidth - 1;\n        }\n        let py = Math.round(dy * inputHeight);\n        if (py < 0) {\n            py = 0;\n        }\n        else if (py >= inputHeight) {\n            py = inputHeight - 1;\n        }\n        const inputY = inputHeight - py - 1;\n        const r = float32Array[inputY * inputWidth * 3 + px * 3 + 0];\n        const g = float32Array[inputY * inputWidth * 3 + px * 3 + 1];\n        const b = float32Array[inputY * inputWidth * 3 + px * 3 + 2];\n        return {\n            r: r,\n            g: g,\n            b: b,\n        };\n    }\n}\nPanoramaToCubeMapTools.FACE_LEFT = [new Vector3(-1.0, -1.0, -1.0), new Vector3(1.0, -1.0, -1.0), new Vector3(-1.0, 1.0, -1.0), new Vector3(1.0, 1.0, -1.0)];\nPanoramaToCubeMapTools.FACE_RIGHT = [new Vector3(1.0, -1.0, 1.0), new Vector3(-1.0, -1.0, 1.0), new Vector3(1.0, 1.0, 1.0), new Vector3(-1.0, 1.0, 1.0)];\nPanoramaToCubeMapTools.FACE_FRONT = [new Vector3(1.0, -1.0, -1.0), new Vector3(1.0, -1.0, 1.0), new Vector3(1.0, 1.0, -1.0), new Vector3(1.0, 1.0, 1.0)];\nPanoramaToCubeMapTools.FACE_BACK = [new Vector3(-1.0, -1.0, 1.0), new Vector3(-1.0, -1.0, -1.0), new Vector3(-1.0, 1.0, 1.0), new Vector3(-1.0, 1.0, -1.0)];\nPanoramaToCubeMapTools.FACE_DOWN = [new Vector3(1.0, 1.0, -1.0), new Vector3(1.0, 1.0, 1.0), new Vector3(-1.0, 1.0, -1.0), new Vector3(-1.0, 1.0, 1.0)];\nPanoramaToCubeMapTools.FACE_UP = [new Vector3(-1.0, -1.0, -1.0), new Vector3(-1.0, -1.0, 1.0), new Vector3(1.0, -1.0, -1.0), new Vector3(1.0, -1.0, 1.0)];\n//# sourceMappingURL=panoramaToCubemap.js.map","import { PanoramaToCubeMapTools } from \"./panoramaToCubemap\";\n/* This groups tools to convert HDR texture to native colors array. */\nfunction Ldexp(mantissa, exponent) {\n    if (exponent > 1023) {\n        return mantissa * Math.pow(2, 1023) * Math.pow(2, exponent - 1023);\n    }\n    if (exponent < -1074) {\n        return mantissa * Math.pow(2, -1074) * Math.pow(2, exponent + 1074);\n    }\n    return mantissa * Math.pow(2, exponent);\n}\nfunction Rgbe2float(float32array, red, green, blue, exponent, index) {\n    if (exponent > 0) {\n        /*nonzero pixel*/\n        exponent = Ldexp(1.0, exponent - (128 + 8));\n        float32array[index + 0] = red * exponent;\n        float32array[index + 1] = green * exponent;\n        float32array[index + 2] = blue * exponent;\n    }\n    else {\n        float32array[index + 0] = 0;\n        float32array[index + 1] = 0;\n        float32array[index + 2] = 0;\n    }\n}\nfunction ReadStringLine(uint8array, startIndex) {\n    let line = \"\";\n    let character = \"\";\n    for (let i = startIndex; i < uint8array.length - startIndex; i++) {\n        character = String.fromCharCode(uint8array[i]);\n        if (character == \"\\n\") {\n            break;\n        }\n        line += character;\n    }\n    return line;\n}\n/**\n * Reads header information from an RGBE texture stored in a native array.\n * More information on this format are available here:\n * https://en.wikipedia.org/wiki/RGBE_image_format\n *\n * @param uint8array The binary file stored in  native array.\n * @returns The header information.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function RGBE_ReadHeader(uint8array) {\n    let height = 0;\n    let width = 0;\n    let line = ReadStringLine(uint8array, 0);\n    if (line[0] != \"#\" || line[1] != \"?\") {\n        // eslint-disable-next-line no-throw-literal\n        throw \"Bad HDR Format.\";\n    }\n    let endOfHeader = false;\n    let findFormat = false;\n    let lineIndex = 0;\n    do {\n        lineIndex += line.length + 1;\n        line = ReadStringLine(uint8array, lineIndex);\n        if (line == \"FORMAT=32-bit_rle_rgbe\") {\n            findFormat = true;\n        }\n        else if (line.length == 0) {\n            endOfHeader = true;\n        }\n    } while (!endOfHeader);\n    if (!findFormat) {\n        // eslint-disable-next-line no-throw-literal\n        throw \"HDR Bad header format, unsupported FORMAT\";\n    }\n    lineIndex += line.length + 1;\n    line = ReadStringLine(uint8array, lineIndex);\n    const sizeRegexp = /^-Y (.*) \\+X (.*)$/g;\n    const match = sizeRegexp.exec(line);\n    // TODO. Support +Y and -X if needed.\n    if (!match || match.length < 3) {\n        // eslint-disable-next-line no-throw-literal\n        throw \"HDR Bad header format, no size\";\n    }\n    width = parseInt(match[2]);\n    height = parseInt(match[1]);\n    if (width < 8 || width > 0x7fff) {\n        // eslint-disable-next-line no-throw-literal\n        throw \"HDR Bad header format, unsupported size\";\n    }\n    lineIndex += line.length + 1;\n    return {\n        height: height,\n        width: width,\n        dataPosition: lineIndex,\n    };\n}\n/**\n * Returns the cubemap information (each faces texture data) extracted from an RGBE texture.\n * This RGBE texture needs to store the information as a panorama.\n *\n * More information on this format are available here:\n * https://en.wikipedia.org/wiki/RGBE_image_format\n *\n * @param buffer The binary file stored in an array buffer.\n * @param size The expected size of the extracted cubemap.\n * @param supersample enable supersampling the cubemap (default: false)\n * @returns The Cube Map information.\n */\nexport function GetCubeMapTextureData(buffer, size, supersample = false) {\n    const uint8array = new Uint8Array(buffer);\n    const hdrInfo = RGBE_ReadHeader(uint8array);\n    const data = RGBE_ReadPixels(uint8array, hdrInfo);\n    const cubeMapData = PanoramaToCubeMapTools.ConvertPanoramaToCubemap(data, hdrInfo.width, hdrInfo.height, size, supersample);\n    return cubeMapData;\n}\n/**\n * Returns the pixels data extracted from an RGBE texture.\n * This pixels will be stored left to right up to down in the R G B order in one array.\n *\n * More information on this format are available here:\n * https://en.wikipedia.org/wiki/RGBE_image_format\n *\n * @param uint8array The binary file stored in an array buffer.\n * @param hdrInfo The header information of the file.\n * @returns The pixels data in RGB right to left up to down order.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function RGBE_ReadPixels(uint8array, hdrInfo) {\n    return ReadRGBEPixelsRLE(uint8array, hdrInfo);\n}\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction ReadRGBEPixelsRLE(uint8array, hdrInfo) {\n    let numScanlines = hdrInfo.height;\n    const scanlineWidth = hdrInfo.width;\n    let a, b, c, d, count;\n    let dataIndex = hdrInfo.dataPosition;\n    let index = 0, endIndex = 0, i = 0;\n    const scanLineArrayBuffer = new ArrayBuffer(scanlineWidth * 4); // four channel R G B E\n    const scanLineArray = new Uint8Array(scanLineArrayBuffer);\n    // 3 channels of 4 bytes per pixel in float.\n    const resultBuffer = new ArrayBuffer(hdrInfo.width * hdrInfo.height * 4 * 3);\n    const resultArray = new Float32Array(resultBuffer);\n    // read in each successive scanline\n    while (numScanlines > 0) {\n        a = uint8array[dataIndex++];\n        b = uint8array[dataIndex++];\n        c = uint8array[dataIndex++];\n        d = uint8array[dataIndex++];\n        if (a != 2 || b != 2 || c & 0x80 || hdrInfo.width < 8 || hdrInfo.width > 32767) {\n            return ReadRGBEPixelsNotRLE(uint8array, hdrInfo);\n        }\n        if (((c << 8) | d) != scanlineWidth) {\n            // eslint-disable-next-line no-throw-literal\n            throw \"HDR Bad header format, wrong scan line width\";\n        }\n        index = 0;\n        // read each of the four channels for the scanline into the buffer\n        for (i = 0; i < 4; i++) {\n            endIndex = (i + 1) * scanlineWidth;\n            while (index < endIndex) {\n                a = uint8array[dataIndex++];\n                b = uint8array[dataIndex++];\n                if (a > 128) {\n                    // a run of the same value\n                    count = a - 128;\n                    if (count == 0 || count > endIndex - index) {\n                        // eslint-disable-next-line no-throw-literal\n                        throw \"HDR Bad Format, bad scanline data (run)\";\n                    }\n                    while (count-- > 0) {\n                        scanLineArray[index++] = b;\n                    }\n                }\n                else {\n                    // a non-run\n                    count = a;\n                    if (count == 0 || count > endIndex - index) {\n                        // eslint-disable-next-line no-throw-literal\n                        throw \"HDR Bad Format, bad scanline data (non-run)\";\n                    }\n                    scanLineArray[index++] = b;\n                    if (--count > 0) {\n                        for (let j = 0; j < count; j++) {\n                            scanLineArray[index++] = uint8array[dataIndex++];\n                        }\n                    }\n                }\n            }\n        }\n        // now convert data from buffer into floats\n        for (i = 0; i < scanlineWidth; i++) {\n            a = scanLineArray[i];\n            b = scanLineArray[i + scanlineWidth];\n            c = scanLineArray[i + 2 * scanlineWidth];\n            d = scanLineArray[i + 3 * scanlineWidth];\n            Rgbe2float(resultArray, a, b, c, d, (hdrInfo.height - numScanlines) * scanlineWidth * 3 + i * 3);\n        }\n        numScanlines--;\n    }\n    return resultArray;\n}\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction ReadRGBEPixelsNotRLE(uint8array, hdrInfo) {\n    // this file is not run length encoded\n    // read values sequentially\n    let numScanlines = hdrInfo.height;\n    const scanlineWidth = hdrInfo.width;\n    let a, b, c, d, i;\n    let dataIndex = hdrInfo.dataPosition;\n    // 3 channels of 4 bytes per pixel in float.\n    const resultBuffer = new ArrayBuffer(hdrInfo.width * hdrInfo.height * 4 * 3);\n    const resultArray = new Float32Array(resultBuffer);\n    // read in each successive scanline\n    while (numScanlines > 0) {\n        for (i = 0; i < hdrInfo.width; i++) {\n            a = uint8array[dataIndex++];\n            b = uint8array[dataIndex++];\n            c = uint8array[dataIndex++];\n            d = uint8array[dataIndex++];\n            Rgbe2float(resultArray, a, b, c, d, (hdrInfo.height - numScanlines) * scanlineWidth * 3 + i * 3);\n        }\n        numScanlines--;\n    }\n    return resultArray;\n}\n/**\n * @deprecated Use functions separately\n */\nexport const HDRTools = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    RGBE_ReadHeader,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    GetCubeMapTextureData,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    RGBE_ReadPixels,\n};\n//# sourceMappingURL=hdr.js.map"],"names":["PanoramaToCubeMapTools","ConvertPanoramaToCubemap","float32Array","inputWidth","inputHeight","size","supersample","length","front","this","CreateCubemapTexture","FACE_FRONT","back","FACE_BACK","left","FACE_LEFT","right","FACE_RIGHT","up","FACE_UP","down","FACE_DOWN","type","Constants","TEXTURETYPE_FLOAT","format","TEXTUREFORMAT_RGB","gammaSpace","texSize","faceData","buffer","ArrayBuffer","textureArray","Float32Array","samples","Math","max","round","sampleFactor","sampleFactorSqr","rotDX1","subtract","scale","rotDX2","dy","fy","y","sy","xv1","xv2","x","sx","v","add","normalize","color","CalcProjectionSpherical","r","g","b","vDir","theta","atan2","z","phi","acos","PI","dx","px","py","inputY","Rgbe2float","float32array","red","green","blue","exponent","index","mantissa","pow","Ldexp","ReadStringLine","uint8array","startIndex","line","character","i","String","fromCharCode","RGBE_ReadHeader","height","width","endOfHeader","findFormat","lineIndex","match","exec","parseInt","dataPosition","GetCubeMapTextureData","Uint8Array","hdrInfo","data","RGBE_ReadPixels","numScanlines","scanlineWidth","a","c","d","count","dataIndex","endIndex","scanLineArrayBuffer","scanLineArray","resultBuffer","resultArray","ReadRGBEPixelsNotRLE","j","ReadRGBEPixelsRLE","Vector3"],"mappings":"uDAKO,MAAMA,EAWT,+BAAOC,CAAyBC,EAAcC,EAAYC,EAAaC,EAAMC,GAAc,GACvF,IAAKJ,EAED,KAAM,iDAEV,GAAIA,EAAaK,QAAUJ,EAAaC,EAAc,EAElD,KAAM,gDAQV,MAAO,CACHI,MAPiBC,KAAKC,qBAAqBL,EAAMI,KAAKE,WAAYT,EAAcC,EAAYC,EAAaE,GAQzGM,KAPgBH,KAAKC,qBAAqBL,EAAMI,KAAKI,UAAWX,EAAcC,EAAYC,EAAaE,GAQvGQ,KAPgBL,KAAKC,qBAAqBL,EAAMI,KAAKM,UAAWb,EAAcC,EAAYC,EAAaE,GAQvGU,MAPiBP,KAAKC,qBAAqBL,EAAMI,KAAKQ,WAAYf,EAAcC,EAAYC,EAAaE,GAQzGY,GAPcT,KAAKC,qBAAqBL,EAAMI,KAAKU,QAASjB,EAAcC,EAAYC,EAAaE,GAQnGc,KAPgBX,KAAKC,qBAAqBL,EAAMI,KAAKY,UAAWnB,EAAcC,EAAYC,EAAaE,GAQvGD,KAAMA,EACNiB,KAAMC,EAAUC,kBAChBC,OAAQF,EAAUG,kBAClBC,YAAY,EAExB,CACI,2BAAOjB,CAAqBkB,EAASC,EAAU3B,EAAcC,EAAYC,EAAaE,GAAc,GAChG,MAAMwB,EAAS,IAAIC,YAAYH,EAAUA,EAAU,EAAI,GACjDI,EAAe,IAAIC,aAAaH,GAEhCI,EAAU5B,EAAc6B,KAAKC,IAAI,EAAGD,KAAKE,MAAMlC,EAAa,EAAIyB,IAAY,EAC5EU,EAAe,EAAIJ,EACnBK,EAAkBD,EAAeA,EACjCE,EAASX,EAAS,GAAGY,SAASZ,EAAS,IAAIa,MAAMJ,EAAeV,GAChEe,EAASd,EAAS,GAAGY,SAASZ,EAAS,IAAIa,MAAMJ,EAAeV,GAChEgB,EAAK,EAAIhB,EACf,IAAIiB,EAAK,EACT,IAAK,IAAIC,EAAI,EAAGA,EAAIlB,EAASkB,IACzB,IAAK,IAAIC,EAAK,EAAGA,EAAKb,EAASa,IAAM,CACjC,IAAIC,EAAMnB,EAAS,GACfoB,EAAMpB,EAAS,GACnB,IAAK,IAAIqB,EAAI,EAAGA,EAAItB,EAASsB,IACzB,IAAK,IAAIC,EAAK,EAAGA,EAAKjB,EAASiB,IAAM,CACjC,MAAMC,EAAIH,EAAIR,SAASO,GAAKN,MAAMG,GAAIQ,IAAIL,GAC1CI,EAAEE,YACF,MAAMC,EAAQ9C,KAAK+C,wBAAwBJ,EAAGlD,EAAcC,EAAYC,GAExE4B,EAAac,EAAIlB,EAAU,EAAQ,EAAJsB,EAAQ,IAAMK,EAAME,EAAIlB,EACvDP,EAAac,EAAIlB,EAAU,EAAQ,EAAJsB,EAAQ,IAAMK,EAAMG,EAAInB,EACvDP,EAAac,EAAIlB,EAAU,EAAQ,EAAJsB,EAAQ,IAAMK,EAAMI,EAAIpB,EACvDS,EAAMA,EAAIK,IAAIb,GACdS,EAAMA,EAAII,IAAIV,EACtC,CAEgBE,GAAMD,EAAKN,CAC3B,CAEQ,OAAON,CACf,CACI,8BAAOwB,CAAwBI,EAAM1D,EAAcC,EAAYC,GAC3D,IAAIyD,EAAQ1B,KAAK2B,MAAMF,EAAKG,EAAGH,EAAKV,GACpC,MAAMc,EAAM7B,KAAK8B,KAAKL,EAAKd,GAC3B,KAAOe,GAAS1B,KAAK+B,IACjBL,GAAS,EAAI1B,KAAK+B,GAEtB,KAAOL,EAAQ1B,KAAK+B,IAChBL,GAAS,EAAI1B,KAAK+B,GAEtB,IAAIC,EAAKN,EAAQ1B,KAAK+B,GACtB,MAAMtB,EAAKoB,EAAM7B,KAAK+B,GAEtBC,EAAU,GAALA,EAAW,GAChB,IAAIC,EAAKjC,KAAKE,MAAM8B,EAAKhE,GACrBiE,EAAK,EACLA,EAAK,EAEAA,GAAMjE,IACXiE,EAAKjE,EAAa,GAEtB,IAAIkE,EAAKlC,KAAKE,MAAMO,EAAKxC,GACrBiE,EAAK,EACLA,EAAK,EAEAA,GAAMjE,IACXiE,EAAKjE,EAAc,GAEvB,MAAMkE,EAASlE,EAAciE,EAAK,EAIlC,MAAO,CACHZ,EAJMvD,EAAaoE,EAASnE,EAAa,EAAS,EAALiE,EAAS,GAKtDV,EAJMxD,EAAaoE,EAASnE,EAAa,EAAS,EAALiE,EAAS,GAKtDT,EAJMzD,EAAaoE,EAASnE,EAAa,EAAS,EAALiE,EAAS,GAMlE,ECtGA,SAASG,EAAWC,EAAcC,EAAKC,EAAOC,EAAMC,EAAUC,GACtDD,EAAW,GAEXA,EAZR,SAAeE,EAAUF,GACrB,OAAIA,EAAW,KACJE,EAAW3C,KAAK4C,IAAI,EAAG,MAAQ5C,KAAK4C,IAAI,EAAGH,EAAW,MAE7DA,GAAW,KACJE,EAAW3C,KAAK4C,IAAI,GAAG,MAAS5C,KAAK4C,IAAI,EAAGH,EAAW,MAE3DE,EAAW3C,KAAK4C,IAAI,EAAGH,EAClC,CAImBI,CAAM,EAAKJ,EAAQ,KAC9BJ,EAAaK,EAAQ,GAAKJ,EAAMG,EAChCJ,EAAaK,EAAQ,GAAKH,EAAQE,EAClCJ,EAAaK,EAAQ,GAAKF,EAAOC,IAGjCJ,EAAaK,EAAQ,GAAK,EAC1BL,EAAaK,EAAQ,GAAK,EAC1BL,EAAaK,EAAQ,GAAK,EAElC,CACA,SAASI,EAAeC,EAAYC,GAChC,IAAIC,EAAO,GACPC,EAAY,GAChB,IAAK,IAAIC,EAAIH,EAAYG,EAAIJ,EAAW3E,OAAS4E,IAC7CE,EAAYE,OAAOC,aAAaN,EAAWI,IAC1B,MAAbD,GAFqDC,IAKzDF,GAAQC,EAEZ,OAAOD,CACX,CAUO,SAASK,EAAgBP,GAC5B,IAAIQ,EAAS,EACTC,EAAQ,EACRP,EAAOH,EAAeC,EAAY,GACtC,GAAe,KAAXE,EAAK,IAAwB,KAAXA,EAAK,GAEvB,KAAM,kBAEV,IAAIQ,GAAc,EACdC,GAAa,EACbC,EAAY,EAChB,GACIA,GAAaV,EAAK7E,OAAS,EAC3B6E,EAAOH,EAAeC,EAAYY,GACtB,0BAARV,EACAS,GAAa,EAEO,GAAfT,EAAK7E,SACVqF,GAAc,UAEZA,GACV,IAAKC,EAED,KAAM,4CAEVC,GAAaV,EAAK7E,OAAS,EAC3B6E,EAAOH,EAAeC,EAAYY,GAClC,MACMC,EADa,sBACMC,KAAKZ,GAE9B,IAAKW,GAASA,EAAMxF,OAAS,EAEzB,KAAM,iCAIV,GAFAoF,EAAQM,SAASF,EAAM,IACvBL,EAASO,SAASF,EAAM,IACpBJ,EAAQ,GAAKA,EAAQ,MAErB,KAAM,0CAGV,OADAG,GAAaV,EAAK7E,OAAS,EACpB,CACHmF,OAAQA,EACRC,MAAOA,EACPO,aAAcJ,EAEtB,CAaO,SAASK,EAAsBrE,EAAQzB,EAAMC,GAAc,GAC9D,MAAM4E,EAAa,IAAIkB,WAAWtE,GAC5BuE,EAAUZ,EAAgBP,GAC1BoB,EAAOC,EAAgBrB,EAAYmB,GAEzC,OADoBrG,EAAuBC,yBAAyBqG,EAAMD,EAAQV,MAAOU,EAAQX,OAAQrF,EAAMC,EAEnH,CAaO,SAASiG,EAAgBrB,EAAYmB,GACxC,OAGJ,SAA2BnB,EAAYmB,GACnC,IAAIG,EAAeH,EAAQX,OAC3B,MAAMe,EAAgBJ,EAAQV,MAC9B,IAAIe,EAAG/C,EAAGgD,EAAGC,EAAGC,EACZC,EAAYT,EAAQH,aACpBrB,EAAQ,EAAGkC,EAAW,EAAGzB,EAAI,EACjC,MAAM0B,EAAsB,IAAIjF,YAA4B,EAAhB0E,GACtCQ,EAAgB,IAAIb,WAAWY,GAE/BE,EAAe,IAAInF,YAAYsE,EAAQV,MAAQU,EAAQX,OAAS,EAAI,GACpEyB,EAAc,IAAIlF,aAAaiF,GAErC,KAAOV,EAAe,GAAG,CAKrB,GAJAE,EAAIxB,EAAW4B,KACfnD,EAAIuB,EAAW4B,KACfH,EAAIzB,EAAW4B,KACfF,EAAI1B,EAAW4B,KACN,GAALJ,GAAe,GAAL/C,GAAc,IAAJgD,GAAYN,EAAQV,MAAQ,GAAKU,EAAQV,MAAQ,MACrE,OAAOyB,EAAqBlC,EAAYmB,GAE5C,IAAMM,GAAK,EAAKC,IAAMH,EAElB,KAAM,+CAIV,IAFA5B,EAAQ,EAEHS,EAAI,EAAGA,EAAI,EAAGA,IAEf,IADAyB,GAAYzB,EAAI,GAAKmB,EACd5B,EAAQkC,GAGX,GAFAL,EAAIxB,EAAW4B,KACfnD,EAAIuB,EAAW4B,KACXJ,EAAI,IAAK,CAGT,GADAG,EAAQH,EAAI,IACC,GAATG,GAAcA,EAAQE,EAAWlC,EAEjC,KAAM,0CAEV,KAAOgC,KAAU,GACbI,EAAcpC,KAAWlB,CAEjD,KACqB,CAGD,GADAkD,EAAQH,EACK,GAATG,GAAcA,EAAQE,EAAWlC,EAEjC,KAAM,8CAGV,GADAoC,EAAcpC,KAAWlB,IACnBkD,EAAQ,EACV,IAAK,IAAIQ,EAAI,EAAGA,EAAIR,EAAOQ,IACvBJ,EAAcpC,KAAWK,EAAW4B,IAGhE,CAIQ,IAAKxB,EAAI,EAAGA,EAAImB,EAAenB,IAC3BoB,EAAIO,EAAc3B,GAClB3B,EAAIsD,EAAc3B,EAAImB,GACtBE,EAAIM,EAAc3B,EAAI,EAAImB,GAC1BG,EAAIK,EAAc3B,EAAI,EAAImB,GAC1BlC,EAAW4C,EAAaT,EAAG/C,EAAGgD,EAAGC,GAAIP,EAAQX,OAASc,GAAgBC,EAAgB,EAAQ,EAAJnB,GAE9FkB,GACR,CACI,OAAOW,CACX,CAxEWG,CAAkBpC,EAAYmB,EACzC,CAyEA,SAASe,EAAqBlC,EAAYmB,GAGtC,IAAIG,EAAeH,EAAQX,OAC3B,MAAMe,EAAgBJ,EAAQV,MAC9B,IAAIe,EAAG/C,EAAGgD,EAAGC,EAAGtB,EACZwB,EAAYT,EAAQH,aAExB,MAAMgB,EAAe,IAAInF,YAAYsE,EAAQV,MAAQU,EAAQX,OAAS,EAAI,GACpEyB,EAAc,IAAIlF,aAAaiF,GAErC,KAAOV,EAAe,GAAG,CACrB,IAAKlB,EAAI,EAAGA,EAAIe,EAAQV,MAAOL,IAC3BoB,EAAIxB,EAAW4B,KACfnD,EAAIuB,EAAW4B,KACfH,EAAIzB,EAAW4B,KACfF,EAAI1B,EAAW4B,KACfvC,EAAW4C,EAAaT,EAAG/C,EAAGgD,EAAGC,GAAIP,EAAQX,OAASc,GAAgBC,EAAgB,EAAQ,EAAJnB,GAE9FkB,GACR,CACI,OAAOW,CACX,CD1GAnH,EAAuBe,UAAY,CAAC,IAAIwG,GAAY,MAAQ,GAAO,IAAIA,EAAQ,GAAS,MAAS,IAAIA,KAAc,GAAS,GAAG,IAAIA,EAAQ,EAAK,GAAK,IACrJvH,EAAuBiB,WAAa,CAAC,IAAIsG,EAAQ,KAAW,GAAM,IAAIA,GAAQ,GAAU,EAAE,GAAM,IAAIA,EAAQ,EAAK,EAAK,GAAM,IAAIA,GAAY,EAAE,EAAK,IACnJvH,EAAuBW,WAAa,CAAC,IAAI4G,EAAQ,MAAW,GAAO,IAAIA,EAAQ,GAAS,EAAE,GAAM,IAAIA,EAAQ,EAAK,GAAS,GAAG,IAAIA,EAAQ,EAAK,EAAK,IACnJvH,EAAuBa,UAAY,CAAC,IAAI0G,GAAY,KAAQ,GAAM,IAAIA,GAAQ,GAAU,MAAS,IAAIA,KAAc,EAAK,GAAM,IAAIA,GAAY,EAAE,GAAK,IACrJvH,EAAuBqB,UAAY,CAAC,IAAIkG,EAAQ,EAAK,GAAK,GAAO,IAAIA,EAAQ,EAAK,EAAK,GAAM,IAAIA,KAAc,GAAS,GAAG,IAAIA,GAAY,EAAE,EAAK,IAClJvH,EAAuBmB,QAAU,CAAC,IAAIoG,GAAY,MAAQ,GAAO,IAAIA,GAAQ,GAAU,EAAE,GAAM,IAAIA,EAAQ,GAAK,GAAU,GAAG,IAAIA,EAAQ,KAAW"}