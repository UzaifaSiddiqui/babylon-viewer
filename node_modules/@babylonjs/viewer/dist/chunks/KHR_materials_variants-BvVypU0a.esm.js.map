{"version":3,"file":"KHR_materials_variants-BvVypU0a.esm.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/Extensions/KHR_materials_variants.js"],"sourcesContent":["import { GLTFLoader, ArrayItem } from \"../glTFLoader\";\nimport { Mesh } from \"core/Meshes/mesh\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nconst NAME = \"KHR_materials_variants\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_variants/README.md)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_variants {\n    /**\n     * @internal\n     */\n    constructor(loader) {\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n    /** @internal */\n    dispose() {\n        this._loader = null;\n    }\n    /**\n     * Gets the list of available variant names for this asset.\n     * @param rootNode The glTF root node\n     * @returns the list of all the variant names for this model\n     */\n    static GetAvailableVariants(rootNode) {\n        const extensionMetadata = this._GetExtensionMetadata(rootNode);\n        if (!extensionMetadata) {\n            return [];\n        }\n        return Object.keys(extensionMetadata.variants);\n    }\n    /**\n     * Gets the list of available variant names for this asset.\n     * @param rootNode The glTF root node\n     * @returns the list of all the variant names for this model\n     */\n    getAvailableVariants(rootNode) {\n        return KHR_materials_variants.GetAvailableVariants(rootNode);\n    }\n    /**\n     * Select a variant given a variant name or a list of variant names.\n     * @param rootNode The glTF root node\n     * @param variantName The variant name(s) to select.\n     */\n    static SelectVariant(rootNode, variantName) {\n        const extensionMetadata = this._GetExtensionMetadata(rootNode);\n        if (!extensionMetadata) {\n            throw new Error(`Cannot select variant on a glTF mesh that does not have the ${NAME} extension`);\n        }\n        const select = (variantName) => {\n            const entries = extensionMetadata.variants[variantName];\n            if (entries) {\n                for (const entry of entries) {\n                    entry.mesh.material = entry.material;\n                }\n            }\n        };\n        if (variantName instanceof Array) {\n            for (const name of variantName) {\n                select(name);\n            }\n        }\n        else {\n            select(variantName);\n        }\n        extensionMetadata.lastSelected = variantName;\n    }\n    /**\n     * Select a variant given a variant name or a list of variant names.\n     * @param rootNode The glTF root node\n     * @param variantName The variant name(s) to select.\n     */\n    selectVariant(rootNode, variantName) {\n        KHR_materials_variants.SelectVariant(rootNode, variantName);\n    }\n    /**\n     * Reset back to the original before selecting a variant.\n     * @param rootNode The glTF root node\n     */\n    static Reset(rootNode) {\n        const extensionMetadata = this._GetExtensionMetadata(rootNode);\n        if (!extensionMetadata) {\n            throw new Error(`Cannot reset on a glTF mesh that does not have the ${NAME} extension`);\n        }\n        for (const entry of extensionMetadata.original) {\n            entry.mesh.material = entry.material;\n        }\n        extensionMetadata.lastSelected = null;\n    }\n    /**\n     * Reset back to the original before selecting a variant.\n     * @param rootNode The glTF root node\n     */\n    reset(rootNode) {\n        KHR_materials_variants.Reset(rootNode);\n    }\n    /**\n     * Gets the last selected variant name(s) or null if original.\n     * @param rootNode The glTF root node\n     * @returns The selected variant name(s).\n     */\n    static GetLastSelectedVariant(rootNode) {\n        const extensionMetadata = this._GetExtensionMetadata(rootNode);\n        if (!extensionMetadata) {\n            throw new Error(`Cannot get the last selected variant on a glTF mesh that does not have the ${NAME} extension`);\n        }\n        return extensionMetadata.lastSelected;\n    }\n    /**\n     * Gets the last selected variant name(s) or null if original.\n     * @param rootNode The glTF root node\n     * @returns The selected variant name(s).\n     */\n    getLastSelectedVariant(rootNode) {\n        return KHR_materials_variants.GetLastSelectedVariant(rootNode);\n    }\n    static _GetExtensionMetadata(rootNode) {\n        return rootNode?._internalMetadata?.gltf?.[NAME] || null;\n    }\n    /** @internal */\n    onLoading() {\n        const extensions = this._loader.gltf.extensions;\n        if (extensions && extensions[this.name]) {\n            const extension = extensions[this.name];\n            this._variants = extension.variants;\n        }\n    }\n    /** @internal */\n    onReady() {\n        const rootNode = this._loader.rootBabylonMesh;\n        if (rootNode) {\n            const options = this._loader.parent.extensionOptions[NAME];\n            if (options?.defaultVariant) {\n                KHR_materials_variants.SelectVariant(rootNode, options.defaultVariant);\n            }\n            options?.onLoaded?.({\n                get variants() {\n                    return KHR_materials_variants.GetAvailableVariants(rootNode);\n                },\n                get selectedVariant() {\n                    const lastSelectedVariant = KHR_materials_variants.GetLastSelectedVariant(rootNode);\n                    if (!lastSelectedVariant) {\n                        return KHR_materials_variants.GetAvailableVariants(rootNode)[0];\n                    }\n                    if (Array.isArray(lastSelectedVariant)) {\n                        return lastSelectedVariant[0];\n                    }\n                    return lastSelectedVariant;\n                },\n                set selectedVariant(variantName) {\n                    KHR_materials_variants.SelectVariant(rootNode, variantName);\n                },\n            });\n        }\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line no-restricted-syntax\n    _loadMeshPrimitiveAsync(context, name, node, mesh, primitive, assign) {\n        return GLTFLoader.LoadExtensionAsync(context, primitive, this.name, async (extensionContext, extension) => {\n            const promises = new Array();\n            promises.push(this._loader._loadMeshPrimitiveAsync(context, name, node, mesh, primitive, (babylonMesh) => {\n                assign(babylonMesh);\n                if (babylonMesh instanceof Mesh) {\n                    const babylonDrawMode = GLTFLoader._GetDrawMode(context, primitive.mode);\n                    const root = this._loader.rootBabylonMesh;\n                    const metadata = root ? (root._internalMetadata = root._internalMetadata || {}) : {};\n                    const gltf = (metadata.gltf = metadata.gltf || {});\n                    const extensionMetadata = (gltf[NAME] = gltf[NAME] || { lastSelected: null, original: [], variants: {} });\n                    // Store the original material.\n                    extensionMetadata.original.push({ mesh: babylonMesh, material: babylonMesh.material });\n                    // For each mapping, look at the variants and make a new entry for them.\n                    for (let mappingIndex = 0; mappingIndex < extension.mappings.length; ++mappingIndex) {\n                        const mapping = extension.mappings[mappingIndex];\n                        const material = ArrayItem.Get(`${extensionContext}/mappings/${mappingIndex}/material`, this._loader.gltf.materials, mapping.material);\n                        promises.push(this._loader._loadMaterialAsync(`#/materials/${mapping.material}`, material, babylonMesh, babylonDrawMode, (babylonMaterial) => {\n                            for (let mappingVariantIndex = 0; mappingVariantIndex < mapping.variants.length; ++mappingVariantIndex) {\n                                const variantIndex = mapping.variants[mappingVariantIndex];\n                                const variant = ArrayItem.Get(`/extensions/${NAME}/variants/${variantIndex}`, this._variants, variantIndex);\n                                extensionMetadata.variants[variant.name] = extensionMetadata.variants[variant.name] || [];\n                                extensionMetadata.variants[variant.name].push({\n                                    mesh: babylonMesh,\n                                    material: babylonMaterial,\n                                });\n                                // Replace the target when original mesh is cloned\n                                babylonMesh.onClonedObservable.add((newOne) => {\n                                    const newMesh = newOne;\n                                    let metadata = null;\n                                    let newRoot = newMesh;\n                                    // Find root to get medata\n                                    do {\n                                        newRoot = newRoot.parent;\n                                        if (!newRoot) {\n                                            return;\n                                        }\n                                        metadata = KHR_materials_variants._GetExtensionMetadata(newRoot);\n                                    } while (metadata === null);\n                                    // Need to clone the metadata on the root (first time only)\n                                    if (root && metadata === KHR_materials_variants._GetExtensionMetadata(root)) {\n                                        // Copy main metadata\n                                        newRoot._internalMetadata = {};\n                                        for (const key in root._internalMetadata) {\n                                            newRoot._internalMetadata[key] = root._internalMetadata[key];\n                                        }\n                                        // Copy the gltf metadata\n                                        newRoot._internalMetadata.gltf = [];\n                                        for (const key in root._internalMetadata.gltf) {\n                                            newRoot._internalMetadata.gltf[key] = root._internalMetadata.gltf[key];\n                                        }\n                                        // Duplicate the extension specific metadata\n                                        newRoot._internalMetadata.gltf[NAME] = { lastSelected: null, original: [], variants: {} };\n                                        for (const original of metadata.original) {\n                                            newRoot._internalMetadata.gltf[NAME].original.push({\n                                                mesh: original.mesh,\n                                                material: original.material,\n                                            });\n                                        }\n                                        for (const key in metadata.variants) {\n                                            if (Object.prototype.hasOwnProperty.call(metadata.variants, key)) {\n                                                newRoot._internalMetadata.gltf[NAME].variants[key] = [];\n                                                for (const variantEntry of metadata.variants[key]) {\n                                                    newRoot._internalMetadata.gltf[NAME].variants[key].push({\n                                                        mesh: variantEntry.mesh,\n                                                        material: variantEntry.material,\n                                                    });\n                                                }\n                                            }\n                                        }\n                                        metadata = newRoot._internalMetadata.gltf[NAME];\n                                    }\n                                    // Relocate\n                                    for (const target of metadata.original) {\n                                        if (target.mesh === babylonMesh) {\n                                            target.mesh = newMesh;\n                                        }\n                                    }\n                                    for (const target of metadata.variants[variant.name]) {\n                                        if (target.mesh === babylonMesh) {\n                                            target.mesh = newMesh;\n                                        }\n                                    }\n                                });\n                            }\n                        }));\n                    }\n                }\n            }));\n            // eslint-disable-next-line github/no-then\n            return await Promise.all(promises).then(([babylonMesh]) => {\n                return babylonMesh;\n            });\n        });\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_variants(loader));\n//# sourceMappingURL=KHR_materials_variants.js.map"],"names":[],"mappings":"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"}