import{S as e}from"./index-VvGulz6u.esm.min.js";import"./helperFunctions-CuRd8cqg.esm.min.js";const n="iblScaledLuminancePixelShader",i="precision highp sampler2D;precision highp samplerCube;\n#include<helperFunctions>\nvarying vec2 vUV;\n#ifdef IBL_USE_CUBE_MAP\nuniform samplerCube iblSource;\n#else\nuniform sampler2D iblSource;\n#endif\nuniform int iblWidth;uniform int iblHeight;float fetchLuminance(vec2 coords) {\n#ifdef IBL_USE_CUBE_MAP\nvec3 direction=equirectangularToCubemapDirection(coords);vec3 color=textureCubeLodEXT(iblSource,direction,0.0).rgb;\n#else\nvec3 color=textureLod(iblSource,coords,0.0).rgb;\n#endif\nreturn dot(color,LuminanceEncodeApprox);}\nvoid main(void) {float deform=sin(vUV.y*PI);float luminance=fetchLuminance(vUV);gl_FragColor=vec4(vec3(deform*luminance),1.0);}";e.ShadersStore[n]||(e.ShadersStore[n]=i);const o={name:n,shader:i};export{o as iblScaledLuminancePixelShader};
//# sourceMappingURL=iblScaledLuminance.fragment-Bk_n5YiR.esm.min.js.map
