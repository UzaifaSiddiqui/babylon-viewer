{"version":3,"file":"KHR_interactivity-B2ikxW0Z.esm.js","sources":["../../../../../dev/core/dist/FlowGraph/serialization.js","../../../../../dev/core/dist/FlowGraph/flowGraphAssetsContext.js","../../../../../dev/core/dist/FlowGraph/flowGraphLogger.js","../../../../../dev/core/dist/FlowGraph/flowGraphContext.js","../../../../../dev/core/dist/FlowGraph/flowGraphConnection.js","../../../../../dev/core/dist/FlowGraph/flowGraphDataConnection.js","../../../../../dev/core/dist/FlowGraph/flowGraphBlock.js","../../../../../dev/core/dist/FlowGraph/flowGraphSignalConnection.js","../../../../../dev/core/dist/FlowGraph/flowGraphExecutionBlock.js","../../../../../dev/core/dist/FlowGraph/flowGraphSceneEventCoordinator.js","../../../../../dev/core/dist/FlowGraph/utils.js","../../../../../dev/core/dist/FlowGraph/flowGraph.js","../../../../../dev/core/dist/FlowGraph/flowGraphCoordinator.js","../../../../../dev/core/dist/FlowGraph/Blocks/flowGraphBlockFactory.js","../../../../../dev/core/dist/FlowGraph/flowGraphExecutionBlockWithOutSignal.js","../../../../../dev/core/dist/FlowGraph/flowGraphAsyncExecutionBlock.js","../../../../../dev/core/dist/FlowGraph/flowGraphEventBlock.js","../../../../../dev/core/dist/FlowGraph/flowGraphParser.js","../../../../../dev/loaders/dist/glTF/2.0/Extensions/KHR_interactivity/interactivityGraphParser.js","../../../../../dev/loaders/dist/glTF/2.0/Extensions/KHR_interactivity.js"],"sourcesContent":["import { Color3, Color4 } from \"../Maths/math.color\";\nimport { Matrix, Quaternion, Vector2, Vector3, Vector4 } from \"../Maths/math.vector\";\nimport { FlowGraphInteger } from \"./CustomTypes/flowGraphInteger\";\nimport { getRichTypeByFlowGraphType } from \"./flowGraphRichTypes\";\nimport { FlowGraphMatrix2D, FlowGraphMatrix3D } from \"./CustomTypes/flowGraphMatrix\";\nfunction IsMeshClassName(className) {\n    return (className === \"Mesh\" ||\n        className === \"AbstractMesh\" ||\n        className === \"GroundMesh\" ||\n        className === \"InstanceMesh\" ||\n        className === \"LinesMesh\" ||\n        className === \"GoldbergMesh\" ||\n        className === \"GreasedLineMesh\" ||\n        className === \"TrailMesh\");\n}\nfunction IsVectorClassName(className) {\n    return (className === \"Vector2\" /* FlowGraphTypes.Vector2 */ ||\n        className === \"Vector3\" /* FlowGraphTypes.Vector3 */ ||\n        className === \"Vector4\" /* FlowGraphTypes.Vector4 */ ||\n        className === \"Quaternion\" /* FlowGraphTypes.Quaternion */ ||\n        className === \"Color3\" /* FlowGraphTypes.Color3 */ ||\n        className === \"Color4\" /* FlowGraphTypes.Color4 */);\n}\nfunction IsMatrixClassName(className) {\n    return className === \"Matrix\" /* FlowGraphTypes.Matrix */ || className === \"Matrix2D\" /* FlowGraphTypes.Matrix2D */ || className === \"Matrix3D\" /* FlowGraphTypes.Matrix3D */;\n}\nfunction IsAnimationGroupClassName(className) {\n    return className === \"AnimationGroup\";\n}\nfunction ParseVector(className, value, flipHandedness = false) {\n    if (className === \"Vector2\" /* FlowGraphTypes.Vector2 */) {\n        return Vector2.FromArray(value);\n    }\n    else if (className === \"Vector3\" /* FlowGraphTypes.Vector3 */) {\n        if (flipHandedness) {\n            value[2] *= -1;\n        }\n        return Vector3.FromArray(value);\n    }\n    else if (className === \"Vector4\" /* FlowGraphTypes.Vector4 */) {\n        return Vector4.FromArray(value);\n    }\n    else if (className === \"Quaternion\" /* FlowGraphTypes.Quaternion */) {\n        if (flipHandedness) {\n            value[2] *= -1;\n            value[3] *= -1;\n        }\n        return Quaternion.FromArray(value);\n    }\n    else if (className === \"Color3\" /* FlowGraphTypes.Color3 */) {\n        return new Color3(value[0], value[1], value[2]);\n    }\n    else if (className === \"Color4\" /* FlowGraphTypes.Color4 */) {\n        return new Color4(value[0], value[1], value[2], value[3]);\n    }\n    else {\n        throw new Error(`Unknown vector class name ${className}`);\n    }\n}\n/**\n * The default function that serializes values in a context object to a serialization object\n * @param key the key where the value should be stored in the serialization object\n * @param value the value to store\n * @param serializationObject the object where the value will be stored\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function defaultValueSerializationFunction(key, value, serializationObject) {\n    const className = value?.getClassName?.() ?? \"\";\n    if (IsVectorClassName(className) || IsMatrixClassName(className)) {\n        serializationObject[key] = {\n            value: value.asArray(),\n            className,\n        };\n    }\n    else if (className === \"FlowGraphInteger\" /* FlowGraphTypes.Integer */) {\n        serializationObject[key] = {\n            value: value.value,\n            className,\n        };\n    }\n    else {\n        if (className && (value.id || value.name)) {\n            serializationObject[key] = {\n                id: value.id,\n                name: value.name,\n                className,\n            };\n        }\n        else {\n            // only if it is not an object\n            if (typeof value !== \"object\") {\n                serializationObject[key] = value;\n            }\n            else {\n                throw new Error(`Could not serialize value ${value}`);\n            }\n        }\n    }\n}\n/**\n * The default function that parses values stored in a serialization object\n * @param key the key to the value that will be parsed\n * @param serializationObject the object that will be parsed\n * @param assetsContainer the assets container that will be used to find the objects\n * @param scene\n * @returns\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function defaultValueParseFunction(key, serializationObject, assetsContainer, scene) {\n    const intermediateValue = serializationObject[key];\n    let finalValue;\n    const className = intermediateValue?.type ?? intermediateValue?.className;\n    if (IsMeshClassName(className)) {\n        let nodes = scene.meshes.filter((m) => (intermediateValue.id ? m.id === intermediateValue.id : m.name === intermediateValue.name));\n        if (nodes.length === 0) {\n            nodes = scene.transformNodes.filter((m) => (intermediateValue.id ? m.id === intermediateValue.id : m.name === intermediateValue.name));\n        }\n        finalValue = intermediateValue.uniqueId ? nodes.find((m) => m.uniqueId === intermediateValue.uniqueId) : nodes[0];\n    }\n    else if (IsVectorClassName(className)) {\n        finalValue = ParseVector(className, intermediateValue.value);\n    }\n    else if (IsAnimationGroupClassName(className)) {\n        // do not use the scene.getAnimationGroupByName because it is possible that two AGs will have the same name\n        const ags = scene.animationGroups.filter((ag) => ag.name === intermediateValue.name);\n        // uniqueId changes on each load. this is used for the glTF loader, that uses serialization after the scene was loaded.\n        finalValue = ags.length === 1 ? ags[0] : ags.find((ag) => ag.uniqueId === intermediateValue.uniqueId);\n    }\n    else if (className === \"Matrix\" /* FlowGraphTypes.Matrix */) {\n        finalValue = Matrix.FromArray(intermediateValue.value);\n    }\n    else if (className === \"Matrix2D\" /* FlowGraphTypes.Matrix2D */) {\n        finalValue = new FlowGraphMatrix2D(intermediateValue.value);\n    }\n    else if (className === \"Matrix3D\" /* FlowGraphTypes.Matrix3D */) {\n        finalValue = new FlowGraphMatrix3D(intermediateValue.value);\n    }\n    else if (className === \"FlowGraphInteger\" /* FlowGraphTypes.Integer */) {\n        finalValue = FlowGraphInteger.FromValue(intermediateValue.value);\n    }\n    else if (className === \"number\" /* FlowGraphTypes.Number */ || className === \"string\" /* FlowGraphTypes.String */ || className === \"boolean\" /* FlowGraphTypes.Boolean */) {\n        finalValue = intermediateValue.value[0];\n    }\n    else if (intermediateValue && intermediateValue.value !== undefined) {\n        finalValue = intermediateValue.value;\n    }\n    else {\n        if (Array.isArray(intermediateValue)) {\n            // configuration data of an event\n            finalValue = intermediateValue.reduce((acc, val) => {\n                if (!val.eventData) {\n                    return acc;\n                }\n                acc[val.id] = {\n                    type: getRichTypeByFlowGraphType(val.type),\n                };\n                if (typeof val.value !== \"undefined\") {\n                    acc[val.id].value = defaultValueParseFunction(\"value\", val, assetsContainer, scene);\n                }\n                return acc;\n            }, {});\n        }\n        else {\n            finalValue = intermediateValue;\n        }\n    }\n    return finalValue;\n}\n/**\n * Given a name of a flow graph block class, return if this\n * class needs to be created with a path converter. Used in\n * parsing.\n * @param className the name of the flow graph block class\n * @returns a boolean indicating if the class needs a path converter\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function needsPathConverter(className) {\n    // I am not using the ClassName property here because it was causing a circular dependency\n    // that jest didn't like!\n    return className === \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */;\n}\n//# sourceMappingURL=serialization.js.map","/**\n * The type of the assets that flow graph supports\n */\nexport var FlowGraphAssetType;\n(function (FlowGraphAssetType) {\n    FlowGraphAssetType[\"Animation\"] = \"Animation\";\n    FlowGraphAssetType[\"AnimationGroup\"] = \"AnimationGroup\";\n    FlowGraphAssetType[\"Mesh\"] = \"Mesh\";\n    FlowGraphAssetType[\"Material\"] = \"Material\";\n    FlowGraphAssetType[\"Camera\"] = \"Camera\";\n    FlowGraphAssetType[\"Light\"] = \"Light\";\n    // Further asset types will be added here when needed.\n})(FlowGraphAssetType || (FlowGraphAssetType = {}));\n/**\n * Returns the asset with the given index and type from the assets context.\n * @param assetsContext The assets context to get the asset from\n * @param type The type of the asset\n * @param index The index of the asset\n * @param useIndexAsUniqueId If set to true, instead of the index in the array it will search for the unique id of the asset.\n * @returns The asset or null if not found\n */\nexport function GetFlowGraphAssetWithType(assetsContext, type, index, useIndexAsUniqueId) {\n    switch (type) {\n        case \"Animation\" /* FlowGraphAssetType.Animation */:\n            return useIndexAsUniqueId\n                ? (assetsContext.animations.find((a) => a.uniqueId === index) ?? null)\n                : (assetsContext.animations[index] ?? null);\n        case \"AnimationGroup\" /* FlowGraphAssetType.AnimationGroup */:\n            return useIndexAsUniqueId\n                ? (assetsContext.animationGroups.find((a) => a.uniqueId === index) ?? null)\n                : (assetsContext.animationGroups[index] ?? null);\n        case \"Mesh\" /* FlowGraphAssetType.Mesh */:\n            return useIndexAsUniqueId\n                ? (assetsContext.meshes.find((a) => a.uniqueId === index) ?? null)\n                : (assetsContext.meshes[index] ?? null);\n        case \"Material\" /* FlowGraphAssetType.Material */:\n            return useIndexAsUniqueId\n                ? (assetsContext.materials.find((a) => a.uniqueId === index) ?? null)\n                : (assetsContext.materials[index] ?? null);\n        case \"Camera\" /* FlowGraphAssetType.Camera */:\n            return useIndexAsUniqueId\n                ? (assetsContext.cameras.find((a) => a.uniqueId === index) ?? null)\n                : (assetsContext.cameras[index] ?? null);\n        case \"Light\" /* FlowGraphAssetType.Light */:\n            return useIndexAsUniqueId\n                ? (assetsContext.lights.find((a) => a.uniqueId === index) ?? null)\n                : (assetsContext.lights[index] ?? null);\n        default:\n            return null;\n    }\n}\n//# sourceMappingURL=flowGraphAssetsContext.js.map","import { Logger } from \"core/Misc/logger\";\nexport var FlowGraphAction;\n(function (FlowGraphAction) {\n    FlowGraphAction[\"ExecuteBlock\"] = \"ExecuteBlock\";\n    FlowGraphAction[\"ExecuteEvent\"] = \"ExecuteEvent\";\n    FlowGraphAction[\"TriggerConnection\"] = \"TriggerConnection\";\n    FlowGraphAction[\"ContextVariableSet\"] = \"ContextVariableSet\";\n    FlowGraphAction[\"GlobalVariableSet\"] = \"GlobalVariableSet\";\n    FlowGraphAction[\"GlobalVariableDelete\"] = \"GlobalVariableDelete\";\n    FlowGraphAction[\"GlobalVariableGet\"] = \"GlobalVariableGet\";\n    FlowGraphAction[\"AddConnection\"] = \"AddConnection\";\n    FlowGraphAction[\"GetConnectionValue\"] = \"GetConnectionValue\";\n    FlowGraphAction[\"SetConnectionValue\"] = \"SetConnectionValue\";\n    FlowGraphAction[\"ActivateSignal\"] = \"ActivateSignal\";\n    FlowGraphAction[\"ContextVariableGet\"] = \"ContextVariableGet\";\n})(FlowGraphAction || (FlowGraphAction = {}));\n/**\n * This class will be responsible of logging the flow graph activity.\n * Note that using this class might reduce performance, as it will log every action, according to the configuration.\n * It attaches to a flow graph and uses meta-programming to replace the methods of the flow graph to add logging abilities.\n */\nexport class FlowGraphLogger {\n    constructor() {\n        /**\n         * Whether to log to the console.\n         */\n        this.logToConsole = false;\n        /**\n         * The log cache of the flow graph.\n         * Each item is a logged item, in order of execution.\n         */\n        this.log = [];\n    }\n    addLogItem(item) {\n        if (!item.time) {\n            item.time = Date.now();\n        }\n        this.log.push(item);\n        if (this.logToConsole) {\n            const value = item.payload?.value;\n            if (typeof value === \"object\" && value.getClassName) {\n                Logger.Log(`[FGLog] ${item.className}:${item.uniqueId.split(\"-\")[0]} ${item.action} - ${JSON.stringify(value.getClassName())}: ${value.toString()}`);\n            }\n            else {\n                Logger.Log(`[FGLog] ${item.className}:${item.uniqueId.split(\"-\")[0]} ${item.action} - ${JSON.stringify(item.payload)}`);\n            }\n        }\n    }\n    getItemsOfType(action) {\n        return this.log.filter((i) => i.action === action);\n    }\n}\n//# sourceMappingURL=flowGraphLogger.js.map","import { __decorate } from \"tslib\";\nimport { serialize } from \"../Misc/decorators\";\nimport { RandomGUID } from \"../Misc/guid\";\nimport { defaultValueSerializationFunction } from \"./serialization\";\nimport { Observable } from \"../Misc/observable\";\nimport { GetFlowGraphAssetWithType } from \"./flowGraphAssetsContext\";\nimport { FlowGraphLogger } from \"./flowGraphLogger\";\n/**\n * The context represents the current state and execution of the flow graph.\n * It contains both user-defined variables, which are derived from\n * a more general variable definition, and execution variables that\n * are set by the blocks.\n */\nexport class FlowGraphContext {\n    /**\n     * Enable logging on this context\n     */\n    get enableLogging() {\n        return this._enableLogging;\n    }\n    set enableLogging(value) {\n        if (this._enableLogging === value) {\n            return;\n        }\n        this._enableLogging = value;\n        if (this._enableLogging) {\n            this.logger = new FlowGraphLogger();\n            this.logger.logToConsole = true;\n        }\n        else {\n            this.logger = null;\n        }\n    }\n    constructor(params) {\n        /**\n         * A randomly generated GUID for each context.\n         */\n        this.uniqueId = RandomGUID();\n        /**\n         * These are the variables defined by a user.\n         */\n        this._userVariables = {};\n        /**\n         * These are the variables set by the blocks.\n         */\n        this._executionVariables = {};\n        /**\n         * A context-specific global variables, available to all blocks in the context.\n         */\n        this._globalContextVariables = {};\n        /**\n         * These are the values for the data connection points\n         */\n        this._connectionValues = {};\n        /**\n         * These are blocks that have currently pending tasks/listeners that need to be cleaned up.\n         */\n        this._pendingBlocks = [];\n        /**\n         * A monotonically increasing ID for each execution.\n         * Incremented for every block executed.\n         */\n        this._executionId = 0;\n        /**\n         * Observable that is triggered when a node is executed.\n         */\n        this.onNodeExecutedObservable = new Observable();\n        /**\n         * Whether to treat data as right-handed.\n         * This is used when serializing data from a right-handed system, while running the context in a left-handed system, for example in glTF parsing.\n         * Default is false.\n         */\n        this.treatDataAsRightHanded = false;\n        this._enableLogging = false;\n        this._configuration = params;\n        this.assetsContext = params.assetsContext ?? params.scene;\n    }\n    /**\n     * Check if a user-defined variable is defined.\n     * @param name the name of the variable\n     * @returns true if the variable is defined\n     */\n    hasVariable(name) {\n        return name in this._userVariables;\n    }\n    /**\n     * Set a user-defined variable.\n     * @param name the name of the variable\n     * @param value the value of the variable\n     */\n    setVariable(name, value) {\n        this._userVariables[name] = value;\n        this.logger?.addLogItem({\n            time: Date.now(),\n            className: this.getClassName(),\n            uniqueId: this.uniqueId,\n            action: \"ContextVariableSet\" /* FlowGraphAction.ContextVariableSet */,\n            payload: {\n                name,\n                value,\n            },\n        });\n    }\n    /**\n     * Get an assets from the assets context based on its type and index in the array\n     * @param type The type of the asset\n     * @param index The index of the asset\n     * @returns The asset or null if not found\n     */\n    getAsset(type, index) {\n        return GetFlowGraphAssetWithType(this.assetsContext, type, index);\n    }\n    /**\n     * Get a user-defined variable.\n     * @param name the name of the variable\n     * @returns the value of the variable\n     */\n    getVariable(name) {\n        this.logger?.addLogItem({\n            time: Date.now(),\n            className: this.getClassName(),\n            uniqueId: this.uniqueId,\n            action: \"ContextVariableGet\" /* FlowGraphAction.ContextVariableGet */,\n            payload: {\n                name,\n                value: this._userVariables[name],\n            },\n        });\n        return this._userVariables[name];\n    }\n    /**\n     * Gets all user variables map\n     */\n    get userVariables() {\n        return this._userVariables;\n    }\n    /**\n     * Get the scene that the context belongs to.\n     * @returns the scene\n     */\n    getScene() {\n        return this._configuration.scene;\n    }\n    _getUniqueIdPrefixedName(obj, name) {\n        return `${obj.uniqueId}_${name}`;\n    }\n    /**\n     * @internal\n     * @param name name of the variable\n     * @param defaultValue default value to return if the variable is not defined\n     * @returns the variable value or the default value if the variable is not defined\n     */\n    _getGlobalContextVariable(name, defaultValue) {\n        this.logger?.addLogItem({\n            time: Date.now(),\n            className: this.getClassName(),\n            uniqueId: this.uniqueId,\n            action: \"GlobalVariableGet\" /* FlowGraphAction.GlobalVariableGet */,\n            payload: {\n                name,\n                defaultValue,\n                possibleValue: this._globalContextVariables[name],\n            },\n        });\n        if (this._hasGlobalContextVariable(name)) {\n            return this._globalContextVariables[name];\n        }\n        else {\n            return defaultValue;\n        }\n    }\n    /**\n     * Set a global context variable\n     * @internal\n     * @param name the name of the variable\n     * @param value the value of the variable\n     */\n    _setGlobalContextVariable(name, value) {\n        this.logger?.addLogItem({\n            time: Date.now(),\n            className: this.getClassName(),\n            uniqueId: this.uniqueId,\n            action: \"GlobalVariableSet\" /* FlowGraphAction.GlobalVariableSet */,\n            payload: { name, value },\n        });\n        this._globalContextVariables[name] = value;\n    }\n    /**\n     * Delete a global context variable\n     * @internal\n     * @param name the name of the variable\n     */\n    _deleteGlobalContextVariable(name) {\n        this.logger?.addLogItem({\n            time: Date.now(),\n            className: this.getClassName(),\n            uniqueId: this.uniqueId,\n            action: \"GlobalVariableDelete\" /* FlowGraphAction.GlobalVariableDelete */,\n            payload: { name },\n        });\n        delete this._globalContextVariables[name];\n    }\n    /**\n     * Check if a global context variable is defined\n     * @internal\n     * @param name the name of the variable\n     * @returns true if the variable is defined\n     */\n    _hasGlobalContextVariable(name) {\n        return name in this._globalContextVariables;\n    }\n    /**\n     * Set an internal execution variable\n     * @internal\n     * @param name\n     * @param value\n     */\n    _setExecutionVariable(block, name, value) {\n        this._executionVariables[this._getUniqueIdPrefixedName(block, name)] = value;\n    }\n    /**\n     * Get an internal execution variable\n     * @internal\n     * @param name\n     * @returns\n     */\n    _getExecutionVariable(block, name, defaultValue) {\n        if (this._hasExecutionVariable(block, name)) {\n            return this._executionVariables[this._getUniqueIdPrefixedName(block, name)];\n        }\n        else {\n            return defaultValue;\n        }\n    }\n    /**\n     * Delete an internal execution variable\n     * @internal\n     * @param block\n     * @param name\n     */\n    _deleteExecutionVariable(block, name) {\n        delete this._executionVariables[this._getUniqueIdPrefixedName(block, name)];\n    }\n    /**\n     * Check if an internal execution variable is defined\n     * @internal\n     * @param block\n     * @param name\n     * @returns\n     */\n    _hasExecutionVariable(block, name) {\n        return this._getUniqueIdPrefixedName(block, name) in this._executionVariables;\n    }\n    /**\n     * Check if a connection value is defined\n     * @internal\n     * @param connectionPoint\n     * @returns\n     */\n    _hasConnectionValue(connectionPoint) {\n        return connectionPoint.uniqueId in this._connectionValues;\n    }\n    /**\n     * Set a connection value\n     * @internal\n     * @param connectionPoint\n     * @param value\n     */\n    _setConnectionValue(connectionPoint, value) {\n        this._connectionValues[connectionPoint.uniqueId] = value;\n        this.logger?.addLogItem({\n            time: Date.now(),\n            className: this.getClassName(),\n            uniqueId: this.uniqueId,\n            action: \"SetConnectionValue\" /* FlowGraphAction.SetConnectionValue */,\n            payload: {\n                connectionPointId: connectionPoint.uniqueId,\n                value,\n            },\n        });\n    }\n    /**\n     * Set a connection value by key\n     * @internal\n     * @param key the key of the connection value\n     * @param value the value of the connection\n     */\n    _setConnectionValueByKey(key, value) {\n        this._connectionValues[key] = value;\n    }\n    /**\n     * Get a connection value\n     * @internal\n     * @param connectionPoint\n     * @returns\n     */\n    _getConnectionValue(connectionPoint) {\n        this.logger?.addLogItem({\n            time: Date.now(),\n            className: this.getClassName(),\n            uniqueId: this.uniqueId,\n            action: \"GetConnectionValue\" /* FlowGraphAction.GetConnectionValue */,\n            payload: {\n                connectionPointId: connectionPoint.uniqueId,\n                value: this._connectionValues[connectionPoint.uniqueId],\n            },\n        });\n        return this._connectionValues[connectionPoint.uniqueId];\n    }\n    /**\n     * Get the configuration\n     * @internal\n     * @param name\n     * @param value\n     */\n    get configuration() {\n        return this._configuration;\n    }\n    /**\n     * Check if there are any pending blocks in this context\n     * @returns true if there are pending blocks\n     */\n    get hasPendingBlocks() {\n        return this._pendingBlocks.length > 0;\n    }\n    /**\n     * Add a block to the list of blocks that have pending tasks.\n     * @internal\n     * @param block\n     */\n    _addPendingBlock(block) {\n        // check if block is already in the array\n        if (this._pendingBlocks.includes(block)) {\n            return;\n        }\n        this._pendingBlocks.push(block);\n        // sort pending blocks by priority\n        this._pendingBlocks.sort((a, b) => a.priority - b.priority);\n    }\n    /**\n     * Remove a block from the list of blocks that have pending tasks.\n     * @internal\n     * @param block\n     */\n    _removePendingBlock(block) {\n        const index = this._pendingBlocks.indexOf(block);\n        if (index !== -1) {\n            this._pendingBlocks.splice(index, 1);\n        }\n    }\n    /**\n     * Clear all pending blocks.\n     * @internal\n     */\n    _clearPendingBlocks() {\n        for (const block of this._pendingBlocks) {\n            block._cancelPendingTasks(this);\n        }\n        this._pendingBlocks.length = 0;\n    }\n    /**\n     * @internal\n     * Function that notifies the node executed observable\n     * @param node\n     */\n    _notifyExecuteNode(node) {\n        this.onNodeExecutedObservable.notifyObservers(node);\n        this.logger?.addLogItem({\n            time: Date.now(),\n            className: node.getClassName(),\n            uniqueId: node.uniqueId,\n            action: \"ExecuteBlock\" /* FlowGraphAction.ExecuteBlock */,\n        });\n    }\n    _notifyOnTick(framePayload) {\n        // set the values as global variables\n        this._setGlobalContextVariable(\"timeSinceStart\", framePayload.timeSinceStart);\n        this._setGlobalContextVariable(\"deltaTime\", framePayload.deltaTime);\n        // iterate the pending blocks and run each one's onFrame function\n        for (const block of this._pendingBlocks) {\n            block._executeOnTick?.(this);\n        }\n    }\n    /**\n     * @internal\n     */\n    _increaseExecutionId() {\n        this._executionId++;\n    }\n    /**\n     * A monotonically increasing ID for each execution.\n     * Incremented for every block executed.\n     */\n    get executionId() {\n        return this._executionId;\n    }\n    /**\n     * Serializes a context\n     * @param serializationObject the object to write the values in\n     * @param valueSerializationFunction a function to serialize complex values\n     */\n    serialize(serializationObject = {}, valueSerializationFunction = defaultValueSerializationFunction) {\n        serializationObject.uniqueId = this.uniqueId;\n        serializationObject._userVariables = {};\n        for (const key in this._userVariables) {\n            valueSerializationFunction(key, this._userVariables[key], serializationObject._userVariables);\n        }\n        serializationObject._connectionValues = {};\n        for (const key in this._connectionValues) {\n            valueSerializationFunction(key, this._connectionValues[key], serializationObject._connectionValues);\n        }\n        // serialize assets context, if not scene\n        if (this.assetsContext !== this.getScene()) {\n            serializationObject._assetsContext = {\n                meshes: this.assetsContext.meshes.map((m) => m.id),\n                materials: this.assetsContext.materials.map((m) => m.id),\n                textures: this.assetsContext.textures.map((m) => m.name),\n                animations: this.assetsContext.animations.map((m) => m.name),\n                lights: this.assetsContext.lights.map((m) => m.id),\n                cameras: this.assetsContext.cameras.map((m) => m.id),\n                sounds: this.assetsContext.sounds?.map((m) => m.name),\n                skeletons: this.assetsContext.skeletons.map((m) => m.id),\n                particleSystems: this.assetsContext.particleSystems.map((m) => m.name),\n                geometries: this.assetsContext.geometries.map((m) => m.id),\n                multiMaterials: this.assetsContext.multiMaterials.map((m) => m.id),\n                transformNodes: this.assetsContext.transformNodes.map((m) => m.id),\n            };\n        }\n    }\n    /**\n     * @returns the class name of the object.\n     */\n    getClassName() {\n        return \"FlowGraphContext\";\n    }\n}\n__decorate([\n    serialize()\n], FlowGraphContext.prototype, \"uniqueId\", void 0);\n//# sourceMappingURL=flowGraphContext.js.map","import { RandomGUID } from \"../Misc/guid\";\n/**\n * The type of a connection point - input or output.\n */\nexport var FlowGraphConnectionType;\n(function (FlowGraphConnectionType) {\n    FlowGraphConnectionType[FlowGraphConnectionType[\"Input\"] = 0] = \"Input\";\n    FlowGraphConnectionType[FlowGraphConnectionType[\"Output\"] = 1] = \"Output\";\n})(FlowGraphConnectionType || (FlowGraphConnectionType = {}));\n/**\n * The base connection class.\n */\nexport class FlowGraphConnection {\n    constructor(name, _connectionType, \n    /* @internal */ _ownerBlock) {\n        this._ownerBlock = _ownerBlock;\n        /** @internal */\n        this._connectedPoint = [];\n        /**\n         * A uniquely identifying string for the connection.\n         */\n        this.uniqueId = RandomGUID();\n        /**\n         * Used for parsing connections.\n         * @internal\n         */\n        // disable warning as this is used for parsing\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this.connectedPointIds = [];\n        this.name = name;\n        this._connectionType = _connectionType;\n    }\n    /**\n     * The type of the connection\n     */\n    get connectionType() {\n        return this._connectionType;\n    }\n    /**\n     * @internal\n     * Override this to indicate if a point can connect to more than one point.\n     */\n    _isSingularConnection() {\n        return true;\n    }\n    /**\n     * Returns if a point is connected to any other point.\n     * @returns boolean indicating if the point is connected.\n     */\n    isConnected() {\n        return this._connectedPoint.length > 0;\n    }\n    /**\n     * Connects two connections together.\n     * @param point the connection to connect to.\n     */\n    connectTo(point) {\n        if (this._connectionType === point._connectionType) {\n            throw new Error(`Cannot connect two points of type ${this.connectionType}`);\n        }\n        if ((this._isSingularConnection() && this._connectedPoint.length > 0) || (point._isSingularConnection() && point._connectedPoint.length > 0)) {\n            throw new Error(\"Max number of connections for point reached\");\n        }\n        this._connectedPoint.push(point);\n        point._connectedPoint.push(this);\n    }\n    /**\n     * Disconnects two connections.\n     * @param point the connection to disconnect from.\n     * @param removeFromLocal if true, the connection will be removed from the local connection list.\n     */\n    disconnectFrom(point, removeFromLocal = true) {\n        const indexLocal = this._connectedPoint.indexOf(point);\n        const indexConnected = point._connectedPoint.indexOf(this);\n        if (indexLocal === -1 || indexConnected === -1) {\n            return;\n        }\n        if (removeFromLocal) {\n            this._connectedPoint.splice(indexLocal, 1);\n        }\n        point._connectedPoint.splice(indexConnected, 1);\n    }\n    /**\n     * Disconnects all connected points.\n     */\n    disconnectFromAll() {\n        for (const point of this._connectedPoint) {\n            this.disconnectFrom(point, false);\n        }\n        this._connectedPoint.length = 0;\n    }\n    dispose() {\n        for (const point of this._connectedPoint) {\n            this.disconnectFrom(point);\n        }\n    }\n    /**\n     * Saves the connection to a JSON object.\n     * @param serializationObject the object to serialize to.\n     */\n    serialize(serializationObject = {}) {\n        serializationObject.uniqueId = this.uniqueId;\n        serializationObject.name = this.name;\n        serializationObject._connectionType = this._connectionType;\n        serializationObject.connectedPointIds = [];\n        serializationObject.className = this.getClassName();\n        for (const point of this._connectedPoint) {\n            serializationObject.connectedPointIds.push(point.uniqueId);\n        }\n    }\n    /**\n     * @returns class name of the connection.\n     */\n    getClassName() {\n        return \"FGConnection\";\n    }\n    /**\n     * Deserialize from a object into this\n     * @param serializationObject the object to deserialize from.\n     */\n    deserialize(serializationObject) {\n        this.uniqueId = serializationObject.uniqueId;\n        this.name = serializationObject.name;\n        this._connectionType = serializationObject._connectionType;\n        this.connectedPointIds = serializationObject.connectedPointIds;\n    }\n}\n//# sourceMappingURL=flowGraphConnection.js.map","import { RegisterClass } from \"../Misc/typeStore\";\nimport { FlowGraphConnection } from \"./flowGraphConnection\";\nimport { Observable } from \"core/Misc/observable\";\nimport { defaultValueSerializationFunction } from \"./serialization\";\n/**\n * Represents a connection point for data.\n * An unconnected input point can have a default value.\n * An output point will only have a value if it is connected to an input point. Furthermore,\n * if the point belongs to a \"function\" node, the node will run its function to update the value.\n */\nexport class FlowGraphDataConnection extends FlowGraphConnection {\n    /**\n     * Create a new data connection point.\n     * @param name the name of the connection\n     * @param connectionType the type of the connection\n     * @param ownerBlock the block that owns this connection\n     * @param richType the type of the data in this block\n     * @param _defaultValue the default value of the connection\n     * @param _optional if the connection is optional\n     */\n    constructor(name, connectionType, ownerBlock, \n    /**\n     * the type of the data in this block\n     */\n    richType, \n    /**\n     * [any] the default value of the connection\n     */\n    _defaultValue = richType.defaultValue, \n    /**\n     * [false] if the connection is optional\n     */\n    _optional = false) {\n        super(name, connectionType, ownerBlock);\n        this.richType = richType;\n        this._defaultValue = _defaultValue;\n        this._optional = _optional;\n        this._isDisabled = false;\n        /**\n         * This is used for debugging purposes! It is the last value that was set to this connection with ANY context.\n         * Do not use this value for anything else, as it might be wrong if used in a different context.\n         */\n        this._lastValue = null;\n        /**\n         * a data transformer function, if needed.\n         * This can be used, for example, to force seconds into milliseconds output, if it makes sense in your case.\n         */\n        this.dataTransformer = null;\n        /**\n         * An observable that is triggered when the value of the connection changes.\n         */\n        this.onValueChangedObservable = new Observable();\n    }\n    /**\n     * Whether or not the connection is optional.\n     * Currently only used for UI control.\n     */\n    get optional() {\n        return this._optional;\n    }\n    /**\n     * is this connection disabled\n     * If the connection is disabled you will not be able to connect anything to it.\n     */\n    get isDisabled() {\n        return this._isDisabled;\n    }\n    set isDisabled(value) {\n        if (this._isDisabled === value) {\n            return;\n        }\n        this._isDisabled = value;\n        if (this._isDisabled) {\n            this.disconnectFromAll();\n        }\n    }\n    /**\n     * An output data block can connect to multiple input data blocks,\n     * but an input data block can only connect to one output data block.\n     * @returns true if the connection is singular\n     */\n    _isSingularConnection() {\n        return this.connectionType === 0 /* FlowGraphConnectionType.Input */;\n    }\n    /**\n     * Set the value of the connection in a specific context.\n     * @param value the value to set\n     * @param context the context to which the value is set\n     */\n    setValue(value, context) {\n        // check if the value is different\n        if (context._getConnectionValue(this) === value) {\n            return;\n        }\n        context._setConnectionValue(this, value);\n        this.onValueChangedObservable.notifyObservers(value);\n    }\n    /**\n     * Reset the value of the connection to the default value.\n     * @param context the context in which the value is reset\n     */\n    resetToDefaultValue(context) {\n        context._setConnectionValue(this, this._defaultValue);\n    }\n    /**\n     * Connect this point to another point.\n     * @param point the point to connect to.\n     */\n    connectTo(point) {\n        if (this._isDisabled) {\n            return;\n        }\n        super.connectTo(point);\n    }\n    _getValueOrDefault(context) {\n        const val = context._getConnectionValue(this) ?? this._defaultValue;\n        return this.dataTransformer ? this.dataTransformer(val) : val;\n    }\n    /**\n     * Gets the value of the connection in a specific context.\n     * @param context the context from which the value is retrieved\n     * @returns the value of the connection\n     */\n    getValue(context) {\n        if (this.connectionType === 1 /* FlowGraphConnectionType.Output */) {\n            context._notifyExecuteNode(this._ownerBlock);\n            this._ownerBlock._updateOutputs(context);\n            const value = this._getValueOrDefault(context);\n            this._lastValue = value;\n            return this.richType.typeTransformer ? this.richType.typeTransformer(value) : value;\n        }\n        const value = !this.isConnected() ? this._getValueOrDefault(context) : this._connectedPoint[0].getValue(context);\n        this._lastValue = value;\n        return this.richType.typeTransformer ? this.richType.typeTransformer(value) : value;\n    }\n    /**\n     * @internal\n     */\n    _getLastValue() {\n        return this._lastValue;\n    }\n    /**\n     * @returns class name of the object.\n     */\n    getClassName() {\n        return \"FlowGraphDataConnection\";\n    }\n    /**\n     * Serializes this object.\n     * @param serializationObject the object to serialize to\n     */\n    serialize(serializationObject = {}) {\n        super.serialize(serializationObject);\n        serializationObject.richType = {};\n        this.richType.serialize(serializationObject.richType);\n        serializationObject.optional = this._optional;\n        defaultValueSerializationFunction(\"defaultValue\", this._defaultValue, serializationObject);\n    }\n}\nRegisterClass(\"FlowGraphDataConnection\", FlowGraphDataConnection);\n//# sourceMappingURL=flowGraphDataConnection.js.map","import { RandomGUID } from \"../Misc/guid\";\nimport { FlowGraphDataConnection } from \"./flowGraphDataConnection\";\nimport { defaultValueSerializationFunction } from \"./serialization\";\n/**\n * A block in a flow graph. The most basic form\n * of a block has inputs and outputs that contain\n * data.\n */\nexport class FlowGraphBlock {\n    /** Constructor is protected so only subclasses can be instantiated\n     * @param config optional configuration for this block\n     * @internal - do not use directly. Extend this class instead.\n     */\n    constructor(\n    /**\n     * the configuration of the block\n     */\n    config) {\n        this.config = config;\n        /**\n         * A randomly generated GUID for each block.\n         */\n        this.uniqueId = RandomGUID();\n        this.name = this.config?.name ?? this.getClassName();\n        this.dataInputs = [];\n        this.dataOutputs = [];\n    }\n    /**\n     * @internal\n     * This function is called when the block needs to update its output flows.\n     * @param _context the context in which it is running\n     */\n    _updateOutputs(_context) {\n        // empty by default, overridden in data blocks\n    }\n    /**\n     * Registers a data input on the block.\n     * @param name the name of the input\n     * @param richType the type of the input\n     * @param defaultValue optional default value of the input. If not set, the rich type's default value will be used.\n     * @returns the created connection\n     */\n    registerDataInput(name, richType, defaultValue) {\n        const input = new FlowGraphDataConnection(name, 0 /* FlowGraphConnectionType.Input */, this, richType, defaultValue);\n        this.dataInputs.push(input);\n        return input;\n    }\n    /**\n     * Registers a data output on the block.\n     * @param name the name of the input\n     * @param richType the type of the input\n     * @param defaultValue optional default value of the input. If not set, the rich type's default value will be used.\n     * @returns the created connection\n     */\n    registerDataOutput(name, richType, defaultValue) {\n        const output = new FlowGraphDataConnection(name, 1 /* FlowGraphConnectionType.Output */, this, richType, defaultValue);\n        this.dataOutputs.push(output);\n        return output;\n    }\n    /**\n     * Given the name of a data input, returns the connection if it exists\n     * @param name the name of the input\n     * @returns the connection if it exists, undefined otherwise\n     */\n    getDataInput(name) {\n        return this.dataInputs.find((i) => i.name === name);\n    }\n    /**\n     * Given the name of a data output, returns the connection if it exists\n     * @param name the name of the output\n     * @returns the connection if it exists, undefined otherwise\n     */\n    getDataOutput(name) {\n        return this.dataOutputs.find((i) => i.name === name);\n    }\n    /**\n     * Serializes this block\n     * @param serializationObject the object to serialize to\n     * @param _valueSerializeFunction a function that serializes a specific value\n     */\n    serialize(serializationObject = {}, _valueSerializeFunction = defaultValueSerializationFunction) {\n        serializationObject.uniqueId = this.uniqueId;\n        serializationObject.config = {};\n        if (this.config) {\n            const config = this.config;\n            const keys = Object.keys(config);\n            for (const key of keys) {\n                _valueSerializeFunction(key, config[key], serializationObject.config);\n            }\n        }\n        serializationObject.dataInputs = [];\n        serializationObject.dataOutputs = [];\n        serializationObject.className = this.getClassName();\n        for (const input of this.dataInputs) {\n            const serializedInput = {};\n            input.serialize(serializedInput);\n            serializationObject.dataInputs.push(serializedInput);\n        }\n        for (const output of this.dataOutputs) {\n            const serializedOutput = {};\n            output.serialize(serializedOutput);\n            serializationObject.dataOutputs.push(serializedOutput);\n        }\n    }\n    /**\n     * Deserializes this block\n     * @param _serializationObject the object to deserialize from\n     */\n    deserialize(_serializationObject) {\n        // no-op by default\n    }\n    _log(context, action, payload) {\n        context.logger?.addLogItem({\n            action,\n            payload,\n            className: this.getClassName(),\n            uniqueId: this.uniqueId,\n        });\n    }\n    /**\n     * Gets the class name of this block\n     * @returns the class name\n     */\n    getClassName() {\n        return \"FlowGraphBlock\";\n    }\n}\n//# sourceMappingURL=flowGraphBlock.js.map","import { FlowGraphConnection } from \"./flowGraphConnection\";\nimport { RegisterClass } from \"../Misc/typeStore\";\n/**\n * Represents a connection point for a signal.\n * When an output point is activated, it will activate the connected input point.\n * When an input point is activated, it will execute the block it belongs to.\n */\nexport class FlowGraphSignalConnection extends FlowGraphConnection {\n    constructor() {\n        super(...arguments);\n        /**\n         * The priority of the signal. Signals with higher priority will be executed first.\n         * Set priority before adding the connection as sorting happens only when the connection is added.\n         */\n        this.priority = 0;\n    }\n    _isSingularConnection() {\n        return false;\n    }\n    connectTo(point) {\n        super.connectTo(point);\n        // sort according to priority to handle execution order\n        this._connectedPoint.sort((a, b) => b.priority - a.priority);\n    }\n    /**\n     * @internal\n     */\n    _activateSignal(context) {\n        context.logger?.addLogItem({\n            action: \"ActivateSignal\" /* FlowGraphAction.ActivateSignal */,\n            className: this._ownerBlock.getClassName(),\n            uniqueId: this._ownerBlock.uniqueId,\n            payload: {\n                connectionType: this.connectionType,\n                name: this.name,\n            },\n        });\n        if (this.connectionType === 0 /* FlowGraphConnectionType.Input */) {\n            context._notifyExecuteNode(this._ownerBlock);\n            this._ownerBlock._execute(context, this);\n            context._increaseExecutionId();\n        }\n        else {\n            for (const connectedPoint of this._connectedPoint) {\n                connectedPoint._activateSignal(context);\n            }\n        }\n    }\n}\nRegisterClass(\"FlowGraphSignalConnection\", FlowGraphSignalConnection);\n//# sourceMappingURL=flowGraphSignalConnection.js.map","import { FlowGraphBlock } from \"./flowGraphBlock\";\nimport { FlowGraphSignalConnection } from \"./flowGraphSignalConnection\";\n/**\n * A block that executes some action. Always has an input signal (which is not used by event blocks).\n * Can have one or more output signals.\n */\nexport class FlowGraphExecutionBlock extends FlowGraphBlock {\n    constructor(config) {\n        super(config);\n        /**\n         * The priority of the block. Higher priority blocks will be executed first.\n         * Note that priority cannot be change AFTER the block was added as sorting happens when the block is added to the execution queue.\n         */\n        this.priority = 0;\n        this.signalInputs = [];\n        this.signalOutputs = [];\n        this.in = this._registerSignalInput(\"in\");\n        this.error = this._registerSignalOutput(\"error\");\n    }\n    _registerSignalInput(name) {\n        const input = new FlowGraphSignalConnection(name, 0 /* FlowGraphConnectionType.Input */, this);\n        this.signalInputs.push(input);\n        return input;\n    }\n    _registerSignalOutput(name) {\n        const output = new FlowGraphSignalConnection(name, 1 /* FlowGraphConnectionType.Output */, this);\n        this.signalOutputs.push(output);\n        return output;\n    }\n    _unregisterSignalInput(name) {\n        const index = this.signalInputs.findIndex((input) => input.name === name);\n        if (index !== -1) {\n            this.signalInputs[index].dispose();\n            this.signalInputs.splice(index, 1);\n        }\n    }\n    _unregisterSignalOutput(name) {\n        const index = this.signalOutputs.findIndex((output) => output.name === name);\n        if (index !== -1) {\n            this.signalOutputs[index].dispose();\n            this.signalOutputs.splice(index, 1);\n        }\n    }\n    _reportError(context, error) {\n        this.error.payload = typeof error === \"string\" ? new Error(error) : error;\n        this.error._activateSignal(context);\n    }\n    /**\n     * Given a name of a signal input, return that input if it exists\n     * @param name the name of the input\n     * @returns if the input exists, the input. Otherwise, undefined.\n     */\n    getSignalInput(name) {\n        return this.signalInputs.find((input) => input.name === name);\n    }\n    /**\n     * Given a name of a signal output, return that input if it exists\n     * @param name the name of the input\n     * @returns if the input exists, the input. Otherwise, undefined.\n     */\n    getSignalOutput(name) {\n        return this.signalOutputs.find((output) => output.name === name);\n    }\n    /**\n     * Serializes this block\n     * @param serializationObject the object to serialize in\n     */\n    serialize(serializationObject = {}) {\n        super.serialize(serializationObject);\n        serializationObject.signalInputs = [];\n        serializationObject.signalOutputs = [];\n        for (const input of this.signalInputs) {\n            const serializedInput = {};\n            input.serialize(serializedInput);\n            serializationObject.signalInputs.push(serializedInput);\n        }\n        for (const output of this.signalOutputs) {\n            const serializedOutput = {};\n            output.serialize(serializedOutput);\n            serializationObject.signalOutputs.push(serializedOutput);\n        }\n    }\n    /**\n     * Deserializes from an object\n     * @param serializationObject the object to deserialize from\n     */\n    deserialize(serializationObject) {\n        for (let i = 0; i < serializationObject.signalInputs.length; i++) {\n            const signalInput = this.getSignalInput(serializationObject.signalInputs[i].name);\n            if (signalInput) {\n                signalInput.deserialize(serializationObject.signalInputs[i]);\n            }\n            else {\n                throw new Error(\"Could not find signal input with name \" + serializationObject.signalInputs[i].name + \" in block \" + serializationObject.className);\n            }\n        }\n        for (let i = 0; i < serializationObject.signalOutputs.length; i++) {\n            const signalOutput = this.getSignalOutput(serializationObject.signalOutputs[i].name);\n            if (signalOutput) {\n                signalOutput.deserialize(serializationObject.signalOutputs[i]);\n            }\n            else {\n                throw new Error(\"Could not find signal output with name \" + serializationObject.signalOutputs[i].name + \" in block \" + serializationObject.className);\n            }\n        }\n    }\n    /**\n     * @returns the class name\n     */\n    getClassName() {\n        return \"FlowGraphExecutionBlock\";\n    }\n}\n//# sourceMappingURL=flowGraphExecutionBlock.js.map","import { PointerEventTypes } from \"core/Events/pointerEvents\";\nimport { Observable } from \"core/Misc/observable\";\n/**\n * This class is responsible for coordinating the events that are triggered in the scene.\n * It registers all observers needed to track certain events and triggers the blocks that are listening to them.\n * Abstracting the events from the class will allow us to easily change the events that are being listened to, and trigger them in any order.\n */\nexport class FlowGraphSceneEventCoordinator {\n    constructor(scene) {\n        /**\n         * register to this observable to get flow graph event notifications.\n         */\n        this.onEventTriggeredObservable = new Observable();\n        /**\n         * Was scene-ready already triggered?\n         */\n        this.sceneReadyTriggered = false;\n        this._pointerUnderMeshState = {};\n        this._startingTime = 0;\n        this._scene = scene;\n        this._initialize();\n    }\n    _initialize() {\n        this._sceneReadyObserver = this._scene.onReadyObservable.add(() => {\n            if (!this.sceneReadyTriggered) {\n                this.onEventTriggeredObservable.notifyObservers({ type: \"SceneReady\" /* FlowGraphEventType.SceneReady */ });\n                this.sceneReadyTriggered = true;\n            }\n        });\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\n            this.onEventTriggeredObservable.notifyObservers({ type: \"SceneDispose\" /* FlowGraphEventType.SceneDispose */ });\n        });\n        this._sceneOnBeforeRenderObserver = this._scene.onBeforeRenderObservable.add(() => {\n            const deltaTime = this._scene.getEngine().getDeltaTime() / 1000; // set in seconds\n            this.onEventTriggeredObservable.notifyObservers({\n                type: \"SceneBeforeRender\" /* FlowGraphEventType.SceneBeforeRender */,\n                payload: {\n                    timeSinceStart: this._startingTime,\n                    deltaTime,\n                },\n            });\n            this._startingTime += deltaTime;\n        });\n        this._meshPickedObserver = this._scene.onPointerObservable.add((pointerInfo) => {\n            this.onEventTriggeredObservable.notifyObservers({ type: \"MeshPick\" /* FlowGraphEventType.MeshPick */, payload: pointerInfo });\n        }, PointerEventTypes.POINTERPICK); // should it be pointerdown?\n        this._meshUnderPointerObserver = this._scene.onMeshUnderPointerUpdatedObservable.add((data) => {\n            // check if the data has changed. Check the state of the last change and see if it is a mesh or null.\n            // if it is a mesh and the previous state was null, trigger over event. If it is null and the previous state was a mesh, trigger out event.\n            // if it is a mesh and the previous state was a mesh, trigger out from the old mesh and over the new mesh\n            // if it is null and the previous state was null, do nothing.\n            const pointerId = data.pointerId;\n            const mesh = data.mesh;\n            const previousState = this._pointerUnderMeshState[pointerId];\n            if (!previousState && mesh) {\n                this.onEventTriggeredObservable.notifyObservers({ type: \"PointerOver\" /* FlowGraphEventType.PointerOver */, payload: { pointerId, mesh } });\n            }\n            else if (previousState && !mesh) {\n                this.onEventTriggeredObservable.notifyObservers({ type: \"PointerOut\" /* FlowGraphEventType.PointerOut */, payload: { pointerId, mesh: previousState } });\n            }\n            else if (previousState && mesh && previousState !== mesh) {\n                this.onEventTriggeredObservable.notifyObservers({ type: \"PointerOut\" /* FlowGraphEventType.PointerOut */, payload: { pointerId, mesh: previousState, over: mesh } });\n                this.onEventTriggeredObservable.notifyObservers({ type: \"PointerOver\" /* FlowGraphEventType.PointerOver */, payload: { pointerId, mesh, out: previousState } });\n            }\n            this._pointerUnderMeshState[pointerId] = mesh;\n        }, PointerEventTypes.POINTERMOVE);\n    }\n    dispose() {\n        this._sceneDisposeObserver?.remove();\n        this._sceneReadyObserver?.remove();\n        this._sceneOnBeforeRenderObserver?.remove();\n        this._meshPickedObserver?.remove();\n        this._meshUnderPointerObserver?.remove();\n        this.onEventTriggeredObservable.clear();\n    }\n}\n//# sourceMappingURL=flowGraphSceneEventCoordinator.js.map","/**\n * @internal\n * Returns if mesh1 is a descendant of mesh2\n * @param mesh1\n * @param mesh2\n * @returns\n */\nexport function _IsDescendantOf(mesh1, mesh2) {\n    return !!(mesh1.parent && (mesh1.parent === mesh2 || _IsDescendantOf(mesh1.parent, mesh2)));\n}\n/**\n * @internal\n */\nexport function _GetClassNameOf(v) {\n    if (v.getClassName) {\n        return v.getClassName();\n    }\n    return;\n}\n/**\n * @internal\n * Check if two classname are the same and are vector or quaternion classes.\n * @param className the first class name\n * @param className2 the second class name\n * @returns whether the two class names are the same and are vector or quaternion classes.\n */\nexport function _AreSameVectorOrQuaternionClass(className, className2) {\n    return (className === className2 &&\n        (className === \"Vector2\" /* FlowGraphTypes.Vector2 */ || className === \"Vector3\" /* FlowGraphTypes.Vector3 */ || className === \"Vector4\" /* FlowGraphTypes.Vector4 */ || className === \"Quaternion\" /* FlowGraphTypes.Quaternion */));\n}\n/**\n * @internal\n * Check if two classname are the same and are matrix classes.\n * @param className the first class name\n * @param className2 the second class name\n * @returns whether the two class names are the same and are matrix classes.\n */\nexport function _AreSameMatrixClass(className, className2) {\n    return className === className2 && (className === \"Matrix\" /* FlowGraphTypes.Matrix */ || className === \"Matrix2D\" /* FlowGraphTypes.Matrix2D */ || className === \"Matrix3D\" /* FlowGraphTypes.Matrix3D */);\n}\n/**\n * @internal\n * Check if two classname are the same and are integer classes.\n * @param className the first class name\n * @param className2 the second class name\n * @returns whether the two class names are the same and are integer classes.\n */\nexport function _AreSameIntegerClass(className, className2) {\n    return className === \"FlowGraphInteger\" && className2 === \"FlowGraphInteger\";\n}\n/**\n * Check if an object has a numeric value.\n * @param a the object to check if it is a number.\n * @param validIfNaN whether to consider NaN as a valid number.\n * @returns whether a is a FlowGraphNumber (Integer or number).\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function isNumeric(a, validIfNaN) {\n    const isNumeric = typeof a === \"number\" || typeof a?.value === \"number\";\n    if (isNumeric && !validIfNaN) {\n        return !isNaN(getNumericValue(a));\n    }\n    return isNumeric;\n}\n/**\n * Get the numeric value of a FlowGraphNumber.\n * @param a the object to get the numeric value from.\n * @returns the numeric value.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getNumericValue(a) {\n    return typeof a === \"number\" ? a : a.value;\n}\n//# sourceMappingURL=utils.js.map","import { Observable } from \"../Misc/observable\";\nimport { FlowGraphContext } from \"./flowGraphContext\";\nimport { FlowGraphExecutionBlock } from \"./flowGraphExecutionBlock\";\nimport { FlowGraphSceneEventCoordinator } from \"./flowGraphSceneEventCoordinator\";\nimport { _IsDescendantOf } from \"./utils\";\nexport var FlowGraphState;\n(function (FlowGraphState) {\n    /**\n     * The graph is stopped\n     */\n    FlowGraphState[FlowGraphState[\"Stopped\"] = 0] = \"Stopped\";\n    /**\n     * The graph is running\n     */\n    FlowGraphState[FlowGraphState[\"Started\"] = 1] = \"Started\";\n})(FlowGraphState || (FlowGraphState = {}));\n/**\n * Class used to represent a flow graph.\n * A flow graph is a graph of blocks that can be used to create complex logic.\n * Blocks can be added to the graph and connected to each other.\n * The graph can then be started, which will init and start all of its event blocks.\n *\n * @experimental FlowGraph is still in development and is subject to change.\n */\nexport class FlowGraph {\n    /**\n     * The state of the graph\n     */\n    get state() {\n        return this._state;\n    }\n    /**\n     * The state of the graph\n     */\n    set state(value) {\n        this._state = value;\n        this.onStateChangedObservable.notifyObservers(value);\n    }\n    /**\n     * Construct a Flow Graph\n     * @param params construction parameters. currently only the scene\n     */\n    constructor(params) {\n        /**\n         * An observable that is triggered when the state of the graph changes.\n         */\n        this.onStateChangedObservable = new Observable();\n        /** @internal */\n        this._eventBlocks = {\n            [\"SceneReady\" /* FlowGraphEventType.SceneReady */]: [],\n            [\"SceneDispose\" /* FlowGraphEventType.SceneDispose */]: [],\n            [\"SceneBeforeRender\" /* FlowGraphEventType.SceneBeforeRender */]: [],\n            [\"MeshPick\" /* FlowGraphEventType.MeshPick */]: [],\n            [\"PointerDown\" /* FlowGraphEventType.PointerDown */]: [],\n            [\"PointerUp\" /* FlowGraphEventType.PointerUp */]: [],\n            [\"PointerMove\" /* FlowGraphEventType.PointerMove */]: [],\n            [\"PointerOver\" /* FlowGraphEventType.PointerOver */]: [],\n            [\"PointerOut\" /* FlowGraphEventType.PointerOut */]: [],\n            [\"SceneAfterRender\" /* FlowGraphEventType.SceneAfterRender */]: [],\n            [\"NoTrigger\" /* FlowGraphEventType.NoTrigger */]: [],\n        };\n        this._executionContexts = [];\n        /**\n         * The state of the graph\n         */\n        this._state = 0 /* FlowGraphState.Stopped */;\n        this._scene = params.scene;\n        this._sceneEventCoordinator = new FlowGraphSceneEventCoordinator(this._scene);\n        this._coordinator = params.coordinator;\n        this._eventObserver = this._sceneEventCoordinator.onEventTriggeredObservable.add((event) => {\n            for (const context of this._executionContexts) {\n                const order = this._getContextualOrder(event.type, context);\n                for (const block of order) {\n                    // iterate contexts\n                    if (!block._executeEvent(context, event.payload)) {\n                        break;\n                    }\n                }\n            }\n            // custom behavior(s) of specific events\n            switch (event.type) {\n                case \"SceneReady\" /* FlowGraphEventType.SceneReady */:\n                    this._sceneEventCoordinator.sceneReadyTriggered = true;\n                    break;\n                case \"SceneBeforeRender\" /* FlowGraphEventType.SceneBeforeRender */:\n                    for (const context of this._executionContexts) {\n                        context._notifyOnTick(event.payload);\n                    }\n                    break;\n                case \"SceneDispose\" /* FlowGraphEventType.SceneDispose */:\n                    this.dispose();\n                    break;\n            }\n        });\n    }\n    /**\n     * Create a context. A context represents one self contained execution for the graph, with its own variables.\n     * @returns the context, where you can get and set variables\n     */\n    createContext() {\n        const context = new FlowGraphContext({ scene: this._scene, coordinator: this._coordinator });\n        this._executionContexts.push(context);\n        return context;\n    }\n    /**\n     * Returns the execution context at a given index\n     * @param index the index of the context\n     * @returns the execution context at that index\n     */\n    getContext(index) {\n        return this._executionContexts[index];\n    }\n    /**\n     * Add an event block. When the graph is started, it will start listening to events\n     * from the block and execute the graph when they are triggered.\n     * @param block the event block to be added\n     */\n    addEventBlock(block) {\n        if (block.type === \"PointerOver\" /* FlowGraphEventType.PointerOver */ || block.type === \"PointerOut\" /* FlowGraphEventType.PointerOut */) {\n            this._scene.constantlyUpdateMeshUnderPointer = true;\n        }\n        // don't add if NoTrigger, but still start the pending tasks\n        if (block.type !== \"NoTrigger\" /* FlowGraphEventType.NoTrigger */) {\n            this._eventBlocks[block.type].push(block);\n        }\n        // if already started, sort and add to the pending\n        if (this.state === 1 /* FlowGraphState.Started */) {\n            for (const context of this._executionContexts) {\n                block._startPendingTasks(context);\n            }\n        }\n        else {\n            this.onStateChangedObservable.addOnce((state) => {\n                if (state === 1 /* FlowGraphState.Started */) {\n                    for (const context of this._executionContexts) {\n                        block._startPendingTasks(context);\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Starts the flow graph. Initializes the event blocks and starts listening to events.\n     */\n    start() {\n        if (this.state === 1 /* FlowGraphState.Started */) {\n            return;\n        }\n        if (this._executionContexts.length === 0) {\n            this.createContext();\n        }\n        this.onStateChangedObservable.add((state) => {\n            if (state === 1 /* FlowGraphState.Started */) {\n                this._startPendingEvents();\n                // the only event we need to check is the scene ready event. If the scene is already ready when the graph starts, we should start the pending tasks.\n                if (this._scene.isReady(true)) {\n                    this._sceneEventCoordinator.onEventTriggeredObservable.notifyObservers({ type: \"SceneReady\" /* FlowGraphEventType.SceneReady */ });\n                }\n            }\n        });\n        this.state = 1 /* FlowGraphState.Started */;\n    }\n    _startPendingEvents() {\n        for (const context of this._executionContexts) {\n            for (const type in this._eventBlocks) {\n                const order = this._getContextualOrder(type, context);\n                for (const block of order) {\n                    block._startPendingTasks(context);\n                }\n            }\n        }\n    }\n    _getContextualOrder(type, context) {\n        const order = this._eventBlocks[type].sort((a, b) => b.initPriority - a.initPriority);\n        if (type === \"MeshPick\" /* FlowGraphEventType.MeshPick */) {\n            const meshPickOrder = [];\n            for (const block1 of order) {\n                // If the block is a mesh pick, guarantee that picks of children meshes come before picks of parent meshes\n                const mesh1 = block1.asset.getValue(context);\n                let i = 0;\n                for (; i < order.length; i++) {\n                    const block2 = order[i];\n                    const mesh2 = block2.asset.getValue(context);\n                    if (mesh1 && mesh2 && _IsDescendantOf(mesh1, mesh2)) {\n                        break;\n                    }\n                }\n                meshPickOrder.splice(i, 0, block1);\n            }\n            return meshPickOrder;\n        }\n        return order;\n    }\n    /**\n     * Disposes of the flow graph. Cancels any pending tasks and removes all event listeners.\n     */\n    dispose() {\n        if (this.state === 0 /* FlowGraphState.Stopped */) {\n            return;\n        }\n        this.state = 0 /* FlowGraphState.Stopped */;\n        for (const context of this._executionContexts) {\n            context._clearPendingBlocks();\n        }\n        this._executionContexts.length = 0;\n        for (const type in this._eventBlocks) {\n            this._eventBlocks[type].length = 0;\n        }\n        this._eventObserver?.remove();\n        this._sceneEventCoordinator.dispose();\n    }\n    /**\n     * Executes a function in all blocks of a flow graph, starting with the event blocks.\n     * @param visitor the function to execute.\n     */\n    visitAllBlocks(visitor) {\n        const visitList = [];\n        const idsAddedToVisitList = new Set();\n        for (const type in this._eventBlocks) {\n            for (const block of this._eventBlocks[type]) {\n                visitList.push(block);\n                idsAddedToVisitList.add(block.uniqueId);\n            }\n        }\n        while (visitList.length > 0) {\n            const block = visitList.pop();\n            visitor(block);\n            for (const dataIn of block.dataInputs) {\n                for (const connection of dataIn._connectedPoint) {\n                    if (!idsAddedToVisitList.has(connection._ownerBlock.uniqueId)) {\n                        visitList.push(connection._ownerBlock);\n                        idsAddedToVisitList.add(connection._ownerBlock.uniqueId);\n                    }\n                }\n            }\n            if (block instanceof FlowGraphExecutionBlock) {\n                for (const signalOut of block.signalOutputs) {\n                    for (const connection of signalOut._connectedPoint) {\n                        if (!idsAddedToVisitList.has(connection._ownerBlock.uniqueId)) {\n                            visitList.push(connection._ownerBlock);\n                            idsAddedToVisitList.add(connection._ownerBlock.uniqueId);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Serializes a graph\n     * @param serializationObject the object to write the values in\n     * @param valueSerializeFunction a function to serialize complex values\n     */\n    serialize(serializationObject = {}, valueSerializeFunction) {\n        serializationObject.allBlocks = [];\n        this.visitAllBlocks((block) => {\n            const serializedBlock = {};\n            block.serialize(serializedBlock);\n            serializationObject.allBlocks.push(serializedBlock);\n        });\n        serializationObject.executionContexts = [];\n        for (const context of this._executionContexts) {\n            const serializedContext = {};\n            context.serialize(serializedContext, valueSerializeFunction);\n            serializationObject.executionContexts.push(serializedContext);\n        }\n    }\n}\n//# sourceMappingURL=flowGraph.js.map","import { Observable } from \"core/Misc/observable\";\nimport { FlowGraph } from \"./flowGraph\";\nimport { Logger } from \"core/Misc/logger\";\n/**\n * This class holds all of the existing flow graphs and is responsible for creating new ones.\n * It also handles starting/stopping multiple graphs and communication between them through an Event Coordinator\n * This is the entry point for the flow graph system.\n * @experimental This class is still in development and is subject to change.\n */\nexport class FlowGraphCoordinator {\n    constructor(\n    /**\n     * the configuration of the block\n     */\n    config) {\n        this.config = config;\n        /**\n         * When set to true (default) custom events will be dispatched synchronously.\n         * This means that the events will be dispatched immediately when they are triggered.\n         */\n        this.dispatchEventsSynchronously = true;\n        this._flowGraphs = [];\n        this._customEventsMap = new Map();\n        this._eventExecutionCounter = new Map();\n        this._executeOnNextFrame = [];\n        this._eventUniqueId = 0;\n        // When the scene is disposed, dispose all graphs currently running on it.\n        this._disposeObserver = this.config.scene.onDisposeObservable.add(() => {\n            this.dispose();\n        });\n        this._onBeforeRenderObserver = this.config.scene.onBeforeRenderObservable.add(() => {\n            // Reset the event execution counter at the beginning of each frame.\n            this._eventExecutionCounter.clear();\n            // duplicate the _executeOnNextFrame array to avoid modifying it while iterating over it\n            const executeOnNextFrame = this._executeOnNextFrame.slice(0);\n            if (executeOnNextFrame.length) {\n                // Execute the events that were triggered on the next frame.\n                for (const event of executeOnNextFrame) {\n                    this.notifyCustomEvent(event.id, event.data, false);\n                    // remove the event from the array\n                    const index = this._executeOnNextFrame.findIndex((e) => e.uniqueId === event.uniqueId);\n                    if (index !== -1) {\n                        this._executeOnNextFrame.splice(index, 1);\n                    }\n                }\n            }\n        });\n        // Add itself to the SceneCoordinators list for the Inspector.\n        const coordinators = FlowGraphCoordinator.SceneCoordinators.get(this.config.scene) ?? [];\n        coordinators.push(this);\n    }\n    /**\n     * Creates a new flow graph and adds it to the list of existing flow graphs\n     * @returns a new flow graph\n     */\n    createGraph() {\n        const graph = new FlowGraph({ scene: this.config.scene, coordinator: this });\n        this._flowGraphs.push(graph);\n        return graph;\n    }\n    /**\n     * Removes a flow graph from the list of existing flow graphs and disposes it\n     * @param graph the graph to remove\n     */\n    removeGraph(graph) {\n        const index = this._flowGraphs.indexOf(graph);\n        if (index !== -1) {\n            graph.dispose();\n            this._flowGraphs.splice(index, 1);\n        }\n    }\n    /**\n     * Starts all graphs\n     */\n    start() {\n        for (const graph of this._flowGraphs) {\n            graph.start();\n        }\n    }\n    /**\n     * Disposes all graphs\n     */\n    dispose() {\n        for (const graph of this._flowGraphs) {\n            graph.dispose();\n        }\n        this._flowGraphs.length = 0;\n        this._disposeObserver?.remove();\n        this._onBeforeRenderObserver?.remove();\n        // Remove itself from the SceneCoordinators list for the Inspector.\n        const coordinators = FlowGraphCoordinator.SceneCoordinators.get(this.config.scene) ?? [];\n        const index = coordinators.indexOf(this);\n        if (index !== -1) {\n            coordinators.splice(index, 1);\n        }\n    }\n    /**\n     * Serializes this coordinator to a JSON object.\n     * @param serializationObject the object to serialize to\n     * @param valueSerializeFunction the function to use to serialize the value\n     */\n    serialize(serializationObject, valueSerializeFunction) {\n        serializationObject._flowGraphs = [];\n        for (const graph of this._flowGraphs) {\n            const serializedGraph = {};\n            graph.serialize(serializedGraph, valueSerializeFunction);\n            serializationObject._flowGraphs.push(serializedGraph);\n        }\n        serializationObject.dispatchEventsSynchronously = this.dispatchEventsSynchronously;\n    }\n    /**\n     * Gets the list of flow graphs\n     */\n    get flowGraphs() {\n        return this._flowGraphs;\n    }\n    /**\n     * Get an observable that will be notified when the event with the given id is fired.\n     * @param id the id of the event\n     * @returns the observable for the event\n     */\n    getCustomEventObservable(id) {\n        let observable = this._customEventsMap.get(id);\n        if (!observable) {\n            // receive event is initialized before scene start, so no need to notify if triggered. but possible!\n            observable = new Observable( /*undefined, true*/);\n            this._customEventsMap.set(id, observable);\n        }\n        return observable;\n    }\n    /**\n     * Notifies the observable for the given event id with the given data.\n     * @param id the id of the event\n     * @param data the data to send with the event\n     * @param async if true, the event will be dispatched asynchronously\n     */\n    notifyCustomEvent(id, data, async = !this.dispatchEventsSynchronously) {\n        if (async) {\n            this._executeOnNextFrame.push({ id, data, uniqueId: this._eventUniqueId++ });\n            return;\n        }\n        // check if we are not exceeding the max number of events\n        if (this._eventExecutionCounter.has(id)) {\n            const count = this._eventExecutionCounter.get(id);\n            this._eventExecutionCounter.set(id, count + 1);\n            if (count >= FlowGraphCoordinator.MaxEventTypeExecutionPerFrame) {\n                if (count === FlowGraphCoordinator.MaxEventTypeExecutionPerFrame) {\n                    Logger.Warn(`FlowGraphCoordinator: Too many executions of event \"${id}\".`);\n                }\n                return;\n            }\n        }\n        else {\n            this._eventExecutionCounter.set(id, 1);\n        }\n        const observable = this._customEventsMap.get(id);\n        if (observable) {\n            observable.notifyObservers(data);\n        }\n    }\n}\n/**\n * The maximum number of events per type.\n * This is used to limit the number of events that can be created in a single scene.\n * This is to prevent infinite loops.\n */\nFlowGraphCoordinator.MaxEventsPerType = 30;\n/**\n * The maximum number of execution of a specific event in a single frame.\n */\nFlowGraphCoordinator.MaxEventTypeExecutionPerFrame = 30;\n/**\n * @internal\n * A list of all the coordinators per scene. Will be used by the inspector\n */\nFlowGraphCoordinator.SceneCoordinators = new Map();\n//# sourceMappingURL=flowGraphCoordinator.js.map","/**\n * Any external module that wishes to add a new block to the flow graph can add to this object using the helper function.\n */\nconst CustomBlocks = {};\n/**\n * If you want to add a new block to the block factory, you should use this function.\n * Please be sure to choose a unique name and define the responsible module.\n * @param module the name of the module that is responsible for the block\n * @param blockName the name of the block. This should be unique.\n * @param factory an async factory function to generate the block\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function addToBlockFactory(module, blockName, factory) {\n    CustomBlocks[`${module}/${blockName}`] = factory;\n}\n/**\n * a function to get a factory function for a block.\n * @param blockName the block name to initialize. If the block comes from an external module, the name should be in the format \"module/blockName\"\n * @returns an async factory function that will return the block class when called.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function blockFactory(blockName) {\n    switch (blockName) {\n        case \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */:\n            return async () => (await import(\"./Execution/Animation/flowGraphPlayAnimationBlock\")).FlowGraphPlayAnimationBlock;\n        case \"FlowGraphStopAnimationBlock\" /* FlowGraphBlockNames.StopAnimation */:\n            return async () => (await import(\"./Execution/Animation/flowGraphStopAnimationBlock\")).FlowGraphStopAnimationBlock;\n        case \"FlowGraphPauseAnimationBlock\" /* FlowGraphBlockNames.PauseAnimation */:\n            return async () => (await import(\"./Execution/Animation/flowGraphPauseAnimationBlock\")).FlowGraphPauseAnimationBlock;\n        case \"FlowGraphInterpolationBlock\" /* FlowGraphBlockNames.ValueInterpolation */:\n            return async () => (await import(\"./Execution/Animation/flowGraphInterpolationBlock\")).FlowGraphInterpolationBlock;\n        case \"FlowGraphSceneReadyEventBlock\" /* FlowGraphBlockNames.SceneReadyEvent */:\n            return async () => (await import(\"./Event/flowGraphSceneReadyEventBlock\")).FlowGraphSceneReadyEventBlock;\n        case \"FlowGraphSceneTickEventBlock\" /* FlowGraphBlockNames.SceneTickEvent */:\n            return async () => (await import(\"./Event/flowGraphSceneTickEventBlock\")).FlowGraphSceneTickEventBlock;\n        case \"FlowGraphSendCustomEventBlock\" /* FlowGraphBlockNames.SendCustomEvent */:\n            return async () => (await import(\"./Event/flowGraphSendCustomEventBlock\")).FlowGraphSendCustomEventBlock;\n        case \"FlowGraphReceiveCustomEventBlock\" /* FlowGraphBlockNames.ReceiveCustomEvent */:\n            return async () => (await import(\"./Event/flowGraphReceiveCustomEventBlock\")).FlowGraphReceiveCustomEventBlock;\n        case \"FlowGraphMeshPickEventBlock\" /* FlowGraphBlockNames.MeshPickEvent */:\n            return async () => (await import(\"./Event/flowGraphMeshPickEventBlock\")).FlowGraphMeshPickEventBlock;\n        case \"FlowGraphEBlock\" /* FlowGraphBlockNames.E */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphEBlock;\n        case \"FlowGraphPIBlock\" /* FlowGraphBlockNames.PI */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphPiBlock;\n        case \"FlowGraphInfBlock\" /* FlowGraphBlockNames.Inf */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphInfBlock;\n        case \"FlowGraphNaNBlock\" /* FlowGraphBlockNames.NaN */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphNaNBlock;\n        case \"FlowGraphRandomBlock\" /* FlowGraphBlockNames.Random */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphRandomBlock;\n        case \"FlowGraphAddBlock\" /* FlowGraphBlockNames.Add */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphAddBlock;\n        case \"FlowGraphSubtractBlock\" /* FlowGraphBlockNames.Subtract */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphSubtractBlock;\n        case \"FlowGraphMultiplyBlock\" /* FlowGraphBlockNames.Multiply */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphMultiplyBlock;\n        case \"FlowGraphDivideBlock\" /* FlowGraphBlockNames.Divide */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphDivideBlock;\n        case \"FlowGraphAbsBlock\" /* FlowGraphBlockNames.Abs */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphAbsBlock;\n        case \"FlowGraphSignBlock\" /* FlowGraphBlockNames.Sign */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphSignBlock;\n        case \"FlowGraphTruncBlock\" /* FlowGraphBlockNames.Trunc */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphTruncBlock;\n        case \"FlowGraphFloorBlock\" /* FlowGraphBlockNames.Floor */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphFloorBlock;\n        case \"FlowGraphCeilBlock\" /* FlowGraphBlockNames.Ceil */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphCeilBlock;\n        case \"FlowGraphRoundBlock\" /* FlowGraphBlockNames.Round */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphRoundBlock;\n        case \"FlowGraphFractBlock\" /* FlowGraphBlockNames.Fraction */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphFractionBlock;\n        case \"FlowGraphNegationBlock\" /* FlowGraphBlockNames.Negation */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphNegationBlock;\n        case \"FlowGraphModuloBlock\" /* FlowGraphBlockNames.Modulo */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphModuloBlock;\n        case \"FlowGraphMinBlock\" /* FlowGraphBlockNames.Min */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphMinBlock;\n        case \"FlowGraphMaxBlock\" /* FlowGraphBlockNames.Max */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphMaxBlock;\n        case \"FlowGraphClampBlock\" /* FlowGraphBlockNames.Clamp */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphClampBlock;\n        case \"FlowGraphSaturateBlock\" /* FlowGraphBlockNames.Saturate */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphSaturateBlock;\n        case \"FlowGraphMathInterpolationBlock\" /* FlowGraphBlockNames.MathInterpolation */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphMathInterpolationBlock;\n        case \"FlowGraphEqualityBlock\" /* FlowGraphBlockNames.Equality */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphEqualityBlock;\n        case \"FlowGraphLessThanBlock\" /* FlowGraphBlockNames.LessThan */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphLessThanBlock;\n        case \"FlowGraphLessThanOrEqualBlock\" /* FlowGraphBlockNames.LessThanOrEqual */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphLessThanOrEqualBlock;\n        case \"FlowGraphGreaterThanBlock\" /* FlowGraphBlockNames.GreaterThan */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphGreaterThanBlock;\n        case \"FlowGraphGreaterThanOrEqualBlock\" /* FlowGraphBlockNames.GreaterThanOrEqual */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphGreaterThanOrEqualBlock;\n        case \"FlowGraphIsNaNBlock\" /* FlowGraphBlockNames.IsNaN */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphIsNanBlock;\n        case \"FlowGraphIsInfBlock\" /* FlowGraphBlockNames.IsInfinity */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphIsInfinityBlock;\n        case \"FlowGraphDegToRadBlock\" /* FlowGraphBlockNames.DegToRad */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphDegToRadBlock;\n        case \"FlowGraphRadToDegBlock\" /* FlowGraphBlockNames.RadToDeg */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphRadToDegBlock;\n        case \"FlowGraphSinBlock\" /* FlowGraphBlockNames.Sin */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphSinBlock;\n        case \"FlowGraphCosBlock\" /* FlowGraphBlockNames.Cos */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphCosBlock;\n        case \"FlowGraphTanBlock\" /* FlowGraphBlockNames.Tan */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphTanBlock;\n        case \"FlowGraphASinBlock\" /* FlowGraphBlockNames.Asin */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphAsinBlock;\n        case \"FlowGraphACosBlock\" /* FlowGraphBlockNames.Acos */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphAcosBlock;\n        case \"FlowGraphATanBlock\" /* FlowGraphBlockNames.Atan */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphAtanBlock;\n        case \"FlowGraphATan2Block\" /* FlowGraphBlockNames.Atan2 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphAtan2Block;\n        case \"FlowGraphSinhBlock\" /* FlowGraphBlockNames.Sinh */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphSinhBlock;\n        case \"FlowGraphCoshBlock\" /* FlowGraphBlockNames.Cosh */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphCoshBlock;\n        case \"FlowGraphTanhBlock\" /* FlowGraphBlockNames.Tanh */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphTanhBlock;\n        case \"FlowGraphASinhBlock\" /* FlowGraphBlockNames.Asinh */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphAsinhBlock;\n        case \"FlowGraphACoshBlock\" /* FlowGraphBlockNames.Acosh */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphAcoshBlock;\n        case \"FlowGraphATanhBlock\" /* FlowGraphBlockNames.Atanh */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphAtanhBlock;\n        case \"FlowGraphExponentialBlock\" /* FlowGraphBlockNames.Exponential */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphExpBlock;\n        case \"FlowGraphLogBlock\" /* FlowGraphBlockNames.Log */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphLogBlock;\n        case \"FlowGraphLog2Block\" /* FlowGraphBlockNames.Log2 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphLog2Block;\n        case \"FlowGraphLog10Block\" /* FlowGraphBlockNames.Log10 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphLog10Block;\n        case \"FlowGraphSquareRootBlock\" /* FlowGraphBlockNames.SquareRoot */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphSquareRootBlock;\n        case \"FlowGraphPowerBlock\" /* FlowGraphBlockNames.Power */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphPowerBlock;\n        case \"FlowGraphCubeRootBlock\" /* FlowGraphBlockNames.CubeRoot */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphCubeRootBlock;\n        case \"FlowGraphBitwiseAndBlock\" /* FlowGraphBlockNames.BitwiseAnd */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphBitwiseAndBlock;\n        case \"FlowGraphBitwiseOrBlock\" /* FlowGraphBlockNames.BitwiseOr */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphBitwiseOrBlock;\n        case \"FlowGraphBitwiseNotBlock\" /* FlowGraphBlockNames.BitwiseNot */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphBitwiseNotBlock;\n        case \"FlowGraphBitwiseXorBlock\" /* FlowGraphBlockNames.BitwiseXor */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphBitwiseXorBlock;\n        case \"FlowGraphBitwiseLeftShiftBlock\" /* FlowGraphBlockNames.BitwiseLeftShift */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphBitwiseLeftShiftBlock;\n        case \"FlowGraphBitwiseRightShiftBlock\" /* FlowGraphBlockNames.BitwiseRightShift */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphBitwiseRightShiftBlock;\n        case \"FlowGraphLengthBlock\" /* FlowGraphBlockNames.Length */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphLengthBlock;\n        case \"FlowGraphNormalizeBlock\" /* FlowGraphBlockNames.Normalize */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphNormalizeBlock;\n        case \"FlowGraphDotBlock\" /* FlowGraphBlockNames.Dot */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphDotBlock;\n        case \"FlowGraphCrossBlock\" /* FlowGraphBlockNames.Cross */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphCrossBlock;\n        case \"FlowGraphRotate2DBlock\" /* FlowGraphBlockNames.Rotate2D */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphRotate2DBlock;\n        case \"FlowGraphRotate3DBlock\" /* FlowGraphBlockNames.Rotate3D */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphRotate3DBlock;\n        case \"FlowGraphTransposeBlock\" /* FlowGraphBlockNames.Transpose */:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks\")).FlowGraphTransposeBlock;\n        case \"FlowGraphDeterminantBlock\" /* FlowGraphBlockNames.Determinant */:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks\")).FlowGraphDeterminantBlock;\n        case \"FlowGraphInvertMatrixBlock\" /* FlowGraphBlockNames.InvertMatrix */:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks\")).FlowGraphInvertMatrixBlock;\n        case \"FlowGraphMatrixMultiplicationBlock\" /* FlowGraphBlockNames.MatrixMultiplication */:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks\")).FlowGraphMatrixMultiplicationBlock;\n        case \"FlowGraphBranchBlock\" /* FlowGraphBlockNames.Branch */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphBranchBlock\")).FlowGraphBranchBlock;\n        case \"FlowGraphSetDelayBlock\" /* FlowGraphBlockNames.SetDelay */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphSetDelayBlock\")).FlowGraphSetDelayBlock;\n        case \"FlowGraphCancelDelayBlock\" /* FlowGraphBlockNames.CancelDelay */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphCancelDelayBlock\")).FlowGraphCancelDelayBlock;\n        case \"FlowGraphCallCounterBlock\" /* FlowGraphBlockNames.CallCounter */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphCounterBlock\")).FlowGraphCallCounterBlock;\n        case \"FlowGraphDebounceBlock\" /* FlowGraphBlockNames.Debounce */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphDebounceBlock\")).FlowGraphDebounceBlock;\n        case \"FlowGraphThrottleBlock\" /* FlowGraphBlockNames.Throttle */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphThrottleBlock\")).FlowGraphThrottleBlock;\n        case \"FlowGraphDoNBlock\" /* FlowGraphBlockNames.DoN */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphDoNBlock\")).FlowGraphDoNBlock;\n        case \"FlowGraphFlipFlopBlock\" /* FlowGraphBlockNames.FlipFlop */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphFlipFlopBlock\")).FlowGraphFlipFlopBlock;\n        case \"FlowGraphForLoopBlock\" /* FlowGraphBlockNames.ForLoop */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphForLoopBlock\")).FlowGraphForLoopBlock;\n        case \"FlowGraphMultiGateBlock\" /* FlowGraphBlockNames.MultiGate */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphMultiGateBlock\")).FlowGraphMultiGateBlock;\n        case \"FlowGraphSequenceBlock\" /* FlowGraphBlockNames.Sequence */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphSequenceBlock\")).FlowGraphSequenceBlock;\n        case \"FlowGraphSwitchBlock\" /* FlowGraphBlockNames.Switch */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphSwitchBlock\")).FlowGraphSwitchBlock;\n        case \"FlowGraphWaitAllBlock\" /* FlowGraphBlockNames.WaitAll */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphWaitAllBlock\")).FlowGraphWaitAllBlock;\n        case \"FlowGraphWhileLoopBlock\" /* FlowGraphBlockNames.WhileLoop */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphWhileLoopBlock\")).FlowGraphWhileLoopBlock;\n        case \"FlowGraphConsoleLogBlock\" /* FlowGraphBlockNames.ConsoleLog */:\n            return async () => (await import(\"./Execution/flowGraphConsoleLogBlock\")).FlowGraphConsoleLogBlock;\n        case \"FlowGraphConditionalBlock\" /* FlowGraphBlockNames.Conditional */:\n            return async () => (await import(\"./Data/flowGraphConditionalDataBlock\")).FlowGraphConditionalDataBlock;\n        case \"FlowGraphConstantBlock\" /* FlowGraphBlockNames.Constant */:\n            return async () => (await import(\"./Data/flowGraphConstantBlock\")).FlowGraphConstantBlock;\n        case \"FlowGraphTransformCoordinatesSystemBlock\" /* FlowGraphBlockNames.TransformCoordinatesSystem */:\n            return async () => (await import(\"./Data/flowGraphTransformCoordinatesSystemBlock\")).FlowGraphTransformCoordinatesSystemBlock;\n        case \"FlowGraphGetAssetBlock\" /* FlowGraphBlockNames.GetAsset */:\n            return async () => (await import(\"./Data/flowGraphGetAssetBlock\")).FlowGraphGetAssetBlock;\n        case \"FlowGraphGetPropertyBlock\" /* FlowGraphBlockNames.GetProperty */:\n            return async () => (await import(\"./Data/flowGraphGetPropertyBlock\")).FlowGraphGetPropertyBlock;\n        case \"FlowGraphSetPropertyBlock\" /* FlowGraphBlockNames.SetProperty */:\n            return async () => (await import(\"./Execution/flowGraphSetPropertyBlock\")).FlowGraphSetPropertyBlock;\n        case \"FlowGraphGetVariableBlock\" /* FlowGraphBlockNames.GetVariable */:\n            return async () => (await import(\"./Data/flowGraphGetVariableBlock\")).FlowGraphGetVariableBlock;\n        case \"FlowGraphSetVariableBlock\" /* FlowGraphBlockNames.SetVariable */:\n            return async () => (await import(\"./Execution/flowGraphSetVariableBlock\")).FlowGraphSetVariableBlock;\n        case \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */:\n            return async () => (await import(\"./Data/Transformers/flowGraphJsonPointerParserBlock\")).FlowGraphJsonPointerParserBlock;\n        case \"FlowGraphLeadingZerosBlock\" /* FlowGraphBlockNames.LeadingZeros */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphLeadingZerosBlock;\n        case \"FlowGraphTrailingZerosBlock\" /* FlowGraphBlockNames.TrailingZeros */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphTrailingZerosBlock;\n        case \"FlowGraphOneBitsCounterBlock\" /* FlowGraphBlockNames.OneBitsCounter */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphOneBitsCounterBlock;\n        case \"FlowGraphCombineVector2Block\" /* FlowGraphBlockNames.CombineVector2 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks\")).FlowGraphCombineVector2Block;\n        case \"FlowGraphCombineVector3Block\" /* FlowGraphBlockNames.CombineVector3 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks\")).FlowGraphCombineVector3Block;\n        case \"FlowGraphCombineVector4Block\" /* FlowGraphBlockNames.CombineVector4 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks\")).FlowGraphCombineVector4Block;\n        case \"FlowGraphCombineMatrixBlock\" /* FlowGraphBlockNames.CombineMatrix */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks\")).FlowGraphCombineMatrixBlock;\n        case \"FlowGraphExtractVector2Block\" /* FlowGraphBlockNames.ExtractVector2 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks\")).FlowGraphExtractVector2Block;\n        case \"FlowGraphExtractVector3Block\" /* FlowGraphBlockNames.ExtractVector3 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks\")).FlowGraphExtractVector3Block;\n        case \"FlowGraphExtractVector4Block\" /* FlowGraphBlockNames.ExtractVector4 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks\")).FlowGraphExtractVector4Block;\n        case \"FlowGraphExtractMatrixBlock\" /* FlowGraphBlockNames.ExtractMatrix */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks\")).FlowGraphExtractMatrixBlock;\n        case \"FlowGraphTransformVectorBlock\" /* FlowGraphBlockNames.TransformVector */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphTransformBlock;\n        case \"FlowGraphTransformCoordinatesBlock\" /* FlowGraphBlockNames.TransformCoordinates */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphTransformCoordinatesBlock;\n        case \"FlowGraphConjugateBlock\" /* FlowGraphBlockNames.Conjugate */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphConjugateBlock;\n        case \"FlowGraphAngleBetweenBlock\" /* FlowGraphBlockNames.AngleBetween */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphAngleBetweenBlock;\n        case \"FlowGraphQuaternionFromAxisAngleBlock\" /* FlowGraphBlockNames.QuaternionFromAxisAngle */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphQuaternionFromAxisAngleBlock;\n        case \"FlowGraphAxisAngleFromQuaternionBlock\" /* FlowGraphBlockNames.AxisAngleFromQuaternion */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphAxisAngleFromQuaternionBlock;\n        case \"FlowGraphQuaternionFromDirectionsBlock\" /* FlowGraphBlockNames.QuaternionFromDirections */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphQuaternionFromDirectionsBlock;\n        case \"FlowGraphMatrixDecompose\" /* FlowGraphBlockNames.MatrixDecompose */:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks\")).FlowGraphMatrixDecomposeBlock;\n        case \"FlowGraphMatrixCompose\" /* FlowGraphBlockNames.MatrixCompose */:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks\")).FlowGraphMatrixComposeBlock;\n        case \"FlowGraphBooleanToFloat\" /* FlowGraphBlockNames.BooleanToFloat */:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks\")).FlowGraphBooleanToFloat;\n        case \"FlowGraphBooleanToInt\" /* FlowGraphBlockNames.BooleanToInt */:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks\")).FlowGraphBooleanToInt;\n        case \"FlowGraphFloatToBoolean\" /* FlowGraphBlockNames.FloatToBoolean */:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks\")).FlowGraphFloatToBoolean;\n        case \"FlowGraphIntToBoolean\" /* FlowGraphBlockNames.IntToBoolean */:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks\")).FlowGraphIntToBoolean;\n        case \"FlowGraphIntToFloat\" /* FlowGraphBlockNames.IntToFloat */:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks\")).FlowGraphIntToFloat;\n        case \"FlowGraphFloatToInt\" /* FlowGraphBlockNames.FloatToInt */:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks\")).FlowGraphFloatToInt;\n        case \"FlowGraphEasingBlock\" /* FlowGraphBlockNames.Easing */:\n            return async () => (await import(\"./Execution/Animation/flowGraphEasingBlock\")).FlowGraphEasingBlock;\n        case \"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */:\n            return async () => (await import(\"./Execution/Animation/flowGraphBezierCurveEasingBlock\")).FlowGraphBezierCurveEasingBlock;\n        case \"FlowGraphPointerOverEventBlock\" /* FlowGraphBlockNames.PointerOverEvent */:\n            return async () => (await import(\"./Event/flowGraphPointerOverEventBlock\")).FlowGraphPointerOverEventBlock;\n        case \"FlowGraphPointerOutEventBlock\" /* FlowGraphBlockNames.PointerOutEvent */:\n            return async () => (await import(\"./Event/flowGraphPointerOutEventBlock\")).FlowGraphPointerOutEventBlock;\n        case \"FlowGraphContextBlock\" /* FlowGraphBlockNames.Context */:\n            return async () => (await import(\"./Data/Utils/flowGraphContextBlock\")).FlowGraphContextBlock;\n        case \"FlowGraphArrayIndexBlock\" /* FlowGraphBlockNames.ArrayIndex */:\n            return async () => (await import(\"./Data/Utils/flowGraphArrayIndexBlock\")).FlowGraphArrayIndexBlock;\n        case \"FlowGraphCodeExecutionBlock\" /* FlowGraphBlockNames.CodeExecution */:\n            return async () => (await import(\"./Data/Utils/flowGraphCodeExecutionBlock\")).FlowGraphCodeExecutionBlock;\n        case \"FlowGraphIndexOfBlock\" /* FlowGraphBlockNames.IndexOf */:\n            return async () => (await import(\"./Data/Utils/flowGraphIndexOfBlock\")).FlowGraphIndexOfBlock;\n        case \"FlowGraphFunctionReference\" /* FlowGraphBlockNames.FunctionReference */:\n            return async () => (await import(\"./Data/Utils/flowGraphFunctionReferenceBlock\")).FlowGraphFunctionReferenceBlock;\n        case \"FlowGraphDataSwitchBlock\" /* FlowGraphBlockNames.DataSwitch */:\n            return async () => (await import(\"./Data/flowGraphDataSwitchBlock\")).FlowGraphDataSwitchBlock;\n        default:\n            // check if the block is a custom block\n            if (CustomBlocks[blockName]) {\n                return CustomBlocks[blockName];\n            }\n            throw new Error(`Unknown block name ${blockName}`);\n    }\n}\n//# sourceMappingURL=flowGraphBlockFactory.js.map","import { FlowGraphExecutionBlock } from \"./flowGraphExecutionBlock\";\n/**\n * An execution block that has an out signal. This signal is triggered when the synchronous execution of this block is done.\n * Most execution blocks will inherit from this, except for the ones that have multiple signals to be triggered.\n * (such as if blocks)\n */\nexport class FlowGraphExecutionBlockWithOutSignal extends FlowGraphExecutionBlock {\n    constructor(config) {\n        super(config);\n        this.out = this._registerSignalOutput(\"out\");\n    }\n}\n//# sourceMappingURL=flowGraphExecutionBlockWithOutSignal.js.map","import { FlowGraphExecutionBlockWithOutSignal } from \"./flowGraphExecutionBlockWithOutSignal\";\n/**\n * An async execution block can start tasks that will be executed asynchronously.\n * It should also be responsible for clearing it in _cancelPendingTasks.\n */\nexport class FlowGraphAsyncExecutionBlock extends FlowGraphExecutionBlockWithOutSignal {\n    constructor(config, events) {\n        super(config);\n        this._eventsSignalOutputs = {};\n        this.done = this._registerSignalOutput(\"done\");\n        if (events) {\n            for (const eventName of events) {\n                this._eventsSignalOutputs[eventName] = this._registerSignalOutput(eventName + \"Event\");\n            }\n        }\n    }\n    /**\n     * @internal\n     * This function can be overridden to execute any\n     * logic that should be executed on every frame\n     * while the async task is pending.\n     * @param context the context in which it is running\n     */\n    _executeOnTick(_context) { }\n    /**\n     * @internal\n     * @param context\n     */\n    _startPendingTasks(context) {\n        if (context._getExecutionVariable(this, \"_initialized\", false)) {\n            this._cancelPendingTasks(context);\n            this._resetAfterCanceled(context);\n        }\n        this._preparePendingTasks(context);\n        context._addPendingBlock(this);\n        this.out._activateSignal(context);\n        context._setExecutionVariable(this, \"_initialized\", true);\n    }\n    _resetAfterCanceled(context) {\n        context._deleteExecutionVariable(this, \"_initialized\");\n        context._removePendingBlock(this);\n    }\n}\n//# sourceMappingURL=flowGraphAsyncExecutionBlock.js.map","import { FlowGraphAsyncExecutionBlock } from \"./flowGraphAsyncExecutionBlock\";\n/**\n * A type of block that listens to an event observable and activates\n * its output signal when the event is triggered.\n */\nexport class FlowGraphEventBlock extends FlowGraphAsyncExecutionBlock {\n    constructor() {\n        super(...arguments);\n        /**\n         * the priority of initialization of this block.\n         * For example, scene start should have a negative priority because it should be initialized last.\n         */\n        this.initPriority = 0;\n        /**\n         * The type of the event\n         */\n        this.type = \"NoTrigger\" /* FlowGraphEventType.NoTrigger */;\n    }\n    /**\n     * @internal\n     */\n    _execute(context) {\n        context._notifyExecuteNode(this);\n        this.done._activateSignal(context);\n    }\n}\n//# sourceMappingURL=flowGraphEventBlock.js.map","import { blockFactory } from \"./Blocks/flowGraphBlockFactory\";\nimport { FlowGraphCoordinator } from \"./flowGraphCoordinator\";\nimport { FlowGraphEventBlock } from \"./flowGraphEventBlock\";\nimport { FlowGraphExecutionBlock } from \"./flowGraphExecutionBlock\";\nimport { defaultValueParseFunction, needsPathConverter } from \"./serialization\";\nimport { getRichTypeByFlowGraphType, RichType } from \"./flowGraphRichTypes\";\n/**\n * Given a list of blocks, find an output data connection that has a specific unique id\n * @param blocks a list of flow graph blocks\n * @param uniqueId the unique id of a connection\n * @returns the connection that has this unique id. throws an error if none was found\n */\nexport function GetDataOutConnectionByUniqueId(blocks, uniqueId) {\n    for (const block of blocks) {\n        for (const dataOut of block.dataOutputs) {\n            if (dataOut.uniqueId === uniqueId) {\n                return dataOut;\n            }\n        }\n    }\n    throw new Error(\"Could not find data out connection with unique id \" + uniqueId);\n}\n/**\n * Given a list of blocks, find an input signal connection that has a specific unique id\n * @param blocks a list of flow graph blocks\n * @param uniqueId the unique id of a connection\n * @returns the connection that has this unique id. throws an error if none was found\n */\nexport function GetSignalInConnectionByUniqueId(blocks, uniqueId) {\n    for (const block of blocks) {\n        if (block instanceof FlowGraphExecutionBlock) {\n            for (const signalIn of block.signalInputs) {\n                if (signalIn.uniqueId === uniqueId) {\n                    return signalIn;\n                }\n            }\n        }\n    }\n    throw new Error(\"Could not find signal in connection with unique id \" + uniqueId);\n}\n/**\n * Parses a serialized coordinator.\n * @param serializedObject the object to parse\n * @param options the options to use when parsing\n * @returns the parsed coordinator\n */\nexport async function ParseCoordinatorAsync(serializedObject, options) {\n    const valueParseFunction = options.valueParseFunction ?? defaultValueParseFunction;\n    const coordinator = new FlowGraphCoordinator({ scene: options.scene });\n    if (serializedObject.dispatchEventsSynchronously) {\n        coordinator.dispatchEventsSynchronously = serializedObject.dispatchEventsSynchronously;\n    }\n    await options.scene.whenReadyAsync();\n    // if custom default values are defined, set them in the global context\n    if (serializedObject._defaultValues) {\n        for (const key in serializedObject._defaultValues) {\n            // key is the FlowGraphType, value is the default value\n            const value = serializedObject._defaultValues[key];\n            getRichTypeByFlowGraphType(key).defaultValue = value;\n        }\n    }\n    // async-parse the flow graphs. This can be done in parallel\n    await Promise.all(serializedObject._flowGraphs?.map(async (serializedGraph) => await ParseFlowGraphAsync(serializedGraph, { coordinator, valueParseFunction, pathConverter: options.pathConverter })));\n    return coordinator;\n}\n/**\n * Parses a graph from a given serialization object\n * @param serializationObject the object where the values are written\n * @param options options for parsing the graph\n * @returns the parsed graph\n */\nexport async function ParseFlowGraphAsync(serializationObject, options) {\n    // get all classes types needed for the blocks using the block factory\n    const resolvedClasses = await Promise.all(serializationObject.allBlocks.map(async (serializedBlock) => {\n        const classFactory = blockFactory(serializedBlock.className);\n        return await classFactory();\n    }));\n    // async will be used when we start using the block async factory\n    return ParseFlowGraph(serializationObject, options, resolvedClasses);\n}\n/**\n * Parses a graph from a given serialization object\n * @param serializationObject the object where the values are written\n * @param options options for parsing the graph\n * @param resolvedClasses the resolved classes for the blocks\n * @returns the parsed graph\n */\nexport function ParseFlowGraph(serializationObject, options, resolvedClasses) {\n    const graph = options.coordinator.createGraph();\n    const blocks = [];\n    const valueParseFunction = options.valueParseFunction ?? defaultValueParseFunction;\n    // Parse all blocks\n    // for (const serializedBlock of serializationObject.allBlocks) {\n    for (let i = 0; i < serializationObject.allBlocks.length; i++) {\n        const serializedBlock = serializationObject.allBlocks[i];\n        const block = ParseFlowGraphBlockWithClassType(serializedBlock, { scene: options.coordinator.config.scene, pathConverter: options.pathConverter, assetsContainer: options.coordinator.config.scene, valueParseFunction }, resolvedClasses[i]);\n        blocks.push(block);\n        if (block instanceof FlowGraphEventBlock) {\n            graph.addEventBlock(block);\n        }\n    }\n    // After parsing all blocks, connect them\n    for (const block of blocks) {\n        for (const dataIn of block.dataInputs) {\n            for (const serializedConnection of dataIn.connectedPointIds) {\n                const connection = GetDataOutConnectionByUniqueId(blocks, serializedConnection);\n                dataIn.connectTo(connection);\n            }\n        }\n        if (block instanceof FlowGraphExecutionBlock) {\n            for (const signalOut of block.signalOutputs) {\n                for (const serializedConnection of signalOut.connectedPointIds) {\n                    const connection = GetSignalInConnectionByUniqueId(blocks, serializedConnection);\n                    signalOut.connectTo(connection);\n                }\n            }\n        }\n    }\n    for (const serializedContext of serializationObject.executionContexts) {\n        ParseFlowGraphContext(serializedContext, { graph, valueParseFunction }, serializationObject.rightHanded);\n    }\n    return graph;\n}\n/**\n * Parses a context\n * @param serializationObject the object containing the context serialization values\n * @param options the options for parsing the context\n * @param rightHanded whether the serialized data is right handed\n * @returns\n */\nexport function ParseFlowGraphContext(serializationObject, options, rightHanded) {\n    const result = options.graph.createContext();\n    if (serializationObject.enableLogging) {\n        result.enableLogging = true;\n    }\n    result.treatDataAsRightHanded = rightHanded || false;\n    const valueParseFunction = options.valueParseFunction ?? defaultValueParseFunction;\n    result.uniqueId = serializationObject.uniqueId;\n    const scene = result.getScene();\n    // check if assets context is available\n    if (serializationObject._assetsContext) {\n        const ac = serializationObject._assetsContext;\n        const assetsContext = {\n            meshes: ac.meshes?.map((m) => scene.getMeshById(m)),\n            lights: ac.lights?.map((l) => scene.getLightByName(l)),\n            cameras: ac.cameras?.map((c) => scene.getCameraByName(c)),\n            materials: ac.materials?.map((m) => scene.getMaterialById(m)),\n            textures: ac.textures?.map((t) => scene.getTextureByName(t)),\n            animations: ac.animations?.map((a) => scene.animations.find((anim) => anim.name === a)),\n            skeletons: ac.skeletons?.map((s) => scene.getSkeletonByName(s)),\n            particleSystems: ac.particleSystems?.map((ps) => scene.getParticleSystemById(ps)),\n            animationGroups: ac.animationGroups?.map((ag) => scene.getAnimationGroupByName(ag)),\n            transformNodes: ac.transformNodes?.map((tn) => scene.getTransformNodeById(tn)),\n            rootNodes: [],\n            multiMaterials: [],\n            morphTargetManagers: [],\n            geometries: [],\n            actionManagers: [],\n            environmentTexture: null,\n            postProcesses: [],\n            sounds: null,\n            effectLayers: [],\n            layers: [],\n            reflectionProbes: [],\n            lensFlareSystems: [],\n            proceduralTextures: [],\n            getNodes: function () {\n                throw new Error(\"Function not implemented.\");\n            },\n        };\n        result.assetsContext = assetsContext;\n    }\n    for (const key in serializationObject._userVariables) {\n        const value = valueParseFunction(key, serializationObject._userVariables, result.assetsContext, scene);\n        result.userVariables[key] = value;\n    }\n    for (const key in serializationObject._connectionValues) {\n        const value = valueParseFunction(key, serializationObject._connectionValues, result.assetsContext, scene);\n        result._setConnectionValueByKey(key, value);\n    }\n    return result;\n}\n/**\n * Parses a block from a serialization object\n * This function is async due to the factory method that is used to create the block's class. If you load the class externally use ParseBlockWithClassType\n * @param serializationObject the object to parse from\n * @param parseOptions options for parsing the block\n * @returns the parsed block\n */\nexport async function ParseBlockAsync(serializationObject, parseOptions) {\n    const classFactory = blockFactory(serializationObject.className);\n    const classType = await classFactory();\n    return ParseFlowGraphBlockWithClassType(serializationObject, parseOptions, classType);\n}\n/**\n * Parses a block from a serialization object\n * @param serializationObject the object to parse from\n * @param parseOptions options for parsing the block\n * @param classType the class type of the block. This is used when the class is not loaded asynchronously\n * @returns the parsed block\n */\nexport function ParseFlowGraphBlockWithClassType(serializationObject, parseOptions, classType) {\n    const parsedConfig = {};\n    const valueParseFunction = parseOptions.valueParseFunction ?? defaultValueParseFunction;\n    if (serializationObject.config) {\n        for (const key in serializationObject.config) {\n            parsedConfig[key] = valueParseFunction(key, serializationObject.config, parseOptions.assetsContainer || parseOptions.scene, parseOptions.scene);\n        }\n    }\n    if (needsPathConverter(serializationObject.className)) {\n        if (!parseOptions.pathConverter) {\n            throw new Error(\"Path converter is required for this block\");\n        }\n        parsedConfig.pathConverter = parseOptions.pathConverter;\n    }\n    const obj = new classType(parsedConfig);\n    obj.uniqueId = serializationObject.uniqueId;\n    for (let i = 0; i < serializationObject.dataInputs.length; i++) {\n        const dataInput = obj.getDataInput(serializationObject.dataInputs[i].name);\n        if (dataInput) {\n            dataInput.deserialize(serializationObject.dataInputs[i]);\n        }\n        else {\n            throw new Error(\"Could not find data input with name \" + serializationObject.dataInputs[i].name + \" in block \" + serializationObject.className);\n        }\n    }\n    for (let i = 0; i < serializationObject.dataOutputs.length; i++) {\n        const dataOutput = obj.getDataOutput(serializationObject.dataOutputs[i].name);\n        if (dataOutput) {\n            dataOutput.deserialize(serializationObject.dataOutputs[i]);\n        }\n        else {\n            throw new Error(\"Could not find data output with name \" + serializationObject.dataOutputs[i].name + \" in block \" + serializationObject.className);\n        }\n    }\n    obj.metadata = serializationObject.metadata;\n    obj.deserialize && obj.deserialize(serializationObject);\n    return obj;\n}\n/**\n * Parses a connection from an object\n * @param serializationObject the object to parse from.\n * @param ownerBlock the block that owns the connection.\n * @param classType the class type of the connection.\n * @returns the parsed connection.\n */\nexport function ParseGraphConnectionWithClassType(serializationObject = {}, ownerBlock, classType) {\n    const connection = new classType(serializationObject.name, serializationObject._connectionType, ownerBlock);\n    connection.deserialize(serializationObject);\n    return connection;\n}\n/**\n * Parses a data connection from a serialized object.\n * @param serializationObject the object to parse from\n * @param ownerBlock the block that owns the connection\n * @param classType the class type of the data connection\n * @returns the parsed connection\n */\nexport function ParseGraphDataConnection(serializationObject, ownerBlock, classType) {\n    const richType = ParseRichType(serializationObject.richType);\n    const defaultValue = serializationObject.defaultValue;\n    const connection = new classType(serializationObject.name, serializationObject._connectionType, ownerBlock, richType, defaultValue, !!serializationObject._optional);\n    connection.deserialize(serializationObject);\n    return connection;\n}\n/**\n * Parses a rich type from a serialization object.\n * @param serializationObject a serialization object\n * @returns the parsed rich type\n */\nfunction ParseRichType(serializationObject) {\n    return new RichType(serializationObject.typeName, serializationObject.defaultValue);\n}\n//# sourceMappingURL=flowGraphParser.js.map","import { getMappingForDeclaration, getMappingForFullOperationName } from \"./declarationMapper\";\nimport { Logger } from \"core/Misc/logger\";\nimport { RandomGUID } from \"core/Misc/guid\";\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const gltfTypeToBabylonType = {\n    float: { length: 1, flowGraphType: \"number\" /* FlowGraphTypes.Number */, elementType: \"number\" },\n    bool: { length: 1, flowGraphType: \"boolean\" /* FlowGraphTypes.Boolean */, elementType: \"boolean\" },\n    float2: { length: 2, flowGraphType: \"Vector2\" /* FlowGraphTypes.Vector2 */, elementType: \"number\" },\n    float3: { length: 3, flowGraphType: \"Vector3\" /* FlowGraphTypes.Vector3 */, elementType: \"number\" },\n    float4: { length: 4, flowGraphType: \"Vector4\" /* FlowGraphTypes.Vector4 */, elementType: \"number\" },\n    float4x4: { length: 16, flowGraphType: \"Matrix\" /* FlowGraphTypes.Matrix */, elementType: \"number\" },\n    float2x2: { length: 4, flowGraphType: \"Matrix2D\" /* FlowGraphTypes.Matrix2D */, elementType: \"number\" },\n    float3x3: { length: 9, flowGraphType: \"Matrix3D\" /* FlowGraphTypes.Matrix3D */, elementType: \"number\" },\n    int: { length: 1, flowGraphType: \"FlowGraphInteger\" /* FlowGraphTypes.Integer */, elementType: \"number\" },\n};\nexport class InteractivityGraphToFlowGraphParser {\n    constructor(_interactivityGraph, _gltf, _animationTargetFps = 60) {\n        this._interactivityGraph = _interactivityGraph;\n        this._gltf = _gltf;\n        this._animationTargetFps = _animationTargetFps;\n        /**\n         * Note - the graph should be rejected if the same type is defined twice.\n         * We currently don't validate that.\n         */\n        this._types = [];\n        this._mappings = [];\n        this._staticVariables = [];\n        this._events = [];\n        this._internalEventsCounter = 0;\n        this._nodes = [];\n        // start with types\n        this._parseTypes();\n        // continue with declarations\n        this._parseDeclarations();\n        this._parseVariables();\n        this._parseEvents();\n        this._parseNodes();\n    }\n    get arrays() {\n        return {\n            types: this._types,\n            mappings: this._mappings,\n            staticVariables: this._staticVariables,\n            events: this._events,\n            nodes: this._nodes,\n        };\n    }\n    _parseTypes() {\n        if (!this._interactivityGraph.types) {\n            return;\n        }\n        for (const type of this._interactivityGraph.types) {\n            this._types.push(gltfTypeToBabylonType[type.signature]);\n        }\n    }\n    _parseDeclarations() {\n        if (!this._interactivityGraph.declarations) {\n            return;\n        }\n        for (const declaration of this._interactivityGraph.declarations) {\n            // make sure we have the mapping for this operation\n            const mapping = getMappingForDeclaration(declaration);\n            // mapping is defined, because we generate an empty mapping if it's not found\n            if (!mapping) {\n                Logger.Error([\"No mapping found for declaration\", declaration]);\n                throw new Error(\"Error parsing declarations\");\n            }\n            this._mappings.push({\n                flowGraphMapping: mapping,\n                fullOperationName: declaration.extension ? declaration.op + \":\" + declaration.extension : declaration.op,\n            });\n        }\n    }\n    _parseVariables() {\n        if (!this._interactivityGraph.variables) {\n            return;\n        }\n        for (const variable of this._interactivityGraph.variables) {\n            const parsed = this._parseVariable(variable);\n            // set the default values here\n            this._staticVariables.push(parsed);\n        }\n    }\n    _parseVariable(variable, dataTransform) {\n        const type = this._types[variable.type];\n        if (!type) {\n            Logger.Error([\"No type found for variable\", variable]);\n            throw new Error(\"Error parsing variables\");\n        }\n        if (variable.value) {\n            if (variable.value.length !== type.length) {\n                Logger.Error([\"Invalid value length for variable\", variable, type]);\n                throw new Error(\"Error parsing variables\");\n            }\n        }\n        const value = variable.value || [];\n        if (!value.length) {\n            switch (type.flowGraphType) {\n                case \"boolean\" /* FlowGraphTypes.Boolean */:\n                    value.push(false);\n                    break;\n                case \"FlowGraphInteger\" /* FlowGraphTypes.Integer */:\n                    value.push(0);\n                    break;\n                case \"number\" /* FlowGraphTypes.Number */:\n                    value.push(NaN);\n                    break;\n                case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n                    value.push(NaN, NaN);\n                    break;\n                case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n                    value.push(NaN, NaN, NaN);\n                    break;\n                case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n                case \"Matrix2D\" /* FlowGraphTypes.Matrix2D */:\n                case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n                    value.fill(NaN, 0, 4);\n                    break;\n                case \"Matrix\" /* FlowGraphTypes.Matrix */:\n                    value.fill(NaN, 0, 16);\n                    break;\n                case \"Matrix3D\" /* FlowGraphTypes.Matrix3D */:\n                    value.fill(NaN, 0, 9);\n                    break;\n                default:\n                    break;\n            }\n        }\n        // in case of NaN, Infinity, we need to parse the string to the object itself\n        if (type.elementType === \"number\" && typeof value[0] === \"string\") {\n            value[0] = parseFloat(value[0]);\n        }\n        return { type: type.flowGraphType, value: dataTransform ? dataTransform(value, this) : value };\n    }\n    _parseEvents() {\n        if (!this._interactivityGraph.events) {\n            return;\n        }\n        for (const event of this._interactivityGraph.events) {\n            const converted = {\n                eventId: event.id || \"internalEvent_\" + this._internalEventsCounter++,\n            };\n            if (event.values) {\n                converted.eventData = Object.keys(event.values).map((key) => {\n                    const eventValue = event.values?.[key];\n                    if (!eventValue) {\n                        Logger.Error([\"No value found for event key\", key]);\n                        throw new Error(\"Error parsing events\");\n                    }\n                    const type = this._types[eventValue.type];\n                    if (!type) {\n                        Logger.Error([\"No type found for event value\", eventValue]);\n                        throw new Error(\"Error parsing events\");\n                    }\n                    const value = typeof eventValue.value !== \"undefined\" ? this._parseVariable(eventValue) : undefined;\n                    return {\n                        id: key,\n                        type: type.flowGraphType,\n                        eventData: true,\n                        value,\n                    };\n                });\n            }\n            this._events.push(converted);\n        }\n    }\n    _parseNodes() {\n        if (!this._interactivityGraph.nodes) {\n            return;\n        }\n        for (const node of this._interactivityGraph.nodes) {\n            // some validation\n            if (typeof node.declaration !== \"number\") {\n                Logger.Error([\"No declaration found for node\", node]);\n                throw new Error(\"Error parsing nodes\");\n            }\n            const mapping = this._mappings[node.declaration];\n            if (!mapping) {\n                Logger.Error([\"No mapping found for node\", node]);\n                throw new Error(\"Error parsing nodes\");\n            }\n            if (mapping.flowGraphMapping.validation) {\n                const validationResult = mapping.flowGraphMapping.validation(node, this._interactivityGraph, this._gltf);\n                if (!validationResult.valid) {\n                    throw new Error(`Error validating interactivity node ${this._interactivityGraph.declarations?.[node.declaration].op} - ${validationResult.error}`);\n                }\n            }\n            const blocks = [];\n            // create block(s) for this node using the mapping\n            for (const blockType of mapping.flowGraphMapping.blocks) {\n                const block = this._getEmptyBlock(blockType, mapping.fullOperationName);\n                this._parseNodeConfiguration(node, block, mapping.flowGraphMapping, blockType);\n                blocks.push(block);\n            }\n            this._nodes.push({ blocks, fullOperationName: mapping.fullOperationName });\n        }\n    }\n    _getEmptyBlock(className, type) {\n        const uniqueId = RandomGUID();\n        const dataInputs = [];\n        const dataOutputs = [];\n        const signalInputs = [];\n        const signalOutputs = [];\n        const config = {};\n        const metadata = {};\n        return {\n            uniqueId,\n            className,\n            dataInputs,\n            dataOutputs,\n            signalInputs,\n            signalOutputs,\n            config,\n            type,\n            metadata,\n        };\n    }\n    _parseNodeConfiguration(node, block, nodeMapping, blockType) {\n        const configuration = block.config;\n        if (node.configuration) {\n            const keys = Object.keys(node.configuration);\n            for (const key of keys) {\n                const value = node.configuration?.[key];\n                // value is always an array, never a number or string\n                if (!value) {\n                    Logger.Error([\"No value found for node configuration\", key]);\n                    throw new Error(\"Error parsing node configuration\");\n                }\n                const configMapping = nodeMapping.configuration?.[key];\n                const belongsToBlock = configMapping && configMapping.toBlock ? configMapping.toBlock === blockType : nodeMapping.blocks.indexOf(blockType) === 0;\n                if (belongsToBlock) {\n                    // get the right name for the configuration key\n                    const configKey = configMapping?.name || key;\n                    if ((!value || typeof value.value === \"undefined\") && typeof configMapping?.defaultValue !== \"undefined\") {\n                        configuration[configKey] = {\n                            value: configMapping.defaultValue,\n                        };\n                    }\n                    else if (value.value.length >= 0) {\n                        // supporting int[] and int/boolean/string\n                        configuration[configKey] = {\n                            value: value.value.length === 1 ? value.value[0] : value.value,\n                        };\n                    }\n                    else {\n                        Logger.Warn([\"Invalid value for node configuration\", value]);\n                    }\n                    // make sure we transform the data if needed\n                    if (configMapping && configMapping.dataTransformer) {\n                        configuration[configKey].value = configMapping.dataTransformer([configuration[configKey].value], this)[0];\n                    }\n                }\n            }\n        }\n    }\n    _parseNodeConnections(context) {\n        for (let i = 0; i < this._nodes.length; i++) {\n            // get the corresponding gltf node\n            const gltfNode = this._interactivityGraph.nodes?.[i];\n            if (!gltfNode) {\n                // should never happen but let's still check\n                Logger.Error([\"No node found for interactivity node\", this._nodes[i]]);\n                throw new Error(\"Error parsing node connections\");\n            }\n            const flowGraphBlocks = this._nodes[i];\n            const outputMapper = this._mappings[gltfNode.declaration];\n            // validate\n            if (!outputMapper) {\n                Logger.Error([\"No mapping found for node\", gltfNode]);\n                throw new Error(\"Error parsing node connections\");\n            }\n            const flowsFromGLTF = gltfNode.flows || {};\n            const flowsKeys = Object.keys(flowsFromGLTF).sort(); // sorting as some operations require sorted keys\n            // connect the flows\n            for (const flowKey of flowsKeys) {\n                const flow = flowsFromGLTF[flowKey];\n                const flowMapping = outputMapper.flowGraphMapping.outputs?.flows?.[flowKey];\n                const socketOutName = flowMapping?.name || flowKey;\n                // create a serialized socket\n                const socketOut = this._createNewSocketConnection(socketOutName, true);\n                const block = (flowMapping && flowMapping.toBlock && flowGraphBlocks.blocks.find((b) => b.className === flowMapping.toBlock)) || flowGraphBlocks.blocks[0];\n                block.signalOutputs.push(socketOut);\n                // get the input node of this block\n                const inputNodeId = flow.node;\n                const nodeIn = this._nodes[inputNodeId];\n                if (!nodeIn) {\n                    Logger.Error([\"No node found for input node id\", inputNodeId]);\n                    throw new Error(\"Error parsing node connections\");\n                }\n                // get the mapper for the input node - in case it mapped to multiple blocks\n                const inputMapper = getMappingForFullOperationName(nodeIn.fullOperationName);\n                if (!inputMapper) {\n                    Logger.Error([\"No mapping found for input node\", nodeIn]);\n                    throw new Error(\"Error parsing node connections\");\n                }\n                let flowInMapping = inputMapper.inputs?.flows?.[flow.socket || \"in\"];\n                let arrayMapping = false;\n                if (!flowInMapping) {\n                    for (const key in inputMapper.inputs?.flows) {\n                        if (key.startsWith(\"[\") && key.endsWith(\"]\")) {\n                            arrayMapping = true;\n                            flowInMapping = inputMapper.inputs?.flows?.[key];\n                        }\n                    }\n                }\n                const nodeInSocketName = flowInMapping ? (arrayMapping ? flowInMapping.name.replace(\"$1\", flow.socket || \"\") : flowInMapping.name) : flow.socket || \"in\";\n                const inputBlock = (flowInMapping && flowInMapping.toBlock && nodeIn.blocks.find((b) => b.className === flowInMapping.toBlock)) || nodeIn.blocks[0];\n                // in all of the flow graph input connections, find the one with the same name as the socket\n                let socketIn = inputBlock.signalInputs.find((s) => s.name === nodeInSocketName);\n                // if the socket doesn't exist, create the input socket for the connection\n                if (!socketIn) {\n                    socketIn = this._createNewSocketConnection(nodeInSocketName);\n                    inputBlock.signalInputs.push(socketIn);\n                }\n                // connect the sockets\n                socketIn.connectedPointIds.push(socketOut.uniqueId);\n                socketOut.connectedPointIds.push(socketIn.uniqueId);\n            }\n            // connect the values\n            const valuesFromGLTF = gltfNode.values || {};\n            const valuesKeys = Object.keys(valuesFromGLTF);\n            for (const valueKey of valuesKeys) {\n                const value = valuesFromGLTF[valueKey];\n                let valueMapping = outputMapper.flowGraphMapping.inputs?.values?.[valueKey];\n                let arrayMapping = false;\n                if (!valueMapping) {\n                    for (const key in outputMapper.flowGraphMapping.inputs?.values) {\n                        if (key.startsWith(\"[\") && key.endsWith(\"]\")) {\n                            arrayMapping = true;\n                            valueMapping = outputMapper.flowGraphMapping.inputs?.values?.[key];\n                        }\n                    }\n                }\n                const socketInName = valueMapping ? (arrayMapping ? valueMapping.name.replace(\"$1\", valueKey) : valueMapping.name) : valueKey;\n                // create a serialized socket\n                const socketIn = this._createNewSocketConnection(socketInName);\n                const block = (valueMapping && valueMapping.toBlock && flowGraphBlocks.blocks.find((b) => b.className === valueMapping.toBlock)) || flowGraphBlocks.blocks[0];\n                block.dataInputs.push(socketIn);\n                if (value.value !== undefined) {\n                    const convertedValue = this._parseVariable(value, valueMapping && valueMapping.dataTransformer);\n                    context._connectionValues[socketIn.uniqueId] = convertedValue;\n                }\n                else if (typeof value.node !== \"undefined\") {\n                    const nodeOutId = value.node;\n                    const nodeOutSocketName = value.socket || \"value\";\n                    const nodeOut = this._nodes[nodeOutId];\n                    if (!nodeOut) {\n                        Logger.Error([\"No node found for output socket reference\", value]);\n                        throw new Error(\"Error parsing node connections\");\n                    }\n                    const outputMapper = getMappingForFullOperationName(nodeOut.fullOperationName);\n                    if (!outputMapper) {\n                        Logger.Error([\"No mapping found for output socket reference\", value]);\n                        throw new Error(\"Error parsing node connections\");\n                    }\n                    let valueMapping = outputMapper.outputs?.values?.[nodeOutSocketName];\n                    let arrayMapping = false;\n                    // check if there is an array mapping defined\n                    if (!valueMapping) {\n                        // search for a value mapping that has an array mapping\n                        for (const key in outputMapper.outputs?.values) {\n                            if (key.startsWith(\"[\") && key.endsWith(\"]\")) {\n                                arrayMapping = true;\n                                valueMapping = outputMapper.outputs?.values?.[key];\n                            }\n                        }\n                    }\n                    const socketOutName = valueMapping ? (arrayMapping ? valueMapping.name.replace(\"$1\", nodeOutSocketName) : valueMapping?.name) : nodeOutSocketName;\n                    const outBlock = (valueMapping && valueMapping.toBlock && nodeOut.blocks.find((b) => b.className === valueMapping.toBlock)) || nodeOut.blocks[0];\n                    let socketOut = outBlock.dataOutputs.find((s) => s.name === socketOutName);\n                    // if the socket doesn't exist, create it\n                    if (!socketOut) {\n                        socketOut = this._createNewSocketConnection(socketOutName, true);\n                        outBlock.dataOutputs.push(socketOut);\n                    }\n                    // connect the sockets\n                    socketIn.connectedPointIds.push(socketOut.uniqueId);\n                    socketOut.connectedPointIds.push(socketIn.uniqueId);\n                }\n                else {\n                    Logger.Error([\"Invalid value for value connection\", value]);\n                    throw new Error(\"Error parsing node connections\");\n                }\n            }\n            // inter block connections\n            if (outputMapper.flowGraphMapping.interBlockConnectors) {\n                for (const connector of outputMapper.flowGraphMapping.interBlockConnectors) {\n                    const input = connector.input;\n                    const output = connector.output;\n                    const isVariable = connector.isVariable;\n                    this._connectFlowGraphNodes(input, output, flowGraphBlocks.blocks[connector.inputBlockIndex], flowGraphBlocks.blocks[connector.outputBlockIndex], isVariable);\n                }\n            }\n            if (outputMapper.flowGraphMapping.extraProcessor) {\n                const declaration = this._interactivityGraph.declarations?.[gltfNode.declaration];\n                if (!declaration) {\n                    Logger.Error([\"No declaration found for extra processor\", gltfNode]);\n                    throw new Error(\"Error parsing node connections\");\n                }\n                flowGraphBlocks.blocks = outputMapper.flowGraphMapping.extraProcessor(gltfNode, declaration, outputMapper.flowGraphMapping, this, flowGraphBlocks.blocks, context, this._gltf);\n            }\n        }\n    }\n    _createNewSocketConnection(name, isOutput) {\n        return {\n            uniqueId: RandomGUID(),\n            name,\n            _connectionType: isOutput ? 1 /* FlowGraphConnectionType.Output */ : 0 /* FlowGraphConnectionType.Input */,\n            connectedPointIds: [],\n        };\n    }\n    _connectFlowGraphNodes(input, output, serializedInput, serializedOutput, isVariable) {\n        const inputArray = isVariable ? serializedInput.dataInputs : serializedInput.signalInputs;\n        const outputArray = isVariable ? serializedOutput.dataOutputs : serializedOutput.signalOutputs;\n        const inputConnection = inputArray.find((s) => s.name === input) || this._createNewSocketConnection(input);\n        const outputConnection = outputArray.find((s) => s.name === output) || this._createNewSocketConnection(output, true);\n        // of not found add it to the array\n        if (!inputArray.find((s) => s.name === input)) {\n            inputArray.push(inputConnection);\n        }\n        if (!outputArray.find((s) => s.name === output)) {\n            outputArray.push(outputConnection);\n        }\n        // connect the sockets\n        inputConnection.connectedPointIds.push(outputConnection.uniqueId);\n        outputConnection.connectedPointIds.push(inputConnection.uniqueId);\n    }\n    getVariableName(index) {\n        return \"staticVariable_\" + index;\n    }\n    serializeToFlowGraph() {\n        const context = {\n            uniqueId: RandomGUID(),\n            _userVariables: {},\n            _connectionValues: {},\n        };\n        this._parseNodeConnections(context);\n        for (let i = 0; i < this._staticVariables.length; i++) {\n            const variable = this._staticVariables[i];\n            context._userVariables[this.getVariableName(i)] = variable;\n        }\n        const allBlocks = this._nodes.reduce((acc, val) => acc.concat(val.blocks), []);\n        return {\n            rightHanded: true,\n            allBlocks,\n            executionContexts: [context],\n        };\n    }\n}\n//# sourceMappingURL=interactivityGraphParser.js.map","import { FlowGraphCoordinator } from \"core/FlowGraph/flowGraphCoordinator\";\nimport { ParseFlowGraphAsync } from \"core/FlowGraph/flowGraphParser\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nimport { AddObjectAccessorToKey, GetPathToObjectConverter } from \"./objectModelMapping\";\nimport { InteractivityGraphToFlowGraphParser } from \"./KHR_interactivity/interactivityGraphParser\";\nimport { addToBlockFactory } from \"core/FlowGraph/Blocks/flowGraphBlockFactory\";\nimport { Quaternion, Vector3 } from \"core/Maths/math.vector\";\nconst NAME = \"KHR_interactivity\";\n/**\n * Loader extension for KHR_interactivity\n */\nexport class KHR_interactivity {\n    /**\n     * @internal\n     * @param _loader\n     */\n    constructor(_loader) {\n        this._loader = _loader;\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n        this._pathConverter = GetPathToObjectConverter(this._loader.gltf);\n        // avoid starting animations automatically.\n        _loader._skipStartAnimationStep = true;\n        // Update object model with new pointers\n        const scene = _loader.babylonScene;\n        if (scene) {\n            _AddInteractivityObjectModel(scene);\n        }\n    }\n    dispose() {\n        this._loader = null;\n        delete this._pathConverter;\n    }\n    // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/no-misused-promises\n    async onReady() {\n        if (!this._loader.babylonScene || !this._pathConverter) {\n            return;\n        }\n        const scene = this._loader.babylonScene;\n        const interactivityDefinition = this._loader.gltf.extensions?.KHR_interactivity;\n        if (!interactivityDefinition) {\n            // This can technically throw, but it's not a critical error\n            return;\n        }\n        const coordinator = new FlowGraphCoordinator({ scene });\n        coordinator.dispatchEventsSynchronously = false; // glTF interactivity dispatches events asynchronously\n        const graphs = interactivityDefinition.graphs.map((graph) => {\n            const parser = new InteractivityGraphToFlowGraphParser(graph, this._loader.gltf, this._loader.parent.targetFps);\n            return parser.serializeToFlowGraph();\n        });\n        // parse each graph async\n        await Promise.all(graphs.map(async (graph) => await ParseFlowGraphAsync(graph, { coordinator, pathConverter: this._pathConverter })));\n        coordinator.start();\n    }\n}\n/**\n * @internal\n * populates the object model with the interactivity extension\n */\nexport function _AddInteractivityObjectModel(scene) {\n    // Note - all of those are read-only, as per the specs!\n    // active camera rotation\n    AddObjectAccessorToKey(\"/extensions/KHR_interactivity/?/activeCamera/rotation\", {\n        get: () => {\n            if (!scene.activeCamera) {\n                return new Quaternion(NaN, NaN, NaN, NaN);\n            }\n            const quat = Quaternion.FromRotationMatrix(scene.activeCamera.getWorldMatrix()).normalize();\n            if (!scene.useRightHandedSystem) {\n                quat.w *= -1; // glTF uses right-handed system, while babylon uses left-handed\n                quat.x *= -1; // glTF uses right-handed system, while babylon uses left-handed\n            }\n            return quat;\n        },\n        type: \"Quaternion\",\n        getTarget: () => scene.activeCamera,\n    });\n    // activeCamera position\n    AddObjectAccessorToKey(\"/extensions/KHR_interactivity/?/activeCamera/position\", {\n        get: () => {\n            if (!scene.activeCamera) {\n                return new Vector3(NaN, NaN, NaN);\n            }\n            const pos = scene.activeCamera.getWorldMatrix().getTranslation(); // not global position\n            if (!scene.useRightHandedSystem) {\n                pos.x *= -1; // glTF uses right-handed system, while babylon uses left-handed\n            }\n            return pos;\n        },\n        type: \"Vector3\",\n        getTarget: () => scene.activeCamera,\n    });\n    // /animations/{} pointers:\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/isPlaying\", {\n        get: (animation) => {\n            return animation._babylonAnimationGroup?.isPlaying ?? false;\n        },\n        type: \"boolean\",\n        getTarget: (animation) => {\n            return animation._babylonAnimationGroup;\n        },\n    });\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/minTime\", {\n        get: (animation) => {\n            return (animation._babylonAnimationGroup?.from ?? 0) / 60; // fixed factor for duration-to-frames conversion\n        },\n        type: \"number\",\n        getTarget: (animation) => {\n            return animation._babylonAnimationGroup;\n        },\n    });\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/maxTime\", {\n        get: (animation) => {\n            return (animation._babylonAnimationGroup?.to ?? 0) / 60; // fixed factor for duration-to-frames conversion\n        },\n        type: \"number\",\n        getTarget: (animation) => {\n            return animation._babylonAnimationGroup;\n        },\n    });\n    // playhead\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/playhead\", {\n        get: (animation) => {\n            return (animation._babylonAnimationGroup?.getCurrentFrame() ?? 0) / 60; // fixed factor for duration-to-frames conversion\n        },\n        type: \"number\",\n        getTarget: (animation) => {\n            return animation._babylonAnimationGroup;\n        },\n    });\n    //virtualPlayhead - TODO, do we support this property in our animations? getCurrentFrame  is the only method we have for this.\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/virtualPlayhead\", {\n        get: (animation) => {\n            return (animation._babylonAnimationGroup?.getCurrentFrame() ?? 0) / 60; // fixed factor for duration-to-frames conversion\n        },\n        type: \"number\",\n        getTarget: (animation) => {\n            return animation._babylonAnimationGroup;\n        },\n    });\n}\n// Register flow graph blocks. Do it here so they are available when the extension is enabled.\naddToBlockFactory(NAME, \"FlowGraphGLTFDataProvider\", async () => {\n    return (await import(\"./KHR_interactivity/flowGraphGLTFDataProvider\")).FlowGraphGLTFDataProvider;\n});\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_interactivity(loader));\n//# sourceMappingURL=KHR_interactivity.js.map"],"names":[],"mappings":"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"}