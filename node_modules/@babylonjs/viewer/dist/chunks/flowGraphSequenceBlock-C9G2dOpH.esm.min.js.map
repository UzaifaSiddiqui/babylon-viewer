{"version":3,"file":"flowGraphSequenceBlock-C9G2dOpH.esm.min.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Execution/ControlFlow/flowGraphSequenceBlock.js"],"sourcesContent":["import { RegisterClass } from \"../../../../Misc/typeStore\";\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock\";\n/**\n * A block that executes its output flows in sequence.\n */\nexport class FlowGraphSequenceBlock extends FlowGraphExecutionBlock {\n    constructor(\n    /**\n     * the configuration of the block\n     */\n    config) {\n        super(config);\n        this.config = config;\n        /**\n         * The output flows.\n         */\n        this.executionSignals = [];\n        this.setNumberOfOutputSignals(this.config.outputSignalCount);\n    }\n    _execute(context) {\n        for (let i = 0; i < this.executionSignals.length; i++) {\n            this.executionSignals[i]._activateSignal(context);\n        }\n    }\n    /**\n     * Sets the block's output flows. Would usually be passed from the constructor but can be changed afterwards.\n     * @param outputSignalCount the number of output flows\n     */\n    setNumberOfOutputSignals(outputSignalCount = 1) {\n        // check the size of the outFlow Array, see if it is not larger than needed\n        while (this.executionSignals.length > outputSignalCount) {\n            const flow = this.executionSignals.pop();\n            if (flow) {\n                flow.disconnectFromAll();\n                this._unregisterSignalOutput(flow.name);\n            }\n        }\n        while (this.executionSignals.length < outputSignalCount) {\n            this.executionSignals.push(this._registerSignalOutput(`out_${this.executionSignals.length}`));\n        }\n    }\n    /**\n     * @returns class name of the block.\n     */\n    getClassName() {\n        return \"FlowGraphSequenceBlock\" /* FlowGraphBlockNames.Sequence */;\n    }\n}\nRegisterClass(\"FlowGraphSequenceBlock\" /* FlowGraphBlockNames.Sequence */, FlowGraphSequenceBlock);\n//# sourceMappingURL=flowGraphSequenceBlock.js.map"],"names":["FlowGraphSequenceBlock","FlowGraphExecutionBlock","constructor","config","super","this","executionSignals","setNumberOfOutputSignals","outputSignalCount","_execute","context","i","length","_activateSignal","flow","pop","disconnectFromAll","_unregisterSignalOutput","name","push","_registerSignalOutput","getClassName","RegisterClass"],"mappings":"6MAKO,MAAMA,UAA+BC,EACxC,WAAAC,CAIAC,GACIC,MAAMD,GACNE,KAAKF,OAASA,EAIdE,KAAKC,iBAAmB,GACxBD,KAAKE,yBAAyBF,KAAKF,OAAOK,kBAClD,CACI,QAAAC,CAASC,GACL,IAAK,IAAIC,EAAI,EAAGA,EAAIN,KAAKC,iBAAiBM,OAAQD,IAC9CN,KAAKC,iBAAiBK,GAAGE,gBAAgBH,EAErD,CAKI,wBAAAH,CAAyBC,EAAoB,GAEzC,KAAOH,KAAKC,iBAAiBM,OAASJ,GAAmB,CACrD,MAAMM,EAAOT,KAAKC,iBAAiBS,MAC/BD,IACAA,EAAKE,oBACLX,KAAKY,wBAAwBH,EAAKI,MAElD,CACQ,KAAOb,KAAKC,iBAAiBM,OAASJ,GAClCH,KAAKC,iBAAiBa,KAAKd,KAAKe,sBAAsB,OAAOf,KAAKC,iBAAiBM,UAE/F,CAII,YAAAS,GACI,MAAO,wBACf,EAEAC,EAAc,yBAA6DtB"}