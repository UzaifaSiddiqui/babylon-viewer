import { bM as PBRMaterial, C as Constants, bJ as unregisterGLTFExtension, bI as registerGLTFExtension } from './index-D3asnK0t.esm.js';
import { GLTFLoader } from './glTFLoader-CBr8Kx3n.esm.js';
import './bone-CEgSRUT9.esm.js';
import './skeleton-BrMHsdIB.esm.js';
import './rawTexture-BvKpuent.esm.js';
import './assetContainer-C7mU3lyr.esm.js';
import './objectModelMapping-j2gX4FqK.esm.js';

const NAME = "EXT_materials_diffuse_roughness";
/**
 * [Specification](https://github.com/KhronosGroup/glTF/blob/fdee35425ae560ea378092e38977216d63a094ec/extensions/2.0/Khronos/EXT_materials_diffuse_roughness/README.md)
 * @experimental
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
class EXT_materials_diffuse_roughness {
    /**
     * @internal
     */
    constructor(loader) {
        /**
         * The name of this extension.
         */
        this.name = NAME;
        /**
         * Defines a number that determines the order the extensions are applied.
         */
        this.order = 190;
        this._loader = loader;
        this.enabled = this._loader.isExtensionUsed(NAME);
    }
    /** @internal */
    dispose() {
        this._loader = null;
    }
    /**
     * @internal
     */
    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax
    loadMaterialPropertiesAsync(context, material, babylonMaterial) {
        return GLTFLoader.LoadExtensionAsync(context, material, this.name, async (extensionContext, extension) => {
            const promises = new Array();
            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));
            promises.push(this._loadDiffuseRoughnessPropertiesAsync(extensionContext, extension, babylonMaterial));
            // eslint-disable-next-line github/no-then
            return await Promise.all(promises).then(() => { });
        });
    }
    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax
    _loadDiffuseRoughnessPropertiesAsync(context, properties, babylonMaterial) {
        if (!(babylonMaterial instanceof PBRMaterial)) {
            throw new Error(`${context}: Material type not supported`);
        }
        const promises = new Array();
        babylonMaterial.brdf.baseDiffuseModel = Constants.MATERIAL_DIFFUSE_MODEL_E_OREN_NAYAR;
        if (properties.diffuseRoughnessFactor != undefined) {
            babylonMaterial.baseDiffuseRoughness = properties.diffuseRoughnessFactor;
        }
        else {
            babylonMaterial.baseDiffuseRoughness = 0;
        }
        if (properties.diffuseRoughnessTexture) {
            promises.push(this._loader.loadTextureInfoAsync(`${context}/diffuseRoughnessTexture`, properties.diffuseRoughnessTexture, (texture) => {
                texture.name = `${babylonMaterial.name} (Diffuse Roughness)`;
                babylonMaterial.baseDiffuseRoughnessTexture = texture;
            }));
        }
        // eslint-disable-next-line github/no-then
        return Promise.all(promises).then(() => { });
    }
}
unregisterGLTFExtension(NAME);
registerGLTFExtension(NAME, true, (loader) => new EXT_materials_diffuse_roughness(loader));

export { EXT_materials_diffuse_roughness };
//# sourceMappingURL=EXT_materials_diffuse_roughness-DH2GeXs3.esm.js.map
