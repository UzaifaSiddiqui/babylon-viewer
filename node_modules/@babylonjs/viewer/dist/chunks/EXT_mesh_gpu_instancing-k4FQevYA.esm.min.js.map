{"version":3,"file":"EXT_mesh_gpu_instancing-k4FQevYA.esm.min.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/Extensions/EXT_mesh_gpu_instancing.js"],"sourcesContent":["import { Vector3, Quaternion, Matrix, TmpVectors } from \"core/Maths/math.vector\";\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nimport \"core/Meshes/thinInstanceMesh\";\nconst NAME = \"EXT_mesh_gpu_instancing\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_mesh_gpu_instancing/README.md)\n * [Playground Sample](https://playground.babylonjs.com/#QFIGLW#9)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class EXT_mesh_gpu_instancing {\n    /**\n     * @internal\n     */\n    constructor(loader) {\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n    /** @internal */\n    dispose() {\n        this._loader = null;\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line no-restricted-syntax\n    loadNodeAsync(context, node, assign) {\n        return GLTFLoader.LoadExtensionAsync(context, node, this.name, async (extensionContext, extension) => {\n            this._loader._disableInstancedMesh++;\n            const promise = this._loader.loadNodeAsync(`/nodes/${node.index}`, node, assign);\n            this._loader._disableInstancedMesh--;\n            if (!node._primitiveBabylonMeshes) {\n                return await promise;\n            }\n            const promises = new Array();\n            let instanceCount = 0;\n            const loadAttribute = (attribute) => {\n                if (extension.attributes[attribute] == undefined) {\n                    promises.push(Promise.resolve(null));\n                    return;\n                }\n                const accessor = ArrayItem.Get(`${extensionContext}/attributes/${attribute}`, this._loader.gltf.accessors, extension.attributes[attribute]);\n                promises.push(this._loader._loadFloatAccessorAsync(`/accessors/${accessor.bufferView}`, accessor));\n                if (instanceCount === 0) {\n                    instanceCount = accessor.count;\n                }\n                else if (instanceCount !== accessor.count) {\n                    throw new Error(`${extensionContext}/attributes: Instance buffer accessors do not have the same count.`);\n                }\n            };\n            loadAttribute(\"TRANSLATION\");\n            loadAttribute(\"ROTATION\");\n            loadAttribute(\"SCALE\");\n            // eslint-disable-next-line github/no-then\n            return await promise.then(async (babylonTransformNode) => {\n                const [translationBuffer, rotationBuffer, scaleBuffer] = await Promise.all(promises);\n                const matrices = new Float32Array(instanceCount * 16);\n                TmpVectors.Vector3[0].copyFromFloats(0, 0, 0); // translation\n                TmpVectors.Quaternion[0].copyFromFloats(0, 0, 0, 1); // rotation\n                TmpVectors.Vector3[1].copyFromFloats(1, 1, 1); // scale\n                for (let i = 0; i < instanceCount; ++i) {\n                    translationBuffer && Vector3.FromArrayToRef(translationBuffer, i * 3, TmpVectors.Vector3[0]);\n                    rotationBuffer && Quaternion.FromArrayToRef(rotationBuffer, i * 4, TmpVectors.Quaternion[0]);\n                    scaleBuffer && Vector3.FromArrayToRef(scaleBuffer, i * 3, TmpVectors.Vector3[1]);\n                    Matrix.ComposeToRef(TmpVectors.Vector3[1], TmpVectors.Quaternion[0], TmpVectors.Vector3[0], TmpVectors.Matrix[0]);\n                    TmpVectors.Matrix[0].copyToArray(matrices, i * 16);\n                }\n                for (const babylonMesh of node._primitiveBabylonMeshes) {\n                    babylonMesh.thinInstanceSetBuffer(\"matrix\", matrices, 16, true);\n                }\n                return babylonTransformNode;\n            });\n        });\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new EXT_mesh_gpu_instancing(loader));\n//# sourceMappingURL=EXT_mesh_gpu_instancing.js.map"],"names":["NAME","EXT_mesh_gpu_instancing","constructor","loader","this","name","_loader","enabled","isExtensionUsed","dispose","loadNodeAsync","context","node","assign","GLTFLoader","LoadExtensionAsync","async","extensionContext","extension","_disableInstancedMesh","promise","index","_primitiveBabylonMeshes","promises","Array","instanceCount","loadAttribute","attribute","undefined","attributes","push","Promise","resolve","accessor","ArrayItem","Get","gltf","accessors","_loadFloatAccessorAsync","bufferView","count","Error","then","babylonTransformNode","translationBuffer","rotationBuffer","scaleBuffer","all","matrices","Float32Array","TmpVectors","Vector3","copyFromFloats","Quaternion","i","FromArrayToRef","Matrix","ComposeToRef","copyToArray","babylonMesh","thinInstanceSetBuffer","unregisterGLTFExtension","registerGLTFExtension"],"mappings":"maAIA,MAAMA,EAAO,0BAMN,MAAMC,EAIT,WAAAC,CAAYC,GAIRC,KAAKC,KAAOL,EACZI,KAAKE,QAAUH,EACfC,KAAKG,QAAUH,KAAKE,QAAQE,gBAAgBR,EACpD,CAEI,OAAAS,GACIL,KAAKE,QAAU,IACvB,CAKI,aAAAI,CAAcC,EAASC,EAAMC,GACzB,OAAOC,EAAWC,mBAAmBJ,EAASC,EAAMR,KAAKC,MAAMW,MAAOC,EAAkBC,KACpFd,KAAKE,QAAQa,wBACb,MAAMC,EAAUhB,KAAKE,QAAQI,cAAc,UAAUE,EAAKS,QAAST,EAAMC,GAEzE,GADAT,KAAKE,QAAQa,yBACRP,EAAKU,wBACN,aAAaF,EAEjB,MAAMG,EAAW,IAAIC,MACrB,IAAIC,EAAgB,EACpB,MAAMC,EAAiBC,IACnB,GAAuCC,MAAnCV,EAAUW,WAAWF,GAErB,YADAJ,EAASO,KAAKC,QAAQC,QAAQ,OAGlC,MAAMC,EAAWC,EAAUC,IAAI,GAAGlB,gBAA+BU,IAAavB,KAAKE,QAAQ8B,KAAKC,UAAWnB,EAAUW,WAAWF,IAEhI,GADAJ,EAASO,KAAK1B,KAAKE,QAAQgC,wBAAwB,cAAcL,EAASM,aAAcN,IAClE,IAAlBR,EACAA,EAAgBQ,EAASO,WAExB,GAAIf,IAAkBQ,EAASO,MAChC,MAAM,IAAIC,MAAM,GAAGxB,wEAO3B,OAJAS,EAAc,eACdA,EAAc,YACdA,EAAc,eAEDN,EAAQsB,MAAK1B,MAAO2B,IAC7B,MAAOC,EAAmBC,EAAgBC,SAAqBf,QAAQgB,IAAIxB,GACrEyB,EAAW,IAAIC,aAA6B,GAAhBxB,GAClCyB,EAAWC,QAAQ,GAAGC,eAAe,EAAG,EAAG,GAC3CF,EAAWG,WAAW,GAAGD,eAAe,EAAG,EAAG,EAAG,GACjDF,EAAWC,QAAQ,GAAGC,eAAe,EAAG,EAAG,GAC3C,IAAK,IAAIE,EAAI,EAAGA,EAAI7B,IAAiB6B,EACjCV,GAAqBO,EAAQI,eAAeX,EAAuB,EAAJU,EAAOJ,EAAWC,QAAQ,IACzFN,GAAkBQ,EAAWE,eAAeV,EAAoB,EAAJS,EAAOJ,EAAWG,WAAW,IACzFP,GAAeK,EAAQI,eAAeT,EAAiB,EAAJQ,EAAOJ,EAAWC,QAAQ,IAC7EK,EAAOC,aAAaP,EAAWC,QAAQ,GAAID,EAAWG,WAAW,GAAIH,EAAWC,QAAQ,GAAID,EAAWM,OAAO,IAC9GN,EAAWM,OAAO,GAAGE,YAAYV,EAAc,GAAJM,GAE/C,IAAK,MAAMK,KAAe/C,EAAKU,wBAC3BqC,EAAYC,sBAAsB,SAAUZ,EAAU,IAAI,GAE9D,OAAOL,OAGvB,EAEAkB,EAAwB7D,GACxB8D,EAAsB9D,GAAM,GAAOG,GAAW,IAAIF,EAAwBE"}