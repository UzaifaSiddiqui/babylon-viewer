{"version":3,"file":"flowGraphBezierCurveEasingBlock-BRIhI1D1.esm.min.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Execution/Animation/flowGraphBezierCurveEasingBlock.js"],"sourcesContent":["import { BezierCurveEase } from \"core/Animations/easing\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport { RichTypeAny, RichTypeNumber, RichTypeVector2 } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\n/**\n * An easing block that generates a BezierCurveEase easingFunction object based on the data provided.\n */\nexport class FlowGraphBezierCurveEasingBlock extends FlowGraphBlock {\n    constructor(\n    /**\n     * the configuration of the block\n     */\n    config) {\n        super(config);\n        this.config = config;\n        /**\n         * Internal cache of reusable easing functions.\n         * key is type-mode-properties\n         */\n        this._easingFunctions = {};\n        this.mode = this.registerDataInput(\"mode\", RichTypeNumber, 0);\n        this.controlPoint1 = this.registerDataInput(\"controlPoint1\", RichTypeVector2);\n        this.controlPoint2 = this.registerDataInput(\"controlPoint2\", RichTypeVector2);\n        this.easingFunction = this.registerDataOutput(\"easingFunction\", RichTypeAny);\n    }\n    _updateOutputs(context) {\n        const mode = this.mode.getValue(context);\n        const controlPoint1 = this.controlPoint1.getValue(context);\n        const controlPoint2 = this.controlPoint2.getValue(context);\n        if (mode === undefined) {\n            return;\n        }\n        const key = `${mode}-${controlPoint1.x}-${controlPoint1.y}-${controlPoint2.x}-${controlPoint2.y}`;\n        if (!this._easingFunctions[key]) {\n            const easing = new BezierCurveEase(controlPoint1.x, controlPoint1.y, controlPoint2.x, controlPoint2.y);\n            easing.setEasingMode(mode);\n            this._easingFunctions[key] = easing;\n        }\n        this.easingFunction.setValue(this._easingFunctions[key], context);\n    }\n    getClassName() {\n        return \"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */;\n    }\n}\nRegisterClass(\"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */, FlowGraphBezierCurveEasingBlock);\n//# sourceMappingURL=flowGraphBezierCurveEasingBlock.js.map"],"names":["FlowGraphBezierCurveEasingBlock","FlowGraphBlock","constructor","config","super","this","_easingFunctions","mode","registerDataInput","RichTypeNumber","controlPoint1","RichTypeVector2","controlPoint2","easingFunction","registerDataOutput","RichTypeAny","_updateOutputs","context","getValue","undefined","key","x","y","easing","BezierCurveEase","setEasingMode","setValue","getClassName","RegisterClass"],"mappings":"+OAOO,MAAMA,UAAwCC,EACjD,WAAAC,CAIAC,GACIC,MAAMD,GACNE,KAAKF,OAASA,EAKdE,KAAKC,iBAAmB,CAAE,EAC1BD,KAAKE,KAAOF,KAAKG,kBAAkB,OAAQC,EAAgB,GAC3DJ,KAAKK,cAAgBL,KAAKG,kBAAkB,gBAAiBG,GAC7DN,KAAKO,cAAgBP,KAAKG,kBAAkB,gBAAiBG,GAC7DN,KAAKQ,eAAiBR,KAAKS,mBAAmB,iBAAkBC,EACxE,CACI,cAAAC,CAAeC,GACX,MAAMV,EAAOF,KAAKE,KAAKW,SAASD,GAC1BP,EAAgBL,KAAKK,cAAcQ,SAASD,GAC5CL,EAAgBP,KAAKO,cAAcM,SAASD,GAClD,QAAaE,IAATZ,EACA,OAEJ,MAAMa,EAAM,GAAGb,KAAQG,EAAcW,KAAKX,EAAcY,KAAKV,EAAcS,KAAKT,EAAcU,IAC9F,IAAKjB,KAAKC,iBAAiBc,GAAM,CAC7B,MAAMG,EAAS,IAAIC,EAAgBd,EAAcW,EAAGX,EAAcY,EAAGV,EAAcS,EAAGT,EAAcU,GACpGC,EAAOE,cAAclB,GACrBF,KAAKC,iBAAiBc,GAAOG,CACzC,CACQlB,KAAKQ,eAAea,SAASrB,KAAKC,iBAAiBc,GAAMH,EACjE,CACI,YAAAU,GACI,MAAO,4BACf,EAEAC,EAAc,6BAA0E5B"}