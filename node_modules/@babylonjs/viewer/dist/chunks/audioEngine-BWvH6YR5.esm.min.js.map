{"version":3,"file":"audioEngine-BWvH6YR5.esm.min.js","sources":["../../../../../dev/core/dist/Audio/audioEngine.js"],"sourcesContent":["import { Observable } from \"../Misc/observable\";\nimport { Logger } from \"../Misc/logger\";\nimport { AbstractEngine } from \"../Engines/abstractEngine\";\nimport { IsWindowObjectExist } from \"../Misc/domManagement\";\n// Sets the default audio engine to Babylon.js\nAbstractEngine.AudioEngineFactory = (hostElement, audioContext, audioDestination) => {\n    return new AudioEngine(hostElement, audioContext, audioDestination);\n};\n/**\n * This represents the default audio engine used in babylon.\n * It is responsible to play, synchronize and analyse sounds throughout the  application.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\n */\nexport class AudioEngine {\n    /**\n     * Gets the current AudioContext if available.\n     */\n    get audioContext() {\n        if (!this._audioContextInitialized) {\n            this._initializeAudioContext();\n        }\n        return this._audioContext;\n    }\n    /**\n     * Instantiates a new audio engine.\n     *\n     * There should be only one per page as some browsers restrict the number\n     * of audio contexts you can create.\n     * @param hostElement defines the host element where to display the mute icon if necessary\n     * @param audioContext defines the audio context to be used by the audio engine\n     * @param audioDestination defines the audio destination node to be used by audio engine\n     */\n    constructor(hostElement = null, audioContext = null, audioDestination = null) {\n        this._audioContext = null;\n        this._audioContextInitialized = false;\n        this._muteButton = null;\n        this._audioDestination = null;\n        /**\n         * Gets whether the current host supports Web Audio and thus could create AudioContexts.\n         */\n        this.canUseWebAudio = false;\n        /**\n         * Defines if Babylon should emit a warning if WebAudio is not supported.\n         */\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        this.WarnedWebAudioUnsupported = false;\n        /**\n         * Gets whether or not mp3 are supported by your browser.\n         */\n        this.isMP3supported = false;\n        /**\n         * Gets whether or not ogg are supported by your browser.\n         */\n        this.isOGGsupported = false;\n        /**\n         * Gets whether audio has been unlocked on the device.\n         * Some Browsers have strong restrictions about Audio and won't autoplay unless\n         * a user interaction has happened.\n         */\n        this.unlocked = false;\n        /**\n         * Defines if the audio engine relies on a custom unlocked button.\n         * In this case, the embedded button will not be displayed.\n         */\n        this.useCustomUnlockedButton = false;\n        /**\n         * Event raised when audio has been unlocked on the browser.\n         */\n        this.onAudioUnlockedObservable = new Observable();\n        /**\n         * Event raised when audio has been locked on the browser.\n         */\n        this.onAudioLockedObservable = new Observable();\n        this._tryToRun = false;\n        this._onResize = () => {\n            this._moveButtonToTopLeft();\n        };\n        if (!IsWindowObjectExist()) {\n            return;\n        }\n        if (typeof window.AudioContext !== \"undefined\") {\n            this.canUseWebAudio = true;\n        }\n        const audioElem = document.createElement(\"audio\");\n        this._hostElement = hostElement;\n        this._audioContext = audioContext;\n        this._audioDestination = audioDestination;\n        try {\n            if (audioElem &&\n                !!audioElem.canPlayType &&\n                (audioElem.canPlayType('audio/mpeg; codecs=\"mp3\"').replace(/^no$/, \"\") || audioElem.canPlayType(\"audio/mp3\").replace(/^no$/, \"\"))) {\n                this.isMP3supported = true;\n            }\n        }\n        catch (e) {\n            // protect error during capability check.\n        }\n        try {\n            if (audioElem && !!audioElem.canPlayType && audioElem.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, \"\")) {\n                this.isOGGsupported = true;\n            }\n        }\n        catch (e) {\n            // protect error during capability check.\n        }\n    }\n    /**\n     * Flags the audio engine in Locked state.\n     * This happens due to new browser policies preventing audio to autoplay.\n     */\n    lock() {\n        this._triggerSuspendedState();\n    }\n    /**\n     * Unlocks the audio engine once a user action has been done on the dom.\n     * This is helpful to resume play once browser policies have been satisfied.\n     */\n    unlock() {\n        if (this._audioContext?.state === \"running\") {\n            this._hideMuteButton();\n            if (!this.unlocked) {\n                // Notify users that the audio stack is unlocked/unmuted\n                this.unlocked = true;\n                this.onAudioUnlockedObservable.notifyObservers(this);\n            }\n            return;\n        }\n        // On iOS, if the audio context resume request was sent from an event other than a `click` event, then\n        // the resume promise will never resolve and the only way to get the audio context unstuck is to\n        // suspend it and make another resume request.\n        if (this._tryToRun) {\n            // eslint-disable-next-line github/no-then\n            this._audioContext?.suspend().then(() => {\n                this._tryToRun = false;\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                this._triggerRunningStateAsync();\n            }, () => {\n                Logger.Error(\"Failed to suspend audio context.\");\n            });\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this._triggerRunningStateAsync();\n        }\n    }\n    /** @internal */\n    _resumeAudioContextOnStateChange() {\n        this._audioContext?.addEventListener(\"statechange\", () => {\n            if (this.unlocked && this._audioContext?.state !== \"running\") {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                this._resumeAudioContextAsync();\n            }\n        }, {\n            once: true,\n            passive: true,\n            signal: AbortSignal.timeout(3000),\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    _resumeAudioContextAsync() {\n        if (this._audioContext?.resume) {\n            return this._audioContext.resume();\n        }\n        return Promise.resolve();\n    }\n    _initializeAudioContext() {\n        try {\n            if (this.canUseWebAudio) {\n                if (!this._audioContext) {\n                    this._audioContext = new AudioContext();\n                }\n                // create a global volume gain node\n                this.masterGain = this._audioContext.createGain();\n                this.masterGain.gain.value = 1;\n                if (!this._audioDestination) {\n                    this._audioDestination = this._audioContext.destination;\n                }\n                this.masterGain.connect(this._audioDestination);\n                this._audioContextInitialized = true;\n                if (this._audioContext.state === \"running\") {\n                    // Do not wait for the promise to unlock.\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    this._triggerRunningStateAsync();\n                }\n            }\n        }\n        catch (e) {\n            this.canUseWebAudio = false;\n            Logger.Error(\"Web Audio: \" + e.message);\n        }\n    }\n    async _triggerRunningStateAsync() {\n        if (this._tryToRun) {\n            return;\n        }\n        this._tryToRun = true;\n        try {\n            await this._resumeAudioContextAsync();\n            this._tryToRun = false;\n            if (this._muteButton) {\n                this._hideMuteButton();\n            }\n            // Notify users that the audio stack is unlocked/unmuted\n            this.unlocked = true;\n            this.onAudioUnlockedObservable.notifyObservers(this);\n        }\n        catch (_e) {\n            this._tryToRun = false;\n            this.unlocked = false;\n        }\n    }\n    _triggerSuspendedState() {\n        this.unlocked = false;\n        this.onAudioLockedObservable.notifyObservers(this);\n        this._displayMuteButton();\n    }\n    _displayMuteButton() {\n        if (this.useCustomUnlockedButton || this._muteButton) {\n            return;\n        }\n        this._muteButton = document.createElement(\"BUTTON\");\n        this._muteButton.className = \"babylonUnmuteIcon\";\n        this._muteButton.id = \"babylonUnmuteIconBtn\";\n        this._muteButton.title = \"Unmute\";\n        const imageUrl = !window.SVGSVGElement\n            ? \"https://cdn.babylonjs.com/Assets/audio.png\"\n            : \"data:image/svg+xml;charset=UTF-8,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2239%22%20height%3D%2232%22%20viewBox%3D%220%200%2039%2032%22%3E%3Cpath%20fill%3D%22white%22%20d%3D%22M9.625%2018.938l-0.031%200.016h-4.953q-0.016%200-0.031-0.016v-12.453q0-0.016%200.031-0.016h4.953q0.031%200%200.031%200.016v12.453zM12.125%207.688l8.719-8.703v27.453l-8.719-8.719-0.016-0.047v-9.938zM23.359%207.875l1.406-1.406%204.219%204.203%204.203-4.203%201.422%201.406-4.219%204.219%204.219%204.203-1.484%201.359-4.141-4.156-4.219%204.219-1.406-1.422%204.219-4.203z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E\";\n        const css = \".babylonUnmuteIcon { position: absolute; left: 20px; top: 20px; height: 40px; width: 60px; background-color: rgba(51,51,51,0.7); background-image: url(\" +\n            imageUrl +\n            \");  background-size: 80%; background-repeat:no-repeat; background-position: center; background-position-y: 4px; border: none; outline: none; transition: transform 0.125s ease-out; cursor: pointer; z-index: 9999; } .babylonUnmuteIcon:hover { transform: scale(1.05) } .babylonUnmuteIcon:active { background-color: rgba(51,51,51,1) }\";\n        const style = document.createElement(\"style\");\n        style.appendChild(document.createTextNode(css));\n        document.getElementsByTagName(\"head\")[0].appendChild(style);\n        document.body.appendChild(this._muteButton);\n        this._moveButtonToTopLeft();\n        this._muteButton.addEventListener(\"touchend\", () => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this._triggerRunningStateAsync();\n        }, true);\n        this._muteButton.addEventListener(\"click\", () => {\n            this.unlock();\n        }, true);\n        window.addEventListener(\"resize\", this._onResize);\n    }\n    _moveButtonToTopLeft() {\n        if (this._hostElement && this._muteButton) {\n            this._muteButton.style.top = this._hostElement.offsetTop + 20 + \"px\";\n            this._muteButton.style.left = this._hostElement.offsetLeft + 20 + \"px\";\n        }\n    }\n    _hideMuteButton() {\n        if (this._muteButton) {\n            document.body.removeChild(this._muteButton);\n            this._muteButton = null;\n        }\n    }\n    /**\n     * Destroy and release the resources associated with the audio context.\n     */\n    dispose() {\n        if (this.canUseWebAudio && this._audioContextInitialized) {\n            if (this._connectedAnalyser && this._audioContext) {\n                this._connectedAnalyser.stopDebugCanvas();\n                this._connectedAnalyser.dispose();\n                this.masterGain.disconnect();\n                this.masterGain.connect(this._audioContext.destination);\n                this._connectedAnalyser = null;\n            }\n            this.masterGain.gain.value = 1;\n        }\n        this.WarnedWebAudioUnsupported = false;\n        this._hideMuteButton();\n        window.removeEventListener(\"resize\", this._onResize);\n        this.onAudioUnlockedObservable.clear();\n        this.onAudioLockedObservable.clear();\n        // close is async.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this._audioContext?.close();\n        this._audioContext = null;\n    }\n    /**\n     * Gets the global volume sets on the master gain.\n     * @returns the global volume if set or -1 otherwise\n     */\n    getGlobalVolume() {\n        if (this.canUseWebAudio && this._audioContextInitialized) {\n            return this.masterGain.gain.value;\n        }\n        else {\n            return -1;\n        }\n    }\n    /**\n     * Sets the global volume of your experience (sets on the master gain).\n     * @param newVolume Defines the new global volume of the application\n     */\n    setGlobalVolume(newVolume) {\n        if (this.canUseWebAudio && this._audioContextInitialized) {\n            this.masterGain.gain.value = newVolume;\n        }\n    }\n    /**\n     * Connect the audio engine to an audio analyser allowing some amazing\n     * synchronization between the sounds/music and your visualization (VuMeter for instance).\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#using-the-analyser\n     * @param analyser The analyser to connect to the engine\n     */\n    connectToAnalyser(analyser) {\n        if (this._connectedAnalyser) {\n            this._connectedAnalyser.stopDebugCanvas();\n        }\n        if (this.canUseWebAudio && this._audioContextInitialized && this._audioContext) {\n            this._connectedAnalyser = analyser;\n            this.masterGain.disconnect();\n            this._connectedAnalyser.connectAudioNodes(this.masterGain, this._audioContext.destination);\n        }\n    }\n}\n//# sourceMappingURL=audioEngine.js.map"],"names":["AbstractEngine","AudioEngineFactory","hostElement","audioContext","audioDestination","AudioEngine","this","_audioContextInitialized","_initializeAudioContext","_audioContext","constructor","_muteButton","_audioDestination","canUseWebAudio","WarnedWebAudioUnsupported","isMP3supported","isOGGsupported","unlocked","useCustomUnlockedButton","onAudioUnlockedObservable","Observable","onAudioLockedObservable","_tryToRun","_onResize","_moveButtonToTopLeft","IsWindowObjectExist","window","AudioContext","audioElem","document","createElement","_hostElement","canPlayType","replace","e","lock","_triggerSuspendedState","unlock","state","_hideMuteButton","notifyObservers","suspend","then","_triggerRunningStateAsync","Logger","Error","_resumeAudioContextOnStateChange","addEventListener","_resumeAudioContextAsync","once","passive","signal","AbortSignal","timeout","resume","Promise","resolve","masterGain","createGain","gain","value","destination","connect","message","_e","_displayMuteButton","className","id","title","css","SVGSVGElement","style","appendChild","createTextNode","getElementsByTagName","body","top","offsetTop","left","offsetLeft","removeChild","dispose","_connectedAnalyser","stopDebugCanvas","disconnect","removeEventListener","clear","close","getGlobalVolume","setGlobalVolume","newVolume","connectToAnalyser","analyser","connectAudioNodes"],"mappings":"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"}