{"version":3,"file":"KHR_texture_transform-8yQcOCS_.esm.min.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/Extensions/KHR_texture_transform.js"],"sourcesContent":["import { Texture } from \"core/Materials/Textures/texture\";\nimport { GLTFLoader } from \"../glTFLoader\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nconst NAME = \"KHR_texture_transform\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_texture_transform/README.md)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_texture_transform {\n    /**\n     * @internal\n     */\n    constructor(loader) {\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n    /** @internal */\n    dispose() {\n        this._loader = null;\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line no-restricted-syntax\n    loadTextureInfoAsync(context, textureInfo, assign) {\n        return GLTFLoader.LoadExtensionAsync(context, textureInfo, this.name, async (extensionContext, extension) => {\n            return await this._loader.loadTextureInfoAsync(context, textureInfo, (babylonTexture) => {\n                if (!(babylonTexture instanceof Texture)) {\n                    throw new Error(`${extensionContext}: Texture type not supported`);\n                }\n                if (extension.offset) {\n                    babylonTexture.uOffset = extension.offset[0];\n                    babylonTexture.vOffset = extension.offset[1];\n                }\n                // Always rotate around the origin.\n                babylonTexture.uRotationCenter = 0;\n                babylonTexture.vRotationCenter = 0;\n                if (extension.rotation) {\n                    babylonTexture.wAng = -extension.rotation;\n                }\n                if (extension.scale) {\n                    babylonTexture.uScale = extension.scale[0];\n                    babylonTexture.vScale = extension.scale[1];\n                }\n                if (extension.texCoord != undefined) {\n                    babylonTexture.coordinatesIndex = extension.texCoord;\n                }\n                assign(babylonTexture);\n            });\n        });\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_texture_transform(loader));\n//# sourceMappingURL=KHR_texture_transform.js.map"],"names":["NAME","KHR_texture_transform","constructor","loader","this","name","_loader","enabled","isExtensionUsed","dispose","loadTextureInfoAsync","context","textureInfo","assign","GLTFLoader","LoadExtensionAsync","async","extensionContext","extension","babylonTexture","Texture","Error","offset","uOffset","vOffset","uRotationCenter","vRotationCenter","rotation","wAng","scale","uScale","vScale","undefined","texCoord","coordinatesIndex","unregisterGLTFExtension","registerGLTFExtension"],"mappings":"+UAGA,MAAMA,EAAO,wBAKN,MAAMC,EAIT,WAAAC,CAAYC,GAIRC,KAAKC,KAAOL,EACZI,KAAKE,QAAUH,EACfC,KAAKG,QAAUH,KAAKE,QAAQE,gBAAgBR,EACpD,CAEI,OAAAS,GACIL,KAAKE,QAAU,IACvB,CAKI,oBAAAI,CAAqBC,EAASC,EAAaC,GACvC,OAAOC,EAAWC,mBAAmBJ,EAASC,EAAaR,KAAKC,MAAMW,MAAOC,EAAkBC,UAC9Ed,KAAKE,QAAQI,qBAAqBC,EAASC,GAAcO,IAClE,KAAMA,aAA0BC,GAC5B,MAAM,IAAIC,MAAM,GAAGJ,iCAEnBC,EAAUI,SACVH,EAAeI,QAAUL,EAAUI,OAAO,GAC1CH,EAAeK,QAAUN,EAAUI,OAAO,IAG9CH,EAAeM,gBAAkB,EACjCN,EAAeO,gBAAkB,EAC7BR,EAAUS,WACVR,EAAeS,MAAQV,EAAUS,UAEjCT,EAAUW,QACVV,EAAeW,OAASZ,EAAUW,MAAM,GACxCV,EAAeY,OAASb,EAAUW,MAAM,IAElBG,MAAtBd,EAAUe,WACVd,EAAee,iBAAmBhB,EAAUe,UAEhDpB,EAAOM,OAGvB,EAEAgB,EAAwBnC,GACxBoC,EAAsBpC,GAAM,GAAOG,GAAW,IAAIF,EAAsBE"}