{"version":3,"file":"KHR_materials_iridescence-DqRoXtIw.esm.min.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/Extensions/KHR_materials_iridescence.js"],"sourcesContent":["import { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\nimport { GLTFLoader } from \"../glTFLoader\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nconst NAME = \"KHR_materials_iridescence\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_iridescence/README.md)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_iridescence {\n    /**\n     * @internal\n     */\n    constructor(loader) {\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        /**\n         * Defines a number that determines the order the extensions are applied.\n         */\n        this.order = 195;\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n    /** @internal */\n    dispose() {\n        this._loader = null;\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line no-restricted-syntax\n    loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n        return GLTFLoader.LoadExtensionAsync(context, material, this.name, async (extensionContext, extension) => {\n            const promises = new Array();\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n            promises.push(this._loadIridescencePropertiesAsync(extensionContext, extension, babylonMaterial));\n            // eslint-disable-next-line github/no-then\n            return await Promise.all(promises).then(() => { });\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    _loadIridescencePropertiesAsync(context, properties, babylonMaterial) {\n        if (!(babylonMaterial instanceof PBRMaterial)) {\n            throw new Error(`${context}: Material type not supported`);\n        }\n        const promises = new Array();\n        babylonMaterial.iridescence.isEnabled = true;\n        babylonMaterial.iridescence.intensity = properties.iridescenceFactor ?? 0;\n        babylonMaterial.iridescence.indexOfRefraction = properties.iridescenceIor ?? properties.iridescenceIOR ?? 1.3;\n        babylonMaterial.iridescence.minimumThickness = properties.iridescenceThicknessMinimum ?? 100;\n        babylonMaterial.iridescence.maximumThickness = properties.iridescenceThicknessMaximum ?? 400;\n        if (properties.iridescenceTexture) {\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/iridescenceTexture`, properties.iridescenceTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (Iridescence)`;\n                babylonMaterial.iridescence.texture = texture;\n            }));\n        }\n        if (properties.iridescenceThicknessTexture) {\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/iridescenceThicknessTexture`, properties.iridescenceThicknessTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (Iridescence Thickness)`;\n                babylonMaterial.iridescence.thicknessTexture = texture;\n            }));\n        }\n        // eslint-disable-next-line github/no-then\n        return Promise.all(promises).then(() => { });\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_iridescence(loader));\n//# sourceMappingURL=KHR_materials_iridescence.js.map"],"names":["NAME","KHR_materials_iridescence","constructor","loader","this","name","order","_loader","enabled","isExtensionUsed","dispose","loadMaterialPropertiesAsync","context","material","babylonMaterial","GLTFLoader","LoadExtensionAsync","async","extensionContext","extension","promises","Array","push","_loadIridescencePropertiesAsync","Promise","all","then","properties","PBRMaterial","Error","iridescence","isEnabled","intensity","iridescenceFactor","indexOfRefraction","iridescenceIor","iridescenceIOR","minimumThickness","iridescenceThicknessMinimum","maximumThickness","iridescenceThicknessMaximum","iridescenceTexture","loadTextureInfoAsync","texture","iridescenceThicknessTexture","thicknessTexture","unregisterGLTFExtension","registerGLTFExtension"],"mappings":"gVAGA,MAAMA,EAAO,4BAKN,MAAMC,EAIT,WAAAC,CAAYC,GAIRC,KAAKC,KAAOL,EAIZI,KAAKE,MAAQ,IACbF,KAAKG,QAAUJ,EACfC,KAAKI,QAAUJ,KAAKG,QAAQE,gBAAgBT,EACpD,CAEI,OAAAU,GACIN,KAAKG,QAAU,IACvB,CAKI,2BAAAI,CAA4BC,EAASC,EAAUC,GAC3C,OAAOC,EAAWC,mBAAmBJ,EAASC,EAAUT,KAAKC,MAAMY,MAAOC,EAAkBC,KACxF,MAAMC,EAAW,IAAIC,MAIrB,OAHAD,EAASE,KAAKlB,KAAKG,QAAQI,4BAA4BC,EAASC,EAAUC,IAC1EM,EAASE,KAAKlB,KAAKmB,gCAAgCL,EAAkBC,EAAWL,UAEnEU,QAAQC,IAAIL,GAAUM,MAAK,WAEpD,CAEI,+BAAAH,CAAgCX,EAASe,EAAYb,GACjD,KAAMA,aAA2Bc,GAC7B,MAAM,IAAIC,MAAM,GAAGjB,kCAEvB,MAAMQ,EAAW,IAAIC,MAmBrB,OAlBAP,EAAgBgB,YAAYC,WAAY,EACxCjB,EAAgBgB,YAAYE,UAAYL,EAAWM,mBAAqB,EACxEnB,EAAgBgB,YAAYI,kBAAoBP,EAAWQ,gBAAkBR,EAAWS,gBAAkB,IAC1GtB,EAAgBgB,YAAYO,iBAAmBV,EAAWW,6BAA+B,IACzFxB,EAAgBgB,YAAYS,iBAAmBZ,EAAWa,6BAA+B,IACrFb,EAAWc,oBACXrB,EAASE,KAAKlB,KAAKG,QAAQmC,qBAAqB,GAAG9B,uBAA8Be,EAAWc,oBAAqBE,IAC7GA,EAAQtC,KAAO,GAAGS,EAAgBT,qBAClCS,EAAgBgB,YAAYa,QAAUA,MAG1ChB,EAAWiB,6BACXxB,EAASE,KAAKlB,KAAKG,QAAQmC,qBAAqB,GAAG9B,gCAAuCe,EAAWiB,6BAA8BD,IAC/HA,EAAQtC,KAAO,GAAGS,EAAgBT,+BAClCS,EAAgBgB,YAAYe,iBAAmBF,MAIhDnB,QAAQC,IAAIL,GAAUM,MAAK,QAC1C,EAEAoB,EAAwB9C,GACxB+C,EAAsB/C,GAAM,GAAOG,GAAW,IAAIF,EAA0BE"}