import{bM as e,aG as o,bJ as r,bI as s}from"./index-VvGulz6u.esm.min.js";import{GLTFLoader as t}from"./glTFLoader-X6ZTOkAw.esm.min.js";import"./bone-DPw1oOFK.esm.min.js";import"./skeleton-BDCw4yVL.esm.min.js";import"./rawTexture-B-F8SA5B.esm.min.js";import"./assetContainer-Da0Xx6Do.esm.min.js";import"./objectModelMapping-CghNRpa4.esm.min.js";const a="KHR_materials_unlit";class i{constructor(e){this.name=a,this.order=210,this._loader=e,this.enabled=this._loader.isExtensionUsed(a)}dispose(){this._loader=null}loadMaterialPropertiesAsync(e,o,r){return t.LoadExtensionAsync(e,o,this.name,(async()=>await this._loadUnlitPropertiesAsync(e,o,r)))}_loadUnlitPropertiesAsync(r,s,t){if(!(t instanceof e))throw new Error(`${r}: Material type not supported`);const a=new Array;t.unlit=!0;const i=s.pbrMetallicRoughness;return i&&(i.baseColorFactor?(t.albedoColor=o.FromArray(i.baseColorFactor),t.alpha=i.baseColorFactor[3]):t.albedoColor=o.White(),i.baseColorTexture&&a.push(this._loader.loadTextureInfoAsync(`${r}/baseColorTexture`,i.baseColorTexture,(e=>{e.name=`${t.name} (Base Color)`,t.albedoTexture=e})))),s.doubleSided&&(t.backFaceCulling=!1,t.twoSidedLighting=!0),this._loader.loadMaterialAlphaProperties(r,s,t),Promise.all(a).then((()=>{}))}}r(a),s(a,!0,(e=>new i(e)));export{i as KHR_materials_unlit};
//# sourceMappingURL=KHR_materials_unlit-Dk95NWo4.esm.min.js.map
