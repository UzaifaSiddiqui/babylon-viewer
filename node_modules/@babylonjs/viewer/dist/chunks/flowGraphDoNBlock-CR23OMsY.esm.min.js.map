{"version":3,"file":"flowGraphDoNBlock-CR23OMsY.esm.min.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Execution/ControlFlow/flowGraphDoNBlock.js"],"sourcesContent":["import { RichTypeFlowGraphInteger } from \"../../../flowGraphRichTypes\";\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../../flowGraphExecutionBlockWithOutSignal\";\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\nimport { FlowGraphInteger } from \"../../../CustomTypes/flowGraphInteger\";\n/**\n * A block that executes a branch a set number of times.\n */\nexport class FlowGraphDoNBlock extends FlowGraphExecutionBlockWithOutSignal {\n    constructor(\n    /**\n     * [Object] the configuration of the block\n     */\n    config = {}) {\n        super(config);\n        this.config = config;\n        this.config.startIndex = config.startIndex ?? new FlowGraphInteger(0);\n        this.reset = this._registerSignalInput(\"reset\");\n        this.maxExecutions = this.registerDataInput(\"maxExecutions\", RichTypeFlowGraphInteger);\n        this.executionCount = this.registerDataOutput(\"executionCount\", RichTypeFlowGraphInteger, new FlowGraphInteger(0));\n    }\n    _execute(context, callingSignal) {\n        if (callingSignal === this.reset) {\n            this.executionCount.setValue(this.config.startIndex, context);\n        }\n        else {\n            const currentCountValue = this.executionCount.getValue(context);\n            if (currentCountValue.value < this.maxExecutions.getValue(context).value) {\n                this.executionCount.setValue(new FlowGraphInteger(currentCountValue.value + 1), context);\n                this.out._activateSignal(context);\n            }\n        }\n    }\n    /**\n     * @returns class name of the block.\n     */\n    getClassName() {\n        return \"FlowGraphDoNBlock\" /* FlowGraphBlockNames.DoN */;\n    }\n}\nRegisterClass(\"FlowGraphDoNBlock\" /* FlowGraphBlockNames.DoN */, FlowGraphDoNBlock);\n//# sourceMappingURL=flowGraphDoNBlock.js.map"],"names":["FlowGraphDoNBlock","FlowGraphExecutionBlockWithOutSignal","constructor","config","super","this","startIndex","FlowGraphInteger","reset","_registerSignalInput","maxExecutions","registerDataInput","RichTypeFlowGraphInteger","executionCount","registerDataOutput","_execute","context","callingSignal","setValue","currentCountValue","getValue","value","out","_activateSignal","getClassName","RegisterClass"],"mappings":"gOAOO,MAAMA,UAA0BC,EACnC,WAAAC,CAIAC,EAAS,CAAA,GACLC,MAAMD,GACNE,KAAKF,OAASA,EACdE,KAAKF,OAAOG,WAAaH,EAAOG,YAAc,IAAIC,EAAiB,GACnEF,KAAKG,MAAQH,KAAKI,qBAAqB,SACvCJ,KAAKK,cAAgBL,KAAKM,kBAAkB,gBAAiBC,GAC7DP,KAAKQ,eAAiBR,KAAKS,mBAAmB,iBAAkBF,EAA0B,IAAIL,EAAiB,GACvH,CACI,QAAAQ,CAASC,EAASC,GACd,GAAIA,IAAkBZ,KAAKG,MACvBH,KAAKQ,eAAeK,SAASb,KAAKF,OAAOG,WAAYU,OAEpD,CACD,MAAMG,EAAoBd,KAAKQ,eAAeO,SAASJ,GACnDG,EAAkBE,MAAQhB,KAAKK,cAAcU,SAASJ,GAASK,QAC/DhB,KAAKQ,eAAeK,SAAS,IAAIX,EAAiBY,EAAkBE,MAAQ,GAAIL,GAChFX,KAAKiB,IAAIC,gBAAgBP,GAEzC,CACA,CAII,YAAAQ,GACI,MAAO,mBACf,EAEAC,EAAc,oBAAmDzB"}