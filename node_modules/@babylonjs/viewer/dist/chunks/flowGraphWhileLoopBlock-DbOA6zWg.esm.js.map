{"version":3,"file":"flowGraphWhileLoopBlock-DbOA6zWg.esm.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Execution/ControlFlow/flowGraphWhileLoopBlock.js"],"sourcesContent":["import { RichTypeBoolean } from \"../../../flowGraphRichTypes\";\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../../flowGraphExecutionBlockWithOutSignal\";\nimport { Logger } from \"core/Misc/logger\";\n/**\n * A block that executes a branch while a condition is true.\n */\nexport class FlowGraphWhileLoopBlock extends FlowGraphExecutionBlockWithOutSignal {\n    constructor(\n    /**\n     * the configuration of the block\n     */\n    config) {\n        super(config);\n        this.config = config;\n        this.condition = this.registerDataInput(\"condition\", RichTypeBoolean);\n        this.executionFlow = this._registerSignalOutput(\"executionFlow\");\n        this.completed = this._registerSignalOutput(\"completed\");\n        // unregister \"out\" signal\n        this._unregisterSignalOutput(\"out\");\n    }\n    _execute(context, _callingSignal) {\n        let conditionValue = this.condition.getValue(context);\n        if (this.config?.doWhile && !conditionValue) {\n            this.executionFlow._activateSignal(context);\n        }\n        let i = 0;\n        while (conditionValue) {\n            this.executionFlow._activateSignal(context);\n            ++i;\n            if (i >= FlowGraphWhileLoopBlock.MaxLoopCount) {\n                Logger.Warn(\"FlowGraphWhileLoopBlock: Max loop count reached. Breaking.\");\n                break;\n            }\n            conditionValue = this.condition.getValue(context);\n        }\n        // out is not triggered - completed is triggered\n        this.completed._activateSignal(context);\n    }\n    getClassName() {\n        return \"FlowGraphWhileLoopBlock\" /* FlowGraphBlockNames.WhileLoop */;\n    }\n}\n/**\n * The maximum number of iterations allowed in a loop.\n * This can be set to avoid an infinite loop.\n */\nFlowGraphWhileLoopBlock.MaxLoopCount = 1000;\nRegisterClass(\"FlowGraphWhileLoopBlock\" /* FlowGraphBlockNames.WhileLoop */, FlowGraphWhileLoopBlock);\n//# sourceMappingURL=flowGraphWhileLoopBlock.js.map"],"names":[],"mappings":";;;;;AAIA;AACA;AACA;AACO,MAAM,uBAAuB,SAAS,oCAAoC,CAAC;AAClF,IAAI,WAAW;AACf;AACA;AACA;AACA,IAAI,MAAM,EAAE;AACZ,QAAQ,KAAK,CAAC,MAAM,CAAC;AACrB,QAAQ,IAAI,CAAC,MAAM,GAAG,MAAM;AAC5B,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,eAAe,CAAC;AAC7E,QAAQ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC;AACxE,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC;AAChE;AACA,QAAQ,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC;AAC3C;AACA,IAAI,QAAQ,CAAC,OAAO,EAAE,cAAc,EAAE;AACtC,QAAQ,IAAI,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC;AAC7D,QAAQ,IAAI,IAAI,CAAC,MAAM,EAAE,OAAO,IAAI,CAAC,cAAc,EAAE;AACrD,YAAY,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,OAAO,CAAC;AACvD;AACA,QAAQ,IAAI,CAAC,GAAG,CAAC;AACjB,QAAQ,OAAO,cAAc,EAAE;AAC/B,YAAY,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,OAAO,CAAC;AACvD,YAAY,EAAE,CAAC;AACf,YAAY,IAAI,CAAC,IAAI,uBAAuB,CAAC,YAAY,EAAE;AAC3D,gBAAgB,MAAM,CAAC,IAAI,CAAC,4DAA4D,CAAC;AACzF,gBAAgB;AAChB;AACA,YAAY,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC;AAC7D;AACA;AACA,QAAQ,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC;AAC/C;AACA,IAAI,YAAY,GAAG;AACnB,QAAQ,OAAO,yBAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,CAAC,YAAY,GAAG,IAAI;AAC3C,aAAa,CAAC,yBAAyB,sCAAsC,uBAAuB,CAAC;;;;"}