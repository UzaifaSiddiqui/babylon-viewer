{"version":3,"file":"flowGraphVectorMathBlocks-D8OGRltp.esm.js","sources":["../../../../../dev/core/dist/Maths/math.vector.functions.js","../../../../../dev/core/dist/FlowGraph/Blocks/Data/Math/flowGraphVectorMathBlocks.js"],"sourcesContent":["import { Clamp } from \"./math.scalar.functions\";\nimport { Quaternion, Vector3 } from \"./math.vector\";\n/**\n * Creates a string representation of the Vector2\n * @param vector defines the Vector2 to stringify\n * @param decimalCount defines the number of decimals to use\n * @returns a string with the Vector2 coordinates.\n */\nexport function Vector2ToFixed(vector, decimalCount) {\n    return `{X: ${vector.x.toFixed(decimalCount)} Y: ${vector.y.toFixed(decimalCount)}}`;\n}\n/**\n * Creates a string representation of the Vector3\n * @param vector defines the Vector3 to stringify\n * @param decimalCount defines the number of decimals to use\n * @returns a string with the Vector3 coordinates.\n */\nexport function Vector3ToFixed(vector, decimalCount) {\n    return `{X: ${vector._x.toFixed(decimalCount)} Y: ${vector._y.toFixed(decimalCount)} Z: ${vector._z.toFixed(decimalCount)}}`;\n}\n/**\n * Creates a string representation of the Vector4\n * @param vector defines the Vector4 to stringify\n * @param decimalCount defines the number of decimals to use\n * @returns a string with the Vector4 coordinates.\n */\nexport function Vector4ToFixed(vector, decimalCount) {\n    return `{X: ${vector.x.toFixed(decimalCount)} Y: ${vector.y.toFixed(decimalCount)} Z: ${vector.z.toFixed(decimalCount)} W: ${vector.w.toFixed(decimalCount)}}`;\n}\n/**\n * Returns the angle in radians between two quaternions\n * @param q1 defines the first quaternion\n * @param q2 defines the second quaternion\n * @returns the angle in radians between the two quaternions\n */\nexport function GetAngleBetweenQuaternions(q1, q2) {\n    return Math.acos(Clamp(Quaternion.Dot(q1, q2))) * 2;\n}\n/**\n * Creates a quaternion from two direction vectors\n * @param a defines the first direction vector\n * @param b defines the second direction vector\n * @returns the target quaternion\n */\nexport function GetQuaternionFromDirections(a, b) {\n    const result = new Quaternion();\n    GetQuaternionFromDirectionsToRef(a, b, result);\n    return result;\n}\n/**\n * Creates a quaternion from two direction vectors\n * @param a defines the first direction vector\n * @param b defines the second direction vector\n * @param result defines the target quaternion\n * @returns the target quaternion\n */\nexport function GetQuaternionFromDirectionsToRef(a, b, result) {\n    const axis = Vector3.Cross(a, b);\n    const angle = Math.acos(Clamp(Vector3.Dot(a, b), -1, 1));\n    Quaternion.RotationAxisToRef(axis, angle, result);\n    return result;\n}\n//# sourceMappingURL=math.vector.functions.js.map","import { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport { RichTypeVector3, RichTypeNumber, RichTypeAny, RichTypeVector2, RichTypeMatrix, getRichTypeByFlowGraphType, RichTypeQuaternion, RichTypeBoolean, } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\nimport { Quaternion, Vector3, Vector4 } from \"core/Maths/math.vector\";\nimport { _GetClassNameOf } from \"core/FlowGraph/utils\";\nimport { GetAngleBetweenQuaternions, GetQuaternionFromDirections } from \"../../../../Maths/math.vector.functions\";\nconst AxisCacheName = \"cachedOperationAxis\";\nconst AngleCacheName = \"cachedOperationAngle\";\nconst CacheExecIdName = \"cachedExecutionId\";\n/**\n * Vector length block.\n */\nexport class FlowGraphLengthBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicLength(a), \"FlowGraphLengthBlock\" /* FlowGraphBlockNames.Length */, config);\n    }\n    _polymorphicLength(a) {\n        const aClassName = _GetClassNameOf(a);\n        switch (aClassName) {\n            case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n            case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n            case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n            case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n                return a.length();\n            default:\n                throw new Error(`Cannot compute length of value ${a}`);\n        }\n    }\n}\nRegisterClass(\"FlowGraphLengthBlock\" /* FlowGraphBlockNames.Length */, FlowGraphLengthBlock);\n/**\n * Vector normalize block.\n */\nexport class FlowGraphNormalizeBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicNormalize(a), \"FlowGraphNormalizeBlock\" /* FlowGraphBlockNames.Normalize */, config);\n    }\n    _polymorphicNormalize(a) {\n        const aClassName = _GetClassNameOf(a);\n        let normalized;\n        switch (aClassName) {\n            case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n            case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n            case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n            case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n                normalized = a.normalizeToNew();\n                if (this.config?.nanOnZeroLength) {\n                    const length = a.length();\n                    if (length === 0) {\n                        normalized.setAll(NaN);\n                    }\n                }\n                return normalized;\n            default:\n                throw new Error(`Cannot normalize value ${a}`);\n        }\n    }\n}\nRegisterClass(\"FlowGraphNormalizeBlock\" /* FlowGraphBlockNames.Normalize */, FlowGraphNormalizeBlock);\n/**\n * Dot product block.\n */\nexport class FlowGraphDotBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeNumber, (a, b) => this._polymorphicDot(a, b), \"FlowGraphDotBlock\" /* FlowGraphBlockNames.Dot */, config);\n    }\n    _polymorphicDot(a, b) {\n        const className = _GetClassNameOf(a);\n        switch (className) {\n            case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n            case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n            case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n            case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n                // casting is needed because dot requires both to be the same type\n                return a.dot(b);\n            default:\n                throw new Error(`Cannot get dot product of ${a} and ${b}`);\n        }\n    }\n}\nRegisterClass(\"FlowGraphDotBlock\" /* FlowGraphBlockNames.Dot */, FlowGraphDotBlock);\n/**\n * Cross product block.\n */\nexport class FlowGraphCrossBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeVector3, RichTypeVector3, RichTypeVector3, (a, b) => Vector3.Cross(a, b), \"FlowGraphCrossBlock\" /* FlowGraphBlockNames.Cross */, config);\n    }\n}\nRegisterClass(\"FlowGraphCrossBlock\" /* FlowGraphBlockNames.Cross */, FlowGraphCrossBlock);\n/**\n * 2D rotation block.\n */\nexport class FlowGraphRotate2DBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeVector2, RichTypeNumber, RichTypeVector2, (a, b) => a.rotate(b), \"FlowGraphRotate2DBlock\" /* FlowGraphBlockNames.Rotate2D */, config);\n    }\n}\nRegisterClass(\"FlowGraphRotate2DBlock\" /* FlowGraphBlockNames.Rotate2D */, FlowGraphRotate2DBlock);\n/**\n * 3D rotation block.\n */\nexport class FlowGraphRotate3DBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeVector3, RichTypeQuaternion, RichTypeVector3, (a, b) => a.applyRotationQuaternion(b), \"FlowGraphRotate3DBlock\" /* FlowGraphBlockNames.Rotate3D */, config);\n    }\n}\nRegisterClass(\"FlowGraphRotate3DBlock\" /* FlowGraphBlockNames.Rotate3D */, FlowGraphRotate3DBlock);\nfunction TransformVector(a, b) {\n    const className = _GetClassNameOf(a);\n    switch (className) {\n        case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n            return b.transformVector(a);\n        case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n            return b.transformVector(a);\n        case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n            a = a;\n            // transform the vector 4 with the matrix here. Vector4.TransformCoordinates transforms a 3D coordinate, not Vector4\n            return new Vector4(a.x * b.m[0] + a.y * b.m[1] + a.z * b.m[2] + a.w * b.m[3], a.x * b.m[4] + a.y * b.m[5] + a.z * b.m[6] + a.w * b.m[7], a.x * b.m[8] + a.y * b.m[9] + a.z * b.m[10] + a.w * b.m[11], a.x * b.m[12] + a.y * b.m[13] + a.z * b.m[14] + a.w * b.m[15]);\n        default:\n            throw new Error(`Cannot transform value ${a}`);\n    }\n}\n/**\n * Transform a vector3 by a matrix.\n */\nexport class FlowGraphTransformBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        const vectorType = config?.vectorType || \"Vector3\" /* FlowGraphTypes.Vector3 */;\n        const matrixType = vectorType === \"Vector2\" /* FlowGraphTypes.Vector2 */ ? \"Matrix2D\" /* FlowGraphTypes.Matrix2D */ : vectorType === \"Vector3\" /* FlowGraphTypes.Vector3 */ ? \"Matrix3D\" /* FlowGraphTypes.Matrix3D */ : \"Matrix\" /* FlowGraphTypes.Matrix */;\n        super(getRichTypeByFlowGraphType(vectorType), getRichTypeByFlowGraphType(matrixType), getRichTypeByFlowGraphType(vectorType), TransformVector, \"FlowGraphTransformVectorBlock\" /* FlowGraphBlockNames.TransformVector */, config);\n    }\n}\nRegisterClass(\"FlowGraphTransformVectorBlock\" /* FlowGraphBlockNames.TransformVector */, FlowGraphTransformBlock);\n/**\n * Transform a vector3 by a matrix.\n */\nexport class FlowGraphTransformCoordinatesBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeVector3, RichTypeMatrix, RichTypeVector3, (a, b) => Vector3.TransformCoordinates(a, b), \"FlowGraphTransformCoordinatesBlock\" /* FlowGraphBlockNames.TransformCoordinates */, config);\n    }\n}\nRegisterClass(\"FlowGraphTransformCoordinatesBlock\" /* FlowGraphBlockNames.TransformCoordinates */, FlowGraphTransformCoordinatesBlock);\n/**\n * Conjugate the quaternion.\n */\nexport class FlowGraphConjugateBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeQuaternion, RichTypeQuaternion, (a) => a.conjugate(), \"FlowGraphConjugateBlock\" /* FlowGraphBlockNames.Conjugate */, config);\n    }\n}\nRegisterClass(\"FlowGraphConjugateBlock\" /* FlowGraphBlockNames.Conjugate */, FlowGraphConjugateBlock);\n/**\n * Get the angle between two quaternions.\n */\nexport class FlowGraphAngleBetweenBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeQuaternion, RichTypeQuaternion, RichTypeNumber, (a, b) => GetAngleBetweenQuaternions(a, b), \"FlowGraphAngleBetweenBlock\" /* FlowGraphBlockNames.AngleBetween */, config);\n    }\n}\nRegisterClass(\"FlowGraphAngleBetweenBlock\" /* FlowGraphBlockNames.AngleBetween */, FlowGraphAngleBetweenBlock);\n/**\n * Get the quaternion from an axis and an angle.\n */\nexport class FlowGraphQuaternionFromAxisAngleBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeVector3, RichTypeNumber, RichTypeQuaternion, (a, b) => Quaternion.RotationAxis(a, b), \"FlowGraphQuaternionFromAxisAngleBlock\" /* FlowGraphBlockNames.QuaternionFromAxisAngle */, config);\n    }\n}\nRegisterClass(\"FlowGraphQuaternionFromAxisAngleBlock\" /* FlowGraphBlockNames.QuaternionFromAxisAngle */, FlowGraphQuaternionFromAxisAngleBlock);\n/**\n * Get the axis and angle from a quaternion.\n */\nexport class FlowGraphAxisAngleFromQuaternionBlock extends FlowGraphBlock {\n    constructor(config) {\n        super(config);\n        this.a = this.registerDataInput(\"a\", RichTypeQuaternion);\n        this.axis = this.registerDataOutput(\"axis\", RichTypeVector3);\n        this.angle = this.registerDataOutput(\"angle\", RichTypeNumber);\n        this.isValid = this.registerDataOutput(\"isValid\", RichTypeBoolean);\n    }\n    /** @override */\n    _updateOutputs(context) {\n        const cachedExecutionId = context._getExecutionVariable(this, CacheExecIdName, -1);\n        const cachedAxis = context._getExecutionVariable(this, AxisCacheName, null);\n        const cachedAngle = context._getExecutionVariable(this, AngleCacheName, null);\n        if (cachedAxis !== undefined && cachedAxis !== null && cachedAngle !== undefined && cachedAngle !== null && cachedExecutionId === context.executionId) {\n            this.axis.setValue(cachedAxis, context);\n            this.angle.setValue(cachedAngle, context);\n        }\n        else {\n            try {\n                const { axis, angle } = this.a.getValue(context).toAxisAngle();\n                context._setExecutionVariable(this, AxisCacheName, axis);\n                context._setExecutionVariable(this, AngleCacheName, angle);\n                context._setExecutionVariable(this, CacheExecIdName, context.executionId);\n                this.axis.setValue(axis, context);\n                this.angle.setValue(angle, context);\n                this.isValid.setValue(true, context);\n            }\n            catch (e) {\n                this.isValid.setValue(false, context);\n            }\n        }\n    }\n    /** @override */\n    getClassName() {\n        return \"FlowGraphAxisAngleFromQuaternionBlock\" /* FlowGraphBlockNames.AxisAngleFromQuaternion */;\n    }\n}\nRegisterClass(\"FlowGraphAxisAngleFromQuaternionBlock\" /* FlowGraphBlockNames.AxisAngleFromQuaternion */, FlowGraphAxisAngleFromQuaternionBlock);\n/**\n * Get the quaternion from two direction vectors.\n */\nexport class FlowGraphQuaternionFromDirectionsBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeVector3, RichTypeVector3, RichTypeQuaternion, (a, b) => GetQuaternionFromDirections(a, b), \"FlowGraphQuaternionFromDirectionsBlock\" /* FlowGraphBlockNames.QuaternionFromDirections */, config);\n    }\n}\n//# sourceMappingURL=flowGraphVectorMathBlocks.js.map"],"names":[],"mappings":";;;;;;;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,0BAA0B,CAAC,EAAE,EAAE,EAAE,EAAE;AACnD,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,2BAA2B,CAAC,CAAC,EAAE,CAAC,EAAE;AAClD,IAAI,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE;AACnC,IAAI,gCAAgC,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC;AAClD,IAAI,OAAO,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,gCAAgC,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE;AAC/D,IAAI,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AACpC,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;AAC5D,IAAI,UAAU,CAAC,iBAAiB,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC;AACrD,IAAI,OAAO,MAAM;AACjB;;ACrDA,MAAM,aAAa,GAAG,qBAAqB;AAC3C,MAAM,cAAc,GAAG,sBAAsB;AAC7C,MAAM,eAAe,GAAG,mBAAmB;AAC3C;AACA;AACA;AACO,MAAM,oBAAoB,SAAS,4BAA4B,CAAC;AACvE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,sBAAsB,mCAAmC,MAAM,CAAC;AAC9I;AACA,IAAI,kBAAkB,CAAC,CAAC,EAAE;AAC1B,QAAQ,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC;AAC7C,QAAQ,QAAQ,UAAU;AAC1B,YAAY,KAAK,SAAS;AAC1B,YAAY,KAAK,SAAS;AAC1B,YAAY,KAAK,SAAS;AAC1B,YAAY,KAAK,YAAY;AAC7B,gBAAgB,OAAO,CAAC,CAAC,MAAM,EAAE;AACjC,YAAY;AACZ,gBAAgB,MAAM,IAAI,KAAK,CAAC,CAAC,+BAA+B,EAAE,CAAC,CAAC,CAAC,CAAC;AACtE;AACA;AACA;AACA,aAAa,CAAC,sBAAsB,mCAAmC,oBAAoB,CAAC;AAC5F;AACA;AACA;AACO,MAAM,uBAAuB,SAAS,4BAA4B,CAAC;AAC1E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE,yBAAyB,sCAAsC,MAAM,CAAC;AACpJ;AACA,IAAI,qBAAqB,CAAC,CAAC,EAAE;AAC7B,QAAQ,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC;AAC7C,QAAQ,IAAI,UAAU;AACtB,QAAQ,QAAQ,UAAU;AAC1B,YAAY,KAAK,SAAS;AAC1B,YAAY,KAAK,SAAS;AAC1B,YAAY,KAAK,SAAS;AAC1B,YAAY,KAAK,YAAY;AAC7B,gBAAgB,UAAU,GAAG,CAAC,CAAC,cAAc,EAAE;AAC/C,gBAAgB,IAAI,IAAI,CAAC,MAAM,EAAE,eAAe,EAAE;AAClD,oBAAoB,MAAM,MAAM,GAAG,CAAC,CAAC,MAAM,EAAE;AAC7C,oBAAoB,IAAI,MAAM,KAAK,CAAC,EAAE;AACtC,wBAAwB,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC;AAC9C;AACA;AACA,gBAAgB,OAAO,UAAU;AACjC,YAAY;AACZ,gBAAgB,MAAM,IAAI,KAAK,CAAC,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC,CAAC;AAC9D;AACA;AACA;AACA,aAAa,CAAC,yBAAyB,sCAAsC,uBAAuB,CAAC;AACrG;AACA;AACA;AACO,MAAM,iBAAiB,SAAS,6BAA6B,CAAC;AACrE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,mBAAmB,gCAAgC,MAAM,CAAC;AACxJ;AACA,IAAI,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;AAC1B,QAAQ,MAAM,SAAS,GAAG,eAAe,CAAC,CAAC,CAAC;AAC5C,QAAQ,QAAQ,SAAS;AACzB,YAAY,KAAK,SAAS;AAC1B,YAAY,KAAK,SAAS;AAC1B,YAAY,KAAK,SAAS;AAC1B,YAAY,KAAK,YAAY;AAC7B;AACA,gBAAgB,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAC/B,YAAY;AACZ,gBAAgB,MAAM,IAAI,KAAK,CAAC,CAAC,0BAA0B,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;AAC1E;AACA;AACA;AACA,aAAa,CAAC,mBAAmB,gCAAgC,iBAAiB,CAAC;AACnF;AACA;AACA;AACO,MAAM,mBAAmB,SAAS,6BAA6B,CAAC;AACvE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,eAAe,EAAE,eAAe,EAAE,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,qBAAqB,kCAAkC,MAAM,CAAC;AAC9J;AACA;AACA,aAAa,CAAC,qBAAqB,kCAAkC,mBAAmB,CAAC;AACzF;AACA;AACA;AACO,MAAM,sBAAsB,SAAS,6BAA6B,CAAC;AAC1E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,eAAe,EAAE,cAAc,EAAE,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,wBAAwB,qCAAqC,MAAM,CAAC;AAC3J;AACA;AACA,aAAa,CAAC,wBAAwB,qCAAqC,sBAAsB,CAAC;AAClG;AACA;AACA;AACO,MAAM,sBAAsB,SAAS,6BAA6B,CAAC;AAC1E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,eAAe,EAAE,kBAAkB,EAAE,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE,wBAAwB,qCAAqC,MAAM,CAAC;AAChL;AACA;AACA,aAAa,CAAC,wBAAwB,qCAAqC,sBAAsB,CAAC;AAClG,SAAS,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;AAC/B,IAAI,MAAM,SAAS,GAAG,eAAe,CAAC,CAAC,CAAC;AACxC,IAAI,QAAQ,SAAS;AACrB,QAAQ,KAAK,SAAS;AACtB,YAAY,OAAO,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;AACvC,QAAQ,KAAK,SAAS;AACtB,YAAY,OAAO,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;AACvC,QAAQ,KAAK,SAAS;AACtB,YAAY,CAAC,GAAG,CAAC;AACjB;AACA,YAAY,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AAChR,QAAQ;AACR,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC,CAAC;AAC1D;AACA;AACA;AACA;AACA;AACO,MAAM,uBAAuB,SAAS,6BAA6B,CAAC;AAC3E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,MAAM,UAAU,GAAG,MAAM,EAAE,UAAU,IAAI,SAAS;AAC1D,QAAQ,MAAM,UAAU,GAAG,UAAU,KAAK,SAAS,gCAAgC,UAAU,iCAAiC,UAAU,KAAK,SAAS,gCAAgC,UAAU,iCAAiC,QAAQ;AACzO,QAAQ,KAAK,CAAC,0BAA0B,CAAC,UAAU,CAAC,EAAE,0BAA0B,CAAC,UAAU,CAAC,EAAE,0BAA0B,CAAC,UAAU,CAAC,EAAE,eAAe,EAAE,+BAA+B,4CAA4C,MAAM,CAAC;AACzO;AACA;AACA,aAAa,CAAC,+BAA+B,4CAA4C,uBAAuB,CAAC;AACjH;AACA;AACA;AACO,MAAM,kCAAkC,SAAS,6BAA6B,CAAC;AACtF,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,eAAe,EAAE,cAAc,EAAE,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,OAAO,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,oCAAoC,iDAAiD,MAAM,CAAC;AAC1M;AACA;AACA,aAAa,CAAC,oCAAoC,iDAAiD,kCAAkC,CAAC;AACtI;AACA;AACA;AACO,MAAM,uBAAuB,SAAS,4BAA4B,CAAC;AAC1E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,SAAS,EAAE,EAAE,yBAAyB,sCAAsC,MAAM,CAAC;AAClJ;AACA;AACA,aAAa,CAAC,yBAAyB,sCAAsC,uBAAuB,CAAC;AACrG;AACA;AACA;AACO,MAAM,0BAA0B,SAAS,6BAA6B,CAAC;AAC9E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,0BAA0B,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,4BAA4B,yCAAyC,MAAM,CAAC;AAC9L;AACA;AACA,aAAa,CAAC,4BAA4B,yCAAyC,0BAA0B,CAAC;AAC9G;AACA;AACA;AACO,MAAM,qCAAqC,SAAS,6BAA6B,CAAC;AACzF,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,eAAe,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,UAAU,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,uCAAuC,oDAAoD,MAAM,CAAC;AAC9M;AACA;AACA,aAAa,CAAC,uCAAuC,oDAAoD,qCAAqC,CAAC;AAC/I;AACA;AACA;AACO,MAAM,qCAAqC,SAAS,cAAc,CAAC;AAC1E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,MAAM,CAAC;AACrB,QAAQ,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,kBAAkB,CAAC;AAChE,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,eAAe,CAAC;AACpE,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,cAAc,CAAC;AACrE,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,eAAe,CAAC;AAC1E;AACA;AACA,IAAI,cAAc,CAAC,OAAO,EAAE;AAC5B,QAAQ,MAAM,iBAAiB,GAAG,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,eAAe,EAAE,EAAE,CAAC;AAC1F,QAAQ,MAAM,UAAU,GAAG,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,aAAa,EAAE,IAAI,CAAC;AACnF,QAAQ,MAAM,WAAW,GAAG,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,cAAc,EAAE,IAAI,CAAC;AACrF,QAAQ,IAAI,UAAU,KAAK,SAAS,IAAI,UAAU,KAAK,IAAI,IAAI,WAAW,KAAK,SAAS,IAAI,WAAW,KAAK,IAAI,IAAI,iBAAiB,KAAK,OAAO,CAAC,WAAW,EAAE;AAC/J,YAAY,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,OAAO,CAAC;AACnD,YAAY,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,OAAO,CAAC;AACrD;AACA,aAAa;AACb,YAAY,IAAI;AAChB,gBAAgB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE;AAC9E,gBAAgB,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,aAAa,EAAE,IAAI,CAAC;AACxE,gBAAgB,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,cAAc,EAAE,KAAK,CAAC;AAC1E,gBAAgB,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,eAAe,EAAE,OAAO,CAAC,WAAW,CAAC;AACzF,gBAAgB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC;AACjD,gBAAgB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC;AACnD,gBAAgB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC;AACpD;AACA,YAAY,OAAO,CAAC,EAAE;AACtB,gBAAgB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC;AACrD;AACA;AACA;AACA;AACA,IAAI,YAAY,GAAG;AACnB,QAAQ,OAAO,uCAAuC;AACtD;AACA;AACA,aAAa,CAAC,uCAAuC,oDAAoD,qCAAqC,CAAC;AAC/I;AACA;AACA;AACO,MAAM,sCAAsC,SAAS,6BAA6B,CAAC;AAC1F,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,eAAe,EAAE,eAAe,EAAE,kBAAkB,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,2BAA2B,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,wCAAwC,qDAAqD,MAAM,CAAC;AACrN;AACA;;;;"}