{"version":3,"file":"flowGraphSwitchBlock-D8sa-iGL.esm.min.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Execution/ControlFlow/flowGraphSwitchBlock.js"],"sourcesContent":["import { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock\";\nimport { RichTypeAny } from \"../../../flowGraphRichTypes\";\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\nimport { getNumericValue, isNumeric } from \"core/FlowGraph/utils\";\n/**\n * A block that executes a branch based on a selection.\n */\nexport class FlowGraphSwitchBlock extends FlowGraphExecutionBlock {\n    constructor(\n    /**\n     * the configuration of the block\n     */\n    config) {\n        super(config);\n        this.config = config;\n        /**\n         * The default case to execute if no other case is found.\n         */\n        this.default = this._registerSignalOutput(\"default\");\n        this._caseToOutputFlow = new Map();\n        this.case = this.registerDataInput(\"case\", RichTypeAny);\n        // iterate the set not using for of\n        const array = this.config.cases || [];\n        for (const caseValue of array) {\n            this._caseToOutputFlow.set(caseValue, this._registerSignalOutput(`out_${caseValue}`));\n        }\n    }\n    _execute(context, _callingSignal) {\n        const selectionValue = this.case.getValue(context);\n        let outputFlow;\n        if (isNumeric(selectionValue)) {\n            outputFlow = this._getOutputFlowForCase(getNumericValue(selectionValue));\n        }\n        else {\n            outputFlow = this._getOutputFlowForCase(selectionValue);\n        }\n        if (outputFlow) {\n            outputFlow._activateSignal(context);\n        }\n        else {\n            this.default._activateSignal(context);\n        }\n    }\n    /**\n     * Adds a new case to the switch block.\n     * @param newCase the new case to add.\n     */\n    addCase(newCase) {\n        if (this.config.cases.includes(newCase)) {\n            return;\n        }\n        this.config.cases.push(newCase);\n        this._caseToOutputFlow.set(newCase, this._registerSignalOutput(`out_${newCase}`));\n    }\n    /**\n     * Removes a case from the switch block.\n     * @param caseToRemove the case to remove.\n     */\n    removeCase(caseToRemove) {\n        if (!this.config.cases.includes(caseToRemove)) {\n            return;\n        }\n        const index = this.config.cases.indexOf(caseToRemove);\n        this.config.cases.splice(index, 1);\n        this._caseToOutputFlow.delete(caseToRemove);\n    }\n    /**\n     * @internal\n     */\n    _getOutputFlowForCase(caseValue) {\n        return this._caseToOutputFlow.get(caseValue);\n    }\n    /**\n     * @returns class name of the block.\n     */\n    getClassName() {\n        return \"FlowGraphSwitchBlock\" /* FlowGraphBlockNames.Switch */;\n    }\n    /**\n     * Serialize the block to a JSON representation.\n     * @param serializationObject the object to serialize to.\n     */\n    serialize(serializationObject) {\n        super.serialize(serializationObject);\n        serializationObject.cases = this.config.cases;\n    }\n}\nRegisterClass(\"FlowGraphSwitchBlock\" /* FlowGraphBlockNames.Switch */, FlowGraphSwitchBlock);\n//# sourceMappingURL=flowGraphSwitchBlock.js.map"],"names":["FlowGraphSwitchBlock","FlowGraphExecutionBlock","constructor","config","super","this","default","_registerSignalOutput","_caseToOutputFlow","Map","case","registerDataInput","RichTypeAny","array","cases","caseValue","set","_execute","context","_callingSignal","selectionValue","getValue","outputFlow","isNumeric","_getOutputFlowForCase","getNumericValue","_activateSignal","addCase","newCase","includes","push","removeCase","caseToRemove","index","indexOf","splice","delete","get","getClassName","serialize","serializationObject","RegisterClass"],"mappings":"uOAOO,MAAMA,UAA6BC,EACtC,WAAAC,CAIAC,GACIC,MAAMD,GACNE,KAAKF,OAASA,EAIdE,KAAKC,QAAUD,KAAKE,sBAAsB,WAC1CF,KAAKG,kBAAoB,IAAIC,IAC7BJ,KAAKK,KAAOL,KAAKM,kBAAkB,OAAQC,GAE3C,MAAMC,EAAQR,KAAKF,OAAOW,OAAS,GACnC,IAAK,MAAMC,KAAaF,EACpBR,KAAKG,kBAAkBQ,IAAID,EAAWV,KAAKE,sBAAsB,OAAOQ,KAEpF,CACI,QAAAE,CAASC,EAASC,GACd,MAAMC,EAAiBf,KAAKK,KAAKW,SAASH,GAC1C,IAAII,EAEAA,EADAC,EAAUH,GACGf,KAAKmB,sBAAsBC,EAAgBL,IAG3Cf,KAAKmB,sBAAsBJ,GAExCE,EACAA,EAAWI,gBAAgBR,GAG3Bb,KAAKC,QAAQoB,gBAAgBR,EAEzC,CAKI,OAAAS,CAAQC,GACAvB,KAAKF,OAAOW,MAAMe,SAASD,KAG/BvB,KAAKF,OAAOW,MAAMgB,KAAKF,GACvBvB,KAAKG,kBAAkBQ,IAAIY,EAASvB,KAAKE,sBAAsB,OAAOqB,MAC9E,CAKI,UAAAG,CAAWC,GACP,IAAK3B,KAAKF,OAAOW,MAAMe,SAASG,GAC5B,OAEJ,MAAMC,EAAQ5B,KAAKF,OAAOW,MAAMoB,QAAQF,GACxC3B,KAAKF,OAAOW,MAAMqB,OAAOF,EAAO,GAChC5B,KAAKG,kBAAkB4B,OAAOJ,EACtC,CAII,qBAAAR,CAAsBT,GAClB,OAAOV,KAAKG,kBAAkB6B,IAAItB,EAC1C,CAII,YAAAuB,GACI,MAAO,sBACf,CAKI,SAAAC,CAAUC,GACNpC,MAAMmC,UAAUC,GAChBA,EAAoB1B,MAAQT,KAAKF,OAAOW,KAChD,EAEA2B,EAAc,uBAAyDzC"}