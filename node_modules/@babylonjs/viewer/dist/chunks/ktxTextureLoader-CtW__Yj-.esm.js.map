{"version":3,"file":"ktxTextureLoader-CtW__Yj-.esm.js","sources":["../../../../../dev/core/dist/Misc/khronosTextureContainer.js","../../../../../dev/core/dist/Materials/Textures/ktx2decoderTypes.js","../../../../../dev/core/dist/Misc/khronosTextureContainer2Worker.js","../../../../../dev/core/dist/Misc/khronosTextureContainer2.js","../../../../../dev/core/dist/Materials/Textures/Loaders/ktxTextureLoader.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\nimport { Logger } from \"../Misc/logger\";\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n */\nexport class KhronosTextureContainer {\n    /**\n     * Creates a new KhronosTextureContainer\n     * @param data contents of the KTX container file\n     * @param facesExpected should be either 1 or 6, based whether a cube texture or or\n     */\n    constructor(\n    /** contents of the KTX container file */\n    data, facesExpected) {\n        this.data = data;\n        /**\n         * If the container has been made invalid (eg. constructor failed to correctly load array buffer)\n         */\n        this.isInvalid = false;\n        if (!KhronosTextureContainer.IsValid(data)) {\n            this.isInvalid = true;\n            Logger.Error(\"texture missing KTX identifier\");\n            return;\n        }\n        // load the reset of the header in native 32 bit uint\n        const dataSize = Uint32Array.BYTES_PER_ELEMENT;\n        const headerDataView = new DataView(this.data.buffer, this.data.byteOffset + 12, 13 * dataSize);\n        const endianness = headerDataView.getUint32(0, true);\n        const littleEndian = endianness === 0x04030201;\n        this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\n        this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\n        this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\n        this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n        this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n        this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n        this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n        this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n        this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\n        this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\n        this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\n        this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\n        // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n        if (this.glType !== 0) {\n            Logger.Error(\"only compressed formats currently supported\");\n            this.isInvalid = true;\n            return;\n        }\n        else {\n            // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n            this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n        }\n        if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n            Logger.Error(\"only 2D textures currently supported\");\n            this.isInvalid = true;\n            return;\n        }\n        if (this.numberOfArrayElements !== 0) {\n            Logger.Error(\"texture arrays not currently supported\");\n            this.isInvalid = true;\n            return;\n        }\n        if (this.numberOfFaces !== facesExpected) {\n            Logger.Error(\"number of faces expected\" + facesExpected + \", but found \" + this.numberOfFaces);\n            this.isInvalid = true;\n            return;\n        }\n        // we now have a completely validated file, so could use existence of loadType as success\n        // would need to make this more elaborate & adjust checks above to support more than one load type\n        this.loadType = KhronosTextureContainer.COMPRESSED_2D;\n    }\n    /**\n     * Uploads KTX content to a Babylon Texture.\n     * It is assumed that the texture has already been created & is currently bound\n     * @internal\n     */\n    uploadLevels(texture, loadMipmaps) {\n        switch (this.loadType) {\n            case KhronosTextureContainer.COMPRESSED_2D:\n                this._upload2DCompressedLevels(texture, loadMipmaps);\n                break;\n            case KhronosTextureContainer.TEX_2D:\n            case KhronosTextureContainer.COMPRESSED_3D:\n            case KhronosTextureContainer.TEX_3D:\n        }\n    }\n    _upload2DCompressedLevels(texture, loadMipmaps) {\n        // initialize width & height for level 1\n        let dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\n        let width = this.pixelWidth;\n        let height = this.pixelHeight;\n        const mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n        for (let level = 0; level < mipmapCount; level++) {\n            const imageSize = new Int32Array(this.data.buffer, this.data.byteOffset + dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n            dataOffset += 4; //image data starts from next multiple of 4 offset. Each face refers to same imagesize field above.\n            for (let face = 0; face < this.numberOfFaces; face++) {\n                const byteArray = new Uint8Array(this.data.buffer, this.data.byteOffset + dataOffset, imageSize);\n                const engine = texture.getEngine();\n                engine._uploadCompressedDataToTextureDirectly(texture, texture.format, width, height, byteArray, face, level);\n                dataOffset += imageSize; // add size of the image for the next face/mipmap\n                dataOffset += 3 - ((imageSize + 3) % 4); // add padding for odd sized image\n            }\n            width = Math.max(1.0, width * 0.5);\n            height = Math.max(1.0, height * 0.5);\n        }\n    }\n    /**\n     * Checks if the given data starts with a KTX file identifier.\n     * @param data the data to check\n     * @returns true if the data is a KTX file or false otherwise\n     */\n    static IsValid(data) {\n        if (data.byteLength >= 12) {\n            // '«', 'K', 'T', 'X', ' ', '1', '1', '»', '\\r', '\\n', '\\x1A', '\\n'\n            const identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\n            if (identifier[0] === 0xab &&\n                identifier[1] === 0x4b &&\n                identifier[2] === 0x54 &&\n                identifier[3] === 0x58 &&\n                identifier[4] === 0x20 &&\n                identifier[5] === 0x31 &&\n                identifier[6] === 0x31 &&\n                identifier[7] === 0xbb &&\n                identifier[8] === 0x0d &&\n                identifier[9] === 0x0a &&\n                identifier[10] === 0x1a &&\n                identifier[11] === 0x0a) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nKhronosTextureContainer.HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n// load types\nKhronosTextureContainer.COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\nKhronosTextureContainer.COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\nKhronosTextureContainer.TEX_2D = 2; // uses a gl.texImage2D()\nKhronosTextureContainer.TEX_3D = 3; // uses a gl.texImage3D()\n//# sourceMappingURL=khronosTextureContainer.js.map","export var SourceTextureFormat;\n(function (SourceTextureFormat) {\n    SourceTextureFormat[SourceTextureFormat[\"ETC1S\"] = 0] = \"ETC1S\";\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    SourceTextureFormat[SourceTextureFormat[\"UASTC4x4\"] = 1] = \"UASTC4x4\";\n})(SourceTextureFormat || (SourceTextureFormat = {}));\nexport var TranscodeTarget;\n(function (TranscodeTarget) {\n    TranscodeTarget[TranscodeTarget[\"ASTC_4X4_RGBA\"] = 0] = \"ASTC_4X4_RGBA\";\n    TranscodeTarget[TranscodeTarget[\"BC7_RGBA\"] = 1] = \"BC7_RGBA\";\n    TranscodeTarget[TranscodeTarget[\"BC3_RGBA\"] = 2] = \"BC3_RGBA\";\n    TranscodeTarget[TranscodeTarget[\"BC1_RGB\"] = 3] = \"BC1_RGB\";\n    TranscodeTarget[TranscodeTarget[\"PVRTC1_4_RGBA\"] = 4] = \"PVRTC1_4_RGBA\";\n    TranscodeTarget[TranscodeTarget[\"PVRTC1_4_RGB\"] = 5] = \"PVRTC1_4_RGB\";\n    TranscodeTarget[TranscodeTarget[\"ETC2_RGBA\"] = 6] = \"ETC2_RGBA\";\n    TranscodeTarget[TranscodeTarget[\"ETC1_RGB\"] = 7] = \"ETC1_RGB\";\n    TranscodeTarget[TranscodeTarget[\"RGBA32\"] = 8] = \"RGBA32\";\n    TranscodeTarget[TranscodeTarget[\"R8\"] = 9] = \"R8\";\n    TranscodeTarget[TranscodeTarget[\"RG8\"] = 10] = \"RG8\";\n})(TranscodeTarget || (TranscodeTarget = {}));\nexport var EngineFormat;\n(function (EngineFormat) {\n    EngineFormat[EngineFormat[\"COMPRESSED_RGBA_BPTC_UNORM_EXT\"] = 36492] = \"COMPRESSED_RGBA_BPTC_UNORM_EXT\";\n    EngineFormat[EngineFormat[\"COMPRESSED_RGBA_ASTC_4X4_KHR\"] = 37808] = \"COMPRESSED_RGBA_ASTC_4X4_KHR\";\n    EngineFormat[EngineFormat[\"COMPRESSED_RGB_S3TC_DXT1_EXT\"] = 33776] = \"COMPRESSED_RGB_S3TC_DXT1_EXT\";\n    EngineFormat[EngineFormat[\"COMPRESSED_RGBA_S3TC_DXT5_EXT\"] = 33779] = \"COMPRESSED_RGBA_S3TC_DXT5_EXT\";\n    EngineFormat[EngineFormat[\"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\"] = 35842] = \"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\";\n    EngineFormat[EngineFormat[\"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\"] = 35840] = \"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\";\n    EngineFormat[EngineFormat[\"COMPRESSED_RGBA8_ETC2_EAC\"] = 37496] = \"COMPRESSED_RGBA8_ETC2_EAC\";\n    EngineFormat[EngineFormat[\"COMPRESSED_RGB8_ETC2\"] = 37492] = \"COMPRESSED_RGB8_ETC2\";\n    EngineFormat[EngineFormat[\"COMPRESSED_RGB_ETC1_WEBGL\"] = 36196] = \"COMPRESSED_RGB_ETC1_WEBGL\";\n    EngineFormat[EngineFormat[\"RGBA8Format\"] = 32856] = \"RGBA8Format\";\n    EngineFormat[EngineFormat[\"R8Format\"] = 33321] = \"R8Format\";\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    EngineFormat[EngineFormat[\"RG8Format\"] = 33323] = \"RG8Format\";\n})(EngineFormat || (EngineFormat = {}));\n//# sourceMappingURL=ktx2decoderTypes.js.map","export function applyConfig(urls, binariesAndModulesContainer) {\n    const KTX2DecoderModule = binariesAndModulesContainer?.jsDecoderModule || KTX2DECODER;\n    if (urls) {\n        if (urls.wasmUASTCToASTC) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_ASTC.WasmModuleURL = urls.wasmUASTCToASTC;\n        }\n        if (urls.wasmUASTCToBC7) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_BC7.WasmModuleURL = urls.wasmUASTCToBC7;\n        }\n        if (urls.wasmUASTCToRGBA_UNORM) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_RGBA_UNORM.WasmModuleURL = urls.wasmUASTCToRGBA_UNORM;\n        }\n        if (urls.wasmUASTCToRGBA_SRGB) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_RGBA_SRGB.WasmModuleURL = urls.wasmUASTCToRGBA_SRGB;\n        }\n        if (urls.wasmUASTCToR8_UNORM) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_R8_UNORM.WasmModuleURL = urls.wasmUASTCToR8_UNORM;\n        }\n        if (urls.wasmUASTCToRG8_UNORM) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_RG8_UNORM.WasmModuleURL = urls.wasmUASTCToRG8_UNORM;\n        }\n        if (urls.jsMSCTranscoder) {\n            KTX2DecoderModule.MSCTranscoder.JSModuleURL = urls.jsMSCTranscoder;\n        }\n        if (urls.wasmMSCTranscoder) {\n            KTX2DecoderModule.MSCTranscoder.WasmModuleURL = urls.wasmMSCTranscoder;\n        }\n        if (urls.wasmZSTDDecoder) {\n            KTX2DecoderModule.ZSTDDecoder.WasmModuleURL = urls.wasmZSTDDecoder;\n        }\n    }\n    if (binariesAndModulesContainer) {\n        if (binariesAndModulesContainer.wasmUASTCToASTC) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_ASTC.WasmBinary = binariesAndModulesContainer.wasmUASTCToASTC;\n        }\n        if (binariesAndModulesContainer.wasmUASTCToBC7) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_BC7.WasmBinary = binariesAndModulesContainer.wasmUASTCToBC7;\n        }\n        if (binariesAndModulesContainer.wasmUASTCToRGBA_UNORM) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_RGBA_UNORM.WasmBinary = binariesAndModulesContainer.wasmUASTCToRGBA_UNORM;\n        }\n        if (binariesAndModulesContainer.wasmUASTCToRGBA_SRGB) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_RGBA_SRGB.WasmBinary = binariesAndModulesContainer.wasmUASTCToRGBA_SRGB;\n        }\n        if (binariesAndModulesContainer.wasmUASTCToR8_UNORM) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_R8_UNORM.WasmBinary = binariesAndModulesContainer.wasmUASTCToR8_UNORM;\n        }\n        if (binariesAndModulesContainer.wasmUASTCToRG8_UNORM) {\n            KTX2DecoderModule.LiteTranscoder_UASTC_RG8_UNORM.WasmBinary = binariesAndModulesContainer.wasmUASTCToRG8_UNORM;\n        }\n        if (binariesAndModulesContainer.jsMSCTranscoder) {\n            KTX2DecoderModule.MSCTranscoder.JSModule = binariesAndModulesContainer.jsMSCTranscoder;\n        }\n        if (binariesAndModulesContainer.wasmMSCTranscoder) {\n            KTX2DecoderModule.MSCTranscoder.WasmBinary = binariesAndModulesContainer.wasmMSCTranscoder;\n        }\n        if (binariesAndModulesContainer.wasmZSTDDecoder) {\n            KTX2DecoderModule.ZSTDDecoder.WasmBinary = binariesAndModulesContainer.wasmZSTDDecoder;\n        }\n    }\n}\nexport function workerFunction(KTX2DecoderModule) {\n    if (typeof KTX2DecoderModule === \"undefined\" && typeof KTX2DECODER !== \"undefined\") {\n        KTX2DecoderModule = KTX2DECODER;\n    }\n    let ktx2Decoder;\n    onmessage = (event) => {\n        if (!event.data) {\n            return;\n        }\n        switch (event.data.action) {\n            case \"init\": {\n                const urls = event.data.urls;\n                if (urls) {\n                    if (urls.jsDecoderModule && typeof KTX2DecoderModule === \"undefined\") {\n                        importScripts(urls.jsDecoderModule);\n                        // assuming global namespace populated by the script (UMD pattern)\n                        KTX2DecoderModule = KTX2DECODER;\n                    }\n                    applyConfig(urls);\n                }\n                if (event.data.wasmBinaries) {\n                    applyConfig(undefined, { ...event.data.wasmBinaries, jsDecoderModule: KTX2DecoderModule });\n                }\n                ktx2Decoder = new KTX2DecoderModule.KTX2Decoder();\n                postMessage({ action: \"init\" });\n                break;\n            }\n            case \"setDefaultDecoderOptions\": {\n                KTX2DecoderModule.KTX2Decoder.DefaultDecoderOptions = event.data.options;\n                break;\n            }\n            case \"decode\":\n                ktx2Decoder\n                    .decode(event.data.data, event.data.caps, event.data.options)\n                    // eslint-disable-next-line github/no-then\n                    .then((data) => {\n                    const buffers = [];\n                    for (let mip = 0; mip < data.mipmaps.length; ++mip) {\n                        const mipmap = data.mipmaps[mip];\n                        if (mipmap && mipmap.data) {\n                            buffers.push(mipmap.data.buffer);\n                        }\n                    }\n                    postMessage({ action: \"decoded\", success: true, decodedData: data }, buffers);\n                })\n                    // eslint-disable-next-line github/no-then\n                    .catch((reason) => {\n                    postMessage({ action: \"decoded\", success: false, msg: reason });\n                });\n                break;\n        }\n    };\n}\nexport async function initializeWebWorker(worker, wasmBinaries, urls) {\n    return await new Promise((resolve, reject) => {\n        const onError = (error) => {\n            worker.removeEventListener(\"error\", onError);\n            worker.removeEventListener(\"message\", onMessage);\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            reject(error);\n        };\n        const onMessage = (message) => {\n            if (message.data.action === \"init\") {\n                worker.removeEventListener(\"error\", onError);\n                worker.removeEventListener(\"message\", onMessage);\n                resolve(worker);\n            }\n        };\n        worker.addEventListener(\"error\", onError);\n        worker.addEventListener(\"message\", onMessage);\n        worker.postMessage({\n            action: \"init\",\n            urls,\n            wasmBinaries,\n        });\n    });\n}\n//# sourceMappingURL=khronosTextureContainer2Worker.js.map","import { Constants } from \"../Engines/constants\";\nimport { AutoReleaseWorkerPool } from \"./workerPool\";\nimport { Tools } from \"./tools\";\nimport { TranscodeTarget } from \"core/Materials/Textures/ktx2decoderTypes\";\nimport { applyConfig, initializeWebWorker, workerFunction } from \"./khronosTextureContainer2Worker\";\n/**\n * Class that defines the default KTX2 decoder options.\n *\n * This class is useful for providing options to the KTX2 decoder to control how the source data is transcoded.\n */\nexport class DefaultKTX2DecoderOptions {\n    constructor() {\n        this._isDirty = true;\n        this._useRGBAIfOnlyBC1BC3AvailableWhenUASTC = true;\n        this._ktx2DecoderOptions = {};\n    }\n    /**\n     * Gets the dirty flag\n     */\n    get isDirty() {\n        return this._isDirty;\n    }\n    /**\n     * force a (uncompressed) RGBA transcoded format if transcoding a UASTC source format and ASTC + BC7 are not available as a compressed transcoded format\n     */\n    get useRGBAIfASTCBC7NotAvailableWhenUASTC() {\n        return this._useRGBAIfASTCBC7NotAvailableWhenUASTC;\n    }\n    set useRGBAIfASTCBC7NotAvailableWhenUASTC(value) {\n        if (this._useRGBAIfASTCBC7NotAvailableWhenUASTC === value) {\n            return;\n        }\n        this._useRGBAIfASTCBC7NotAvailableWhenUASTC = value;\n        this._isDirty = true;\n    }\n    /**\n     * force a (uncompressed) RGBA transcoded format if transcoding a UASTC source format and only BC1 or BC3 are available as a compressed transcoded format.\n     * This property is true by default to favor speed over memory, because currently transcoding from UASTC to BC1/3 is slow because the transcoder transcodes\n     * to uncompressed and then recompresses the texture\n     */\n    get useRGBAIfOnlyBC1BC3AvailableWhenUASTC() {\n        return this._useRGBAIfOnlyBC1BC3AvailableWhenUASTC;\n    }\n    set useRGBAIfOnlyBC1BC3AvailableWhenUASTC(value) {\n        if (this._useRGBAIfOnlyBC1BC3AvailableWhenUASTC === value) {\n            return;\n        }\n        this._useRGBAIfOnlyBC1BC3AvailableWhenUASTC = value;\n        this._isDirty = true;\n    }\n    /**\n     * force to always use (uncompressed) RGBA for transcoded format\n     */\n    get forceRGBA() {\n        return this._forceRGBA;\n    }\n    set forceRGBA(value) {\n        if (this._forceRGBA === value) {\n            return;\n        }\n        this._forceRGBA = value;\n        this._isDirty = true;\n    }\n    /**\n     * force to always use (uncompressed) R8 for transcoded format\n     */\n    get forceR8() {\n        return this._forceR8;\n    }\n    set forceR8(value) {\n        if (this._forceR8 === value) {\n            return;\n        }\n        this._forceR8 = value;\n        this._isDirty = true;\n    }\n    /**\n     * force to always use (uncompressed) RG8 for transcoded format\n     */\n    get forceRG8() {\n        return this._forceRG8;\n    }\n    set forceRG8(value) {\n        if (this._forceRG8 === value) {\n            return;\n        }\n        this._forceRG8 = value;\n        this._isDirty = true;\n    }\n    /**\n     * list of transcoders to bypass when looking for a suitable transcoder. The available transcoders are:\n     *      UniversalTranscoder_UASTC_ASTC\n     *      UniversalTranscoder_UASTC_BC7\n     *      UniversalTranscoder_UASTC_RGBA_UNORM\n     *      UniversalTranscoder_UASTC_RGBA_SRGB\n     *      UniversalTranscoder_UASTC_R8_UNORM\n     *      UniversalTranscoder_UASTC_RG8_UNORM\n     *      MSCTranscoder\n     */\n    get bypassTranscoders() {\n        return this._bypassTranscoders;\n    }\n    set bypassTranscoders(value) {\n        if (this._bypassTranscoders === value) {\n            return;\n        }\n        this._bypassTranscoders = value;\n        this._isDirty = true;\n    }\n    /** @internal */\n    _getKTX2DecoderOptions() {\n        if (!this._isDirty) {\n            return this._ktx2DecoderOptions;\n        }\n        this._isDirty = false;\n        const options = {\n            useRGBAIfASTCBC7NotAvailableWhenUASTC: this._useRGBAIfASTCBC7NotAvailableWhenUASTC,\n            forceRGBA: this._forceRGBA,\n            forceR8: this._forceR8,\n            forceRG8: this._forceRG8,\n            bypassTranscoders: this._bypassTranscoders,\n        };\n        if (this.useRGBAIfOnlyBC1BC3AvailableWhenUASTC) {\n            options.transcodeFormatDecisionTree = {\n                UASTC: {\n                    transcodeFormat: [TranscodeTarget.BC1_RGB, TranscodeTarget.BC3_RGBA],\n                    yes: {\n                        transcodeFormat: TranscodeTarget.RGBA32,\n                        engineFormat: 32856 /* EngineFormat.RGBA8Format */,\n                        roundToMultiple4: false,\n                    },\n                },\n            };\n        }\n        this._ktx2DecoderOptions = options;\n        return options;\n    }\n}\n/**\n * Class for loading KTX2 files\n */\nexport class KhronosTextureContainer2 {\n    static GetDefaultNumWorkers() {\n        if (typeof navigator !== \"object\" || !navigator.hardwareConcurrency) {\n            return 1;\n        }\n        // Use 50% of the available logical processors but capped at 4.\n        return Math.min(Math.floor(navigator.hardwareConcurrency * 0.5), 4);\n    }\n    static _Initialize(numWorkers) {\n        if (KhronosTextureContainer2._WorkerPoolPromise || KhronosTextureContainer2._DecoderModulePromise) {\n            return;\n        }\n        const urls = {\n            jsDecoderModule: Tools.GetBabylonScriptURL(this.URLConfig.jsDecoderModule, true),\n            wasmUASTCToASTC: Tools.GetBabylonScriptURL(this.URLConfig.wasmUASTCToASTC, true),\n            wasmUASTCToBC7: Tools.GetBabylonScriptURL(this.URLConfig.wasmUASTCToBC7, true),\n            wasmUASTCToRGBA_UNORM: Tools.GetBabylonScriptURL(this.URLConfig.wasmUASTCToRGBA_UNORM, true),\n            wasmUASTCToRGBA_SRGB: Tools.GetBabylonScriptURL(this.URLConfig.wasmUASTCToRGBA_SRGB, true),\n            wasmUASTCToR8_UNORM: Tools.GetBabylonScriptURL(this.URLConfig.wasmUASTCToR8_UNORM, true),\n            wasmUASTCToRG8_UNORM: Tools.GetBabylonScriptURL(this.URLConfig.wasmUASTCToRG8_UNORM, true),\n            jsMSCTranscoder: Tools.GetBabylonScriptURL(this.URLConfig.jsMSCTranscoder, true),\n            wasmMSCTranscoder: Tools.GetBabylonScriptURL(this.URLConfig.wasmMSCTranscoder, true),\n            wasmZSTDDecoder: Tools.GetBabylonScriptURL(this.URLConfig.wasmZSTDDecoder, true),\n        };\n        if (numWorkers && typeof Worker === \"function\" && typeof URL !== \"undefined\") {\n            KhronosTextureContainer2._WorkerPoolPromise = new Promise((resolve) => {\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                const workerContent = `${applyConfig}(${workerFunction})()`;\n                const workerBlobUrl = URL.createObjectURL(new Blob([workerContent], { type: \"application/javascript\" }));\n                resolve(new AutoReleaseWorkerPool(numWorkers, async () => await initializeWebWorker(new Worker(workerBlobUrl), undefined, urls)));\n            });\n        }\n        else {\n            if (typeof KhronosTextureContainer2._KTX2DecoderModule === \"undefined\") {\n                // eslint-disable-next-line github/no-then\n                KhronosTextureContainer2._DecoderModulePromise = Tools.LoadBabylonScriptAsync(urls.jsDecoderModule).then(() => {\n                    KhronosTextureContainer2._KTX2DecoderModule = KTX2DECODER;\n                    KhronosTextureContainer2._KTX2DecoderModule.MSCTranscoder.UseFromWorkerThread = false;\n                    KhronosTextureContainer2._KTX2DecoderModule.WASMMemoryManager.LoadBinariesFromCurrentThread = true;\n                    applyConfig(urls, KhronosTextureContainer2._KTX2DecoderModule);\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    return new KhronosTextureContainer2._KTX2DecoderModule.KTX2Decoder();\n                });\n            }\n            else {\n                KhronosTextureContainer2._KTX2DecoderModule.MSCTranscoder.UseFromWorkerThread = false;\n                KhronosTextureContainer2._KTX2DecoderModule.WASMMemoryManager.LoadBinariesFromCurrentThread = true;\n                KhronosTextureContainer2._DecoderModulePromise = Promise.resolve(new KhronosTextureContainer2._KTX2DecoderModule.KTX2Decoder());\n            }\n        }\n    }\n    /**\n     * Constructor\n     * @param engine The engine to use\n     * @param numWorkersOrOptions The number of workers for async operations. Specify `0` to disable web workers and run synchronously in the current context.\n     */\n    constructor(engine, numWorkersOrOptions = KhronosTextureContainer2.DefaultNumWorkers) {\n        this._engine = engine;\n        const workerPoolOption = (typeof numWorkersOrOptions === \"object\" && numWorkersOrOptions.workerPool) || KhronosTextureContainer2.WorkerPool;\n        if (workerPoolOption) {\n            KhronosTextureContainer2._WorkerPoolPromise = Promise.resolve(workerPoolOption);\n        }\n        else {\n            // set the KTX2 decoder module\n            if (typeof numWorkersOrOptions === \"object\") {\n                KhronosTextureContainer2._KTX2DecoderModule = numWorkersOrOptions?.binariesAndModulesContainer?.jsDecoderModule;\n            }\n            else if (typeof KTX2DECODER !== \"undefined\") {\n                KhronosTextureContainer2._KTX2DecoderModule = KTX2DECODER;\n            }\n            const numberOfWorkers = typeof numWorkersOrOptions === \"number\" ? numWorkersOrOptions : (numWorkersOrOptions.numWorkers ?? KhronosTextureContainer2.DefaultNumWorkers);\n            KhronosTextureContainer2._Initialize(numberOfWorkers);\n        }\n    }\n    /**\n     * @internal\n     */\n    async _uploadAsync(data, internalTexture, options) {\n        const caps = this._engine.getCaps();\n        const compressedTexturesCaps = {\n            astc: !!caps.astc,\n            bptc: !!caps.bptc,\n            s3tc: !!caps.s3tc,\n            pvrtc: !!caps.pvrtc,\n            etc2: !!caps.etc2,\n            etc1: !!caps.etc1,\n        };\n        if (KhronosTextureContainer2._WorkerPoolPromise) {\n            const workerPool = await KhronosTextureContainer2._WorkerPoolPromise;\n            return await new Promise((resolve, reject) => {\n                workerPool.push((worker, onComplete) => {\n                    const onError = (error) => {\n                        worker.removeEventListener(\"error\", onError);\n                        worker.removeEventListener(\"message\", onMessage);\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                        reject(error);\n                        onComplete();\n                    };\n                    const onMessage = (message) => {\n                        if (message.data.action === \"decoded\") {\n                            worker.removeEventListener(\"error\", onError);\n                            worker.removeEventListener(\"message\", onMessage);\n                            if (!message.data.success) {\n                                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                                reject({ message: message.data.msg });\n                            }\n                            else {\n                                try {\n                                    this._createTexture(message.data.decodedData, internalTexture, options);\n                                    resolve();\n                                }\n                                catch (err) {\n                                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                                    reject({ message: err });\n                                }\n                            }\n                            onComplete();\n                        }\n                    };\n                    worker.addEventListener(\"error\", onError);\n                    worker.addEventListener(\"message\", onMessage);\n                    worker.postMessage({ action: \"setDefaultDecoderOptions\", options: KhronosTextureContainer2.DefaultDecoderOptions._getKTX2DecoderOptions() });\n                    const dataCopy = new Uint8Array(data.byteLength);\n                    dataCopy.set(new Uint8Array(data.buffer, data.byteOffset, data.byteLength));\n                    worker.postMessage({ action: \"decode\", data: dataCopy, caps: compressedTexturesCaps, options }, [dataCopy.buffer]);\n                });\n            });\n        }\n        else if (KhronosTextureContainer2._DecoderModulePromise) {\n            const decoder = await KhronosTextureContainer2._DecoderModulePromise;\n            if (KhronosTextureContainer2.DefaultDecoderOptions.isDirty) {\n                KhronosTextureContainer2._KTX2DecoderModule.KTX2Decoder.DefaultDecoderOptions = KhronosTextureContainer2.DefaultDecoderOptions._getKTX2DecoderOptions();\n            }\n            return await new Promise((resolve, reject) => {\n                decoder\n                    .decode(data, caps)\n                    // eslint-disable-next-line github/no-then\n                    .then((data) => {\n                    this._createTexture(data, internalTexture);\n                    resolve();\n                })\n                    // eslint-disable-next-line github/no-then\n                    .catch((reason) => {\n                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                    reject({ message: reason });\n                });\n            });\n        }\n        throw new Error(\"KTX2 decoder module is not available\");\n    }\n    _createTexture(data, internalTexture, options) {\n        const oglTexture2D = 3553; // gl.TEXTURE_2D\n        this._engine._bindTextureDirectly(oglTexture2D, internalTexture);\n        if (options) {\n            // return back some information about the decoded data\n            options.transcodedFormat = data.transcodedFormat;\n            options.isInGammaSpace = data.isInGammaSpace;\n            options.hasAlpha = data.hasAlpha;\n            options.transcoderName = data.transcoderName;\n        }\n        let isUncompressedFormat = true;\n        switch (data.transcodedFormat) {\n            case 0x8058 /* RGBA8 */:\n                internalTexture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\n                internalTexture.format = Constants.TEXTUREFORMAT_RGBA;\n                break;\n            case 0x8229 /* R8 */:\n                internalTexture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\n                internalTexture.format = Constants.TEXTUREFORMAT_R;\n                break;\n            case 0x822b /* RG8 */:\n                internalTexture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\n                internalTexture.format = Constants.TEXTUREFORMAT_RG;\n                break;\n            default:\n                internalTexture.format = data.transcodedFormat;\n                isUncompressedFormat = false;\n                break;\n        }\n        internalTexture._gammaSpace = data.isInGammaSpace;\n        internalTexture.generateMipMaps = data.mipmaps.length > 1;\n        if (data.errors) {\n            throw new Error(\"KTX2 container - could not transcode the data. \" + data.errors);\n        }\n        for (let t = 0; t < data.mipmaps.length; ++t) {\n            const mipmap = data.mipmaps[t];\n            if (!mipmap || !mipmap.data) {\n                throw new Error(\"KTX2 container - could not transcode one of the image\");\n            }\n            if (isUncompressedFormat) {\n                // uncompressed RGBA / R8 / RG8\n                internalTexture.width = mipmap.width; // need to set width/height so that the call to _uploadDataToTextureDirectly uses the right dimensions\n                internalTexture.height = mipmap.height;\n                this._engine._uploadDataToTextureDirectly(internalTexture, mipmap.data, 0, t, undefined, true);\n            }\n            else {\n                this._engine._uploadCompressedDataToTextureDirectly(internalTexture, data.transcodedFormat, mipmap.width, mipmap.height, mipmap.data, 0, t);\n            }\n        }\n        internalTexture._extension = \".ktx2\";\n        internalTexture.width = data.mipmaps[0].width;\n        internalTexture.height = data.mipmaps[0].height;\n        internalTexture.isReady = true;\n        this._engine._bindTextureDirectly(oglTexture2D, null);\n    }\n    /**\n     * Checks if the given data starts with a KTX2 file identifier.\n     * @param data the data to check\n     * @returns true if the data is a KTX2 file or false otherwise\n     */\n    static IsValid(data) {\n        if (data.byteLength >= 12) {\n            // '«', 'K', 'T', 'X', ' ', '2', '0', '»', '\\r', '\\n', '\\x1A', '\\n'\n            const identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\n            if (identifier[0] === 0xab &&\n                identifier[1] === 0x4b &&\n                identifier[2] === 0x54 &&\n                identifier[3] === 0x58 &&\n                identifier[4] === 0x20 &&\n                identifier[5] === 0x32 &&\n                identifier[6] === 0x30 &&\n                identifier[7] === 0xbb &&\n                identifier[8] === 0x0d &&\n                identifier[9] === 0x0a &&\n                identifier[10] === 0x1a &&\n                identifier[11] === 0x0a) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n/**\n * URLs to use when loading the KTX2 decoder module as well as its dependencies\n * If a url is null, the default url is used (pointing to https://preview.babylonjs.com)\n * Note that jsDecoderModule can't be null and that the other dependencies will only be loaded if necessary\n * Urls you can change:\n *     URLConfig.jsDecoderModule\n *     URLConfig.wasmUASTCToASTC\n *     URLConfig.wasmUASTCToBC7\n *     URLConfig.wasmUASTCToRGBA_UNORM\n *     URLConfig.wasmUASTCToRGBA_SRGB\n *     URLConfig.wasmUASTCToR8_UNORM\n *     URLConfig.wasmUASTCToRG8_UNORM\n *     URLConfig.jsMSCTranscoder\n *     URLConfig.wasmMSCTranscoder\n *     URLConfig.wasmZSTDDecoder\n * You can see their default values in this PG: https://playground.babylonjs.com/#EIJH8L#29\n */\nKhronosTextureContainer2.URLConfig = {\n    jsDecoderModule: \"https://cdn.babylonjs.com/babylon.ktx2Decoder.js\",\n    wasmUASTCToASTC: null,\n    wasmUASTCToBC7: null,\n    wasmUASTCToRGBA_UNORM: null,\n    wasmUASTCToRGBA_SRGB: null,\n    wasmUASTCToR8_UNORM: null,\n    wasmUASTCToRG8_UNORM: null,\n    jsMSCTranscoder: null,\n    wasmMSCTranscoder: null,\n    wasmZSTDDecoder: null,\n};\n/**\n * Default number of workers used to handle data decoding\n */\nKhronosTextureContainer2.DefaultNumWorkers = KhronosTextureContainer2.GetDefaultNumWorkers();\n/**\n * Default configuration for the KTX2 decoder.\n * The options defined in this way have priority over those passed when creating a KTX2 texture with new Texture(...).\n */\nKhronosTextureContainer2.DefaultDecoderOptions = new DefaultKTX2DecoderOptions();\n//# sourceMappingURL=khronosTextureContainer2.js.map","import { KhronosTextureContainer } from \"../../../Misc/khronosTextureContainer\";\nimport { KhronosTextureContainer2 } from \"../../../Misc/khronosTextureContainer2\";\nimport { Logger } from \"../../../Misc/logger\";\nimport { Constants } from \"../../../Engines/constants\";\nfunction MapSRGBToLinear(format) {\n    switch (format) {\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB_S3TC_DXT1_EXT:\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGB_S3TC_DXT1;\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT:\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT3;\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT:\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT5;\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB8_ETC2:\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGB8_ETC2;\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGBA8_ETC2_EAC;\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGBA_ASTC_4x4;\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_BPTC_UNORM:\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGBA_BPTC_UNORM;\n    }\n    return null;\n}\n/**\n * Implementation of the KTX Texture Loader.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _KTXTextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param createPolynomials will be true if polynomials have been requested\n     * @param onLoad defines the callback to trigger once the texture is ready\n     */\n    loadCubeData(data, texture, createPolynomials, onLoad) {\n        if (Array.isArray(data)) {\n            return;\n        }\n        // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\n        texture._invertVScale = !texture.invertY;\n        const engine = texture.getEngine();\n        const ktx = new KhronosTextureContainer(data, 6);\n        const loadMipmap = ktx.numberOfMipmapLevels > 1 && texture.generateMipMaps;\n        engine._unpackFlipY(true);\n        ktx.uploadLevels(texture, texture.generateMipMaps);\n        texture.width = ktx.pixelWidth;\n        texture.height = ktx.pixelHeight;\n        engine._setCubeMapTextureParams(texture, loadMipmap, ktx.numberOfMipmapLevels - 1);\n        texture.isReady = true;\n        texture.onLoadedObservable.notifyObservers(texture);\n        texture.onLoadedObservable.clear();\n        if (onLoad) {\n            onLoad();\n        }\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     * @param options\n     */\n    loadData(data, texture, callback, options) {\n        if (KhronosTextureContainer.IsValid(data)) {\n            // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\n            texture._invertVScale = !texture.invertY;\n            const ktx = new KhronosTextureContainer(data, 1);\n            const mappedFormat = MapSRGBToLinear(ktx.glInternalFormat);\n            if (mappedFormat) {\n                texture.format = mappedFormat;\n                texture._useSRGBBuffer = texture.getEngine()._getUseSRGBBuffer(true, texture.generateMipMaps);\n                texture._gammaSpace = true;\n            }\n            else {\n                texture.format = ktx.glInternalFormat;\n            }\n            callback(ktx.pixelWidth, ktx.pixelHeight, texture.generateMipMaps, true, () => {\n                ktx.uploadLevels(texture, texture.generateMipMaps);\n            }, ktx.isInvalid);\n        }\n        else if (KhronosTextureContainer2.IsValid(data)) {\n            const ktx2 = new KhronosTextureContainer2(texture.getEngine());\n            // eslint-disable-next-line github/no-then\n            ktx2._uploadAsync(data, texture, options).then(() => {\n                callback(texture.width, texture.height, texture.generateMipMaps, true, () => { }, false);\n            }, (error) => {\n                Logger.Warn(`Failed to load KTX2 texture data: ${error.message}`);\n                callback(0, 0, false, false, () => { }, true);\n            });\n        }\n        else {\n            Logger.Error(\"texture missing KTX identifier\");\n            callback(0, 0, false, false, () => { }, true);\n        }\n    }\n}\n//# sourceMappingURL=ktxTextureLoader.js.map"],"names":[],"mappings":"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"}