{"version":3,"file":"mesh.vertexData.functions-D0Kx5Kh7.esm.min.js","sources":["../../../../../dev/core/dist/Misc/bitArray.js","../../../../../dev/core/dist/Meshes/mesh.vertexData.functions.js"],"sourcesContent":["function GetByteIndex(bitIndex) {\n    return Math.floor(bitIndex / 8);\n}\nfunction GetBitMask(bitIndex) {\n    return 1 << bitIndex % 8;\n}\n/**\n * An fixed size array that effectively stores boolean values where each value is a single bit of backing data.\n * @remarks\n * All bits are initialized to false.\n */\nexport class BitArray {\n    /**\n     * Creates a new bit array with a fixed size.\n     * @param size The number of bits to store.\n     */\n    constructor(size) {\n        this.size = size;\n        this._byteArray = new Uint8Array(Math.ceil(this.size / 8));\n    }\n    /**\n     * Gets the current value at the specified index.\n     * @param bitIndex The index to get the value from.\n     * @returns The value at the specified index.\n     */\n    get(bitIndex) {\n        if (bitIndex >= this.size) {\n            throw new RangeError(\"Bit index out of range\");\n        }\n        const byteIndex = GetByteIndex(bitIndex);\n        const bitMask = GetBitMask(bitIndex);\n        return (this._byteArray[byteIndex] & bitMask) !== 0;\n    }\n    /**\n     * Sets the value at the specified index.\n     * @param bitIndex The index to set the value at.\n     * @param value The value to set.\n     */\n    set(bitIndex, value) {\n        if (bitIndex >= this.size) {\n            throw new RangeError(\"Bit index out of range\");\n        }\n        const byteIndex = GetByteIndex(bitIndex);\n        const bitMask = GetBitMask(bitIndex);\n        if (value) {\n            this._byteArray[byteIndex] |= bitMask;\n        }\n        else {\n            this._byteArray[byteIndex] &= ~bitMask;\n        }\n    }\n}\n//# sourceMappingURL=bitArray.js.map","import { BitArray } from \"core/Misc/bitArray\";\n/**\n * Sort (in place) the index array so that faces with common indices are close\n * @param indices the array of indices to sort\n */\nexport function OptimizeIndices(indices) {\n    const faces = [];\n    const faceCount = indices.length / 3;\n    // Step 1: Break the indices array into faces\n    for (let i = 0; i < faceCount; i++) {\n        faces.push([indices[i * 3], indices[i * 3 + 1], indices[i * 3 + 2]]);\n    }\n    // Step 2: Build a graph connecting faces sharing a vertex\n    const vertexToFaceMap = new Map();\n    for (let faceIndex = 0; faceIndex < faces.length; faceIndex++) {\n        const face = faces[faceIndex];\n        for (const vertex of face) {\n            let face = vertexToFaceMap.get(vertex);\n            if (!face) {\n                vertexToFaceMap.set(vertex, (face = []));\n            }\n            face.push(faceIndex);\n        }\n    }\n    // Step 3: Traverse faces using DFS to ensure connected faces are close\n    const visited = new BitArray(faceCount);\n    const sortedFaces = [];\n    // Using a stack and not a recursive version to avoid call stack overflow\n    const deepFirstSearchStack = (startFaceIndex) => {\n        const stack = [startFaceIndex];\n        while (stack.length > 0) {\n            const currentFaceIndex = stack.pop();\n            if (visited.get(currentFaceIndex)) {\n                continue;\n            }\n            visited.set(currentFaceIndex, true);\n            sortedFaces.push(faces[currentFaceIndex]);\n            // Push unvisited neighbors (faces sharing a vertex) onto the stack\n            for (const vertex of faces[currentFaceIndex]) {\n                const neighbors = vertexToFaceMap.get(vertex);\n                if (!neighbors) {\n                    return;\n                }\n                for (const neighborFaceIndex of neighbors) {\n                    if (!visited.get(neighborFaceIndex)) {\n                        stack.push(neighborFaceIndex);\n                    }\n                }\n            }\n        }\n    };\n    // Start DFS from the first face\n    for (let i = 0; i < faceCount; i++) {\n        if (!visited.get(i)) {\n            deepFirstSearchStack(i);\n        }\n    }\n    // Step 4: Flatten the sorted faces back into an array\n    let index = 0;\n    for (const face of sortedFaces) {\n        indices[index++] = face[0];\n        indices[index++] = face[1];\n        indices[index++] = face[2];\n    }\n}\n//# sourceMappingURL=mesh.vertexData.functions.js.map"],"names":["GetByteIndex","bitIndex","Math","floor","GetBitMask","BitArray","constructor","size","this","_byteArray","Uint8Array","ceil","get","RangeError","byteIndex","bitMask","set","value","OptimizeIndices","indices","faces","faceCount","length","i","push","vertexToFaceMap","Map","faceIndex","face","vertex","visited","sortedFaces","deepFirstSearchStack","startFaceIndex","stack","currentFaceIndex","pop","neighbors","neighborFaceIndex","index"],"mappings":"AAAA,SAASA,EAAaC,GAClB,OAAOC,KAAKC,MAAMF,EAAW,EACjC,CACA,SAASG,EAAWH,GAChB,OAAO,GAAKA,EAAW,CAC3B,CAMO,MAAMI,EAKT,WAAAC,CAAYC,GACRC,KAAKD,KAAOA,EACZC,KAAKC,WAAa,IAAIC,WAAWR,KAAKS,KAAKH,KAAKD,KAAO,GAC/D,CAMI,GAAAK,CAAIX,GACA,GAAIA,GAAYO,KAAKD,KACjB,MAAM,IAAIM,WAAW,0BAEzB,MAAMC,EAAYd,EAAaC,GACzBc,EAAUX,EAAWH,GAC3B,OAAkD,KAA1CO,KAAKC,WAAWK,GAAaC,EAC7C,CAMI,GAAAC,CAAIf,EAAUgB,GACV,GAAIhB,GAAYO,KAAKD,KACjB,MAAM,IAAIM,WAAW,0BAEzB,MAAMC,EAAYd,EAAaC,GACzBc,EAAUX,EAAWH,GACvBgB,EACAT,KAAKC,WAAWK,IAAcC,EAG9BP,KAAKC,WAAWK,KAAeC,CAE3C,EC7CO,SAASG,EAAgBC,GAC5B,MAAMC,EAAQ,GACRC,EAAYF,EAAQG,OAAS,EAEnC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAWE,IAC3BH,EAAMI,KAAK,CAACL,EAAY,EAAJI,GAAQJ,EAAY,EAAJI,EAAQ,GAAIJ,EAAY,EAAJI,EAAQ,KAGpE,MAAME,EAAkB,IAAIC,IAC5B,IAAK,IAAIC,EAAY,EAAGA,EAAYP,EAAME,OAAQK,IAAa,CAC3D,MAAMC,EAAOR,EAAMO,GACnB,IAAK,MAAME,KAAUD,EAAM,CACvB,IAAIA,EAAOH,EAAgBb,IAAIiB,GAC1BD,GACDH,EAAgBT,IAAIa,EAASD,EAAO,IAExCA,EAAKJ,KAAKG,EACtB,CACA,CAEI,MAAMG,EAAU,IAAIzB,EAASgB,GACvBU,EAAc,GAEdC,EAAwBC,IAC1B,MAAMC,EAAQ,CAACD,GACf,KAAOC,EAAMZ,OAAS,GAAG,CACrB,MAAMa,EAAmBD,EAAME,MAC/B,IAAIN,EAAQlB,IAAIuB,GAAhB,CAGAL,EAAQd,IAAImB,GAAkB,GAC9BJ,EAAYP,KAAKJ,EAAMe,IAEvB,IAAK,MAAMN,KAAUT,EAAMe,GAAmB,CAC1C,MAAME,EAAYZ,EAAgBb,IAAIiB,GACtC,IAAKQ,EACD,OAEJ,IAAK,MAAMC,KAAqBD,EACvBP,EAAQlB,IAAI0B,IACbJ,EAAMV,KAAKc,EAGnC,CAdA,CAeA,GAGI,IAAK,IAAIf,EAAI,EAAGA,EAAIF,EAAWE,IACtBO,EAAQlB,IAAIW,IACbS,EAAqBT,GAI7B,IAAIgB,EAAQ,EACZ,IAAK,MAAMX,KAAQG,EACfZ,EAAQoB,KAAWX,EAAK,GACxBT,EAAQoB,KAAWX,EAAK,GACxBT,EAAQoB,KAAWX,EAAK,EAEhC"}