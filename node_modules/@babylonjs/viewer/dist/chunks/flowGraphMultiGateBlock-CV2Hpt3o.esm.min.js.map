{"version":3,"file":"flowGraphMultiGateBlock-CV2Hpt3o.esm.min.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Execution/ControlFlow/flowGraphMultiGateBlock.js"],"sourcesContent":["import { RegisterClass } from \"../../../../Misc/typeStore\";\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock\";\nimport { RichTypeFlowGraphInteger } from \"../../../flowGraphRichTypes\";\nimport { FlowGraphInteger } from \"core/FlowGraph/CustomTypes/flowGraphInteger\";\n/**\n * A block that has an input flow and routes it to any potential output flows, randomly or sequentially\n */\nexport class FlowGraphMultiGateBlock extends FlowGraphExecutionBlock {\n    constructor(\n    /**\n     * the configuration of the block\n     */\n    config) {\n        super(config);\n        this.config = config;\n        /**\n         * Output connections: The output signals.\n         */\n        this.outputSignals = [];\n        this.reset = this._registerSignalInput(\"reset\");\n        this.lastIndex = this.registerDataOutput(\"lastIndex\", RichTypeFlowGraphInteger, new FlowGraphInteger(-1));\n        this.setNumberOfOutputSignals(config?.outputSignalCount);\n    }\n    _getNextIndex(indexesUsed) {\n        // find the next index available from the indexes used array\n        // if all outputs were used, reset the indexes used array if we are in a loop multi gate\n        if (!indexesUsed.includes(false)) {\n            if (this.config.isLoop) {\n                indexesUsed.fill(false);\n            }\n        }\n        if (!this.config.isRandom) {\n            return indexesUsed.indexOf(false);\n        }\n        else {\n            const unusedIndexes = indexesUsed.map((used, index) => (used ? -1 : index)).filter((index) => index !== -1);\n            return unusedIndexes.length ? unusedIndexes[Math.floor(Math.random() * unusedIndexes.length)] : -1;\n        }\n    }\n    /**\n     * Sets the block's output signals. Would usually be passed from the constructor but can be changed afterwards.\n     * @param numberOutputSignals the number of output flows\n     */\n    setNumberOfOutputSignals(numberOutputSignals = 1) {\n        // check the size of the outFlow Array, see if it is not larger than needed\n        while (this.outputSignals.length > numberOutputSignals) {\n            const flow = this.outputSignals.pop();\n            if (flow) {\n                flow.disconnectFromAll();\n                this._unregisterSignalOutput(flow.name);\n            }\n        }\n        while (this.outputSignals.length < numberOutputSignals) {\n            this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`));\n        }\n    }\n    _execute(context, callingSignal) {\n        // set the state(s) of the block\n        if (!context._hasExecutionVariable(this, \"indexesUsed\")) {\n            context._setExecutionVariable(this, \"indexesUsed\", this.outputSignals.map(() => false));\n        }\n        if (callingSignal === this.reset) {\n            context._deleteExecutionVariable(this, \"indexesUsed\");\n            this.lastIndex.setValue(new FlowGraphInteger(-1), context);\n            return;\n        }\n        const indexesUsed = context._getExecutionVariable(this, \"indexesUsed\", []);\n        const nextIndex = this._getNextIndex(indexesUsed);\n        if (nextIndex > -1) {\n            this.lastIndex.setValue(new FlowGraphInteger(nextIndex), context);\n            indexesUsed[nextIndex] = true;\n            context._setExecutionVariable(this, \"indexesUsed\", indexesUsed);\n            this.outputSignals[nextIndex]._activateSignal(context);\n        }\n    }\n    /**\n     * @returns class name of the block.\n     */\n    getClassName() {\n        return \"FlowGraphMultiGateBlock\" /* FlowGraphBlockNames.MultiGate */;\n    }\n    /**\n     * Serializes the block.\n     * @param serializationObject the object to serialize to.\n     */\n    serialize(serializationObject) {\n        super.serialize(serializationObject);\n        serializationObject.config.outputSignalCount = this.config.outputSignalCount;\n        serializationObject.config.isRandom = this.config.isRandom;\n        serializationObject.config.loop = this.config.isLoop;\n        serializationObject.config.startIndex = this.config.startIndex;\n    }\n}\nRegisterClass(\"FlowGraphMultiGateBlock\" /* FlowGraphBlockNames.MultiGate */, FlowGraphMultiGateBlock);\n//# sourceMappingURL=flowGraphMultiGateBlock.js.map"],"names":["FlowGraphMultiGateBlock","FlowGraphExecutionBlock","constructor","config","super","this","outputSignals","reset","_registerSignalInput","lastIndex","registerDataOutput","RichTypeFlowGraphInteger","FlowGraphInteger","setNumberOfOutputSignals","outputSignalCount","_getNextIndex","indexesUsed","includes","isLoop","fill","isRandom","unusedIndexes","map","used","index","filter","length","Math","floor","random","indexOf","numberOutputSignals","flow","pop","disconnectFromAll","_unregisterSignalOutput","name","push","_registerSignalOutput","_execute","context","callingSignal","_hasExecutionVariable","_setExecutionVariable","_deleteExecutionVariable","setValue","_getExecutionVariable","nextIndex","_activateSignal","getClassName","serialize","serializationObject","loop","startIndex","RegisterClass"],"mappings":"gOAOO,MAAMA,UAAgCC,EACzC,WAAAC,CAIAC,GACIC,MAAMD,GACNE,KAAKF,OAASA,EAIdE,KAAKC,cAAgB,GACrBD,KAAKE,MAAQF,KAAKG,qBAAqB,SACvCH,KAAKI,UAAYJ,KAAKK,mBAAmB,YAAaC,EAA0B,IAAIC,GAAiB,IACrGP,KAAKQ,yBAAyBV,GAAQW,kBAC9C,CACI,aAAAC,CAAcC,GAQV,GALKA,EAAYC,UAAS,IAClBZ,KAAKF,OAAOe,QACZF,EAAYG,MAAK,GAGpBd,KAAKF,OAAOiB,SAGZ,CACD,MAAMC,EAAgBL,EAAYM,KAAI,CAACC,EAAMC,IAAWD,GAAS,EAAGC,IAAQC,QAAQD,IAAoB,IAAVA,IAC9F,OAAOH,EAAcK,OAASL,EAAcM,KAAKC,MAAMD,KAAKE,SAAWR,EAAcK,UAAa,CAC9G,CALY,OAAOV,EAAYc,SAAQ,EAMvC,CAKI,wBAAAjB,CAAyBkB,EAAsB,GAE3C,KAAO1B,KAAKC,cAAcoB,OAASK,GAAqB,CACpD,MAAMC,EAAO3B,KAAKC,cAAc2B,MAC5BD,IACAA,EAAKE,oBACL7B,KAAK8B,wBAAwBH,EAAKI,MAElD,CACQ,KAAO/B,KAAKC,cAAcoB,OAASK,GAC/B1B,KAAKC,cAAc+B,KAAKhC,KAAKiC,sBAAsB,OAAOjC,KAAKC,cAAcoB,UAEzF,CACI,QAAAa,CAASC,EAASC,GAKd,GAHKD,EAAQE,sBAAsBrC,KAAM,gBACrCmC,EAAQG,sBAAsBtC,KAAM,cAAeA,KAAKC,cAAcgB,KAAI,KAAM,KAEhFmB,IAAkBpC,KAAKE,MAGvB,OAFAiC,EAAQI,yBAAyBvC,KAAM,oBACvCA,KAAKI,UAAUoC,SAAS,IAAIjC,GAAiB,GAAK4B,GAGtD,MAAMxB,EAAcwB,EAAQM,sBAAsBzC,KAAM,cAAe,IACjE0C,EAAY1C,KAAKU,cAAcC,GACjC+B,GAAY,IACZ1C,KAAKI,UAAUoC,SAAS,IAAIjC,EAAiBmC,GAAYP,GACzDxB,EAAY+B,IAAa,EACzBP,EAAQG,sBAAsBtC,KAAM,cAAeW,GACnDX,KAAKC,cAAcyC,GAAWC,gBAAgBR,GAE1D,CAII,YAAAS,GACI,MAAO,yBACf,CAKI,SAAAC,CAAUC,GACN/C,MAAM8C,UAAUC,GAChBA,EAAoBhD,OAAOW,kBAAoBT,KAAKF,OAAOW,kBAC3DqC,EAAoBhD,OAAOiB,SAAWf,KAAKF,OAAOiB,SAClD+B,EAAoBhD,OAAOiD,KAAO/C,KAAKF,OAAOe,OAC9CiC,EAAoBhD,OAAOkD,WAAahD,KAAKF,OAAOkD,UAC5D,EAEAC,EAAc,0BAA+DtD"}