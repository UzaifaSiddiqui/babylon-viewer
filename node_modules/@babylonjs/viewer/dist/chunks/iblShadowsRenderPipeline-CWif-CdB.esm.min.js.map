{"version":3,"file":"iblShadowsRenderPipeline-CWif-CdB.esm.min.js","sources":["../../../../../dev/core/dist/Materials/Textures/multiRenderTarget.js","../../../../../dev/core/dist/Rendering/IBLShadows/iblShadowsVoxelRenderer.js","../../../../../dev/core/dist/Shaders/ShadersInclude/mrtFragmentDeclaration.js","../../../../../dev/core/dist/Shaders/geometry.fragment.js","../../../../../dev/core/dist/Shaders/ShadersInclude/geometryVertexDeclaration.js","../../../../../dev/core/dist/Shaders/ShadersInclude/geometryUboDeclaration.js","../../../../../dev/core/dist/Shaders/geometry.vertex.js","../../../../../dev/core/dist/Rendering/geometryBufferRenderer.js","../../../../../dev/core/dist/Rendering/IBLShadows/iblShadowsVoxelTracingPass.js","../../../../../dev/core/dist/Rendering/IBLShadows/iblShadowsSpatialBlurPass.js","../../../../../dev/core/dist/Rendering/IBLShadows/iblShadowsAccumulationPass.js","../../../../../dev/core/dist/PostProcesses/RenderPipeline/postProcessRenderPipeline.js","../../../../../dev/core/dist/PostProcesses/RenderPipeline/postProcessRenderEffect.js","../../../../../dev/core/dist/Materials/Textures/rawTexture3D.js","../../../../../dev/core/dist/Rendering/IBLShadows/iblShadowsPluginMaterial.js","../../../../../dev/core/dist/Rendering/geometryBufferRendererSceneComponent.js","../../../../../dev/core/dist/Rendering/iblCdfGeneratorSceneComponent.js","../../../../../dev/core/dist/Rendering/IBLShadows/iblShadowsRenderPipeline.js"],"sourcesContent":["import { Texture } from \"../../Materials/Textures/texture\";\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\nimport { Constants } from \"../../Engines/constants\";\nimport \"../../Engines/Extensions/engine.multiRender\";\n/**\n * A multi render target, like a render target provides the ability to render to a texture.\n * Unlike the render target, it can render to several draw buffers (render textures) in one draw.\n * This is specially interesting in deferred rendering or for any effects requiring more than\n * just one color from a single pass.\n */\nexport class MultiRenderTarget extends RenderTargetTexture {\n    /**\n     * Get if draw buffers (render textures) are currently supported by the used hardware and browser.\n     */\n    get isSupported() {\n        return this._engine?.getCaps().drawBuffersExtension ?? false;\n    }\n    /**\n     * Get the list of textures generated by the multi render target.\n     */\n    get textures() {\n        return this._textures;\n    }\n    /**\n     * Gets the number of textures in this MRT. This number can be different from `_textures.length` in case a depth texture is generated.\n     */\n    get count() {\n        return this._count;\n    }\n    /**\n     * Get the depth texture generated by the multi render target if options.generateDepthTexture has been set\n     */\n    get depthTexture() {\n        return this._textures[this._textures.length - 1];\n    }\n    /**\n     * Set the wrapping mode on U of all the textures we are rendering to.\n     * Can be any of the Texture. (CLAMP_ADDRESSMODE, MIRROR_ADDRESSMODE or WRAP_ADDRESSMODE)\n     */\n    set wrapU(wrap) {\n        if (this._textures) {\n            for (let i = 0; i < this._textures.length; i++) {\n                this._textures[i].wrapU = wrap;\n            }\n        }\n    }\n    /**\n     * Set the wrapping mode on V of all the textures we are rendering to.\n     * Can be any of the Texture. (CLAMP_ADDRESSMODE, MIRROR_ADDRESSMODE or WRAP_ADDRESSMODE)\n     */\n    set wrapV(wrap) {\n        if (this._textures) {\n            for (let i = 0; i < this._textures.length; i++) {\n                this._textures[i].wrapV = wrap;\n            }\n        }\n    }\n    /**\n     * Instantiate a new multi render target texture.\n     * A multi render target, like a render target provides the ability to render to a texture.\n     * Unlike the render target, it can render to several draw buffers (render textures) in one draw.\n     * This is specially interesting in deferred rendering or for any effects requiring more than\n     * just one color from a single pass.\n     * @param name Define the name of the texture\n     * @param size Define the size of the buffers to render to\n     * @param count Define the number of target we are rendering into\n     * @param scene Define the scene the texture belongs to\n     * @param options Define the options used to create the multi render target\n     * @param textureNames Define the names to set to the textures (if count \\> 0 - optional)\n     */\n    constructor(name, size, count, scene, options, textureNames) {\n        const generateMipMaps = options && options.generateMipMaps ? options.generateMipMaps : false;\n        const generateDepthTexture = options && options.generateDepthTexture ? options.generateDepthTexture : false;\n        const depthTextureFormat = options && options.depthTextureFormat ? options.depthTextureFormat : Constants.TEXTUREFORMAT_DEPTH16;\n        const doNotChangeAspectRatio = !options || options.doNotChangeAspectRatio === undefined ? true : options.doNotChangeAspectRatio;\n        const drawOnlyOnFirstAttachmentByDefault = options && options.drawOnlyOnFirstAttachmentByDefault ? options.drawOnlyOnFirstAttachmentByDefault : false;\n        super(name, size, scene, generateMipMaps, doNotChangeAspectRatio, undefined, undefined, undefined, undefined, undefined, undefined, undefined, true);\n        if (!this.isSupported) {\n            this.dispose();\n            return;\n        }\n        this._textureNames = textureNames;\n        const types = [];\n        const samplingModes = [];\n        const useSRGBBuffers = [];\n        const formats = [];\n        const targetTypes = [];\n        const faceIndex = [];\n        const layerIndex = [];\n        const layerCounts = [];\n        this._initTypes(count, types, samplingModes, useSRGBBuffers, formats, targetTypes, faceIndex, layerIndex, layerCounts, options);\n        const generateDepthBuffer = !options || options.generateDepthBuffer === undefined ? true : options.generateDepthBuffer;\n        const generateStencilBuffer = !options || options.generateStencilBuffer === undefined ? false : options.generateStencilBuffer;\n        const samples = options && options.samples ? options.samples : 1;\n        this._multiRenderTargetOptions = {\n            samplingModes: samplingModes,\n            generateMipMaps: generateMipMaps,\n            generateDepthBuffer: generateDepthBuffer,\n            generateStencilBuffer: generateStencilBuffer,\n            generateDepthTexture: generateDepthTexture,\n            depthTextureFormat: depthTextureFormat,\n            types: types,\n            textureCount: count,\n            useSRGBBuffers: useSRGBBuffers,\n            samples,\n            formats: formats,\n            targetTypes: targetTypes,\n            faceIndex: faceIndex,\n            layerIndex: layerIndex,\n            layerCounts: layerCounts,\n            labels: textureNames,\n            label: name,\n        };\n        this._count = count;\n        this._drawOnlyOnFirstAttachmentByDefault = drawOnlyOnFirstAttachmentByDefault;\n        if (count > 0) {\n            this._createInternalTextures();\n            this._createTextures(textureNames);\n        }\n    }\n    _initTypes(count, types, samplingModes, useSRGBBuffers, formats, targets, faceIndex, layerIndex, layerCounts, options) {\n        for (let i = 0; i < count; i++) {\n            if (options && options.types && options.types[i] !== undefined) {\n                types.push(options.types[i]);\n            }\n            else {\n                types.push(options && options.defaultType ? options.defaultType : Constants.TEXTURETYPE_UNSIGNED_BYTE);\n            }\n            if (options && options.samplingModes && options.samplingModes[i] !== undefined) {\n                samplingModes.push(options.samplingModes[i]);\n            }\n            else {\n                samplingModes.push(Texture.BILINEAR_SAMPLINGMODE);\n            }\n            if (options && options.useSRGBBuffers && options.useSRGBBuffers[i] !== undefined) {\n                useSRGBBuffers.push(options.useSRGBBuffers[i]);\n            }\n            else {\n                useSRGBBuffers.push(false);\n            }\n            if (options && options.formats && options.formats[i] !== undefined) {\n                formats.push(options.formats[i]);\n            }\n            else {\n                formats.push(Constants.TEXTUREFORMAT_RGBA);\n            }\n            if (options && options.targetTypes && options.targetTypes[i] !== undefined) {\n                targets.push(options.targetTypes[i]);\n            }\n            else {\n                targets.push(Constants.TEXTURE_2D);\n            }\n            if (options && options.faceIndex && options.faceIndex[i] !== undefined) {\n                faceIndex.push(options.faceIndex[i]);\n            }\n            else {\n                faceIndex.push(0);\n            }\n            if (options && options.layerIndex && options.layerIndex[i] !== undefined) {\n                layerIndex.push(options.layerIndex[i]);\n            }\n            else {\n                layerIndex.push(0);\n            }\n            if (options && options.layerCounts && options.layerCounts[i] !== undefined) {\n                layerCounts.push(options.layerCounts[i]);\n            }\n            else {\n                layerCounts.push(1);\n            }\n        }\n    }\n    _createInternaTextureIndexMapping() {\n        const mapMainInternalTexture2Index = {};\n        const mapInternalTexture2MainIndex = [];\n        if (!this._renderTarget) {\n            return mapInternalTexture2MainIndex;\n        }\n        const internalTextures = this._renderTarget.textures;\n        for (let i = 0; i < internalTextures.length; i++) {\n            const texture = internalTextures[i];\n            if (!texture) {\n                continue;\n            }\n            const mainIndex = mapMainInternalTexture2Index[texture.uniqueId];\n            if (mainIndex !== undefined) {\n                mapInternalTexture2MainIndex[i] = mainIndex;\n            }\n            else {\n                mapMainInternalTexture2Index[texture.uniqueId] = i;\n            }\n        }\n        return mapInternalTexture2MainIndex;\n    }\n    /**\n     * @internal\n     */\n    _rebuild(fromContextLost = false, forceFullRebuild = false, textureNames) {\n        if (this._count < 1 || fromContextLost) {\n            return;\n        }\n        const mapInternalTexture2MainIndex = this._createInternaTextureIndexMapping();\n        this.releaseInternalTextures();\n        this._createInternalTextures();\n        if (forceFullRebuild) {\n            this._releaseTextures();\n            this._createTextures(textureNames);\n        }\n        const internalTextures = this._renderTarget.textures;\n        for (let i = 0; i < internalTextures.length; i++) {\n            const texture = this._textures[i];\n            if (mapInternalTexture2MainIndex[i] !== undefined) {\n                this._renderTarget.setTexture(internalTextures[mapInternalTexture2MainIndex[i]], i);\n            }\n            texture._texture = internalTextures[i];\n            if (texture._texture) {\n                texture._noMipmap = !texture._texture.useMipMaps;\n                texture._useSRGBBuffer = texture._texture._useSRGBBuffer;\n            }\n        }\n        if (this.samples !== 1) {\n            this._renderTarget.setSamples(this.samples, !this._drawOnlyOnFirstAttachmentByDefault, true);\n        }\n    }\n    _createInternalTextures() {\n        this._renderTarget = this._getEngine().createMultipleRenderTarget(this._size, this._multiRenderTargetOptions, !this._drawOnlyOnFirstAttachmentByDefault);\n        this._texture = this._renderTarget.texture;\n    }\n    _releaseTextures() {\n        if (this._textures) {\n            for (let i = 0; i < this._textures.length; i++) {\n                this._textures[i]._texture = null; // internal textures are released by a call to releaseInternalTextures()\n                this._textures[i].dispose();\n            }\n        }\n    }\n    _createTextures(textureNames) {\n        const internalTextures = this._renderTarget.textures;\n        this._textures = [];\n        for (let i = 0; i < internalTextures.length; i++) {\n            const texture = new Texture(null, this.getScene());\n            if (textureNames?.[i]) {\n                texture.name = textureNames[i];\n            }\n            texture._texture = internalTextures[i];\n            if (texture._texture) {\n                texture._noMipmap = !texture._texture.useMipMaps;\n                texture._useSRGBBuffer = texture._texture._useSRGBBuffer;\n            }\n            this._textures.push(texture);\n        }\n    }\n    /**\n     * Replaces an internal texture within the MRT. Useful to share textures between MultiRenderTarget.\n     * @param texture The new texture to set in the MRT\n     * @param index The index of the texture to replace\n     * @param disposePrevious Set to true if the previous internal texture should be disposed\n     */\n    setInternalTexture(texture, index, disposePrevious = true) {\n        if (!this.renderTarget) {\n            return;\n        }\n        if (index === 0) {\n            this._texture = texture;\n        }\n        this.renderTarget.setTexture(texture, index, disposePrevious);\n        if (!this.textures[index]) {\n            this.textures[index] = new Texture(null, this.getScene());\n            this.textures[index].name = this._textureNames?.[index] ?? this.textures[index].name;\n        }\n        this.textures[index]._texture = texture;\n        this.textures[index]._noMipmap = !texture.useMipMaps;\n        this.textures[index]._useSRGBBuffer = texture._useSRGBBuffer;\n        this._count = this.renderTarget.textures ? this.renderTarget.textures.length : 0;\n        if (this._multiRenderTargetOptions.types) {\n            this._multiRenderTargetOptions.types[index] = texture.type;\n        }\n        if (this._multiRenderTargetOptions.samplingModes) {\n            this._multiRenderTargetOptions.samplingModes[index] = texture.samplingMode;\n        }\n        if (this._multiRenderTargetOptions.useSRGBBuffers) {\n            this._multiRenderTargetOptions.useSRGBBuffers[index] = texture._useSRGBBuffer;\n        }\n        if (this._multiRenderTargetOptions.targetTypes && this._multiRenderTargetOptions.targetTypes[index] !== -1) {\n            let target = 0;\n            if (texture.is2DArray) {\n                target = Constants.TEXTURE_2D_ARRAY;\n            }\n            else if (texture.isCube) {\n                target = Constants.TEXTURE_CUBE_MAP;\n            } /*else if (texture.isCubeArray) {\n                target = Constants.TEXTURE_CUBE_MAP_ARRAY;\n            }*/\n            else if (texture.is3D) {\n                target = Constants.TEXTURE_3D;\n            }\n            else {\n                target = Constants.TEXTURE_2D;\n            }\n            this._multiRenderTargetOptions.targetTypes[index] = target;\n        }\n    }\n    /**\n     * Changes an attached texture's face index or layer.\n     * @param index The index of the texture to modify the attachment of\n     * @param layerIndex The layer index of the texture to be attached to the framebuffer\n     * @param faceIndex The face index of the texture to be attached to the framebuffer\n     */\n    setLayerAndFaceIndex(index, layerIndex = -1, faceIndex = -1) {\n        if (!this.textures[index] || !this.renderTarget) {\n            return;\n        }\n        if (this._multiRenderTargetOptions.layerIndex) {\n            this._multiRenderTargetOptions.layerIndex[index] = layerIndex;\n        }\n        if (this._multiRenderTargetOptions.faceIndex) {\n            this._multiRenderTargetOptions.faceIndex[index] = faceIndex;\n        }\n        this.renderTarget.setLayerAndFaceIndex(index, layerIndex, faceIndex);\n    }\n    /**\n     * Changes every attached texture's face index or layer.\n     * @param layerIndices The layer indices of the texture to be attached to the framebuffer\n     * @param faceIndices The face indices of the texture to be attached to the framebuffer\n     */\n    setLayerAndFaceIndices(layerIndices, faceIndices) {\n        if (!this.renderTarget) {\n            return;\n        }\n        this._multiRenderTargetOptions.layerIndex = layerIndices;\n        this._multiRenderTargetOptions.faceIndex = faceIndices;\n        this.renderTarget.setLayerAndFaceIndices(layerIndices, faceIndices);\n    }\n    /**\n     * Define the number of samples used if MSAA is enabled.\n     */\n    get samples() {\n        return this._samples;\n    }\n    set samples(value) {\n        if (this._renderTarget) {\n            this._samples = this._renderTarget.setSamples(value);\n        }\n        else {\n            // In case samples are set with 0 textures created, we must save the desired samples value\n            this._samples = value;\n        }\n    }\n    /**\n     * Resize all the textures in the multi render target.\n     * Be careful as it will recreate all the data in the new texture.\n     * @param size Define the new size\n     */\n    resize(size) {\n        this._processSizeParameter(size);\n        this._rebuild(false, undefined, this._textureNames);\n    }\n    /**\n     * Changes the number of render targets in this MRT\n     * Be careful as it will recreate all the data in the new texture.\n     * @param count new texture count\n     * @param options Specifies texture types and sampling modes for new textures\n     * @param textureNames Specifies the names of the textures (optional)\n     */\n    updateCount(count, options, textureNames) {\n        this._multiRenderTargetOptions.textureCount = count;\n        this._count = count;\n        const types = [];\n        const samplingModes = [];\n        const useSRGBBuffers = [];\n        const formats = [];\n        const targetTypes = [];\n        const faceIndex = [];\n        const layerIndex = [];\n        const layerCounts = [];\n        this._textureNames = textureNames;\n        this._initTypes(count, types, samplingModes, useSRGBBuffers, formats, targetTypes, faceIndex, layerIndex, layerCounts, options);\n        this._multiRenderTargetOptions.types = types;\n        this._multiRenderTargetOptions.samplingModes = samplingModes;\n        this._multiRenderTargetOptions.useSRGBBuffers = useSRGBBuffers;\n        this._multiRenderTargetOptions.formats = formats;\n        this._multiRenderTargetOptions.targetTypes = targetTypes;\n        this._multiRenderTargetOptions.faceIndex = faceIndex;\n        this._multiRenderTargetOptions.layerIndex = layerIndex;\n        this._multiRenderTargetOptions.layerCounts = layerCounts;\n        this._multiRenderTargetOptions.labels = textureNames;\n        this._rebuild(false, true, textureNames);\n    }\n    _unbindFrameBuffer(engine, faceIndex) {\n        if (this._renderTarget) {\n            engine.unBindMultiColorAttachmentFramebuffer(this._renderTarget, this.isCube, () => {\n                this.onAfterRenderObservable.notifyObservers(faceIndex);\n            });\n        }\n    }\n    /**\n     * Dispose the render targets and their associated resources\n     * @param doNotDisposeInternalTextures if set to true, internal textures won't be disposed (default: false).\n     */\n    dispose(doNotDisposeInternalTextures = false) {\n        this._releaseTextures();\n        if (!doNotDisposeInternalTextures) {\n            this.releaseInternalTextures();\n        }\n        else {\n            // Prevent internal texture dispose in super.dispose\n            this._texture = null;\n        }\n        super.dispose();\n    }\n    /**\n     * Release all the underlying texture used as draw buffers (render textures).\n     */\n    releaseInternalTextures() {\n        const internalTextures = this._renderTarget?.textures;\n        if (!internalTextures) {\n            return;\n        }\n        for (let i = internalTextures.length - 1; i >= 0; i--) {\n            this._textures[i]._texture = null;\n        }\n        this._renderTarget?.dispose();\n        this._renderTarget = null;\n    }\n}\n//# sourceMappingURL=multiRenderTarget.js.map","import { Constants } from \"../../Engines/constants\";\nimport { Engine } from \"../../Engines/engine\";\nimport { ShaderMaterial } from \"../../Materials/shaderMaterial\";\nimport { MultiRenderTarget } from \"../../Materials/Textures/multiRenderTarget\";\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\nimport { Color4 } from \"../../Maths/math.color\";\nimport { Matrix, Vector3, Vector4 } from \"../../Maths/math.vector\";\nimport { Texture } from \"../../Materials/Textures/texture\";\nimport { Logger } from \"../../Misc/logger\";\nimport { Observable } from \"../../Misc/observable\";\nimport { PostProcess } from \"../../PostProcesses/postProcess\";\nimport { ProceduralTexture } from \"../../Materials/Textures/Procedurals/proceduralTexture\";\nimport { EffectRenderer, EffectWrapper } from \"../../Materials/effectRenderer\";\n/**\n * Voxel-based shadow rendering for IBL's.\n * This should not be instanciated directly, as it is part of a scene component\n * @internal\n * @see https://playground.babylonjs.com/#8R5SSE#222\n */\nexport class _IblShadowsVoxelRenderer {\n    /**\n     * Return the voxel grid texture.\n     * @returns The voxel grid texture.\n     */\n    getVoxelGrid() {\n        if (this._triPlanarVoxelization) {\n            return this._voxelGridRT;\n        }\n        else {\n            return this._voxelGridZaxis;\n        }\n    }\n    /**\n     * The debug pass post process\n     * @returns The debug pass post process\n     */\n    getDebugPassPP() {\n        if (!this._voxelDebugPass) {\n            this._createDebugPass();\n        }\n        return this._voxelDebugPass;\n    }\n    /**\n     * Whether to use tri-planar voxelization. More expensive, but can help with artifacts.\n     */\n    get triPlanarVoxelization() {\n        return this._triPlanarVoxelization;\n    }\n    /**\n     * Whether to use tri-planar voxelization. More expensive, but can help with artifacts.\n     */\n    set triPlanarVoxelization(enabled) {\n        if (this._triPlanarVoxelization === enabled) {\n            return;\n        }\n        this._triPlanarVoxelization = enabled;\n        this._disposeVoxelTextures();\n        this._createTextures();\n    }\n    /**\n     * Set the matrix to use for scaling the world space to voxel space\n     * @param matrix The matrix to use for scaling the world space to voxel space\n     */\n    setWorldScaleMatrix(matrix) {\n        this._invWorldScaleMatrix = matrix;\n    }\n    /**\n     * @returns Whether voxelization is currently happening.\n     */\n    isVoxelizationInProgress() {\n        return this._voxelizationInProgress;\n    }\n    /**\n     * Resolution of the voxel grid. The final resolution will be 2^resolutionExp.\n     */\n    get voxelResolutionExp() {\n        return this._voxelResolutionExp;\n    }\n    /**\n     * Resolution of the voxel grid. The final resolution will be 2^resolutionExp.\n     */\n    set voxelResolutionExp(resolutionExp) {\n        if (this._voxelResolutionExp === resolutionExp && this._voxelGridZaxis) {\n            return;\n        }\n        this._voxelResolutionExp = Math.round(Math.min(Math.max(resolutionExp, 3), 9));\n        this._voxelResolution = Math.pow(2.0, this._voxelResolutionExp);\n        this._disposeVoxelTextures();\n        this._createTextures();\n    }\n    /**\n     * Shows only the voxels that were rendered along a particular axis (while using triPlanarVoxelization).\n     * If not set, the combined voxel grid will be shown.\n     * Note: This only works when the debugMipNumber is set to 0 because we don't generate mips for each axis.\n     * @param axis The axis to show (0 = x, 1 = y, 2 = z)\n     */\n    set voxelDebugAxis(axis) {\n        this._voxelDebugAxis = axis;\n    }\n    get voxelDebugAxis() {\n        return this._voxelDebugAxis;\n    }\n    /**\n     * Sets params that control the position and scaling of the debug display on the screen.\n     * @param x Screen X offset of the debug display (0-1)\n     * @param y Screen Y offset of the debug display (0-1)\n     * @param widthScale X scale of the debug display (0-1)\n     * @param heightScale Y scale of the debug display (0-1)\n     */\n    setDebugDisplayParams(x, y, widthScale, heightScale) {\n        this._debugSizeParams.set(x, y, widthScale, heightScale);\n    }\n    /**\n     * The mip level to show in the debug display\n     * @param mipNum The mip level to show in the debug display\n     */\n    setDebugMipNumber(mipNum) {\n        this._debugMipNumber = mipNum;\n    }\n    /**\n     * Sets the name of the debug pass\n     */\n    get debugPassName() {\n        return this._debugPassName;\n    }\n    /**\n     * Enable or disable the debug view for this pass\n     */\n    get voxelDebugEnabled() {\n        return this._voxelDebugEnabled;\n    }\n    set voxelDebugEnabled(enabled) {\n        if (this._voxelDebugEnabled === enabled) {\n            return;\n        }\n        this._voxelDebugEnabled = enabled;\n        if (enabled) {\n            this._voxelSlabDebugRT = new RenderTargetTexture(\"voxelSlabDebug\", { width: this._engine.getRenderWidth(), height: this._engine.getRenderHeight() }, this._scene, {\n                generateDepthBuffer: true,\n                generateMipMaps: false,\n                type: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n                format: Constants.TEXTUREFORMAT_RGBA,\n                samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            });\n            this._voxelSlabDebugRT.noPrePassRenderer = true;\n        }\n        if (this._voxelSlabDebugRT) {\n            this._removeVoxelRTs([this._voxelSlabDebugRT]);\n        }\n        // Add the slab debug RT if needed.\n        if (this._voxelDebugEnabled) {\n            this._addRTsForRender([this._voxelSlabDebugRT], this._includedMeshes, this._voxelDebugAxis, 1, true);\n            this._setDebugBindingsBound = this._setDebugBindings.bind(this);\n            this._scene.onBeforeRenderObservable.add(this._setDebugBindingsBound);\n        }\n        else {\n            this._scene.onBeforeRenderObservable.removeCallback(this._setDebugBindingsBound);\n        }\n    }\n    /**\n     * Creates the debug post process effect for this pass\n     */\n    _createDebugPass() {\n        const isWebGPU = this._engine.isWebGPU;\n        if (!this._voxelDebugPass) {\n            const debugOptions = {\n                width: this._engine.getRenderWidth(),\n                height: this._engine.getRenderHeight(),\n                textureFormat: Constants.TEXTUREFORMAT_RGBA,\n                textureType: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n                samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n                uniforms: [\"sizeParams\", \"mipNumber\"],\n                samplers: [\"voxelTexture\", \"voxelSlabTexture\"],\n                engine: this._engine,\n                reusable: false,\n                shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n                extraInitializations: (useWebGPU, list) => {\n                    if (this._isVoxelGrid3D) {\n                        if (useWebGPU) {\n                            list.push(import(\"../../ShadersWGSL/iblVoxelGrid3dDebug.fragment\"));\n                        }\n                        else {\n                            list.push(import(\"../../Shaders/iblVoxelGrid3dDebug.fragment\"));\n                        }\n                        return;\n                    }\n                    if (useWebGPU) {\n                        list.push(import(\"../../ShadersWGSL/iblVoxelGrid2dArrayDebug.fragment\"));\n                    }\n                    else {\n                        list.push(import(\"../../Shaders/iblVoxelGrid2dArrayDebug.fragment\"));\n                    }\n                },\n            };\n            this._voxelDebugPass = new PostProcess(this.debugPassName, this._isVoxelGrid3D ? \"iblVoxelGrid3dDebug\" : \"iblVoxelGrid2dArrayDebug\", debugOptions);\n            this._voxelDebugPass.onApplyObservable.add((effect) => {\n                if (this._voxelDebugAxis === 0) {\n                    effect.setTexture(\"voxelTexture\", this._voxelGridXaxis);\n                }\n                else if (this._voxelDebugAxis === 1) {\n                    effect.setTexture(\"voxelTexture\", this._voxelGridYaxis);\n                }\n                else if (this._voxelDebugAxis === 2) {\n                    effect.setTexture(\"voxelTexture\", this._voxelGridZaxis);\n                }\n                else {\n                    effect.setTexture(\"voxelTexture\", this.getVoxelGrid());\n                }\n                effect.setTexture(\"voxelSlabTexture\", this._voxelSlabDebugRT);\n                effect.setVector4(\"sizeParams\", this._debugSizeParams);\n                effect.setFloat(\"mipNumber\", this._debugMipNumber);\n            });\n        }\n    }\n    /**\n     * Instanciates the voxel renderer\n     * @param scene Scene to attach to\n     * @param iblShadowsRenderPipeline The render pipeline this pass is associated with\n     * @param resolutionExp Resolution of the voxel grid. The final resolution will be 2^resolutionExp.\n     * @param triPlanarVoxelization Whether to use tri-planar voxelization. More expensive, but can help with artifacts.\n     * @returns The voxel renderer\n     */\n    constructor(scene, iblShadowsRenderPipeline, resolutionExp = 6, triPlanarVoxelization = true) {\n        this._voxelMrtsXaxis = [];\n        this._voxelMrtsYaxis = [];\n        this._voxelMrtsZaxis = [];\n        this._isVoxelGrid3D = true;\n        /**\n         * Observable that triggers when the voxelization is complete\n         */\n        this.onVoxelizationCompleteObservable = new Observable();\n        this._renderTargets = [];\n        this._triPlanarVoxelization = true;\n        this._voxelizationInProgress = false;\n        this._invWorldScaleMatrix = Matrix.Identity();\n        this._voxelResolution = 64;\n        this._voxelResolutionExp = 6;\n        this._mipArray = [];\n        this._voxelDebugEnabled = false;\n        this._voxelDebugAxis = -1;\n        this._debugSizeParams = new Vector4(0.0, 0.0, 0.0, 0.0);\n        this._includedMeshes = [];\n        this._debugMipNumber = 0;\n        this._debugPassName = \"Voxelization Debug Pass\";\n        this._scene = scene;\n        this._engine = scene.getEngine();\n        this._triPlanarVoxelization = triPlanarVoxelization;\n        if (!this._engine.getCaps().drawBuffersExtension) {\n            Logger.Error(\"Can't do voxel rendering without the draw buffers extension.\");\n        }\n        const isWebGPU = this._engine.isWebGPU;\n        this._maxDrawBuffers = this._engine.getCaps().maxDrawBuffers || 0;\n        this._copyMipEffectRenderer = new EffectRenderer(this._engine);\n        this._copyMipEffectWrapper = new EffectWrapper({\n            engine: this._engine,\n            fragmentShader: \"copyTexture3DLayerToTexture\",\n            useShaderStore: true,\n            uniformNames: [\"layerNum\"],\n            samplerNames: [\"textureSampler\"],\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await import(\"../../ShadersWGSL/copyTexture3DLayerToTexture.fragment\");\n                }\n                else {\n                    await import(\"../../Shaders/copyTexture3DLayerToTexture.fragment\");\n                }\n            },\n        });\n        this.voxelResolutionExp = resolutionExp;\n    }\n    _generateMipMaps() {\n        const iterations = Math.ceil(Math.log2(this._voxelResolution));\n        for (let i = 1; i < iterations + 1; i++) {\n            this._generateMipMap(i);\n        }\n    }\n    _generateMipMap(lodLevel) {\n        // Generate a mip map for the given level by triggering the render of the procedural mip texture.\n        const mipTarget = this._mipArray[lodLevel - 1];\n        if (!mipTarget) {\n            return;\n        }\n        mipTarget.setTexture(\"srcMip\", lodLevel === 1 ? this.getVoxelGrid() : this._mipArray[lodLevel - 2]);\n        mipTarget.render();\n    }\n    _copyMipMaps() {\n        const iterations = Math.ceil(Math.log2(this._voxelResolution));\n        for (let i = 1; i < iterations + 1; i++) {\n            this._copyMipMap(i);\n        }\n    }\n    _copyMipMap(lodLevel) {\n        // Now, copy this mip into the mip chain of the voxel grid.\n        // TODO - this currently isn't working. \"textureSampler\" isn't being properly set to mipTarget.\n        const mipTarget = this._mipArray[lodLevel - 1];\n        if (!mipTarget) {\n            return;\n        }\n        const voxelGrid = this.getVoxelGrid();\n        let rt;\n        if (voxelGrid instanceof RenderTargetTexture && voxelGrid.renderTarget) {\n            rt = voxelGrid.renderTarget;\n        }\n        else {\n            rt = voxelGrid._rtWrapper;\n        }\n        if (rt) {\n            this._copyMipEffectRenderer.saveStates();\n            const bindSize = mipTarget.getSize().width;\n            // Render to each layer of the voxel grid.\n            for (let layer = 0; layer < bindSize; layer++) {\n                this._engine.bindFramebuffer(rt, 0, bindSize, bindSize, true, lodLevel, layer);\n                this._copyMipEffectRenderer.applyEffectWrapper(this._copyMipEffectWrapper);\n                this._copyMipEffectWrapper.effect.setTexture(\"textureSampler\", mipTarget);\n                this._copyMipEffectWrapper.effect.setInt(\"layerNum\", layer);\n                this._copyMipEffectRenderer.draw();\n                this._engine.unBindFramebuffer(rt, true);\n            }\n            this._copyMipEffectRenderer.restoreStates();\n        }\n    }\n    _computeNumberOfSlabs() {\n        return Math.ceil(this._voxelResolution / this._maxDrawBuffers);\n    }\n    _createTextures() {\n        const isWebGPU = this._engine.isWebGPU;\n        const size = {\n            width: this._voxelResolution,\n            height: this._voxelResolution,\n            layers: this._isVoxelGrid3D ? undefined : this._voxelResolution,\n            depth: this._isVoxelGrid3D ? this._voxelResolution : undefined,\n        };\n        const voxelAxisOptions = {\n            generateDepthBuffer: false,\n            generateMipMaps: false,\n            type: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n            format: Constants.TEXTUREFORMAT_R,\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n        };\n        // We can render up to maxDrawBuffers voxel slices of the grid per render.\n        // We call this a slab.\n        const numSlabs = this._computeNumberOfSlabs();\n        const voxelCombinedOptions = {\n            generateDepthBuffer: false,\n            generateMipMaps: true,\n            type: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n            format: Constants.TEXTUREFORMAT_R,\n            samplingMode: Constants.TEXTURE_NEAREST_NEAREST_MIPNEAREST,\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await import(\"../../ShadersWGSL/iblCombineVoxelGrids.fragment\");\n                }\n                else {\n                    await import(\"../../Shaders/iblCombineVoxelGrids.fragment\");\n                }\n            },\n        };\n        if (this._triPlanarVoxelization) {\n            this._voxelGridXaxis = new RenderTargetTexture(\"voxelGridXaxis\", size, this._scene, voxelAxisOptions);\n            this._voxelGridYaxis = new RenderTargetTexture(\"voxelGridYaxis\", size, this._scene, voxelAxisOptions);\n            this._voxelGridZaxis = new RenderTargetTexture(\"voxelGridZaxis\", size, this._scene, voxelAxisOptions);\n            this._voxelMrtsXaxis = this._createVoxelMRTs(\"x_axis_\", this._voxelGridXaxis, numSlabs);\n            this._voxelMrtsYaxis = this._createVoxelMRTs(\"y_axis_\", this._voxelGridYaxis, numSlabs);\n            this._voxelMrtsZaxis = this._createVoxelMRTs(\"z_axis_\", this._voxelGridZaxis, numSlabs);\n            this._voxelGridRT = new ProceduralTexture(\"combinedVoxelGrid\", size, \"iblCombineVoxelGrids\", this._scene, voxelCombinedOptions, false);\n            this._scene.proceduralTextures.splice(this._scene.proceduralTextures.indexOf(this._voxelGridRT), 1);\n            this._voxelGridRT.setFloat(\"layer\", 0.0);\n            this._voxelGridRT.setTexture(\"voxelXaxisSampler\", this._voxelGridXaxis);\n            this._voxelGridRT.setTexture(\"voxelYaxisSampler\", this._voxelGridYaxis);\n            this._voxelGridRT.setTexture(\"voxelZaxisSampler\", this._voxelGridZaxis);\n            // We will render this only after voxelization is completed for the 3 axes.\n            this._voxelGridRT.autoClear = false;\n            this._voxelGridRT.wrapU = Texture.CLAMP_ADDRESSMODE;\n            this._voxelGridRT.wrapV = Texture.CLAMP_ADDRESSMODE;\n        }\n        else {\n            this._voxelGridZaxis = new RenderTargetTexture(\"voxelGridZaxis\", size, this._scene, voxelCombinedOptions);\n            this._voxelMrtsZaxis = this._createVoxelMRTs(\"z_axis_\", this._voxelGridZaxis, numSlabs);\n        }\n        const generateVoxelMipOptions = {\n            generateDepthBuffer: false,\n            generateMipMaps: false,\n            type: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n            format: Constants.TEXTUREFORMAT_R,\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await import(\"../../ShadersWGSL/iblGenerateVoxelMip.fragment\");\n                }\n                else {\n                    await import(\"../../Shaders/iblGenerateVoxelMip.fragment\");\n                }\n            },\n        };\n        this._mipArray = new Array(Math.ceil(Math.log2(this._voxelResolution)));\n        for (let mipIdx = 1; mipIdx <= this._mipArray.length; mipIdx++) {\n            const mipDim = this._voxelResolution >> mipIdx;\n            const mipSize = { width: mipDim, height: mipDim, depth: mipDim };\n            this._mipArray[mipIdx - 1] = new ProceduralTexture(\"voxelMip\" + mipIdx, mipSize, \"iblGenerateVoxelMip\", this._scene, generateVoxelMipOptions, false);\n            this._scene.proceduralTextures.splice(this._scene.proceduralTextures.indexOf(this._mipArray[mipIdx - 1]), 1);\n            const mipTarget = this._mipArray[mipIdx - 1];\n            mipTarget.autoClear = false;\n            mipTarget.wrapU = Texture.CLAMP_ADDRESSMODE;\n            mipTarget.wrapV = Texture.CLAMP_ADDRESSMODE;\n            mipTarget.setTexture(\"srcMip\", mipIdx > 1 ? this._mipArray[mipIdx - 2] : this.getVoxelGrid());\n            mipTarget.setInt(\"layerNum\", 0);\n        }\n        this._createVoxelMaterials();\n    }\n    _createVoxelMRTs(name, voxelRT, numSlabs) {\n        voxelRT.wrapU = Texture.CLAMP_ADDRESSMODE;\n        voxelRT.wrapV = Texture.CLAMP_ADDRESSMODE;\n        voxelRT.noPrePassRenderer = true;\n        const mrtArray = [];\n        const targetTypes = new Array(this._maxDrawBuffers).fill(this._isVoxelGrid3D ? Constants.TEXTURE_3D : Constants.TEXTURE_2D_ARRAY);\n        for (let mrtIndex = 0; mrtIndex < numSlabs; mrtIndex++) {\n            let layerIndices = new Array(this._maxDrawBuffers).fill(0);\n            layerIndices = layerIndices.map((value, index) => mrtIndex * this._maxDrawBuffers + index);\n            let textureNames = new Array(this._maxDrawBuffers).fill(\"\");\n            textureNames = textureNames.map((value, index) => \"voxel_grid_\" + name + (mrtIndex * this._maxDrawBuffers + index));\n            const mrt = new MultiRenderTarget(\"mrt_\" + name + mrtIndex, { width: this._voxelResolution, height: this._voxelResolution, depth: this._isVoxelGrid3D ? this._voxelResolution : undefined }, this._maxDrawBuffers, // number of draw buffers\n            this._scene, {\n                types: new Array(this._maxDrawBuffers).fill(Constants.TEXTURETYPE_UNSIGNED_BYTE),\n                samplingModes: new Array(this._maxDrawBuffers).fill(Constants.TEXTURE_TRILINEAR_SAMPLINGMODE),\n                generateMipMaps: false,\n                targetTypes,\n                formats: new Array(this._maxDrawBuffers).fill(Constants.TEXTUREFORMAT_R),\n                faceIndex: new Array(this._maxDrawBuffers).fill(0),\n                layerIndex: layerIndices,\n                layerCounts: new Array(this._maxDrawBuffers).fill(this._voxelResolution),\n                generateDepthBuffer: false,\n                generateStencilBuffer: false,\n            }, textureNames);\n            mrt.clearColor = new Color4(0, 0, 0, 1);\n            mrt.noPrePassRenderer = true;\n            for (let i = 0; i < this._maxDrawBuffers; i++) {\n                mrt.setInternalTexture(voxelRT.getInternalTexture(), i);\n            }\n            mrtArray.push(mrt);\n        }\n        return mrtArray;\n    }\n    _disposeVoxelTextures() {\n        this._stopVoxelization();\n        for (let i = 0; i < this._voxelMrtsZaxis.length; i++) {\n            if (this._triPlanarVoxelization) {\n                this._voxelMrtsXaxis[i].dispose(true);\n                this._voxelMrtsYaxis[i].dispose(true);\n            }\n            this._voxelMrtsZaxis[i].dispose(true);\n        }\n        if (this._triPlanarVoxelization) {\n            this._voxelGridXaxis?.dispose();\n            this._voxelGridYaxis?.dispose();\n            this._voxelGridRT?.dispose();\n        }\n        this._voxelGridZaxis?.dispose();\n        for (const mip of this._mipArray) {\n            mip.dispose();\n        }\n        this._voxelMaterial?.dispose();\n        this._voxelSlabDebugMaterial?.dispose();\n        this._mipArray = [];\n        this._voxelMrtsXaxis = [];\n        this._voxelMrtsYaxis = [];\n        this._voxelMrtsZaxis = [];\n    }\n    _createVoxelMaterials() {\n        const isWebGPU = this._engine.isWebGPU;\n        this._voxelMaterial = new ShaderMaterial(\"voxelization\", this._scene, \"iblVoxelGrid\", {\n            uniforms: [\"world\", \"viewMatrix\", \"invWorldScale\", \"nearPlane\", \"farPlane\", \"stepSize\"],\n            defines: [\"MAX_DRAW_BUFFERS \" + this._maxDrawBuffers],\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await Promise.all([import(\"../../ShadersWGSL/iblVoxelGrid.fragment\"), import(\"../../ShadersWGSL/iblVoxelGrid.vertex\")]);\n                }\n                else {\n                    await Promise.all([import(\"../../Shaders/iblVoxelGrid.fragment\"), import(\"../../Shaders/iblVoxelGrid.vertex\")]);\n                }\n            },\n        });\n        this._voxelMaterial.cullBackFaces = false;\n        this._voxelMaterial.backFaceCulling = false;\n        this._voxelMaterial.depthFunction = Engine.ALWAYS;\n        this._voxelSlabDebugMaterial = new ShaderMaterial(\"voxelSlabDebug\", this._scene, \"iblVoxelSlabDebug\", {\n            uniforms: [\"world\", \"viewMatrix\", \"cameraViewMatrix\", \"projection\", \"invWorldScale\", \"nearPlane\", \"farPlane\", \"stepSize\"],\n            defines: [\"MAX_DRAW_BUFFERS \" + this._maxDrawBuffers],\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await Promise.all([import(\"../../ShadersWGSL/iblVoxelSlabDebug.fragment\"), import(\"../../ShadersWGSL/iblVoxelSlabDebug.vertex\")]);\n                }\n                else {\n                    await Promise.all([import(\"../../Shaders/iblVoxelSlabDebug.fragment\"), import(\"../../Shaders/iblVoxelSlabDebug.vertex\")]);\n                }\n            },\n        });\n    }\n    _setDebugBindings() {\n        this._voxelSlabDebugMaterial.setMatrix(\"projection\", this._scene.activeCamera.getProjectionMatrix());\n        this._voxelSlabDebugMaterial.setMatrix(\"cameraViewMatrix\", this._scene.activeCamera.getViewMatrix());\n    }\n    /**\n     * Checks if the voxel renderer is ready to voxelize scene\n     * @returns true if the voxel renderer is ready to voxelize scene\n     */\n    isReady() {\n        let allReady = this.getVoxelGrid().isReady();\n        for (let i = 0; i < this._mipArray.length; i++) {\n            const mipReady = this._mipArray[i].isReady();\n            allReady &&= mipReady;\n        }\n        if (!allReady || this._voxelizationInProgress) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * If the MRT's are already in the list of render targets, this will\n     * remove them so that they don't get rendered again.\n     */\n    _stopVoxelization() {\n        // If the MRT's are already in the list of render targets, remove them.\n        this._removeVoxelRTs(this._voxelMrtsXaxis);\n        this._removeVoxelRTs(this._voxelMrtsYaxis);\n        this._removeVoxelRTs(this._voxelMrtsZaxis);\n    }\n    _removeVoxelRTs(rts) {\n        // const currentRTs = this._scene.customRenderTargets;\n        const rtIdx = this._renderTargets.findIndex((rt) => {\n            if (rt === rts[0]) {\n                return true;\n            }\n            return false;\n        });\n        if (rtIdx >= 0) {\n            this._renderTargets.splice(rtIdx, rts.length);\n        }\n        else {\n            const rtIdx = this._scene.customRenderTargets.findIndex((rt) => {\n                if (rt === rts[0]) {\n                    return true;\n                }\n                return false;\n            });\n            if (rtIdx >= 0) {\n                this._scene.customRenderTargets.splice(rtIdx, rts.length);\n            }\n        }\n    }\n    /**\n     * Renders voxel grid of scene for IBL shadows\n     * @param includedMeshes\n     */\n    updateVoxelGrid(includedMeshes) {\n        this._stopVoxelization();\n        this._includedMeshes = includedMeshes;\n        this._voxelizationInProgress = true;\n        if (this._triPlanarVoxelization) {\n            this._addRTsForRender(this._voxelMrtsXaxis, includedMeshes, 0);\n            this._addRTsForRender(this._voxelMrtsYaxis, includedMeshes, 1);\n            this._addRTsForRender(this._voxelMrtsZaxis, includedMeshes, 2);\n        }\n        else {\n            this._addRTsForRender(this._voxelMrtsZaxis, includedMeshes, 2);\n        }\n        if (this._voxelDebugEnabled) {\n            this._addRTsForRender([this._voxelSlabDebugRT], includedMeshes, this._voxelDebugAxis, 1, true);\n        }\n        this._renderVoxelGridBound = this._renderVoxelGrid.bind(this);\n        this._scene.onAfterRenderObservable.add(this._renderVoxelGridBound);\n    }\n    _renderVoxelGrid() {\n        if (this._voxelizationInProgress) {\n            let allReady = this.getVoxelGrid().isReady();\n            for (let i = 0; i < this._mipArray.length; i++) {\n                const mipReady = this._mipArray[i].isReady();\n                allReady &&= mipReady;\n            }\n            for (let i = 0; i < this._renderTargets.length; i++) {\n                const rttReady = this._renderTargets[i].isReadyForRendering();\n                allReady &&= rttReady;\n            }\n            if (allReady) {\n                for (const rt of this._renderTargets) {\n                    rt.render();\n                }\n                this._stopVoxelization();\n                if (this._triPlanarVoxelization) {\n                    this._voxelGridRT.render();\n                }\n                this._generateMipMaps();\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\n                this._copyMipEffectWrapper.effect.whenCompiledAsync().then(() => {\n                    this._copyMipMaps();\n                    this._scene.onAfterRenderObservable.removeCallback(this._renderVoxelGridBound);\n                    this._voxelizationInProgress = false;\n                    this.onVoxelizationCompleteObservable.notifyObservers();\n                });\n            }\n        }\n    }\n    _addRTsForRender(mrts, includedMeshes, axis, shaderType = 0, continuousRender = false) {\n        const slabSize = 1.0 / this._computeNumberOfSlabs();\n        let voxelMaterial;\n        if (shaderType === 0) {\n            voxelMaterial = this._voxelMaterial;\n        }\n        else {\n            voxelMaterial = this._voxelSlabDebugMaterial;\n        }\n        // We need to update the world scale uniform for every mesh being rendered to the voxel grid.\n        for (let mrtIndex = 0; mrtIndex < mrts.length; mrtIndex++) {\n            const mrt = mrts[mrtIndex];\n            mrt.renderList = [];\n            const nearPlane = mrtIndex * slabSize;\n            const farPlane = (mrtIndex + 1) * slabSize;\n            const stepSize = slabSize / this._maxDrawBuffers;\n            const cameraPosition = new Vector3(0, 0, 0);\n            let targetPosition = new Vector3(0, 0, 1);\n            if (axis === 0) {\n                targetPosition = new Vector3(1, 0, 0);\n            }\n            else if (axis === 1) {\n                targetPosition = new Vector3(0, 1, 0);\n            }\n            let upDirection = new Vector3(0, 1, 0);\n            if (axis === 1) {\n                upDirection = new Vector3(1, 0, 0);\n            }\n            mrt.onBeforeRenderObservable.add(() => {\n                voxelMaterial.setMatrix(\"viewMatrix\", Matrix.LookAtLH(cameraPosition, targetPosition, upDirection));\n                voxelMaterial.setMatrix(\"invWorldScale\", this._invWorldScaleMatrix);\n                voxelMaterial.setFloat(\"nearPlane\", nearPlane);\n                voxelMaterial.setFloat(\"farPlane\", farPlane);\n                voxelMaterial.setFloat(\"stepSize\", stepSize);\n            });\n            // Set this material on every mesh in the scene (for this RT)\n            if (includedMeshes.length === 0) {\n                return;\n            }\n            for (const mesh of includedMeshes) {\n                if (mesh) {\n                    if (mesh.subMeshes && mesh.subMeshes.length > 0) {\n                        mrt.renderList?.push(mesh);\n                        mrt.setMaterialForRendering(mesh, voxelMaterial);\n                    }\n                    const meshes = mesh.getChildMeshes();\n                    for (const childMesh of meshes) {\n                        if (childMesh.subMeshes && childMesh.subMeshes.length > 0) {\n                            mrt.renderList?.push(childMesh);\n                            mrt.setMaterialForRendering(childMesh, voxelMaterial);\n                        }\n                    }\n                }\n            }\n        }\n        // Add the MRT's to render.\n        if (continuousRender) {\n            for (const mrt of mrts) {\n                if (this._scene.customRenderTargets.indexOf(mrt) === -1) {\n                    this._scene.customRenderTargets.push(mrt);\n                }\n            }\n        }\n        else {\n            this._renderTargets = this._renderTargets.concat(mrts);\n        }\n    }\n    /**\n     * Called by the pipeline to resize resources.\n     */\n    resize() {\n        this._voxelSlabDebugRT?.resize({ width: this._scene.getEngine().getRenderWidth(), height: this._scene.getEngine().getRenderHeight() });\n    }\n    /**\n     * Disposes the voxel renderer and associated resources\n     */\n    dispose() {\n        this._disposeVoxelTextures();\n        if (this._voxelSlabDebugRT) {\n            this._removeVoxelRTs([this._voxelSlabDebugRT]);\n            this._voxelSlabDebugRT.dispose();\n        }\n        if (this._voxelDebugPass) {\n            this._voxelDebugPass.dispose();\n        }\n        // TODO - dispose all created voxel materials.\n    }\n}\n//# sourceMappingURL=iblShadowsVoxelRenderer.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\nconst name = \"mrtFragmentDeclaration\";\nconst shader = `#if defined(WEBGL2) || defined(WEBGPU) || defined(NATIVE)\nlayout(location=0) out vec4 glFragData[{X}];\n#endif\n`;\n// Sideeffect\nif (!ShaderStore.IncludesShadersStore[name]) {\n    ShaderStore.IncludesShadersStore[name] = shader;\n}\n/** @internal */\nexport const mrtFragmentDeclaration = { name, shader };\n//# sourceMappingURL=mrtFragmentDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"./ShadersInclude/mrtFragmentDeclaration\";\nimport \"./ShadersInclude/bumpFragmentMainFunctions\";\nimport \"./ShadersInclude/bumpFragmentFunctions\";\nimport \"./ShadersInclude/helperFunctions\";\nimport \"./ShadersInclude/clipPlaneFragment\";\nimport \"./ShadersInclude/bumpFragment\";\nconst name = \"geometryPixelShader\";\nconst shader = `#extension GL_EXT_draw_buffers : require\n#if defined(BUMP) || !defined(NORMAL)\n#extension GL_OES_standard_derivatives : enable\n#endif\nprecision highp float;\n#ifdef BUMP\nvarying mat4 vWorldView;varying vec3 vNormalW;\n#else\nvarying vec3 vNormalV;\n#endif\nvarying vec4 vViewPos;\n#if defined(POSITION) || defined(BUMP)\nvarying vec3 vPositionW;\n#endif\n#if defined(VELOCITY) || defined(VELOCITY_LINEAR)\nvarying vec4 vCurrentPosition;varying vec4 vPreviousPosition;\n#endif\n#ifdef NEED_UV\nvarying vec2 vUV;\n#endif\n#ifdef BUMP\nuniform vec3 vBumpInfos;uniform vec2 vTangentSpaceParams;\n#endif\n#if defined(REFLECTIVITY)\n#if defined(ORMTEXTURE) || defined(SPECULARGLOSSINESSTEXTURE) || defined(REFLECTIVITYTEXTURE)\nuniform sampler2D reflectivitySampler;varying vec2 vReflectivityUV;\n#endif\n#ifdef ALBEDOTEXTURE\nvarying vec2 vAlbedoUV;uniform sampler2D albedoSampler;\n#endif\n#ifdef REFLECTIVITYCOLOR\nuniform vec3 reflectivityColor;\n#endif\n#ifdef ALBEDOCOLOR\nuniform vec3 albedoColor;\n#endif\n#ifdef METALLIC\nuniform float metallic;\n#endif\n#if defined(ROUGHNESS) || defined(GLOSSINESS)\nuniform float glossiness;\n#endif\n#endif\n#if defined(ALPHATEST) && defined(NEED_UV)\nuniform sampler2D diffuseSampler;\n#endif\n#include<clipPlaneFragmentDeclaration>\n#include<mrtFragmentDeclaration>[SCENE_MRT_COUNT]\n#include<bumpFragmentMainFunctions>\n#include<bumpFragmentFunctions>\n#include<helperFunctions>\nvoid main() {\n#include<clipPlaneFragment>\n#ifdef ALPHATEST\nif (texture2D(diffuseSampler,vUV).a<0.4)\ndiscard;\n#endif\nvec3 normalOutput;\n#ifdef BUMP\nvec3 normalW=normalize(vNormalW);\n#include<bumpFragment>\n#ifdef NORMAL_WORLDSPACE\nnormalOutput=normalW;\n#else\nnormalOutput=normalize(vec3(vWorldView*vec4(normalW,0.0)));\n#endif\n#else\nnormalOutput=normalize(vNormalV);\n#endif\n#ifdef ENCODE_NORMAL\nnormalOutput=normalOutput*0.5+0.5;\n#endif\n#ifdef DEPTH\ngl_FragData[DEPTH_INDEX]=vec4(vViewPos.z/vViewPos.w,0.0,0.0,1.0);\n#endif\n#ifdef NORMAL\ngl_FragData[NORMAL_INDEX]=vec4(normalOutput,1.0);\n#endif\n#ifdef SCREENSPACE_DEPTH\ngl_FragData[SCREENSPACE_DEPTH_INDEX]=vec4(gl_FragCoord.z,0.0,0.0,1.0);\n#endif\n#ifdef POSITION\ngl_FragData[POSITION_INDEX]=vec4(vPositionW,1.0);\n#endif\n#ifdef VELOCITY\nvec2 a=(vCurrentPosition.xy/vCurrentPosition.w)*0.5+0.5;vec2 b=(vPreviousPosition.xy/vPreviousPosition.w)*0.5+0.5;vec2 velocity=abs(a-b);velocity=vec2(pow(velocity.x,1.0/3.0),pow(velocity.y,1.0/3.0))*sign(a-b)*0.5+0.5;gl_FragData[VELOCITY_INDEX]=vec4(velocity,0.0,1.0);\n#endif\n#ifdef VELOCITY_LINEAR\nvec2 velocity=vec2(0.5)*((vPreviousPosition.xy/vPreviousPosition.w) -\n(vCurrentPosition.xy/vCurrentPosition.w));gl_FragData[VELOCITY_LINEAR_INDEX]=vec4(velocity,0.0,1.0);\n#endif\n#ifdef REFLECTIVITY\nvec4 reflectivity=vec4(0.0,0.0,0.0,1.0);\n#ifdef METALLICWORKFLOW\nfloat metal=1.0;float roughness=1.0;\n#ifdef ORMTEXTURE\nmetal*=texture2D(reflectivitySampler,vReflectivityUV).b;roughness*=texture2D(reflectivitySampler,vReflectivityUV).g;\n#endif\n#ifdef METALLIC\nmetal*=metallic;\n#endif\n#ifdef ROUGHNESS\nroughness*=(1.0-glossiness); \n#endif\nreflectivity.a-=roughness;vec3 color=vec3(1.0);\n#ifdef ALBEDOTEXTURE\ncolor=texture2D(albedoSampler,vAlbedoUV).rgb;\n#ifdef GAMMAALBEDO\ncolor=toLinearSpace(color);\n#endif\n#endif\n#ifdef ALBEDOCOLOR\ncolor*=albedoColor.xyz;\n#endif\nreflectivity.rgb=mix(vec3(0.04),color,metal);\n#else\n#if defined(SPECULARGLOSSINESSTEXTURE) || defined(REFLECTIVITYTEXTURE)\nreflectivity=texture2D(reflectivitySampler,vReflectivityUV);\n#ifdef GAMMAREFLECTIVITYTEXTURE\nreflectivity.rgb=toLinearSpace(reflectivity.rgb);\n#endif\n#else \n#ifdef REFLECTIVITYCOLOR\nreflectivity.rgb=toLinearSpace(reflectivityColor.xyz);reflectivity.a=1.0;\n#endif\n#endif\n#ifdef GLOSSINESSS\nreflectivity.a*=glossiness; \n#endif\n#endif\ngl_FragData[REFLECTIVITY_INDEX]=reflectivity;\n#endif\n}\n`;\n// Sideeffect\nif (!ShaderStore.ShadersStore[name]) {\n    ShaderStore.ShadersStore[name] = shader;\n}\n/** @internal */\nexport const geometryPixelShader = { name, shader };\n//# sourceMappingURL=geometry.fragment.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\nconst name = \"geometryVertexDeclaration\";\nconst shader = `uniform mat4 viewProjection;uniform mat4 view;`;\n// Sideeffect\nif (!ShaderStore.IncludesShadersStore[name]) {\n    ShaderStore.IncludesShadersStore[name] = shader;\n}\n/** @internal */\nexport const geometryVertexDeclaration = { name, shader };\n//# sourceMappingURL=geometryVertexDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\nimport \"./sceneUboDeclaration\";\nconst name = \"geometryUboDeclaration\";\nconst shader = `#include<sceneUboDeclaration>\n`;\n// Sideeffect\nif (!ShaderStore.IncludesShadersStore[name]) {\n    ShaderStore.IncludesShadersStore[name] = shader;\n}\n/** @internal */\nexport const geometryUboDeclaration = { name, shader };\n//# sourceMappingURL=geometryUboDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/bonesDeclaration\";\nimport \"./ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexGlobalDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexDeclaration\";\nimport \"./ShadersInclude/instancesDeclaration\";\nimport \"./ShadersInclude/geometryVertexDeclaration\";\nimport \"./ShadersInclude/geometryUboDeclaration\";\nimport \"./ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexGlobal\";\nimport \"./ShadersInclude/morphTargetsVertex\";\nimport \"./ShadersInclude/instancesVertex\";\nimport \"./ShadersInclude/bonesVertex\";\nimport \"./ShadersInclude/bakedVertexAnimation\";\nimport \"./ShadersInclude/clipPlaneVertex\";\nimport \"./ShadersInclude/bumpVertex\";\nconst name = \"geometryVertexShader\";\nconst shader = `precision highp float;\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<morphTargetsVertexGlobalDeclaration>\n#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]\n#include<instancesDeclaration>\n#include<__decl__geometryVertex>\n#include<clipPlaneVertexDeclaration>\nattribute vec3 position;attribute vec3 normal;\n#ifdef NEED_UV\nvarying vec2 vUV;\n#ifdef ALPHATEST\nuniform mat4 diffuseMatrix;\n#endif\n#ifdef BUMP\nuniform mat4 bumpMatrix;varying vec2 vBumpUV;\n#endif\n#ifdef REFLECTIVITY\nuniform mat4 reflectivityMatrix;uniform mat4 albedoMatrix;varying vec2 vReflectivityUV;varying vec2 vAlbedoUV;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#endif\n#ifdef BUMP\nvarying mat4 vWorldView;\n#endif\n#ifdef BUMP\nvarying vec3 vNormalW;\n#else\nvarying vec3 vNormalV;\n#endif\nvarying vec4 vViewPos;\n#if defined(POSITION) || defined(BUMP)\nvarying vec3 vPositionW;\n#endif\n#if defined(VELOCITY) || defined(VELOCITY_LINEAR)\nuniform mat4 previousViewProjection;varying vec4 vCurrentPosition;varying vec4 vPreviousPosition;\n#endif\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void)\n{vec3 positionUpdated=position;vec3 normalUpdated=normal;\n#ifdef UV1\nvec2 uvUpdated=uv;\n#endif\n#ifdef UV2\nvec2 uv2Updated=uv2;\n#endif\n#include<morphTargetsVertexGlobal>\n#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]\n#include<instancesVertex>\n#if (defined(VELOCITY) || defined(VELOCITY_LINEAR)) && !defined(BONES_VELOCITY_ENABLED)\nvCurrentPosition=viewProjection*finalWorld*vec4(positionUpdated,1.0);vPreviousPosition=previousViewProjection*finalPreviousWorld*vec4(positionUpdated,1.0);\n#endif\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=vec4(finalWorld*vec4(positionUpdated,1.0));\n#ifdef BUMP\nvWorldView=view*finalWorld;mat3 normalWorld=mat3(finalWorld);vNormalW=normalize(normalWorld*normalUpdated);\n#else\n#ifdef NORMAL_WORLDSPACE\nvNormalV=normalize(vec3(finalWorld*vec4(normalUpdated,0.0)));\n#else\nvNormalV=normalize(vec3((view*finalWorld)*vec4(normalUpdated,0.0)));\n#endif\n#endif\nvViewPos=view*worldPos;\n#if (defined(VELOCITY) || defined(VELOCITY_LINEAR)) && defined(BONES_VELOCITY_ENABLED)\nvCurrentPosition=viewProjection*finalWorld*vec4(positionUpdated,1.0);\n#if NUM_BONE_INFLUENCERS>0\nmat4 previousInfluence;previousInfluence=mPreviousBones[int(matricesIndices[0])]*matricesWeights[0];\n#if NUM_BONE_INFLUENCERS>1\npreviousInfluence+=mPreviousBones[int(matricesIndices[1])]*matricesWeights[1];\n#endif\n#if NUM_BONE_INFLUENCERS>2\npreviousInfluence+=mPreviousBones[int(matricesIndices[2])]*matricesWeights[2];\n#endif\n#if NUM_BONE_INFLUENCERS>3\npreviousInfluence+=mPreviousBones[int(matricesIndices[3])]*matricesWeights[3];\n#endif\n#if NUM_BONE_INFLUENCERS>4\npreviousInfluence+=mPreviousBones[int(matricesIndicesExtra[0])]*matricesWeightsExtra[0];\n#endif\n#if NUM_BONE_INFLUENCERS>5\npreviousInfluence+=mPreviousBones[int(matricesIndicesExtra[1])]*matricesWeightsExtra[1];\n#endif\n#if NUM_BONE_INFLUENCERS>6\npreviousInfluence+=mPreviousBones[int(matricesIndicesExtra[2])]*matricesWeightsExtra[2];\n#endif\n#if NUM_BONE_INFLUENCERS>7\npreviousInfluence+=mPreviousBones[int(matricesIndicesExtra[3])]*matricesWeightsExtra[3];\n#endif\nvPreviousPosition=previousViewProjection*finalPreviousWorld*previousInfluence*vec4(positionUpdated,1.0);\n#else\nvPreviousPosition=previousViewProjection*finalPreviousWorld*vec4(positionUpdated,1.0);\n#endif\n#endif\n#if defined(POSITION) || defined(BUMP)\nvPositionW=worldPos.xyz/worldPos.w;\n#endif\ngl_Position=viewProjection*finalWorld*vec4(positionUpdated,1.0);\n#include<clipPlaneVertex>\n#ifdef NEED_UV\n#ifdef UV1\n#if defined(ALPHATEST) && defined(ALPHATEST_UV1)\nvUV=vec2(diffuseMatrix*vec4(uvUpdated,1.0,0.0));\n#else\nvUV=uvUpdated;\n#endif\n#ifdef BUMP_UV1\nvBumpUV=vec2(bumpMatrix*vec4(uvUpdated,1.0,0.0));\n#endif\n#ifdef REFLECTIVITY_UV1\nvReflectivityUV=vec2(reflectivityMatrix*vec4(uvUpdated,1.0,0.0));\n#endif\n#ifdef ALBEDO_UV1\nvAlbedoUV=vec2(albedoMatrix*vec4(uvUpdated,1.0,0.0));\n#endif\n#endif\n#ifdef UV2\n#if defined(ALPHATEST) && defined(ALPHATEST_UV2)\nvUV=vec2(diffuseMatrix*vec4(uv2Updated,1.0,0.0));\n#else\nvUV=uv2Updated;\n#endif\n#ifdef BUMP_UV2\nvBumpUV=vec2(bumpMatrix*vec4(uv2Updated,1.0,0.0));\n#endif\n#ifdef REFLECTIVITY_UV2\nvReflectivityUV=vec2(reflectivityMatrix*vec4(uv2Updated,1.0,0.0));\n#endif\n#ifdef ALBEDO_UV2\nvAlbedoUV=vec2(albedoMatrix*vec4(uv2Updated,1.0,0.0));\n#endif\n#endif\n#endif\n#include<bumpVertex>\n}\n`;\n// Sideeffect\nif (!ShaderStore.ShadersStore[name]) {\n    ShaderStore.ShadersStore[name] = shader;\n}\n/** @internal */\nexport const geometryVertexShader = { name, shader };\n//# sourceMappingURL=geometry.vertex.js.map","import { Matrix } from \"../Maths/math.vector\";\nimport { VertexBuffer } from \"../Buffers/buffer\";\nimport { Constants } from \"../Engines/constants\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { MultiRenderTarget } from \"../Materials/Textures/multiRenderTarget\";\nimport { Color4 } from \"../Maths/math.color\";\nimport { _WarnImport } from \"../Misc/devTools\";\nimport { Material } from \"../Materials/material\";\nimport \"../Shaders/geometry.fragment\";\nimport \"../Shaders/geometry.vertex\";\nimport { MaterialFlags } from \"../Materials/materialFlags\";\nimport { AddClipPlaneUniforms, BindClipPlane, PrepareStringDefinesForClipPlanes } from \"../Materials/clipPlaneMaterialHelper\";\nimport { BindMorphTargetParameters, BindSceneUniformBuffer, PrepareDefinesAndAttributesForMorphTargets, PushAttributesForInstances } from \"../Materials/materialHelper.functions\";\nimport \"../Engines/Extensions/engine.multiRender\";\n/** list the uniforms used by the geometry renderer */\nconst Uniforms = [\n    \"world\",\n    \"mBones\",\n    \"viewProjection\",\n    \"diffuseMatrix\",\n    \"view\",\n    \"previousWorld\",\n    \"previousViewProjection\",\n    \"mPreviousBones\",\n    \"bumpMatrix\",\n    \"reflectivityMatrix\",\n    \"albedoMatrix\",\n    \"reflectivityColor\",\n    \"albedoColor\",\n    \"metallic\",\n    \"glossiness\",\n    \"vTangentSpaceParams\",\n    \"vBumpInfos\",\n    \"morphTargetInfluences\",\n    \"morphTargetCount\",\n    \"morphTargetTextureInfo\",\n    \"morphTargetTextureIndices\",\n    \"boneTextureWidth\",\n];\nAddClipPlaneUniforms(Uniforms);\n/**\n * This renderer is helpful to fill one of the render target with a geometry buffer.\n */\nexport class GeometryBufferRenderer {\n    /**\n     * Gets a boolean indicating if normals are encoded in the [0,1] range in the render target. If true, you should do `normal = normal_rt * 2.0 - 1.0` to get the right normal\n     */\n    get normalsAreUnsigned() {\n        return this._normalsAreUnsigned;\n    }\n    /**\n     * @internal\n     * Sets up internal structures to share outputs with PrePassRenderer\n     * This method should only be called by the PrePassRenderer itself\n     */\n    _linkPrePassRenderer(prePassRenderer) {\n        this._linkedWithPrePass = true;\n        this._prePassRenderer = prePassRenderer;\n        if (this._multiRenderTarget) {\n            // prevents clearing of the RT since it's done by prepass\n            this._multiRenderTarget.onClearObservable.clear();\n            this._multiRenderTarget.onClearObservable.add(() => {\n                // pass\n            });\n        }\n    }\n    /**\n     * @internal\n     * Separates internal structures from PrePassRenderer so the geometry buffer can now operate by itself.\n     * This method should only be called by the PrePassRenderer itself\n     */\n    _unlinkPrePassRenderer() {\n        this._linkedWithPrePass = false;\n        this._createRenderTargets();\n    }\n    /**\n     * @internal\n     * Resets the geometry buffer layout\n     */\n    _resetLayout() {\n        this._enableDepth = true;\n        this._enableNormal = true;\n        this._enablePosition = false;\n        this._enableReflectivity = false;\n        this._enableVelocity = false;\n        this._enableVelocityLinear = false;\n        this._enableScreenspaceDepth = false;\n        this._attachmentsFromPrePass = [];\n    }\n    /**\n     * @internal\n     * Replaces a texture in the geometry buffer renderer\n     * Useful when linking textures of the prepass renderer\n     */\n    _forceTextureType(geometryBufferType, index) {\n        if (geometryBufferType === GeometryBufferRenderer.POSITION_TEXTURE_TYPE) {\n            this._positionIndex = index;\n            this._enablePosition = true;\n        }\n        else if (geometryBufferType === GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE) {\n            this._velocityIndex = index;\n            this._enableVelocity = true;\n        }\n        else if (geometryBufferType === GeometryBufferRenderer.VELOCITY_LINEAR_TEXTURE_TYPE) {\n            this._velocityLinearIndex = index;\n            this._enableVelocityLinear = true;\n        }\n        else if (geometryBufferType === GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE) {\n            this._reflectivityIndex = index;\n            this._enableReflectivity = true;\n        }\n        else if (geometryBufferType === GeometryBufferRenderer.DEPTH_TEXTURE_TYPE) {\n            this._depthIndex = index;\n            this._enableDepth = true;\n        }\n        else if (geometryBufferType === GeometryBufferRenderer.NORMAL_TEXTURE_TYPE) {\n            this._normalIndex = index;\n            this._enableNormal = true;\n        }\n        else if (geometryBufferType === GeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE) {\n            this._screenspaceDepthIndex = index;\n            this._enableScreenspaceDepth = true;\n        }\n    }\n    /**\n     * @internal\n     * Sets texture attachments\n     * Useful when linking textures of the prepass renderer\n     */\n    _setAttachments(attachments) {\n        this._attachmentsFromPrePass = attachments;\n    }\n    /**\n     * @internal\n     * Replaces the first texture which is hard coded as a depth texture in the geometry buffer\n     * Useful when linking textures of the prepass renderer\n     */\n    _linkInternalTexture(internalTexture) {\n        this._multiRenderTarget.setInternalTexture(internalTexture, 0, false);\n    }\n    /**\n     * Gets the render list (meshes to be rendered) used in the G buffer.\n     */\n    get renderList() {\n        return this._multiRenderTarget.renderList;\n    }\n    /**\n     * Set the render list (meshes to be rendered) used in the G buffer.\n     */\n    set renderList(meshes) {\n        this._multiRenderTarget.renderList = meshes;\n    }\n    /**\n     * Gets whether or not G buffer are supported by the running hardware.\n     * This requires draw buffer supports\n     */\n    get isSupported() {\n        return this._multiRenderTarget.isSupported;\n    }\n    /**\n     * Returns the index of the given texture type in the G-Buffer textures array\n     * @param textureType The texture type constant. For example GeometryBufferRenderer.POSITION_TEXTURE_INDEX\n     * @returns the index of the given texture type in the G-Buffer textures array\n     */\n    getTextureIndex(textureType) {\n        switch (textureType) {\n            case GeometryBufferRenderer.POSITION_TEXTURE_TYPE:\n                return this._positionIndex;\n            case GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE:\n                return this._velocityIndex;\n            case GeometryBufferRenderer.VELOCITY_LINEAR_TEXTURE_TYPE:\n                return this._velocityLinearIndex;\n            case GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE:\n                return this._reflectivityIndex;\n            case GeometryBufferRenderer.DEPTH_TEXTURE_TYPE:\n                return this._depthIndex;\n            case GeometryBufferRenderer.NORMAL_TEXTURE_TYPE:\n                return this._normalIndex;\n            case GeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE:\n                return this._screenspaceDepthIndex;\n            default:\n                return -1;\n        }\n    }\n    /**\n     * @returns a boolean indicating if object's depths are enabled for the G buffer.\n     */\n    get enableDepth() {\n        return this._enableDepth;\n    }\n    /**\n     * Sets whether or not object's depths are enabled for the G buffer.\n     */\n    set enableDepth(enable) {\n        this._enableDepth = enable;\n        if (!this._linkedWithPrePass) {\n            this.dispose();\n            this._createRenderTargets();\n        }\n    }\n    /**\n     * @returns a boolean indicating if object's normals are enabled for the G buffer.\n     */\n    get enableNormal() {\n        return this._enableNormal;\n    }\n    /**\n     * Sets whether or not object's normals are enabled for the G buffer.\n     */\n    set enableNormal(enable) {\n        this._enableNormal = enable;\n        if (!this._linkedWithPrePass) {\n            this.dispose();\n            this._createRenderTargets();\n        }\n    }\n    /**\n     * @returns a boolean indicating if objects positions are enabled for the G buffer.\n     */\n    get enablePosition() {\n        return this._enablePosition;\n    }\n    /**\n     * Sets whether or not objects positions are enabled for the G buffer.\n     */\n    set enablePosition(enable) {\n        this._enablePosition = enable;\n        // PrePass handles index and texture links\n        if (!this._linkedWithPrePass) {\n            this.dispose();\n            this._createRenderTargets();\n        }\n    }\n    /**\n     * @returns a boolean indicating if objects velocities are enabled for the G buffer.\n     */\n    get enableVelocity() {\n        return this._enableVelocity;\n    }\n    /**\n     * Sets whether or not objects velocities are enabled for the G buffer.\n     */\n    set enableVelocity(enable) {\n        this._enableVelocity = enable;\n        if (!enable) {\n            this._previousTransformationMatrices = {};\n        }\n        if (!this._linkedWithPrePass) {\n            this.dispose();\n            this._createRenderTargets();\n        }\n        this._scene.needsPreviousWorldMatrices = enable;\n    }\n    /**\n     * @returns a boolean indicating if object's linear velocities are enabled for the G buffer.\n     */\n    get enableVelocityLinear() {\n        return this._enableVelocityLinear;\n    }\n    /**\n     * Sets whether or not object's linear velocities are enabled for the G buffer.\n     */\n    set enableVelocityLinear(enable) {\n        this._enableVelocityLinear = enable;\n        if (!this._linkedWithPrePass) {\n            this.dispose();\n            this._createRenderTargets();\n        }\n    }\n    /**\n     * Gets a boolean indicating if objects reflectivity are enabled in the G buffer.\n     */\n    get enableReflectivity() {\n        return this._enableReflectivity;\n    }\n    /**\n     * Sets whether or not objects reflectivity are enabled for the G buffer.\n     * For Metallic-Roughness workflow with ORM texture, we assume that ORM texture is defined according to the default layout:\n     * pbr.useRoughnessFromMetallicTextureAlpha = false;\n     * pbr.useRoughnessFromMetallicTextureGreen = true;\n     * pbr.useMetallnessFromMetallicTextureBlue = true;\n     */\n    set enableReflectivity(enable) {\n        this._enableReflectivity = enable;\n        if (!this._linkedWithPrePass) {\n            this.dispose();\n            this._createRenderTargets();\n        }\n    }\n    /**\n     * Sets whether or not objects screenspace depth are enabled for the G buffer.\n     */\n    get enableScreenspaceDepth() {\n        return this._enableScreenspaceDepth;\n    }\n    set enableScreenspaceDepth(enable) {\n        this._enableScreenspaceDepth = enable;\n        if (!this._linkedWithPrePass) {\n            this.dispose();\n            this._createRenderTargets();\n        }\n    }\n    /**\n     * Gets the scene associated with the buffer.\n     */\n    get scene() {\n        return this._scene;\n    }\n    /**\n     * Gets the ratio used by the buffer during its creation.\n     * How big is the buffer related to the main canvas.\n     */\n    get ratio() {\n        return typeof this._ratioOrDimensions === \"object\" ? 1 : this._ratioOrDimensions;\n    }\n    /**\n     * Gets the shader language used in this material.\n     */\n    get shaderLanguage() {\n        return this._shaderLanguage;\n    }\n    /**\n     * Creates a new G Buffer for the scene\n     * @param scene The scene the buffer belongs to\n     * @param ratioOrDimensions How big is the buffer related to the main canvas (default: 1). You can also directly pass a width and height for the generated textures\n     * @param depthFormat Format of the depth texture (default: Constants.TEXTUREFORMAT_DEPTH16)\n     * @param textureTypesAndFormats The types and formats of textures to create as render targets. If not provided, all textures will be RGBA and float or half float, depending on the engine capabilities.\n     */\n    constructor(scene, ratioOrDimensions = 1, depthFormat = Constants.TEXTUREFORMAT_DEPTH16, textureTypesAndFormats) {\n        /**\n         * Dictionary used to store the previous transformation matrices of each rendered mesh\n         * in order to compute objects velocities when enableVelocity is set to \"true\"\n         * @internal\n         */\n        this._previousTransformationMatrices = {};\n        /**\n         * Dictionary used to store the previous bones transformation matrices of each rendered mesh\n         * in order to compute objects velocities when enableVelocity is set to \"true\"\n         * @internal\n         */\n        this._previousBonesTransformationMatrices = {};\n        /**\n         * Array used to store the ignored skinned meshes while computing velocity map (typically used by the motion blur post-process).\n         * Avoids computing bones velocities and computes only mesh's velocity itself (position, rotation, scaling).\n         */\n        this.excludedSkinnedMeshesFromVelocity = [];\n        /** Gets or sets a boolean indicating if transparent meshes should be rendered */\n        this.renderTransparentMeshes = true;\n        /**\n         * Gets or sets a boolean indicating if normals should be generated in world space (default: false, meaning normals are generated in view space)\n         */\n        this.generateNormalsInWorldSpace = false;\n        this._normalsAreUnsigned = false;\n        this._resizeObserver = null;\n        this._enableDepth = true;\n        this._enableNormal = true;\n        this._enablePosition = false;\n        this._enableVelocity = false;\n        this._enableVelocityLinear = false;\n        this._enableReflectivity = false;\n        this._enableScreenspaceDepth = false;\n        this._clearColor = new Color4(0, 0, 0, 0);\n        this._clearDepthColor = new Color4(0, 0, 0, 1); // sets an invalid value by default - depth in the depth texture is view.z, so 0 is not possible because view.z can't be less than camera.minZ\n        this._positionIndex = -1;\n        this._velocityIndex = -1;\n        this._velocityLinearIndex = -1;\n        this._reflectivityIndex = -1;\n        this._depthIndex = -1;\n        this._normalIndex = -1;\n        this._screenspaceDepthIndex = -1;\n        this._linkedWithPrePass = false;\n        /**\n         * If set to true (default: false), the depth texture will be cleared with the depth value corresponding to the far plane (1 in normal mode, 0 in reverse depth buffer mode)\n         * If set to false, the depth texture is always cleared with 0.\n         */\n        this.useSpecificClearForDepthTexture = false;\n        /** Shader language used by the material */\n        this._shaderLanguage = 0 /* ShaderLanguage.GLSL */;\n        this._shadersLoaded = false;\n        this._scene = scene;\n        this._ratioOrDimensions = ratioOrDimensions;\n        this._useUbo = scene.getEngine().supportsUniformBuffers;\n        this._depthFormat = depthFormat;\n        this._textureTypesAndFormats = textureTypesAndFormats || {};\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this._initShaderSourceAsync();\n        GeometryBufferRenderer._SceneComponentInitialization(this._scene);\n        // Render target\n        this._createRenderTargets();\n    }\n    async _initShaderSourceAsync() {\n        const engine = this._scene.getEngine();\n        if (engine.isWebGPU && !GeometryBufferRenderer.ForceGLSL) {\n            this._shaderLanguage = 1 /* ShaderLanguage.WGSL */;\n            await Promise.all([import(\"../ShadersWGSL/geometry.vertex\"), import(\"../ShadersWGSL/geometry.fragment\")]);\n        }\n        else {\n            await Promise.all([import(\"../Shaders/geometry.vertex\"), import(\"../Shaders/geometry.fragment\")]);\n        }\n        this._shadersLoaded = true;\n    }\n    /**\n     * Checks whether everything is ready to render a submesh to the G buffer.\n     * @param subMesh the submesh to check readiness for\n     * @param useInstances is the mesh drawn using instance or not\n     * @returns true if ready otherwise false\n     */\n    isReady(subMesh, useInstances) {\n        if (!this._shadersLoaded) {\n            return false;\n        }\n        const material = subMesh.getMaterial();\n        if (material && material.disableDepthWrite) {\n            return false;\n        }\n        const defines = [];\n        const attribs = [VertexBuffer.PositionKind, VertexBuffer.NormalKind];\n        const mesh = subMesh.getMesh();\n        let uv1 = false;\n        let uv2 = false;\n        const color = false;\n        if (material) {\n            let needUv = false;\n            // Alpha test\n            if (material.needAlphaTestingForMesh(mesh) && material.getAlphaTestTexture()) {\n                defines.push(\"#define ALPHATEST\");\n                defines.push(`#define ALPHATEST_UV${material.getAlphaTestTexture().coordinatesIndex + 1}`);\n                needUv = true;\n            }\n            // Normal map texture\n            if ((material.bumpTexture || material.normalTexture) && MaterialFlags.BumpTextureEnabled) {\n                const texture = material.bumpTexture || material.normalTexture;\n                defines.push(\"#define BUMP\");\n                defines.push(`#define BUMP_UV${texture.coordinatesIndex + 1}`);\n                needUv = true;\n            }\n            if (this._enableReflectivity) {\n                let metallicWorkflow = false;\n                // for PBR materials: cf. https://doc.babylonjs.com/features/featuresDeepDive/materials/using/masterPBR\n                if (material.getClassName() === \"PBRMetallicRoughnessMaterial\") {\n                    // if it is a PBR material in MetallicRoughness Mode:\n                    if (material.metallicRoughnessTexture) {\n                        defines.push(\"#define ORMTEXTURE\");\n                        defines.push(`#define REFLECTIVITY_UV${material.metallicRoughnessTexture.coordinatesIndex + 1}`);\n                        defines.push(\"#define METALLICWORKFLOW\");\n                        needUv = true;\n                        metallicWorkflow = true;\n                    }\n                    // null or undefined\n                    if (material.metallic != null) {\n                        defines.push(\"#define METALLIC\");\n                        defines.push(\"#define METALLICWORKFLOW\");\n                        metallicWorkflow = true;\n                    }\n                    // null or undefined\n                    if (material.roughness != null) {\n                        defines.push(\"#define ROUGHNESS\");\n                        defines.push(\"#define METALLICWORKFLOW\");\n                        metallicWorkflow = true;\n                    }\n                    if (metallicWorkflow) {\n                        if (material.baseTexture) {\n                            defines.push(\"#define ALBEDOTEXTURE\");\n                            defines.push(`#define ALBEDO_UV${material.baseTexture.coordinatesIndex + 1}`);\n                            if (material.baseTexture.gammaSpace) {\n                                defines.push(\"#define GAMMAALBEDO\");\n                            }\n                            needUv = true;\n                        }\n                        if (material.baseColor) {\n                            defines.push(\"#define ALBEDOCOLOR\");\n                        }\n                    }\n                }\n                else if (material.getClassName() === \"PBRSpecularGlossinessMaterial\") {\n                    // if it is a PBR material in Specular/Glossiness Mode:\n                    if (material.specularGlossinessTexture) {\n                        defines.push(\"#define SPECULARGLOSSINESSTEXTURE\");\n                        defines.push(`#define REFLECTIVITY_UV${material.specularGlossinessTexture.coordinatesIndex + 1}`);\n                        needUv = true;\n                        if (material.specularGlossinessTexture.gammaSpace) {\n                            defines.push(\"#define GAMMAREFLECTIVITYTEXTURE\");\n                        }\n                    }\n                    else {\n                        if (material.specularColor) {\n                            defines.push(\"#define REFLECTIVITYCOLOR\");\n                        }\n                    }\n                    // null or undefined\n                    if (material.glossiness != null) {\n                        defines.push(\"#define GLOSSINESS\");\n                    }\n                }\n                else if (material.getClassName() === \"PBRMaterial\") {\n                    // if it is the bigger PBRMaterial\n                    if (material.metallicTexture) {\n                        defines.push(\"#define ORMTEXTURE\");\n                        defines.push(`#define REFLECTIVITY_UV${material.metallicTexture.coordinatesIndex + 1}`);\n                        defines.push(\"#define METALLICWORKFLOW\");\n                        needUv = true;\n                        metallicWorkflow = true;\n                    }\n                    // null or undefined\n                    if (material.metallic != null) {\n                        defines.push(\"#define METALLIC\");\n                        defines.push(\"#define METALLICWORKFLOW\");\n                        metallicWorkflow = true;\n                    }\n                    // null or undefined\n                    if (material.roughness != null) {\n                        defines.push(\"#define ROUGHNESS\");\n                        defines.push(\"#define METALLICWORKFLOW\");\n                        metallicWorkflow = true;\n                    }\n                    if (metallicWorkflow) {\n                        if (material.albedoTexture) {\n                            defines.push(\"#define ALBEDOTEXTURE\");\n                            defines.push(`#define ALBEDO_UV${material.albedoTexture.coordinatesIndex + 1}`);\n                            if (material.albedoTexture.gammaSpace) {\n                                defines.push(\"#define GAMMAALBEDO\");\n                            }\n                            needUv = true;\n                        }\n                        if (material.albedoColor) {\n                            defines.push(\"#define ALBEDOCOLOR\");\n                        }\n                    }\n                    else {\n                        // SpecularGlossiness Model\n                        if (material.reflectivityTexture) {\n                            defines.push(\"#define SPECULARGLOSSINESSTEXTURE\");\n                            defines.push(`#define REFLECTIVITY_UV${material.reflectivityTexture.coordinatesIndex + 1}`);\n                            if (material.reflectivityTexture.gammaSpace) {\n                                defines.push(\"#define GAMMAREFLECTIVITYTEXTURE\");\n                            }\n                            needUv = true;\n                        }\n                        else if (material.reflectivityColor) {\n                            defines.push(\"#define REFLECTIVITYCOLOR\");\n                        }\n                        // null or undefined\n                        if (material.microSurface != null) {\n                            defines.push(\"#define GLOSSINESS\");\n                        }\n                    }\n                }\n                else if (material.getClassName() === \"StandardMaterial\") {\n                    // if StandardMaterial:\n                    if (material.specularTexture) {\n                        defines.push(\"#define REFLECTIVITYTEXTURE\");\n                        defines.push(`#define REFLECTIVITY_UV${material.specularTexture.coordinatesIndex + 1}`);\n                        if (material.specularTexture.gammaSpace) {\n                            defines.push(\"#define GAMMAREFLECTIVITYTEXTURE\");\n                        }\n                        needUv = true;\n                    }\n                    if (material.specularColor) {\n                        defines.push(\"#define REFLECTIVITYCOLOR\");\n                    }\n                }\n            }\n            if (needUv) {\n                defines.push(\"#define NEED_UV\");\n                if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\n                    attribs.push(VertexBuffer.UVKind);\n                    defines.push(\"#define UV1\");\n                    uv1 = true;\n                }\n                if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\n                    attribs.push(VertexBuffer.UV2Kind);\n                    defines.push(\"#define UV2\");\n                    uv2 = true;\n                }\n            }\n        }\n        // Buffers\n        if (this._enableDepth) {\n            defines.push(\"#define DEPTH\");\n            defines.push(\"#define DEPTH_INDEX \" + this._depthIndex);\n        }\n        if (this._enableNormal) {\n            defines.push(\"#define NORMAL\");\n            defines.push(\"#define NORMAL_INDEX \" + this._normalIndex);\n        }\n        if (this._enablePosition) {\n            defines.push(\"#define POSITION\");\n            defines.push(\"#define POSITION_INDEX \" + this._positionIndex);\n        }\n        if (this._enableVelocity) {\n            defines.push(\"#define VELOCITY\");\n            defines.push(\"#define VELOCITY_INDEX \" + this._velocityIndex);\n            if (this.excludedSkinnedMeshesFromVelocity.indexOf(mesh) === -1) {\n                defines.push(\"#define BONES_VELOCITY_ENABLED\");\n            }\n        }\n        if (this._enableVelocityLinear) {\n            defines.push(\"#define VELOCITY_LINEAR\");\n            defines.push(\"#define VELOCITY_LINEAR_INDEX \" + this._velocityLinearIndex);\n            if (this.excludedSkinnedMeshesFromVelocity.indexOf(mesh) === -1) {\n                defines.push(\"#define BONES_VELOCITY_ENABLED\");\n            }\n        }\n        if (this._enableReflectivity) {\n            defines.push(\"#define REFLECTIVITY\");\n            defines.push(\"#define REFLECTIVITY_INDEX \" + this._reflectivityIndex);\n        }\n        if (this._enableScreenspaceDepth) {\n            if (this._screenspaceDepthIndex !== -1) {\n                defines.push(\"#define SCREENSPACE_DEPTH_INDEX \" + this._screenspaceDepthIndex);\n                defines.push(\"#define SCREENSPACE_DEPTH\");\n            }\n        }\n        if (this.generateNormalsInWorldSpace) {\n            defines.push(\"#define NORMAL_WORLDSPACE\");\n        }\n        if (this._normalsAreUnsigned) {\n            defines.push(\"#define ENCODE_NORMAL\");\n        }\n        // Bones\n        if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\n            attribs.push(VertexBuffer.MatricesIndicesKind);\n            attribs.push(VertexBuffer.MatricesWeightsKind);\n            if (mesh.numBoneInfluencers > 4) {\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\n            }\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\n            defines.push(\"#define BONETEXTURE \" + mesh.skeleton.isUsingTextureForMatrices);\n            defines.push(\"#define BonesPerMesh \" + (mesh.skeleton.bones.length + 1));\n        }\n        else {\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\n            defines.push(\"#define BONETEXTURE false\");\n            defines.push(\"#define BonesPerMesh 0\");\n        }\n        // Morph targets\n        const numMorphInfluencers = mesh.morphTargetManager\n            ? PrepareDefinesAndAttributesForMorphTargets(mesh.morphTargetManager, defines, attribs, mesh, true, // usePositionMorph\n            true, // useNormalMorph\n            false, // useTangentMorph\n            uv1, // useUVMorph\n            uv2, // useUV2Morph\n            color // useColorMorph\n            )\n            : 0;\n        // Instances\n        if (useInstances) {\n            defines.push(\"#define INSTANCES\");\n            PushAttributesForInstances(attribs, this._enableVelocity || this._enableVelocityLinear);\n            if (subMesh.getRenderingMesh().hasThinInstances) {\n                defines.push(\"#define THIN_INSTANCES\");\n            }\n        }\n        // Setup textures count\n        if (this._linkedWithPrePass) {\n            defines.push(\"#define SCENE_MRT_COUNT \" + this._attachmentsFromPrePass.length);\n        }\n        else {\n            defines.push(\"#define SCENE_MRT_COUNT \" + this._multiRenderTarget.textures.length);\n        }\n        PrepareStringDefinesForClipPlanes(material, this._scene, defines);\n        // Get correct effect\n        const engine = this._scene.getEngine();\n        const drawWrapper = subMesh._getDrawWrapper(undefined, true);\n        const cachedDefines = drawWrapper.defines;\n        const join = defines.join(\"\\n\");\n        if (cachedDefines !== join) {\n            drawWrapper.setEffect(engine.createEffect(\"geometry\", {\n                attributes: attribs,\n                uniformsNames: Uniforms,\n                samplers: [\"diffuseSampler\", \"bumpSampler\", \"reflectivitySampler\", \"albedoSampler\", \"morphTargets\", \"boneSampler\"],\n                defines: join,\n                onCompiled: null,\n                fallbacks: null,\n                onError: null,\n                uniformBuffersNames: [\"Scene\"],\n                indexParameters: { buffersCount: this._multiRenderTarget.textures.length - 1, maxSimultaneousMorphTargets: numMorphInfluencers },\n                shaderLanguage: this.shaderLanguage,\n            }, engine), join);\n        }\n        return drawWrapper.effect.isReady();\n    }\n    /**\n     * Gets the current underlying G Buffer.\n     * @returns the buffer\n     */\n    getGBuffer() {\n        return this._multiRenderTarget;\n    }\n    /**\n     * Gets the number of samples used to render the buffer (anti aliasing).\n     */\n    get samples() {\n        return this._multiRenderTarget.samples;\n    }\n    /**\n     * Sets the number of samples used to render the buffer (anti aliasing).\n     */\n    set samples(value) {\n        this._multiRenderTarget.samples = value;\n    }\n    /**\n     * Disposes the renderer and frees up associated resources.\n     */\n    dispose() {\n        if (this._resizeObserver) {\n            const engine = this._scene.getEngine();\n            engine.onResizeObservable.remove(this._resizeObserver);\n            this._resizeObserver = null;\n        }\n        this.getGBuffer().dispose();\n    }\n    _assignRenderTargetIndices() {\n        const textureNames = [];\n        const textureTypesAndFormats = [];\n        let count = 0;\n        if (this._enableDepth) {\n            this._depthIndex = count;\n            count++;\n            textureNames.push(\"gBuffer_Depth\");\n            textureTypesAndFormats.push(this._textureTypesAndFormats[GeometryBufferRenderer.DEPTH_TEXTURE_TYPE]);\n        }\n        if (this._enableNormal) {\n            this._normalIndex = count;\n            count++;\n            textureNames.push(\"gBuffer_Normal\");\n            textureTypesAndFormats.push(this._textureTypesAndFormats[GeometryBufferRenderer.NORMAL_TEXTURE_TYPE]);\n        }\n        if (this._enablePosition) {\n            this._positionIndex = count;\n            count++;\n            textureNames.push(\"gBuffer_Position\");\n            textureTypesAndFormats.push(this._textureTypesAndFormats[GeometryBufferRenderer.POSITION_TEXTURE_TYPE]);\n        }\n        if (this._enableVelocity) {\n            this._velocityIndex = count;\n            count++;\n            textureNames.push(\"gBuffer_Velocity\");\n            textureTypesAndFormats.push(this._textureTypesAndFormats[GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE]);\n        }\n        if (this._enableVelocityLinear) {\n            this._velocityLinearIndex = count;\n            count++;\n            textureNames.push(\"gBuffer_VelocityLinear\");\n            textureTypesAndFormats.push(this._textureTypesAndFormats[GeometryBufferRenderer.VELOCITY_LINEAR_TEXTURE_TYPE]);\n        }\n        if (this._enableReflectivity) {\n            this._reflectivityIndex = count;\n            count++;\n            textureNames.push(\"gBuffer_Reflectivity\");\n            textureTypesAndFormats.push(this._textureTypesAndFormats[GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE]);\n        }\n        if (this._enableScreenspaceDepth) {\n            this._screenspaceDepthIndex = count;\n            count++;\n            textureNames.push(\"gBuffer_ScreenspaceDepth\");\n            textureTypesAndFormats.push(this._textureTypesAndFormats[GeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE]);\n        }\n        return [count, textureNames, textureTypesAndFormats];\n    }\n    _createRenderTargets() {\n        const engine = this._scene.getEngine();\n        const [count, textureNames, textureTypesAndFormat] = this._assignRenderTargetIndices();\n        let type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\n        if (engine._caps.textureFloat && engine._caps.textureFloatLinearFiltering) {\n            type = Constants.TEXTURETYPE_FLOAT;\n        }\n        else if (engine._caps.textureHalfFloat && engine._caps.textureHalfFloatLinearFiltering) {\n            type = Constants.TEXTURETYPE_HALF_FLOAT;\n        }\n        const dimensions = this._ratioOrDimensions.width !== undefined\n            ? this._ratioOrDimensions\n            : { width: engine.getRenderWidth() * this._ratioOrDimensions, height: engine.getRenderHeight() * this._ratioOrDimensions };\n        const textureTypes = [];\n        const textureFormats = [];\n        for (const typeAndFormat of textureTypesAndFormat) {\n            if (typeAndFormat) {\n                textureTypes.push(typeAndFormat.textureType);\n                textureFormats.push(typeAndFormat.textureFormat);\n            }\n            else {\n                textureTypes.push(type);\n                textureFormats.push(Constants.TEXTUREFORMAT_RGBA);\n            }\n        }\n        this._normalsAreUnsigned =\n            textureTypes[GeometryBufferRenderer.NORMAL_TEXTURE_TYPE] === Constants.TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV ||\n                textureTypes[GeometryBufferRenderer.NORMAL_TEXTURE_TYPE] === Constants.TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV;\n        this._multiRenderTarget = new MultiRenderTarget(\"gBuffer\", dimensions, count, this._scene, { generateMipMaps: false, generateDepthTexture: true, types: textureTypes, formats: textureFormats, depthTextureFormat: this._depthFormat }, textureNames.concat(\"gBuffer_DepthBuffer\"));\n        if (!this.isSupported) {\n            return;\n        }\n        this._multiRenderTarget.wrapU = Texture.CLAMP_ADDRESSMODE;\n        this._multiRenderTarget.wrapV = Texture.CLAMP_ADDRESSMODE;\n        this._multiRenderTarget.refreshRate = 1;\n        this._multiRenderTarget.renderParticles = false;\n        this._multiRenderTarget.renderList = null;\n        // Depth is always the first texture in the geometry buffer renderer!\n        const layoutAttachmentsAll = [true];\n        const layoutAttachmentsAllButDepth = [false];\n        const layoutAttachmentsDepthOnly = [true];\n        for (let i = 1; i < count; ++i) {\n            layoutAttachmentsAll.push(true);\n            layoutAttachmentsDepthOnly.push(false);\n            layoutAttachmentsAllButDepth.push(true);\n        }\n        const attachmentsAll = engine.buildTextureLayout(layoutAttachmentsAll);\n        const attachmentsAllButDepth = engine.buildTextureLayout(layoutAttachmentsAllButDepth);\n        const attachmentsDepthOnly = engine.buildTextureLayout(layoutAttachmentsDepthOnly);\n        this._multiRenderTarget.onClearObservable.add((engine) => {\n            engine.bindAttachments(this.useSpecificClearForDepthTexture ? attachmentsAllButDepth : attachmentsAll);\n            engine.clear(this._clearColor, true, true, true);\n            if (this.useSpecificClearForDepthTexture) {\n                engine.bindAttachments(attachmentsDepthOnly);\n                engine.clear(this._clearDepthColor, true, true, true);\n            }\n            engine.bindAttachments(attachmentsAll);\n        });\n        this._resizeObserver = engine.onResizeObservable.add(() => {\n            if (this._multiRenderTarget) {\n                const dimensions = this._ratioOrDimensions.width !== undefined\n                    ? this._ratioOrDimensions\n                    : { width: engine.getRenderWidth() * this._ratioOrDimensions, height: engine.getRenderHeight() * this._ratioOrDimensions };\n                this._multiRenderTarget.resize(dimensions);\n            }\n        });\n        // Custom render function\n        const renderSubMesh = (subMesh) => {\n            const renderingMesh = subMesh.getRenderingMesh();\n            const effectiveMesh = subMesh.getEffectiveMesh();\n            const scene = this._scene;\n            const engine = scene.getEngine();\n            const material = subMesh.getMaterial();\n            if (!material) {\n                return;\n            }\n            effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false;\n            // Velocity\n            if ((this._enableVelocity || this._enableVelocityLinear) && !this._previousTransformationMatrices[effectiveMesh.uniqueId]) {\n                this._previousTransformationMatrices[effectiveMesh.uniqueId] = {\n                    world: Matrix.Identity(),\n                    viewProjection: scene.getTransformMatrix(),\n                };\n                if (renderingMesh.skeleton) {\n                    const bonesTransformations = renderingMesh.skeleton.getTransformMatrices(renderingMesh);\n                    this._previousBonesTransformationMatrices[renderingMesh.uniqueId] = this._copyBonesTransformationMatrices(bonesTransformations, new Float32Array(bonesTransformations.length));\n                }\n            }\n            // Managing instances\n            const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\n            if (batch.mustReturn) {\n                return;\n            }\n            const hardwareInstancedRendering = engine.getCaps().instancedArrays && (batch.visibleInstances[subMesh._id] !== null || renderingMesh.hasThinInstances);\n            const world = effectiveMesh.getWorldMatrix();\n            if (this.isReady(subMesh, hardwareInstancedRendering)) {\n                const drawWrapper = subMesh._getDrawWrapper();\n                if (!drawWrapper) {\n                    return;\n                }\n                const effect = drawWrapper.effect;\n                engine.enableEffect(drawWrapper);\n                if (!hardwareInstancedRendering) {\n                    renderingMesh._bind(subMesh, effect, material.fillMode);\n                }\n                if (!this._useUbo) {\n                    effect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n                    effect.setMatrix(\"view\", scene.getViewMatrix());\n                }\n                else {\n                    BindSceneUniformBuffer(effect, this._scene.getSceneUniformBuffer());\n                    this._scene.finalizeSceneUbo();\n                }\n                let sideOrientation;\n                const instanceDataStorage = renderingMesh._instanceDataStorage;\n                if (!instanceDataStorage.isFrozen && (material.backFaceCulling || material.sideOrientation !== null)) {\n                    const mainDeterminant = effectiveMesh._getWorldMatrixDeterminant();\n                    sideOrientation = material._getEffectiveOrientation(renderingMesh);\n                    if (mainDeterminant < 0) {\n                        sideOrientation = sideOrientation === Material.ClockWiseSideOrientation ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\n                    }\n                }\n                else {\n                    sideOrientation = instanceDataStorage.sideOrientation;\n                }\n                material._preBind(drawWrapper, sideOrientation);\n                // Alpha test\n                if (material.needAlphaTestingForMesh(effectiveMesh)) {\n                    const alphaTexture = material.getAlphaTestTexture();\n                    if (alphaTexture) {\n                        effect.setTexture(\"diffuseSampler\", alphaTexture);\n                        effect.setMatrix(\"diffuseMatrix\", alphaTexture.getTextureMatrix());\n                    }\n                }\n                // Bump\n                if ((material.bumpTexture || material.normalTexture) && scene.getEngine().getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled) {\n                    const texture = material.bumpTexture || material.normalTexture;\n                    effect.setFloat3(\"vBumpInfos\", texture.coordinatesIndex, 1.0 / texture.level, material.parallaxScaleBias);\n                    effect.setMatrix(\"bumpMatrix\", texture.getTextureMatrix());\n                    effect.setTexture(\"bumpSampler\", texture);\n                    effect.setFloat2(\"vTangentSpaceParams\", material.invertNormalMapX ? -1.0 : 1.0, material.invertNormalMapY ? -1.0 : 1.0);\n                }\n                // Reflectivity\n                if (this._enableReflectivity) {\n                    // for PBR materials: cf. https://doc.babylonjs.com/features/featuresDeepDive/materials/using/masterPBR\n                    if (material.getClassName() === \"PBRMetallicRoughnessMaterial\") {\n                        // if it is a PBR material in MetallicRoughness Mode:\n                        if (material.metallicRoughnessTexture !== null) {\n                            effect.setTexture(\"reflectivitySampler\", material.metallicRoughnessTexture);\n                            effect.setMatrix(\"reflectivityMatrix\", material.metallicRoughnessTexture.getTextureMatrix());\n                        }\n                        if (material.metallic !== null) {\n                            effect.setFloat(\"metallic\", material.metallic);\n                        }\n                        if (material.roughness !== null) {\n                            effect.setFloat(\"glossiness\", 1.0 - material.roughness);\n                        }\n                        if (material.baseTexture !== null) {\n                            effect.setTexture(\"albedoSampler\", material.baseTexture);\n                            effect.setMatrix(\"albedoMatrix\", material.baseTexture.getTextureMatrix());\n                        }\n                        if (material.baseColor !== null) {\n                            effect.setColor3(\"albedoColor\", material.baseColor);\n                        }\n                    }\n                    else if (material.getClassName() === \"PBRSpecularGlossinessMaterial\") {\n                        // if it is a PBR material in Specular/Glossiness Mode:\n                        if (material.specularGlossinessTexture !== null) {\n                            effect.setTexture(\"reflectivitySampler\", material.specularGlossinessTexture);\n                            effect.setMatrix(\"reflectivityMatrix\", material.specularGlossinessTexture.getTextureMatrix());\n                        }\n                        else {\n                            if (material.specularColor !== null) {\n                                effect.setColor3(\"reflectivityColor\", material.specularColor);\n                            }\n                        }\n                        if (material.glossiness !== null) {\n                            effect.setFloat(\"glossiness\", material.glossiness);\n                        }\n                    }\n                    else if (material.getClassName() === \"PBRMaterial\") {\n                        // if it is the bigger PBRMaterial\n                        if (material.metallicTexture !== null) {\n                            effect.setTexture(\"reflectivitySampler\", material.metallicTexture);\n                            effect.setMatrix(\"reflectivityMatrix\", material.metallicTexture.getTextureMatrix());\n                        }\n                        if (material.metallic !== null) {\n                            effect.setFloat(\"metallic\", material.metallic);\n                        }\n                        if (material.roughness !== null) {\n                            effect.setFloat(\"glossiness\", 1.0 - material.roughness);\n                        }\n                        if (material.roughness !== null || material.metallic !== null || material.metallicTexture !== null) {\n                            // MetallicRoughness Model\n                            if (material.albedoTexture !== null) {\n                                effect.setTexture(\"albedoSampler\", material.albedoTexture);\n                                effect.setMatrix(\"albedoMatrix\", material.albedoTexture.getTextureMatrix());\n                            }\n                            if (material.albedoColor !== null) {\n                                effect.setColor3(\"albedoColor\", material.albedoColor);\n                            }\n                        }\n                        else {\n                            // SpecularGlossiness Model\n                            if (material.reflectivityTexture !== null) {\n                                effect.setTexture(\"reflectivitySampler\", material.reflectivityTexture);\n                                effect.setMatrix(\"reflectivityMatrix\", material.reflectivityTexture.getTextureMatrix());\n                            }\n                            else if (material.reflectivityColor !== null) {\n                                effect.setColor3(\"reflectivityColor\", material.reflectivityColor);\n                            }\n                            if (material.microSurface !== null) {\n                                effect.setFloat(\"glossiness\", material.microSurface);\n                            }\n                        }\n                    }\n                    else if (material.getClassName() === \"StandardMaterial\") {\n                        // if StandardMaterial:\n                        if (material.specularTexture !== null) {\n                            effect.setTexture(\"reflectivitySampler\", material.specularTexture);\n                            effect.setMatrix(\"reflectivityMatrix\", material.specularTexture.getTextureMatrix());\n                        }\n                        if (material.specularColor !== null) {\n                            effect.setColor3(\"reflectivityColor\", material.specularColor);\n                        }\n                    }\n                }\n                // Clip plane\n                BindClipPlane(effect, material, this._scene);\n                // Bones\n                if (renderingMesh.useBones && renderingMesh.computeBonesUsingShaders && renderingMesh.skeleton) {\n                    const skeleton = renderingMesh.skeleton;\n                    if (skeleton.isUsingTextureForMatrices && effect.getUniformIndex(\"boneTextureWidth\") > -1) {\n                        const boneTexture = skeleton.getTransformMatrixTexture(renderingMesh);\n                        effect.setTexture(\"boneSampler\", boneTexture);\n                        effect.setFloat(\"boneTextureWidth\", 4.0 * (skeleton.bones.length + 1));\n                    }\n                    else {\n                        effect.setMatrices(\"mBones\", renderingMesh.skeleton.getTransformMatrices(renderingMesh));\n                    }\n                    if (this._enableVelocity || this._enableVelocityLinear) {\n                        effect.setMatrices(\"mPreviousBones\", this._previousBonesTransformationMatrices[renderingMesh.uniqueId]);\n                    }\n                }\n                // Morph targets\n                BindMorphTargetParameters(renderingMesh, effect);\n                if (renderingMesh.morphTargetManager && renderingMesh.morphTargetManager.isUsingTextureForTargets) {\n                    renderingMesh.morphTargetManager._bind(effect);\n                }\n                // Velocity\n                if (this._enableVelocity || this._enableVelocityLinear) {\n                    effect.setMatrix(\"previousWorld\", this._previousTransformationMatrices[effectiveMesh.uniqueId].world);\n                    effect.setMatrix(\"previousViewProjection\", this._previousTransformationMatrices[effectiveMesh.uniqueId].viewProjection);\n                }\n                if (hardwareInstancedRendering && renderingMesh.hasThinInstances) {\n                    effect.setMatrix(\"world\", world);\n                }\n                // Draw\n                renderingMesh._processRendering(effectiveMesh, subMesh, effect, material.fillMode, batch, hardwareInstancedRendering, (isInstance, w) => {\n                    if (!isInstance) {\n                        effect.setMatrix(\"world\", w);\n                    }\n                });\n            }\n            // Velocity\n            if (this._enableVelocity || this._enableVelocityLinear) {\n                this._previousTransformationMatrices[effectiveMesh.uniqueId].world = world.clone();\n                this._previousTransformationMatrices[effectiveMesh.uniqueId].viewProjection = this._scene.getTransformMatrix().clone();\n                if (renderingMesh.skeleton) {\n                    this._copyBonesTransformationMatrices(renderingMesh.skeleton.getTransformMatrices(renderingMesh), this._previousBonesTransformationMatrices[effectiveMesh.uniqueId]);\n                }\n            }\n        };\n        this._multiRenderTarget.customIsReadyFunction = (mesh, refreshRate, preWarm) => {\n            if ((preWarm || refreshRate === 0) && mesh.subMeshes) {\n                for (let i = 0; i < mesh.subMeshes.length; ++i) {\n                    const subMesh = mesh.subMeshes[i];\n                    const material = subMesh.getMaterial();\n                    const renderingMesh = subMesh.getRenderingMesh();\n                    if (!material) {\n                        continue;\n                    }\n                    const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\n                    const hardwareInstancedRendering = engine.getCaps().instancedArrays && (batch.visibleInstances[subMesh._id] !== null || renderingMesh.hasThinInstances);\n                    if (!this.isReady(subMesh, hardwareInstancedRendering)) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        };\n        this._multiRenderTarget.customRenderFunction = (opaqueSubMeshes, alphaTestSubMeshes, transparentSubMeshes, depthOnlySubMeshes) => {\n            let index;\n            if (this._linkedWithPrePass) {\n                if (!this._prePassRenderer.enabled) {\n                    return;\n                }\n                this._scene.getEngine().bindAttachments(this._attachmentsFromPrePass);\n            }\n            if (depthOnlySubMeshes.length) {\n                engine.setColorWrite(false);\n                for (index = 0; index < depthOnlySubMeshes.length; index++) {\n                    renderSubMesh(depthOnlySubMeshes.data[index]);\n                }\n                engine.setColorWrite(true);\n            }\n            for (index = 0; index < opaqueSubMeshes.length; index++) {\n                renderSubMesh(opaqueSubMeshes.data[index]);\n            }\n            engine.setDepthWrite(false);\n            for (index = 0; index < alphaTestSubMeshes.length; index++) {\n                renderSubMesh(alphaTestSubMeshes.data[index]);\n            }\n            if (this.renderTransparentMeshes) {\n                for (index = 0; index < transparentSubMeshes.length; index++) {\n                    renderSubMesh(transparentSubMeshes.data[index]);\n                }\n            }\n            engine.setDepthWrite(true);\n        };\n    }\n    // Copies the bones transformation matrices into the target array and returns the target's reference\n    _copyBonesTransformationMatrices(source, target) {\n        for (let i = 0; i < source.length; i++) {\n            target[i] = source[i];\n        }\n        return target;\n    }\n}\n/**\n * Force all the standard materials to compile to glsl even on WebGPU engines.\n * False by default. This is mostly meant for backward compatibility.\n */\nGeometryBufferRenderer.ForceGLSL = false;\n/**\n * Constant used to retrieve the depth texture index in the G-Buffer textures array\n * using getIndex(GeometryBufferRenderer.DEPTH_TEXTURE_INDEX)\n */\nGeometryBufferRenderer.DEPTH_TEXTURE_TYPE = 0;\n/**\n * Constant used to retrieve the normal texture index in the G-Buffer textures array\n * using getIndex(GeometryBufferRenderer.NORMAL_TEXTURE_INDEX)\n */\nGeometryBufferRenderer.NORMAL_TEXTURE_TYPE = 1;\n/**\n * Constant used to retrieve the position texture index in the G-Buffer textures array\n * using getIndex(GeometryBufferRenderer.POSITION_TEXTURE_INDEX)\n */\nGeometryBufferRenderer.POSITION_TEXTURE_TYPE = 2;\n/**\n * Constant used to retrieve the velocity texture index in the G-Buffer textures array\n * using getIndex(GeometryBufferRenderer.VELOCITY_TEXTURE_INDEX)\n */\nGeometryBufferRenderer.VELOCITY_TEXTURE_TYPE = 3;\n/**\n * Constant used to retrieve the reflectivity texture index in the G-Buffer textures array\n * using the getIndex(GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE)\n */\nGeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE = 4;\n/**\n * Constant used to retrieve the screen-space depth texture index in the G-Buffer textures array\n * using getIndex(GeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE)\n */\nGeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE = 5;\n/**\n * Constant used to retrieve the linear velocity texture index in the G-Buffer textures array\n * using getIndex(GeometryBufferRenderer.VELOCITY_LINEAR_TEXTURE_TYPE)\n */\nGeometryBufferRenderer.VELOCITY_LINEAR_TEXTURE_TYPE = 6;\n/**\n * @internal\n */\nGeometryBufferRenderer._SceneComponentInitialization = (_) => {\n    throw _WarnImport(\"GeometryBufferRendererSceneComponent\");\n};\n//# sourceMappingURL=geometryBufferRenderer.js.map","import { Constants } from \"../../Engines/constants\";\nimport { Matrix, Vector4 } from \"../../Maths/math.vector\";\nimport { PostProcess } from \"../../PostProcesses/postProcess\";\nimport { GeometryBufferRenderer } from \"../../Rendering/geometryBufferRenderer\";\nimport { ProceduralTexture } from \"core/Materials/Textures/Procedurals/proceduralTexture\";\nimport { Logger } from \"../../Misc/logger\";\n/**\n * Build cdf maps for IBL importance sampling during IBL shadow computation.\n * This should not be instantiated directly, as it is part of a scene component\n * @internal\n */\nexport class _IblShadowsVoxelTracingPass {\n    /**\n     * The opacity of the shadow cast from the voxel grid\n     */\n    get voxelShadowOpacity() {\n        return this._voxelShadowOpacity;\n    }\n    /**\n     * The opacity of the shadow cast from the voxel grid\n     */\n    set voxelShadowOpacity(value) {\n        this._voxelShadowOpacity = value;\n    }\n    /**\n     * The opacity of the screen-space shadow\n     */\n    get ssShadowOpacity() {\n        return this._ssShadowOpacity;\n    }\n    /**\n     * The opacity of the screen-space shadow\n     */\n    set ssShadowOpacity(value) {\n        this._ssShadowOpacity = value;\n    }\n    /**\n     * The number of samples used in the screen space shadow pass.\n     */\n    get sssSamples() {\n        return this._sssSamples;\n    }\n    /**\n     * The number of samples used in the screen space shadow pass.\n     */\n    set sssSamples(value) {\n        this._sssSamples = value;\n    }\n    /**\n     * The stride used in the screen space shadow pass. This controls the distance between samples.\n     */\n    get sssStride() {\n        return this._sssStride;\n    }\n    /**\n     * The stride used in the screen space shadow pass. This controls the distance between samples.\n     */\n    set sssStride(value) {\n        this._sssStride = value;\n    }\n    /**\n     * The maximum distance that the screen-space shadow will be able to occlude.\n     */\n    get sssMaxDist() {\n        return this._sssMaxDist;\n    }\n    /**\n     * The maximum distance that the screen-space shadow will be able to occlude.\n     */\n    set sssMaxDist(value) {\n        this._sssMaxDist = value;\n    }\n    /**\n     * The thickness of the screen-space shadow\n     */\n    get sssThickness() {\n        return this._sssThickness;\n    }\n    /**\n     * The thickness of the screen-space shadow\n     */\n    set sssThickness(value) {\n        this._sssThickness = value;\n    }\n    /**\n     * The bias to apply to the voxel sampling in the direction of the surface normal of the geometry.\n     */\n    get voxelNormalBias() {\n        return this._voxelNormalBias;\n    }\n    set voxelNormalBias(value) {\n        this._voxelNormalBias = value;\n    }\n    /**\n     * The bias to apply to the voxel sampling in the direction of the light.\n     */\n    get voxelDirectionBias() {\n        return this._voxelDirectionBias;\n    }\n    set voxelDirectionBias(value) {\n        this._voxelDirectionBias = value;\n    }\n    /**\n     * The number of directions to sample for the voxel tracing.\n     */\n    get sampleDirections() {\n        return this._sampleDirections;\n    }\n    /**\n     * The number of directions to sample for the voxel tracing.\n     */\n    set sampleDirections(value) {\n        this._sampleDirections = value;\n    }\n    /**\n     * The current rotation of the environment map, in radians.\n     */\n    get envRotation() {\n        return this._envRotation;\n    }\n    /**\n     * The current rotation of the environment map, in radians.\n     */\n    set envRotation(value) {\n        this._envRotation = value;\n    }\n    /**\n     * Returns the output texture of the pass.\n     * @returns The output texture.\n     */\n    getOutputTexture() {\n        return this._outputTexture;\n    }\n    /**\n     * Gets the debug pass post process. This will create the resources for the pass\n     * if they don't already exist.\n     * @returns The post process\n     */\n    getDebugPassPP() {\n        if (!this._debugPassPP) {\n            this._createDebugPass();\n        }\n        return this._debugPassPP;\n    }\n    /**\n     * The name of the debug pass\n     */\n    get debugPassName() {\n        return this._debugPassName;\n    }\n    /**\n     * Set the matrix to use for scaling the world space to voxel space\n     * @param matrix The matrix to use for scaling the world space to voxel space\n     */\n    setWorldScaleMatrix(matrix) {\n        this._invWorldScaleMatrix = matrix;\n    }\n    /**\n     * Render the shadows in color rather than black and white.\n     * This is slightly more expensive than black and white shadows but can be much\n     * more accurate when the strongest lights in the IBL are non-white.\n     */\n    set coloredShadows(value) {\n        this._coloredShadows = value;\n    }\n    get coloredShadows() {\n        return this._coloredShadows;\n    }\n    /**\n     * Sets params that control the position and scaling of the debug display on the screen.\n     * @param x Screen X offset of the debug display (0-1)\n     * @param y Screen Y offset of the debug display (0-1)\n     * @param widthScale X scale of the debug display (0-1)\n     * @param heightScale Y scale of the debug display (0-1)\n     */\n    setDebugDisplayParams(x, y, widthScale, heightScale) {\n        this._debugSizeParams.set(x, y, widthScale, heightScale);\n    }\n    /**\n     * Creates the debug post process effect for this pass\n     */\n    _createDebugPass() {\n        const isWebGPU = this._engine.isWebGPU;\n        if (!this._debugPassPP) {\n            const debugOptions = {\n                width: this._engine.getRenderWidth(),\n                height: this._engine.getRenderHeight(),\n                uniforms: [\"sizeParams\"],\n                samplers: [\"debugSampler\"],\n                engine: this._engine,\n                reusable: true,\n                shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n                extraInitializations: (useWebGPU, list) => {\n                    if (useWebGPU) {\n                        list.push(import(\"../../ShadersWGSL/iblShadowDebug.fragment\"));\n                    }\n                    else {\n                        list.push(import(\"../../Shaders/iblShadowDebug.fragment\"));\n                    }\n                },\n            };\n            this._debugPassPP = new PostProcess(this.debugPassName, \"iblShadowDebug\", debugOptions);\n            this._debugPassPP.autoClear = false;\n            this._debugPassPP.onApplyObservable.add((effect) => {\n                // update the caustic texture with what we just rendered.\n                effect.setTexture(\"debugSampler\", this._outputTexture);\n                effect.setVector4(\"sizeParams\", this._debugSizeParams);\n            });\n        }\n    }\n    /**\n     * Instantiates the shadow voxel-tracing pass\n     * @param scene Scene to attach to\n     * @param iblShadowsRenderPipeline The IBL shadows render pipeline\n     * @returns The shadow voxel-tracing pass\n     */\n    constructor(scene, iblShadowsRenderPipeline) {\n        this._voxelShadowOpacity = 1.0;\n        this._sssSamples = 16;\n        this._sssStride = 8;\n        this._sssMaxDist = 0.05;\n        this._sssThickness = 0.5;\n        this._ssShadowOpacity = 1.0;\n        this._cameraInvView = Matrix.Identity();\n        this._cameraInvProj = Matrix.Identity();\n        this._invWorldScaleMatrix = Matrix.Identity();\n        this._frameId = 0;\n        this._sampleDirections = 4;\n        this._shadowParameters = new Vector4(0.0, 0.0, 0.0, 0.0);\n        this._sssParameters = new Vector4(0.0, 0.0, 0.0, 0.0);\n        this._opacityParameters = new Vector4(0.0, 0.0, 0.0, 0.0);\n        this._voxelBiasParameters = new Vector4(0.0, 0.0, 0.0, 0.0);\n        this._voxelNormalBias = 1.4;\n        this._voxelDirectionBias = 1.75;\n        /**\n         * Is the effect enabled\n         */\n        this.enabled = true;\n        /** Enable the debug view for this pass */\n        this.debugEnabled = false;\n        this._debugPassName = \"Voxel Tracing Debug Pass\";\n        /** The default rotation of the environment map will align the shadows with the default lighting orientation */\n        this._envRotation = 0.0;\n        this._coloredShadows = false;\n        this._debugVoxelMarchEnabled = false;\n        this._debugSizeParams = new Vector4(0.0, 0.0, 0.0, 0.0);\n        this._renderWhenGBufferReady = null;\n        this._scene = scene;\n        this._engine = scene.getEngine();\n        this._renderPipeline = iblShadowsRenderPipeline;\n        this._createTextures();\n    }\n    _createTextures() {\n        const defines = this._createDefines();\n        const isWebGPU = this._engine.isWebGPU;\n        const textureOptions = {\n            type: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n            format: Constants.TEXTUREFORMAT_RGBA,\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            generateDepthBuffer: false,\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await Promise.all([import(\"../../ShadersWGSL/iblShadowVoxelTracing.fragment\")]);\n                }\n                else {\n                    await Promise.all([import(\"../../Shaders/iblShadowVoxelTracing.fragment\")]);\n                }\n            },\n        };\n        this._outputTexture = new ProceduralTexture(\"voxelTracingPass\", {\n            width: this._engine.getRenderWidth(),\n            height: this._engine.getRenderHeight(),\n        }, \"iblShadowVoxelTracing\", this._scene, textureOptions);\n        this._outputTexture.refreshRate = -1;\n        this._outputTexture.autoClear = false;\n        this._outputTexture.defines = defines;\n        // Need to set all the textures first so that the effect gets created with the proper uniforms.\n        this._setBindings(this._scene.activeCamera);\n        this._renderWhenGBufferReady = this._render.bind(this);\n        // Don't start rendering until the first vozelization is done.\n        this._renderPipeline.onVoxelizationCompleteObservable.addOnce(() => {\n            this._scene.geometryBufferRenderer.getGBuffer().onAfterRenderObservable.add(this._renderWhenGBufferReady);\n        });\n    }\n    _createDefines() {\n        let defines = \"\";\n        if (this._scene.useRightHandedSystem) {\n            defines += \"#define RIGHT_HANDED\\n\";\n        }\n        if (this._debugVoxelMarchEnabled) {\n            defines += \"#define VOXEL_MARCH_DIAGNOSTIC_INFO_OPTION 1u\\n\";\n        }\n        if (this._coloredShadows) {\n            defines += \"#define COLOR_SHADOWS 1u\\n\";\n        }\n        return defines;\n    }\n    _setBindings(camera) {\n        this._outputTexture.defines = this._createDefines();\n        this._outputTexture.setMatrix(\"viewMtx\", camera.getViewMatrix());\n        this._outputTexture.setMatrix(\"projMtx\", camera.getProjectionMatrix());\n        camera.getProjectionMatrix().invertToRef(this._cameraInvProj);\n        camera.getViewMatrix().invertToRef(this._cameraInvView);\n        this._outputTexture.setMatrix(\"invProjMtx\", this._cameraInvProj);\n        this._outputTexture.setMatrix(\"invViewMtx\", this._cameraInvView);\n        this._outputTexture.setMatrix(\"wsNormalizationMtx\", this._invWorldScaleMatrix);\n        this._frameId++;\n        let rotation = 0.0;\n        if (this._scene.environmentTexture) {\n            rotation = this._scene.environmentTexture.rotationY ?? 0;\n        }\n        rotation = this._scene.useRightHandedSystem ? -(rotation + 0.5 * Math.PI) : rotation - 0.5 * Math.PI;\n        rotation = rotation % (2.0 * Math.PI);\n        this._shadowParameters.set(this._sampleDirections, this._frameId, 1.0, rotation);\n        this._outputTexture.setVector4(\"shadowParameters\", this._shadowParameters);\n        const voxelGrid = this._renderPipeline._getVoxelGridTexture();\n        const highestMip = Math.floor(Math.log2(voxelGrid.getSize().width));\n        this._voxelBiasParameters.set(this._voxelNormalBias, this._voxelDirectionBias, highestMip, 0.0);\n        this._outputTexture.setVector4(\"voxelBiasParameters\", this._voxelBiasParameters);\n        // SSS Options.\n        this._sssParameters.set(this._sssSamples, this._sssStride, this._sssMaxDist, this._sssThickness);\n        this._outputTexture.setVector4(\"sssParameters\", this._sssParameters);\n        this._opacityParameters.set(this._voxelShadowOpacity, this._ssShadowOpacity, 0.0, 0.0);\n        this._outputTexture.setVector4(\"shadowOpacity\", this._opacityParameters);\n        this._outputTexture.setTexture(\"voxelGridSampler\", voxelGrid);\n        this._outputTexture.setTexture(\"blueNoiseSampler\", this._renderPipeline._getNoiseTexture());\n        const cdfGenerator = this._scene.iblCdfGenerator;\n        if (!cdfGenerator) {\n            Logger.Warn(\"IBLShadowsVoxelTracingPass: Can't bind for render because iblCdfGenerator is not enabled.\");\n            return false;\n        }\n        this._outputTexture.setTexture(\"icdfSampler\", cdfGenerator.getIcdfTexture());\n        if (this._coloredShadows && this._scene.environmentTexture) {\n            this._outputTexture.setTexture(\"iblSampler\", this._scene.environmentTexture);\n        }\n        const geometryBufferRenderer = this._scene.geometryBufferRenderer;\n        if (!geometryBufferRenderer) {\n            Logger.Warn(\"IBLShadowsVoxelTracingPass: Can't bind for render because GeometryBufferRenderer is not enabled.\");\n            return false;\n        }\n        const depthIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE);\n        this._outputTexture.setTexture(\"depthSampler\", geometryBufferRenderer.getGBuffer().textures[depthIndex]);\n        const wnormalIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.NORMAL_TEXTURE_TYPE);\n        this._outputTexture.setTexture(\"worldNormalSampler\", geometryBufferRenderer.getGBuffer().textures[wnormalIndex]);\n        return true;\n    }\n    _render() {\n        if (this.enabled && this._outputTexture.isReady() && this._outputTexture.getEffect()?.isReady()) {\n            if (this._setBindings(this._scene.activeCamera)) {\n                this._outputTexture.render();\n            }\n        }\n    }\n    /**\n     * Called by render pipeline when canvas resized.\n     * @param scaleFactor The factor by which to scale the canvas size.\n     */\n    resize(scaleFactor = 1.0) {\n        const newSize = {\n            width: Math.max(1.0, Math.floor(this._engine.getRenderWidth() * scaleFactor)),\n            height: Math.max(1.0, Math.floor(this._engine.getRenderHeight() * scaleFactor)),\n        };\n        // Don't resize if the size is the same as the current size.\n        if (this._outputTexture.getSize().width === newSize.width && this._outputTexture.getSize().height === newSize.height) {\n            return;\n        }\n        this._outputTexture.resize(newSize, false);\n    }\n    /**\n     * Checks if the pass is ready\n     * @returns true if the pass is ready\n     */\n    isReady() {\n        return (this._outputTexture.isReady() &&\n            !(this._debugPassPP && !this._debugPassPP.isReady()) &&\n            this._scene.iblCdfGenerator &&\n            this._scene.iblCdfGenerator.getIcdfTexture().isReady() &&\n            this._renderPipeline._getVoxelGridTexture().isReady());\n    }\n    /**\n     * Disposes the associated resources\n     */\n    dispose() {\n        if (this._scene.geometryBufferRenderer && this._renderWhenGBufferReady) {\n            const gBuffer = this._scene.geometryBufferRenderer.getGBuffer();\n            gBuffer.onAfterRenderObservable.removeCallback(this._renderWhenGBufferReady);\n        }\n        this._outputTexture.dispose();\n        if (this._debugPassPP) {\n            this._debugPassPP.dispose();\n        }\n    }\n}\n//# sourceMappingURL=iblShadowsVoxelTracingPass.js.map","import { Constants } from \"../../Engines/constants\";\nimport { Vector4 } from \"../../Maths/math.vector\";\nimport { PostProcess } from \"../../PostProcesses/postProcess\";\nimport { GeometryBufferRenderer } from \"../../Rendering/geometryBufferRenderer\";\nimport { ProceduralTexture } from \"core/Materials/Textures/Procedurals/proceduralTexture\";\n/**\n * This should not be instanciated directly, as it is part of a scene component\n * @internal\n */\nexport class _IblShadowsSpatialBlurPass {\n    /**\n     * Returns the output texture of the pass.\n     * @returns The output texture.\n     */\n    getOutputTexture() {\n        return this._outputTexture;\n    }\n    /**\n     * Gets the debug pass post process\n     * @returns The post process\n     */\n    getDebugPassPP() {\n        if (!this._debugPassPP) {\n            this._createDebugPass();\n        }\n        return this._debugPassPP;\n    }\n    /**\n     * Sets the name of the debug pass\n     */\n    get debugPassName() {\n        return this._debugPassName;\n    }\n    /**\n     * The scale of the voxel grid in world space. This is used to scale the blur radius in world space.\n     * @param scale The scale of the voxel grid in world space.\n     */\n    setWorldScale(scale) {\n        this._worldScale = scale;\n    }\n    /**\n     * Sets params that control the position and scaling of the debug display on the screen.\n     * @param x Screen X offset of the debug display (0-1)\n     * @param y Screen Y offset of the debug display (0-1)\n     * @param widthScale X scale of the debug display (0-1)\n     * @param heightScale Y scale of the debug display (0-1)\n     */\n    setDebugDisplayParams(x, y, widthScale, heightScale) {\n        this._debugSizeParams.set(x, y, widthScale, heightScale);\n    }\n    /**\n     * Creates the debug post process effect for this pass\n     */\n    _createDebugPass() {\n        if (!this._debugPassPP) {\n            const isWebGPU = this._engine.isWebGPU;\n            const debugOptions = {\n                width: this._engine.getRenderWidth(),\n                height: this._engine.getRenderHeight(),\n                textureFormat: Constants.TEXTUREFORMAT_RGBA,\n                textureType: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n                samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n                uniforms: [\"sizeParams\"],\n                samplers: [\"debugSampler\"],\n                engine: this._engine,\n                reusable: false,\n                shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n                extraInitializations: (useWebGPU, list) => {\n                    if (useWebGPU) {\n                        list.push(import(\"../../ShadersWGSL/iblShadowDebug.fragment\"));\n                    }\n                    else {\n                        list.push(import(\"../../Shaders/iblShadowDebug.fragment\"));\n                    }\n                },\n            };\n            this._debugPassPP = new PostProcess(this.debugPassName, \"iblShadowDebug\", debugOptions);\n            this._debugPassPP.autoClear = false;\n            this._debugPassPP.onApplyObservable.add((effect) => {\n                // update the caustic texture with what we just rendered.\n                effect.setTexture(\"debugSampler\", this._outputTexture);\n                effect.setVector4(\"sizeParams\", this._debugSizeParams);\n            });\n        }\n    }\n    /**\n     * Instanciates the importance sampling renderer\n     * @param scene Scene to attach to\n     * @param iblShadowsRenderPipeline The IBL shadows render pipeline\n     * @returns The importance sampling renderer\n     */\n    constructor(scene, iblShadowsRenderPipeline) {\n        this._worldScale = 1.0;\n        this._blurParameters = new Vector4(0.0, 0.0, 0.0, 0.0);\n        /**\n         * Is the effect enabled\n         */\n        this.enabled = true;\n        this._debugPassName = \"Spatial Blur Debug Pass\";\n        /** Enable the debug view for this pass */\n        this.debugEnabled = false;\n        this._debugSizeParams = new Vector4(0.0, 0.0, 0.0, 0.0);\n        this._renderWhenGBufferReady = null;\n        this._scene = scene;\n        this._engine = scene.getEngine();\n        this._renderPipeline = iblShadowsRenderPipeline;\n        this._createTextures();\n    }\n    _createTextures() {\n        const isWebGPU = this._engine.isWebGPU;\n        const textureOptions = {\n            type: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n            format: Constants.TEXTUREFORMAT_RGBA,\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            generateDepthBuffer: false,\n            generateMipMaps: false,\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await Promise.all([import(\"../../ShadersWGSL/iblShadowSpatialBlur.fragment\")]);\n                }\n                else {\n                    await Promise.all([import(\"../../Shaders/iblShadowSpatialBlur.fragment\")]);\n                }\n            },\n        };\n        this._outputTexture = new ProceduralTexture(\"spatialBlurPass\", {\n            width: this._engine.getRenderWidth(),\n            height: this._engine.getRenderHeight(),\n        }, \"iblShadowSpatialBlur\", this._scene, textureOptions, false, false, Constants.TEXTURETYPE_UNSIGNED_BYTE);\n        this._outputTexture.refreshRate = -1;\n        this._outputTexture.autoClear = false;\n        // Need to set all the textures first so that the effect gets created with the proper uniforms.\n        this._setBindings();\n        this._renderWhenGBufferReady = this._render.bind(this);\n        // Don't start rendering until the first vozelization is done.\n        this._renderPipeline.onVoxelizationCompleteObservable.addOnce(() => {\n            this._scene.geometryBufferRenderer.getGBuffer().onAfterRenderObservable.add(this._renderWhenGBufferReady);\n        });\n    }\n    _setBindings() {\n        this._outputTexture.setTexture(\"voxelTracingSampler\", this._renderPipeline._getVoxelTracingTexture());\n        const iterationCount = 1;\n        this._blurParameters.set(iterationCount, this._worldScale, 0.0, 0.0);\n        this._outputTexture.setVector4(\"blurParameters\", this._blurParameters);\n        const geometryBufferRenderer = this._scene.geometryBufferRenderer;\n        if (!geometryBufferRenderer) {\n            return false;\n        }\n        const depthIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE);\n        this._outputTexture.setTexture(\"depthSampler\", geometryBufferRenderer.getGBuffer().textures[depthIndex]);\n        const wnormalIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.NORMAL_TEXTURE_TYPE);\n        this._outputTexture.setTexture(\"worldNormalSampler\", geometryBufferRenderer.getGBuffer().textures[wnormalIndex]);\n        return true;\n    }\n    _render() {\n        if (this.enabled && this._outputTexture.isReady() && this._outputTexture.getEffect()?.isReady()) {\n            if (this._setBindings()) {\n                this._outputTexture.render();\n            }\n        }\n    }\n    /**\n     * Called by render pipeline when canvas resized.\n     * @param scaleFactor The factor by which to scale the canvas size.\n     */\n    resize(scaleFactor = 1.0) {\n        const newSize = {\n            width: Math.max(1.0, Math.floor(this._engine.getRenderWidth() * scaleFactor)),\n            height: Math.max(1.0, Math.floor(this._engine.getRenderHeight() * scaleFactor)),\n        };\n        // Don't resize if the size is the same as the current size.\n        if (this._outputTexture.getSize().width === newSize.width && this._outputTexture.getSize().height === newSize.height) {\n            return;\n        }\n        this._outputTexture.resize(newSize, false);\n    }\n    /**\n     * Checks if the pass is ready\n     * @returns true if the pass is ready\n     */\n    isReady() {\n        return this._outputTexture.isReady() && !(this._debugPassPP && !this._debugPassPP.isReady());\n    }\n    /**\n     * Disposes the associated resources\n     */\n    dispose() {\n        if (this._scene.geometryBufferRenderer && this._renderWhenGBufferReady) {\n            const gBuffer = this._scene.geometryBufferRenderer.getGBuffer();\n            gBuffer.onAfterRenderObservable.removeCallback(this._renderWhenGBufferReady);\n        }\n        this._outputTexture.dispose();\n        if (this._debugPassPP) {\n            this._debugPassPP.dispose();\n        }\n    }\n}\n//# sourceMappingURL=iblShadowsSpatialBlurPass.js.map","import { Constants } from \"../../Engines/constants\";\nimport { Vector4 } from \"../../Maths/math.vector\";\nimport { PostProcess } from \"../../PostProcesses/postProcess\";\nimport { GeometryBufferRenderer } from \"../../Rendering/geometryBufferRenderer\";\nimport { ProceduralTexture } from \"core/Materials/Textures/Procedurals/proceduralTexture\";\nimport { Observable } from \"../../Misc/observable\";\n/**\n * This should not be instantiated directly, as it is part of a scene component\n * @internal\n */\nexport class _IblShadowsAccumulationPass {\n    /**\n     * Returns the output texture of the pass.\n     * @returns The output texture.\n     */\n    getOutputTexture() {\n        return this._outputTexture;\n    }\n    /**\n     * Gets the debug pass post process\n     * @returns The post process\n     */\n    getDebugPassPP() {\n        if (!this._debugPassPP) {\n            this._createDebugPass();\n        }\n        return this._debugPassPP;\n    }\n    /**\n     * Gets the name of the debug pass\n     * @returns The name of the debug pass\n     */\n    get debugPassName() {\n        return this._debugPassName;\n    }\n    /**\n     * A value that controls how much of the previous frame's accumulation to keep.\n     * The higher the value, the faster the shadows accumulate but the more potential ghosting you'll see.\n     */\n    get remanence() {\n        return this._remanence;\n    }\n    /**\n     * A value that controls how much of the previous frame's accumulation to keep.\n     * The higher the value, the faster the shadows accumulate but the more potential ghosting you'll see.\n     */\n    set remanence(value) {\n        this._remanence = value;\n    }\n    /**\n     * Reset the accumulation.\n     */\n    get reset() {\n        return this._reset;\n    }\n    /**\n     * Reset the accumulation.\n     */\n    set reset(value) {\n        this._reset = value;\n    }\n    /**\n     * Tell the pass that the camera is moving. This will cause the accumulation\n     * rate to change.\n     */\n    set isMoving(value) {\n        this._isMoving = value;\n    }\n    /**\n     * Sets params that control the position and scaling of the debug display on the screen.\n     * @param x Screen X offset of the debug display (0-1)\n     * @param y Screen Y offset of the debug display (0-1)\n     * @param widthScale X scale of the debug display (0-1)\n     * @param heightScale Y scale of the debug display (0-1)\n     */\n    setDebugDisplayParams(x, y, widthScale, heightScale) {\n        this._debugSizeParams.set(x, y, widthScale, heightScale);\n    }\n    /**\n     * Creates the debug post process effect for this pass\n     */\n    _createDebugPass() {\n        if (!this._debugPassPP) {\n            const isWebGPU = this._engine.isWebGPU;\n            const debugOptions = {\n                width: this._engine.getRenderWidth(),\n                height: this._engine.getRenderHeight(),\n                textureFormat: Constants.TEXTUREFORMAT_RGBA,\n                textureType: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n                samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n                uniforms: [\"sizeParams\"],\n                samplers: [\"debugSampler\"],\n                engine: this._engine,\n                reusable: false,\n                shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n                extraInitializations: (useWebGPU, list) => {\n                    if (useWebGPU) {\n                        list.push(import(\"../../ShadersWGSL/iblShadowDebug.fragment\"));\n                    }\n                    else {\n                        list.push(import(\"../../Shaders/iblShadowDebug.fragment\"));\n                    }\n                },\n            };\n            this._debugPassPP = new PostProcess(this.debugPassName, \"iblShadowDebug\", debugOptions);\n            this._debugPassPP.autoClear = false;\n            this._debugPassPP.onApplyObservable.add((effect) => {\n                // update the caustic texture with what we just rendered.\n                effect.setTexture(\"debugSampler\", this._outputTexture);\n                effect.setVector4(\"sizeParams\", this._debugSizeParams);\n            });\n        }\n    }\n    /**\n     * Instantiates the accumulation pass\n     * @param scene Scene to attach to\n     * @param iblShadowsRenderPipeline The IBL shadows render pipeline\n     * @returns The accumulation pass\n     */\n    constructor(scene, iblShadowsRenderPipeline) {\n        this._accumulationParams = new Vector4(0.0, 0.0, 0.0, 0.0);\n        /** Enable the debug view for this pass */\n        this.debugEnabled = false;\n        /**\n         * Is the effect enabled\n         */\n        this.enabled = true;\n        /**\n         * Observable that triggers when the accumulation texture is ready\n         */\n        this.onReadyObservable = new Observable();\n        this._debugPassName = \"Shadow Accumulation Debug Pass\";\n        this._remanence = 0.9;\n        this._reset = true;\n        this._isMoving = false;\n        this._debugSizeParams = new Vector4(0.0, 0.0, 0.0, 0.0);\n        this._renderWhenGBufferReady = null;\n        this._scene = scene;\n        this._engine = scene.getEngine();\n        this._renderPipeline = iblShadowsRenderPipeline;\n        this._createTextures();\n    }\n    _createTextures() {\n        const isWebGPU = this._engine.isWebGPU;\n        const outputTextureOptions = {\n            type: Constants.TEXTURETYPE_HALF_FLOAT,\n            format: Constants.TEXTUREFORMAT_RGBA,\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            generateDepthBuffer: false,\n            generateMipMaps: false,\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await Promise.all([import(\"../../ShadersWGSL/iblShadowAccumulation.fragment\")]);\n                }\n                else {\n                    await Promise.all([import(\"../../Shaders/iblShadowAccumulation.fragment\")]);\n                }\n            },\n        };\n        this._outputTexture = new ProceduralTexture(\"shadowAccumulationPass\", {\n            width: this._engine.getRenderWidth(),\n            height: this._engine.getRenderHeight(),\n        }, \"iblShadowAccumulation\", this._scene, outputTextureOptions);\n        this._outputTexture.refreshRate = 1;\n        this._outputTexture.autoClear = false;\n        this._outputTexture.onGeneratedObservable.addOnce(() => {\n            this.onReadyObservable.notifyObservers();\n        });\n        // Need to set all the textures first so that the effect gets created with the proper uniforms.\n        this._setOutputTextureBindings();\n        this._renderWhenGBufferReady = this._render.bind(this);\n        // Don't start rendering until the first vozelization is done.\n        this._renderPipeline.onVoxelizationCompleteObservable.addOnce(() => {\n            this._scene.geometryBufferRenderer.getGBuffer().onAfterRenderObservable.add(this._renderWhenGBufferReady);\n        });\n        // Create the accumulation texture for the previous frame.\n        // We'll copy the output of the accumulation pass to this texture at the start of every frame.\n        const accumulationOptions = {\n            type: Constants.TEXTURETYPE_HALF_FLOAT,\n            format: Constants.TEXTUREFORMAT_RGBA,\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            generateDepthBuffer: false,\n            generateMipMaps: false,\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await Promise.all([import(\"../../ShadersWGSL/pass.fragment\")]);\n                }\n                else {\n                    await Promise.all([import(\"../../Shaders/pass.fragment\")]);\n                }\n            },\n        };\n        this._oldAccumulationCopy = new ProceduralTexture(\"oldAccumulationRT\", { width: this._engine.getRenderWidth(), height: this._engine.getRenderHeight() }, \"pass\", this._scene, accumulationOptions, false);\n        this._oldAccumulationCopy.autoClear = false;\n        this._oldAccumulationCopy.refreshRate = 1;\n        this._oldAccumulationCopy.onBeforeGenerationObservable.add(this._setAccumulationCopyBindings.bind(this));\n        this._setAccumulationCopyBindings();\n        // Create the local position texture for the previous frame.\n        // We'll copy the previous local position texture to this texture at the start of every frame.\n        const localPositionOptions = {\n            type: Constants.TEXTURETYPE_HALF_FLOAT,\n            format: Constants.TEXTUREFORMAT_RGBA,\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            generateDepthBuffer: false,\n            generateMipMaps: false,\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await Promise.all([import(\"../../ShadersWGSL/pass.fragment\")]);\n                }\n                else {\n                    await Promise.all([import(\"../../Shaders/pass.fragment\")]);\n                }\n            },\n        };\n        this._oldPositionCopy = new ProceduralTexture(\"oldLocalPositionRT\", { width: this._engine.getRenderWidth(), height: this._engine.getRenderHeight() }, \"pass\", this._scene, localPositionOptions, false);\n        this._updatePositionCopy();\n        this._oldPositionCopy.autoClear = false;\n        this._oldPositionCopy.refreshRate = 1;\n        this._oldPositionCopy.onBeforeGenerationObservable.add(this._updatePositionCopy.bind(this));\n    }\n    _setOutputTextureBindings() {\n        const remanence = this._isMoving ? this.remanence : 0.99;\n        this._accumulationParams.set(remanence, this.reset ? 1.0 : 0.0, this._renderPipeline.voxelGridSize, 0.0);\n        this._outputTexture.setTexture(\"spatialBlurSampler\", this._renderPipeline._getSpatialBlurTexture());\n        this._outputTexture.setVector4(\"accumulationParameters\", this._accumulationParams);\n        this._outputTexture.setTexture(\"oldAccumulationSampler\", this._oldAccumulationCopy ? this._oldAccumulationCopy : this._renderPipeline._dummyTexture2d);\n        this._outputTexture.setTexture(\"prevPositionSampler\", this._oldPositionCopy ? this._oldPositionCopy : this._renderPipeline._dummyTexture2d);\n        const geometryBufferRenderer = this._scene.geometryBufferRenderer;\n        if (!geometryBufferRenderer) {\n            return false;\n        }\n        const velocityIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.VELOCITY_LINEAR_TEXTURE_TYPE);\n        this._outputTexture.setTexture(\"motionSampler\", geometryBufferRenderer.getGBuffer().textures[velocityIndex]);\n        const wPositionIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.POSITION_TEXTURE_TYPE);\n        this._outputTexture.setTexture(\"positionSampler\", geometryBufferRenderer.getGBuffer().textures[wPositionIndex]);\n        this.reset = false;\n        this._isMoving = false;\n        return true;\n    }\n    _updatePositionCopy() {\n        const geometryBufferRenderer = this._scene.geometryBufferRenderer;\n        const index = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.POSITION_TEXTURE_TYPE);\n        this._oldPositionCopy.setTexture(\"textureSampler\", geometryBufferRenderer.getGBuffer().textures[index]);\n    }\n    _setAccumulationCopyBindings() {\n        this._oldAccumulationCopy.setTexture(\"textureSampler\", this._outputTexture);\n    }\n    _render() {\n        if (this.enabled && this._outputTexture.isReady() && this._outputTexture.getEffect()?.isReady()) {\n            if (this._setOutputTextureBindings()) {\n                this._outputTexture.render();\n            }\n        }\n    }\n    /**\n     * Called by render pipeline when canvas resized.\n     * @param scaleFactor The factor by which to scale the canvas size.\n     */\n    resize(scaleFactor = 1.0) {\n        const newSize = {\n            width: Math.max(1.0, Math.floor(this._engine.getRenderWidth() * scaleFactor)),\n            height: Math.max(1.0, Math.floor(this._engine.getRenderHeight() * scaleFactor)),\n        };\n        // Don't resize if the size is the same as the current size.\n        if (this._outputTexture.getSize().width === newSize.width && this._outputTexture.getSize().height === newSize.height) {\n            return;\n        }\n        this._outputTexture.resize(newSize, false);\n        this._oldAccumulationCopy.resize(newSize, false);\n        this._oldPositionCopy.resize({ width: this._engine.getRenderWidth(), height: this._engine.getRenderHeight() }, false);\n        this.reset = true;\n    }\n    _disposeTextures() {\n        this._oldAccumulationCopy.dispose();\n        this._oldPositionCopy.dispose();\n        this._outputTexture.dispose();\n    }\n    /**\n     * Checks if the pass is ready\n     * @returns true if the pass is ready\n     */\n    isReady() {\n        return (this._oldAccumulationCopy &&\n            this._oldAccumulationCopy.isReady() &&\n            this._oldPositionCopy &&\n            this._oldPositionCopy.isReady() &&\n            this._outputTexture.isReady() &&\n            !(this._debugPassPP && !this._debugPassPP.isReady()));\n    }\n    /**\n     * Disposes the associated resources\n     */\n    dispose() {\n        if (this._scene.geometryBufferRenderer && this._renderWhenGBufferReady) {\n            const gBuffer = this._scene.geometryBufferRenderer.getGBuffer();\n            gBuffer.onAfterRenderObservable.removeCallback(this._renderWhenGBufferReady);\n        }\n        this._disposeTextures();\n        if (this._debugPassPP) {\n            this._debugPassPP.dispose();\n        }\n        this.onReadyObservable.clear();\n    }\n}\n//# sourceMappingURL=iblShadowsAccumulationPass.js.map","import { __decorate } from \"tslib\";\nimport { Tools } from \"../../Misc/tools\";\nimport { serialize } from \"../../Misc/decorators\";\n/**\n * PostProcessRenderPipeline\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/postProcessRenderPipeline\n */\nexport class PostProcessRenderPipeline {\n    /**\n     * Gets pipeline name\n     */\n    get name() {\n        return this._name;\n    }\n    /** Gets the list of attached cameras */\n    get cameras() {\n        return this._cameras;\n    }\n    /**\n     * Gets the active engine\n     */\n    get engine() {\n        return this._engine;\n    }\n    /**\n     * Initializes a PostProcessRenderPipeline\n     * @param _engine engine to add the pipeline to\n     * @param name name of the pipeline\n     */\n    constructor(_engine, name) {\n        this._engine = _engine;\n        this._name = name;\n        this._renderEffects = {};\n        this._renderEffectsForIsolatedPass = new Array();\n        this._cameras = [];\n    }\n    /**\n     * Gets the class name\n     * @returns \"PostProcessRenderPipeline\"\n     */\n    getClassName() {\n        return \"PostProcessRenderPipeline\";\n    }\n    /**\n     * If all the render effects in the pipeline are supported\n     */\n    get isSupported() {\n        for (const renderEffectName in this._renderEffects) {\n            if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\n                if (!this._renderEffects[renderEffectName].isSupported) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    /**\n     * Adds an effect to the pipeline\n     * @param renderEffect the effect to add\n     */\n    addEffect(renderEffect) {\n        this._renderEffects[renderEffect._name] = renderEffect;\n    }\n    // private\n    /** @internal */\n    _rebuild() { }\n    /**\n     * @internal\n     */\n    _enableEffect(renderEffectName, cameras) {\n        const renderEffects = this._renderEffects[renderEffectName];\n        if (!renderEffects) {\n            return;\n        }\n        renderEffects._enable(Tools.MakeArray(cameras || this._cameras));\n    }\n    /**\n     * @internal\n     */\n    _disableEffect(renderEffectName, cameras) {\n        const renderEffects = this._renderEffects[renderEffectName];\n        if (!renderEffects) {\n            return;\n        }\n        renderEffects._disable(Tools.MakeArray(cameras || this._cameras));\n    }\n    /**\n     * @internal\n     */\n    _attachCameras(cameras, unique) {\n        const cams = Tools.MakeArray(cameras || this._cameras);\n        if (!cams) {\n            return;\n        }\n        const indicesToDelete = [];\n        let i;\n        for (i = 0; i < cams.length; i++) {\n            const camera = cams[i];\n            if (!camera) {\n                continue;\n            }\n            if (this._cameras.indexOf(camera) === -1) {\n                this._cameras.push(camera);\n            }\n            else if (unique) {\n                indicesToDelete.push(i);\n            }\n        }\n        for (i = 0; i < indicesToDelete.length; i++) {\n            cams.splice(indicesToDelete[i], 1);\n        }\n        for (const renderEffectName in this._renderEffects) {\n            if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\n                this._renderEffects[renderEffectName]._attachCameras(cams);\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _detachCameras(cameras) {\n        const cams = Tools.MakeArray(cameras || this._cameras);\n        if (!cams) {\n            return;\n        }\n        for (const renderEffectName in this._renderEffects) {\n            if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\n                this._renderEffects[renderEffectName]._detachCameras(cams);\n            }\n        }\n        for (let i = 0; i < cams.length; i++) {\n            this._cameras.splice(this._cameras.indexOf(cams[i]), 1);\n        }\n    }\n    /** @internal */\n    _update() {\n        for (const renderEffectName in this._renderEffects) {\n            if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\n                this._renderEffects[renderEffectName]._update();\n            }\n        }\n        for (let i = 0; i < this._cameras.length; i++) {\n            if (!this._cameras[i]) {\n                continue;\n            }\n            const cameraName = this._cameras[i].name;\n            if (this._renderEffectsForIsolatedPass[cameraName]) {\n                this._renderEffectsForIsolatedPass[cameraName]._update();\n            }\n        }\n    }\n    /** @internal */\n    _reset() {\n        this._renderEffects = {};\n        this._renderEffectsForIsolatedPass = new Array();\n    }\n    _enableMSAAOnFirstPostProcess(sampleCount) {\n        if (!this._engine._features.supportMSAA) {\n            return false;\n        }\n        // Set samples of the very first post process to 4 to enable native anti-aliasing in browsers that support webGL 2.0 (See: https://github.com/BabylonJS/Babylon.js/issues/3754)\n        const effectKeys = Object.keys(this._renderEffects);\n        if (effectKeys.length > 0) {\n            const postProcesses = this._renderEffects[effectKeys[0]].getPostProcesses();\n            if (postProcesses) {\n                postProcesses[0].samples = sampleCount;\n            }\n        }\n        return true;\n    }\n    /**\n     * Ensures that all post processes in the pipeline are the correct size according to the\n     * the viewport's required size\n     */\n    _adaptPostProcessesToViewPort() {\n        const effectKeys = Object.keys(this._renderEffects);\n        for (const effectKey of effectKeys) {\n            const postProcesses = this._renderEffects[effectKey].getPostProcesses();\n            if (postProcesses) {\n                for (const postProcess of postProcesses) {\n                    postProcess.adaptScaleToCurrentViewport = true;\n                }\n            }\n        }\n    }\n    /**\n     * Sets the required values to the prepass renderer.\n     * @param prePassRenderer defines the prepass renderer to setup.\n     * @returns true if the pre pass is needed.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setPrePassRenderer(prePassRenderer) {\n        // Do Nothing by default\n        return false;\n    }\n    /**\n     * Disposes of the pipeline\n     */\n    dispose() {\n        // Must be implemented by children\n    }\n}\n__decorate([\n    serialize()\n], PostProcessRenderPipeline.prototype, \"_name\", void 0);\n//# sourceMappingURL=postProcessRenderPipeline.js.map","import { Tools } from \"../../Misc/tools\";\n/**\n * This represents a set of one or more post processes in Babylon.\n * A post process can be used to apply a shader to a texture after it is rendered.\n * @example https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/postProcessRenderPipeline\n */\nexport class PostProcessRenderEffect {\n    /**\n     * Instantiates a post process render effect.\n     * A post process can be used to apply a shader to a texture after it is rendered.\n     * @param engine The engine the effect is tied to\n     * @param name The name of the effect\n     * @param getPostProcesses A function that returns a set of post processes which the effect will run in order to be run.\n     * @param singleInstance False if this post process can be run on multiple cameras. (default: true)\n     */\n    constructor(engine, name, getPostProcesses, singleInstance) {\n        this._name = name;\n        this._singleInstance = singleInstance || true;\n        this._getPostProcesses = getPostProcesses;\n        this._cameras = {};\n        this._indicesForCamera = {};\n        this._postProcesses = {};\n    }\n    /**\n     * Checks if all the post processes in the effect are supported.\n     */\n    get isSupported() {\n        for (const index in this._postProcesses) {\n            if (Object.prototype.hasOwnProperty.call(this._postProcesses, index)) {\n                const pps = this._postProcesses[index];\n                for (let ppIndex = 0; ppIndex < pps.length; ppIndex++) {\n                    if (!pps[ppIndex].isSupported) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    /**\n     * Updates the current state of the effect\n     * @internal\n     */\n    _update() { }\n    /**\n     * Attaches the effect on cameras\n     * @param cameras The camera to attach to.\n     * @internal\n     */\n    _attachCameras(cameras) {\n        let cameraKey;\n        const cams = Tools.MakeArray(cameras || this._cameras);\n        if (!cams) {\n            return;\n        }\n        for (let i = 0; i < cams.length; i++) {\n            const camera = cams[i];\n            if (!camera) {\n                continue;\n            }\n            const cameraName = camera.name;\n            if (this._singleInstance) {\n                cameraKey = 0;\n            }\n            else {\n                cameraKey = cameraName;\n            }\n            if (!this._postProcesses[cameraKey]) {\n                const postProcess = this._getPostProcesses();\n                if (postProcess) {\n                    this._postProcesses[cameraKey] = Array.isArray(postProcess) ? postProcess : [postProcess];\n                }\n            }\n            if (!this._indicesForCamera[cameraName]) {\n                this._indicesForCamera[cameraName] = [];\n            }\n            const pps = this._postProcesses[cameraKey];\n            for (const postProcess of pps) {\n                const index = camera.attachPostProcess(postProcess);\n                this._indicesForCamera[cameraName].push(index);\n            }\n            if (!this._cameras[cameraName]) {\n                this._cameras[cameraName] = camera;\n            }\n        }\n    }\n    /**\n     * Detaches the effect on cameras\n     * @param cameras The camera to detach from.\n     * @internal\n     */\n    _detachCameras(cameras) {\n        const cams = Tools.MakeArray(cameras || this._cameras);\n        if (!cams) {\n            return;\n        }\n        for (let i = 0; i < cams.length; i++) {\n            const camera = cams[i];\n            const cameraName = camera.name;\n            const postProcesses = this._postProcesses[this._singleInstance ? 0 : cameraName];\n            if (postProcesses) {\n                for (const postProcess of postProcesses) {\n                    camera.detachPostProcess(postProcess);\n                }\n            }\n            if (this._cameras[cameraName]) {\n                this._cameras[cameraName] = null;\n            }\n            delete this._indicesForCamera[cameraName];\n        }\n    }\n    /**\n     * Enables the effect on given cameras\n     * @param cameras The camera to enable.\n     * @internal\n     */\n    _enable(cameras) {\n        const cams = Tools.MakeArray(cameras || this._cameras);\n        if (!cams) {\n            return;\n        }\n        for (let i = 0; i < cams.length; i++) {\n            const camera = cams[i];\n            const cameraName = camera.name;\n            const cameraKey = this._singleInstance ? 0 : cameraName;\n            for (let j = 0; j < this._indicesForCamera[cameraName].length; j++) {\n                const index = this._indicesForCamera[cameraName][j];\n                const postProcess = camera._postProcesses[index];\n                if (postProcess === undefined || postProcess === null) {\n                    cams[i].attachPostProcess(this._postProcesses[cameraKey][j], index);\n                }\n            }\n        }\n    }\n    /**\n     * Disables the effect on the given cameras\n     * @param cameras The camera to disable.\n     * @internal\n     */\n    _disable(cameras) {\n        const cams = Tools.MakeArray(cameras || this._cameras);\n        if (!cams) {\n            return;\n        }\n        for (let i = 0; i < cams.length; i++) {\n            const camera = cams[i];\n            const cameraName = camera.name;\n            const pps = this._postProcesses[this._singleInstance ? 0 : cameraName];\n            for (const postProcess of pps) {\n                camera.detachPostProcess(postProcess);\n            }\n        }\n    }\n    /**\n     * Gets a list of the post processes contained in the effect.\n     * @param camera The camera to get the post processes on.\n     * @returns The list of the post processes in the effect.\n     */\n    getPostProcesses(camera) {\n        if (this._singleInstance) {\n            return this._postProcesses[0];\n        }\n        else {\n            if (!camera) {\n                return null;\n            }\n            return this._postProcesses[camera.name];\n        }\n    }\n}\n//# sourceMappingURL=postProcessRenderEffect.js.map","import { Texture } from \"./texture\";\nimport { Constants } from \"../../Engines/constants\";\n/**\n * Class used to store 3D textures containing user data\n */\nexport class RawTexture3D extends Texture {\n    /**\n     * Gets the width of the texture\n     */\n    get width() {\n        return this._texture ? this._texture.width : 0;\n    }\n    /**\n     * Gets the height of the texture\n     */\n    get height() {\n        return this._texture ? this._texture.height : 0;\n    }\n    /**\n     * Gets the depth of the texture\n     */\n    get depth() {\n        return this._texture ? this._texture.depth : 0;\n    }\n    /**\n     * Create a new RawTexture3D\n     * @param data defines the data of the texture\n     * @param width defines the width of the texture\n     * @param height defines the height of the texture\n     * @param depth defines the depth of the texture\n     * @param format defines the texture format to use\n     * @param scene defines the hosting scene\n     * @param generateMipMaps defines a boolean indicating if mip levels should be generated (true by default)\n     * @param invertY defines if texture must be stored with Y axis inverted\n     * @param samplingMode defines the sampling mode to use (Texture.TRILINEAR_SAMPLINGMODE by default)\n     * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_BYTE, Engine.TEXTURETYPE_FLOAT...)\n     * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\n     */\n    constructor(data, width, height, depth, \n    /** Gets or sets the texture format to use */\n    format, scene, generateMipMaps = true, invertY = false, samplingMode = Texture.TRILINEAR_SAMPLINGMODE, textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE, creationFlags) {\n        super(null, scene, !generateMipMaps, invertY);\n        this.format = format;\n        this._texture = scene.getEngine().createRawTexture3D(data, width, height, depth, format, generateMipMaps, invertY, samplingMode, null, textureType, creationFlags);\n        this.is3D = true;\n    }\n    /**\n     * Update the texture with new data\n     * @param data defines the data to store in the texture\n     */\n    update(data) {\n        if (!this._texture) {\n            return;\n        }\n        this._getEngine().updateRawTexture3D(this._texture, data, this._texture.format, this._texture.invertY, null, this._texture.type);\n    }\n}\n//# sourceMappingURL=rawTexture3D.js.map","import { __decorate } from \"tslib\";\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\nimport { MaterialPluginBase } from \"core/Materials/materialPluginBase\";\nimport { Constants } from \"core/Engines/constants\";\nimport { PBRBaseMaterial } from \"core/Materials/PBR/pbrBaseMaterial\";\nimport { expandToProperty, serialize } from \"core/Misc/decorators\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\n/**\n * @internal\n */\nclass MaterialIBLShadowsRenderDefines extends MaterialDefines {\n    constructor() {\n        super(...arguments);\n        this.RENDER_WITH_IBL_SHADOWS = false;\n        this.COLORED_IBL_SHADOWS = false;\n    }\n}\n/**\n * Plugin used to render the contribution from IBL shadows.\n */\nexport class IBLShadowsPluginMaterial extends MaterialPluginBase {\n    get isColored() {\n        return this._isColored;\n    }\n    set isColored(value) {\n        if (this._isColored === value) {\n            return;\n        }\n        this._isColored = value;\n        this._markAllSubMeshesAsTexturesDirty();\n    }\n    _markAllSubMeshesAsTexturesDirty() {\n        this._enable(this._isEnabled);\n        this._internalMarkAllSubMeshesAsTexturesDirty();\n    }\n    /**\n     * Gets a boolean indicating that the plugin is compatible with a give shader language.\n     * @returns true if the plugin is compatible with the shader language\n     */\n    isCompatible() {\n        return true;\n    }\n    constructor(material) {\n        super(material, IBLShadowsPluginMaterial.Name, 310, new MaterialIBLShadowsRenderDefines());\n        /**\n         * The opacity of the shadows.\n         */\n        this.shadowOpacity = 1.0;\n        this._isEnabled = false;\n        this._isColored = false;\n        /**\n         * Defines if the plugin is enabled in the material.\n         */\n        this.isEnabled = false;\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\n    }\n    prepareDefines(defines) {\n        defines.RENDER_WITH_IBL_SHADOWS = this._isEnabled;\n        defines.COLORED_IBL_SHADOWS = this.isColored;\n    }\n    getClassName() {\n        return \"IBLShadowsPluginMaterial\";\n    }\n    getUniforms() {\n        return {\n            ubo: [\n                { name: \"renderTargetSize\", size: 2, type: \"vec2\" },\n                { name: \"shadowOpacity\", size: 1, type: \"float\" },\n            ],\n            fragment: `#ifdef RENDER_WITH_IBL_SHADOWS\r\n                    uniform vec2 renderTargetSize;\r\n                    uniform float shadowOpacity;\r\n                #endif`,\n        };\n    }\n    getSamplers(samplers) {\n        samplers.push(\"iblShadowsTexture\");\n    }\n    bindForSubMesh(uniformBuffer) {\n        if (this._isEnabled) {\n            uniformBuffer.bindTexture(\"iblShadowsTexture\", this.iblShadowsTexture);\n            uniformBuffer.updateFloat2(\"renderTargetSize\", this._material.getScene().getEngine().getRenderWidth(), this._material.getScene().getEngine().getRenderHeight());\n            uniformBuffer.updateFloat(\"shadowOpacity\", this.shadowOpacity);\n        }\n    }\n    getCustomCode(shaderType, shaderLanguage) {\n        let frag;\n        if (shaderLanguage === 1 /* ShaderLanguage.WGSL */) {\n            frag = {\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                CUSTOM_FRAGMENT_DEFINITIONS: `\r\n                #ifdef RENDER_WITH_IBL_SHADOWS\r\n                    var iblShadowsTextureSampler: sampler;\r\n                    var iblShadowsTexture: texture_2d<f32>;\r\n\r\n                    #ifdef COLORED_IBL_SHADOWS\r\n                        fn computeIndirectShadow() -> vec3f {\r\n                            var uv = fragmentInputs.position.xy / uniforms.renderTargetSize;\r\n                            var shadowValue: vec3f = textureSample(iblShadowsTexture, iblShadowsTextureSampler, uv).rgb;\r\n                            return mix(shadowValue, vec3f(1.0), 1.0 - uniforms.shadowOpacity);\r\n                        }\r\n                    #else\r\n                        fn computeIndirectShadow() -> vec2f {\r\n                            var uv = fragmentInputs.position.xy / uniforms.renderTargetSize;\r\n                            var shadowValue: vec2f = textureSample(iblShadowsTexture, iblShadowsTextureSampler, uv).rg;\r\n                            return mix(shadowValue, vec2f(1.0), 1.0 - uniforms.shadowOpacity);\r\n                        }\r\n                    #endif\r\n                #endif\r\n            `,\n            };\n            if (this._material instanceof PBRBaseMaterial) {\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                frag[\"CUSTOM_FRAGMENT_BEFORE_FINALCOLORCOMPOSITION\"] = `\r\n                #ifdef RENDER_WITH_IBL_SHADOWS\r\n                    #ifndef UNLIT\r\n                        #ifdef REFLECTION\r\n                            #ifdef COLORED_IBL_SHADOWS\r\n                                var shadowValue: vec3f = computeIndirectShadow();\r\n                                finalIrradiance *= shadowValue;\r\n                                finalRadianceScaled *= mix(vec3f(1.0), shadowValue, roughness);\r\n                            #else\r\n                                var shadowValue: vec2f = computeIndirectShadow();\r\n                                finalIrradiance *= vec3f(shadowValue.x);\r\n                                finalRadianceScaled *= vec3f(mix(pow(shadowValue.y, 4.0), shadowValue.x, roughness));\r\n                            #endif\r\n                        #endif\r\n                    #else\r\n                        finalDiffuse *= computeIndirectShadow().x;\r\n                    #endif\r\n                #endif\r\n            `;\n            }\n            else {\n                frag[\"CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR\"] = `\r\n                #ifdef RENDER_WITH_IBL_SHADOWS\r\n                    #ifdef COLORED_IBL_SHADOWS\r\n                        var shadowValue: vec3f = computeIndirectShadow();\r\n                        color *= toGammaSpace(vec4f(shadowValue, 1.0f));\r\n                    #else\r\n                        var shadowValue: vec2f = computeIndirectShadow();\r\n                        color *= toGammaSpace(vec4f(shadowValue.x, shadowValue.x, shadowValue.x, 1.0f));\r\n                    #endif\r\n                #endif\r\n            `;\n            }\n        }\n        else {\n            frag = {\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                CUSTOM_FRAGMENT_DEFINITIONS: `\r\n                #ifdef RENDER_WITH_IBL_SHADOWS\r\n                    uniform sampler2D iblShadowsTexture;\r\n                #ifdef COLORED_IBL_SHADOWS\r\n                    vec3 computeIndirectShadow() {\r\n                        vec2 uv = gl_FragCoord.xy / renderTargetSize;\r\n                        vec3 shadowValue = texture2D(iblShadowsTexture, uv).rgb;\r\n                        return mix(shadowValue.rgb, vec3(1.0), 1.0 - shadowOpacity);\r\n                    }\r\n                #else\r\n                    vec2 computeIndirectShadow() {\r\n                        vec2 uv = gl_FragCoord.xy / renderTargetSize;\r\n                        vec2 shadowValue = texture2D(iblShadowsTexture, uv).rg;\r\n                        return mix(shadowValue.rg, vec2(1.0), 1.0 - shadowOpacity);\r\n                    }\r\n                #endif\r\n                #endif\r\n            `,\n            };\n            if (this._material instanceof PBRBaseMaterial) {\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                frag[\"CUSTOM_FRAGMENT_BEFORE_FINALCOLORCOMPOSITION\"] = `\r\n                #ifdef RENDER_WITH_IBL_SHADOWS\r\n                    #ifndef UNLIT\r\n                        #ifdef REFLECTION\r\n                            #ifdef COLORED_IBL_SHADOWS\r\n                                vec3 shadowValue = computeIndirectShadow();\r\n                                finalIrradiance.rgb *= shadowValue.rgb;\r\n                                finalRadianceScaled *= mix(vec3(1.0), shadowValue.rgb, roughness);\r\n                            #else\r\n                                vec2 shadowValue = computeIndirectShadow();\r\n                                finalIrradiance *= shadowValue.x;\r\n                                finalRadianceScaled *= mix(pow(shadowValue.y, 4.0), shadowValue.x, roughness);\r\n                            #endif\r\n                        #endif\r\n                    #else\r\n                        finalDiffuse *= computeIndirectShadow().x;\r\n                    #endif\r\n                #endif\r\n            `;\n            }\n            else {\n                frag[\"CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR\"] = `\r\n                #ifdef RENDER_WITH_IBL_SHADOWS\r\n                    #ifdef COLORED_IBL_SHADOWS\r\n                        vec3 shadowValue = computeIndirectShadow();\r\n                        color.rgb *= toGammaSpace(shadowValue.rgb);\r\n                    #else\r\n                        vec2 shadowValue = computeIndirectShadow();\r\n                        color.rgb *= toGammaSpace(shadowValue.x);\r\n                    #endif\r\n                #endif\r\n            `;\n            }\n        }\n        return shaderType === \"vertex\" ? null : frag;\n    }\n}\n/**\n * Defines the name of the plugin.\n */\nIBLShadowsPluginMaterial.Name = \"IBLShadowsPluginMaterial\";\n__decorate([\n    serialize()\n], IBLShadowsPluginMaterial.prototype, \"shadowOpacity\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], IBLShadowsPluginMaterial.prototype, \"isEnabled\", void 0);\nRegisterClass(`BABYLON.IBLShadowsPluginMaterial`, IBLShadowsPluginMaterial);\n//# sourceMappingURL=iblShadowsPluginMaterial.js.map","import { Scene } from \"../scene\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nimport { GeometryBufferRenderer } from \"./geometryBufferRenderer\";\nimport { Constants } from \"../Engines/constants\";\nObject.defineProperty(Scene.prototype, \"geometryBufferRenderer\", {\n    get: function () {\n        return this._geometryBufferRenderer;\n    },\n    set: function (value) {\n        if (value && value.isSupported) {\n            this._geometryBufferRenderer = value;\n        }\n    },\n    enumerable: true,\n    configurable: true,\n});\nScene.prototype.enableGeometryBufferRenderer = function (ratio = 1, depthFormat = Constants.TEXTUREFORMAT_DEPTH16, textureTypesAndFormats) {\n    if (this._geometryBufferRenderer) {\n        return this._geometryBufferRenderer;\n    }\n    this._geometryBufferRenderer = new GeometryBufferRenderer(this, ratio, depthFormat, textureTypesAndFormats);\n    if (!this._geometryBufferRenderer.isSupported) {\n        this._geometryBufferRenderer = null;\n    }\n    return this._geometryBufferRenderer;\n};\nScene.prototype.disableGeometryBufferRenderer = function () {\n    if (!this._geometryBufferRenderer) {\n        return;\n    }\n    this._geometryBufferRenderer.dispose();\n    this._geometryBufferRenderer = null;\n};\n/**\n * Defines the Geometry Buffer scene component responsible to manage a G-Buffer useful\n * in several rendering techniques.\n */\nexport class GeometryBufferRendererSceneComponent {\n    /**\n     * Creates a new instance of the component for the given scene\n     * @param scene Defines the scene to register the component in\n     */\n    constructor(scene) {\n        /**\n         * The component name helpful to identify the component in the list of scene components.\n         */\n        this.name = SceneComponentConstants.NAME_GEOMETRYBUFFERRENDERER;\n        this.scene = scene;\n    }\n    /**\n     * Registers the component in a given scene\n     */\n    register() {\n        this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_GEOMETRYBUFFERRENDERER, this, this._gatherRenderTargets);\n    }\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    rebuild() {\n        // Nothing to do for this component\n    }\n    /**\n     * Disposes the component and the associated resources\n     */\n    dispose() {\n        // Nothing to do for this component\n    }\n    _gatherRenderTargets(renderTargets) {\n        if (this.scene._geometryBufferRenderer) {\n            renderTargets.push(this.scene._geometryBufferRenderer.getGBuffer());\n        }\n    }\n}\nGeometryBufferRenderer._SceneComponentInitialization = (scene) => {\n    // Register the G Buffer component to the scene.\n    let component = scene._getComponent(SceneComponentConstants.NAME_GEOMETRYBUFFERRENDERER);\n    if (!component) {\n        component = new GeometryBufferRendererSceneComponent(scene);\n        scene._addComponent(component);\n    }\n};\n//# sourceMappingURL=geometryBufferRendererSceneComponent.js.map","import { Scene } from \"../scene\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nimport { IblCdfGenerator } from \"./iblCdfGenerator\";\nObject.defineProperty(Scene.prototype, \"iblCdfGenerator\", {\n    get: function () {\n        return this._iblCdfGenerator;\n    },\n    set: function (value) {\n        if (value) {\n            this._iblCdfGenerator = value;\n        }\n    },\n    enumerable: true,\n    configurable: true,\n});\nScene.prototype.enableIblCdfGenerator = function () {\n    if (this._iblCdfGenerator) {\n        return this._iblCdfGenerator;\n    }\n    this._iblCdfGenerator = new IblCdfGenerator(this);\n    if (!this._iblCdfGenerator.isSupported) {\n        this._iblCdfGenerator = null;\n        return null;\n    }\n    if (this.environmentTexture) {\n        this._iblCdfGenerator.iblSource = this.environmentTexture;\n    }\n    return this._iblCdfGenerator;\n};\nScene.prototype.disableIblCdfGenerator = function () {\n    if (!this._iblCdfGenerator) {\n        return;\n    }\n    this._iblCdfGenerator.dispose();\n    this._iblCdfGenerator = null;\n};\n/**\n * Defines the IBL CDF Generator scene component responsible for generating CDF maps for a given IBL.\n */\nexport class IblCdfGeneratorSceneComponent {\n    /**\n     * Creates a new instance of the component for the given scene\n     * @param scene Defines the scene to register the component in\n     */\n    constructor(scene) {\n        /**\n         * The component name helpful to identify the component in the list of scene components.\n         */\n        this.name = SceneComponentConstants.NAME_IBLCDFGENERATOR;\n        this._newIblObserver = null;\n        this.scene = scene;\n    }\n    /**\n     * Registers the component in a given scene\n     */\n    register() {\n        this._updateIblSource();\n        this._newIblObserver = this.scene.onEnvironmentTextureChangedObservable.add(this._updateIblSource.bind(this));\n    }\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    rebuild() {\n        // Nothing to do for this component\n    }\n    /**\n     * Disposes the component and the associated resources\n     */\n    dispose() {\n        this.scene.onEnvironmentTextureChangedObservable.remove(this._newIblObserver);\n    }\n    _updateIblSource() {\n        if (this.scene.iblCdfGenerator && this.scene.environmentTexture) {\n            this.scene.iblCdfGenerator.iblSource = this.scene.environmentTexture;\n        }\n    }\n}\nIblCdfGenerator._SceneComponentInitialization = (scene) => {\n    // Register the CDF generator component to the scene.\n    let component = scene._getComponent(SceneComponentConstants.NAME_IBLCDFGENERATOR);\n    if (!component) {\n        component = new IblCdfGeneratorSceneComponent(scene);\n        scene._addComponent(component);\n    }\n};\n//# sourceMappingURL=iblCdfGeneratorSceneComponent.js.map","import { Constants } from \"../../Engines/constants\";\nimport { EngineStore } from \"../../Engines/engineStore\";\nimport { Matrix, Vector3, Vector4, Quaternion } from \"../../Maths/math.vector\";\nimport { Texture } from \"../../Materials/Textures/texture\";\nimport { Logger } from \"../../Misc/logger\";\nimport { _IblShadowsVoxelRenderer } from \"./iblShadowsVoxelRenderer\";\nimport { _IblShadowsVoxelTracingPass } from \"./iblShadowsVoxelTracingPass\";\nimport { PostProcess } from \"../../PostProcesses/postProcess\";\nimport { _IblShadowsSpatialBlurPass } from \"./iblShadowsSpatialBlurPass\";\nimport { _IblShadowsAccumulationPass } from \"./iblShadowsAccumulationPass\";\nimport { PostProcessRenderPipeline } from \"../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\nimport { PostProcessRenderEffect } from \"core/PostProcesses/RenderPipeline/postProcessRenderEffect\";\nimport { GeometryBufferRenderer } from \"core/Rendering/geometryBufferRenderer\";\nimport { RawTexture } from \"core/Materials/Textures/rawTexture\";\nimport { RawTexture3D } from \"core/Materials/Textures/rawTexture3D\";\nimport { Engine } from \"core/Engines/engine\";\nimport { IBLShadowsPluginMaterial } from \"./iblShadowsPluginMaterial\";\nimport { PBRBaseMaterial } from \"core/Materials/PBR/pbrBaseMaterial\";\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\nimport { Observable } from \"core/Misc/observable\";\nimport \"../geometryBufferRendererSceneComponent\";\nimport \"../iblCdfGeneratorSceneComponent\";\n/**\n * Voxel-based shadow rendering for IBL's.\n * This should not be instanciated directly, as it is part of a scene component\n */\nexport class IblShadowsRenderPipeline extends PostProcessRenderPipeline {\n    /**\n     * Reset the shadow accumulation. This has a similar affect to lowering the remanence for a single frame.\n     * This is useful when making a sudden change to the IBL.\n     */\n    resetAccumulation() {\n        this._accumulationPass.reset = true;\n    }\n    /**\n     * How dark the shadows appear. 1.0 is full opacity, 0.0 is no shadows.\n     */\n    get shadowOpacity() {\n        return this._shadowOpacity;\n    }\n    set shadowOpacity(value) {\n        this._shadowOpacity = value;\n        this._setPluginParameters();\n    }\n    /**\n     * Render the shadows in color rather than black and white.\n     * This is slightly more expensive than black and white shadows but can be much\n     * more accurate when the strongest lights in the IBL are non-white.\n     */\n    get coloredShadows() {\n        return this._coloredShadows;\n    }\n    set coloredShadows(value) {\n        this._coloredShadows = value;\n        this._voxelTracingPass.coloredShadows = value;\n        this._setPluginParameters();\n    }\n    /**\n     * A multiplier for the render size of the shadows. Used for rendering lower-resolution shadows.\n     */\n    get shadowRenderSizeFactor() {\n        return this._renderSizeFactor;\n    }\n    set shadowRenderSizeFactor(value) {\n        this._renderSizeFactor = Math.max(Math.min(value, 1.0), 0.0);\n        this._voxelTracingPass.resize(value);\n        this._spatialBlurPass.resize(value);\n        this._accumulationPass.resize(value);\n        this._setPluginParameters();\n    }\n    /**\n     * How dark the voxel shadows appear. 1.0 is full opacity, 0.0 is no shadows.\n     */\n    get voxelShadowOpacity() {\n        return this._voxelTracingPass?.voxelShadowOpacity;\n    }\n    set voxelShadowOpacity(value) {\n        if (!this._voxelTracingPass) {\n            return;\n        }\n        this._voxelTracingPass.voxelShadowOpacity = value;\n    }\n    /**\n     * How dark the screen-space shadows appear. 1.0 is full opacity, 0.0 is no shadows.\n     */\n    get ssShadowOpacity() {\n        return this._voxelTracingPass?.ssShadowOpacity;\n    }\n    set ssShadowOpacity(value) {\n        if (!this._voxelTracingPass) {\n            return;\n        }\n        this._voxelTracingPass.ssShadowOpacity = value;\n    }\n    /**\n     * The number of samples used in the screen space shadow pass.\n     */\n    get ssShadowSampleCount() {\n        return this._voxelTracingPass?.sssSamples;\n    }\n    set ssShadowSampleCount(value) {\n        if (!this._voxelTracingPass) {\n            return;\n        }\n        this._voxelTracingPass.sssSamples = value;\n    }\n    /**\n     * The stride of the screen-space shadow pass. This controls the distance between samples\n     * in pixels.\n     */\n    get ssShadowStride() {\n        return this._voxelTracingPass?.sssStride;\n    }\n    set ssShadowStride(value) {\n        if (!this._voxelTracingPass) {\n            return;\n        }\n        this._voxelTracingPass.sssStride = value;\n    }\n    /**\n     * A scale for the maximum distance a screen-space shadow can be cast in world-space.\n     * The maximum distance that screen-space shadows cast is derived from the voxel size\n     * and this value so shouldn't need to change if you scale your scene\n     */\n    get ssShadowDistanceScale() {\n        return this._sssMaxDistScale;\n    }\n    set ssShadowDistanceScale(value) {\n        this._sssMaxDistScale = value;\n        this._updateSsShadowParams();\n    }\n    /**\n     * Screen-space shadow thickness scale. This value controls the assumed thickness of\n     * on-screen surfaces in world-space. It scales with the size of the shadow-casting\n     * region so shouldn't need to change if you scale your scene.\n     */\n    get ssShadowThicknessScale() {\n        return this._sssThicknessScale;\n    }\n    set ssShadowThicknessScale(value) {\n        this._sssThicknessScale = value;\n        this._updateSsShadowParams();\n    }\n    /**\n     * Returns the texture containing the voxel grid data\n     * @returns The texture containing the voxel grid data\n     * @internal\n     */\n    _getVoxelGridTexture() {\n        const tex = this._voxelRenderer?.getVoxelGrid();\n        if (tex && tex.isReady()) {\n            return tex;\n        }\n        return this._dummyTexture3d;\n    }\n    /**\n     * Returns the noise texture.\n     * @returns The noise texture.\n     * @internal\n     */\n    _getNoiseTexture() {\n        const tex = this._noiseTexture;\n        if (tex && tex.isReady()) {\n            return tex;\n        }\n        return this._dummyTexture2d;\n    }\n    /**\n     * Returns the voxel-tracing texture.\n     * @returns The voxel-tracing texture.\n     * @internal\n     */\n    _getVoxelTracingTexture() {\n        const tex = this._voxelTracingPass?.getOutputTexture();\n        if (tex && tex.isReady()) {\n            return tex;\n        }\n        return this._dummyTexture2d;\n    }\n    /**\n     * Returns the spatial blur texture.\n     * @returns The spatial blur texture.\n     * @internal\n     */\n    _getSpatialBlurTexture() {\n        const tex = this._spatialBlurPass.getOutputTexture();\n        if (tex && tex.isReady()) {\n            return tex;\n        }\n        return this._dummyTexture2d;\n    }\n    /**\n     * Returns the accumulated shadow texture.\n     * @returns The accumulated shadow texture.\n     * @internal\n     */\n    _getAccumulatedTexture() {\n        const tex = this._accumulationPass?.getOutputTexture();\n        if (tex && tex.isReady()) {\n            return tex;\n        }\n        return this._dummyTexture2d;\n    }\n    /**\n     * Turn on or off the debug view of the G-Buffer. This will display only the targets\n     * of the g-buffer that are used by the shadow pipeline.\n     */\n    get gbufferDebugEnabled() {\n        return this._gbufferDebugEnabled;\n    }\n    set gbufferDebugEnabled(enabled) {\n        if (enabled && !this.allowDebugPasses) {\n            Logger.Warn(\"Can't enable G-Buffer debug view without setting allowDebugPasses to true.\");\n            return;\n        }\n        this._gbufferDebugEnabled = enabled;\n        if (enabled) {\n            this._enableEffect(this._getGBufferDebugPass().name, this.cameras);\n        }\n        else {\n            this._disableEffect(this._getGBufferDebugPass().name, this.cameras);\n        }\n    }\n    /**\n     * Turn on or off the debug view of the CDF importance sampling data\n     */\n    get cdfDebugEnabled() {\n        return this.scene.iblCdfGenerator ? this.scene.iblCdfGenerator.debugEnabled : false;\n    }\n    /**\n     * Turn on or off the debug view of the CDF importance sampling data\n     */\n    set cdfDebugEnabled(enabled) {\n        if (!this.scene.iblCdfGenerator) {\n            return;\n        }\n        if (enabled && !this.allowDebugPasses) {\n            Logger.Warn(\"Can't enable importance sampling debug view without setting allowDebugPasses to true.\");\n            return;\n        }\n        if (enabled === this.scene.iblCdfGenerator.debugEnabled) {\n            return;\n        }\n        this.scene.iblCdfGenerator.debugEnabled = enabled;\n        if (enabled) {\n            this._enableEffect(this.scene.iblCdfGenerator.debugPassName, this.cameras);\n        }\n        else {\n            this._disableEffect(this.scene.iblCdfGenerator.debugPassName, this.cameras);\n        }\n    }\n    /**\n     * This displays the voxel grid in slices spread across the screen.\n     * It also displays what slices of the model are stored in each layer\n     * of the voxel grid. Each red stripe represents one layer while each gradient\n     * (from bright red to black) represents the layers rendered in a single draw call.\n     */\n    get voxelDebugEnabled() {\n        return this._voxelRenderer?.voxelDebugEnabled;\n    }\n    set voxelDebugEnabled(enabled) {\n        if (!this._voxelRenderer) {\n            return;\n        }\n        if (enabled && !this.allowDebugPasses) {\n            Logger.Warn(\"Can't enable voxel debug view without setting allowDebugPasses to true.\");\n            return;\n        }\n        this._voxelRenderer.voxelDebugEnabled = enabled;\n        if (enabled) {\n            this._enableEffect(this._voxelRenderer.debugPassName, this.cameras);\n        }\n        else {\n            this._disableEffect(this._voxelRenderer.debugPassName, this.cameras);\n        }\n    }\n    /**\n     * When using tri-planar voxelization (the default), this value can be used to\n     * display only the voxelization result for that axis. z-axis = 0, y-axis = 1, x-axis = 2\n     */\n    get voxelDebugAxis() {\n        return this._voxelRenderer?.voxelDebugAxis;\n    }\n    set voxelDebugAxis(axisNum) {\n        if (!this._voxelRenderer) {\n            return;\n        }\n        this._voxelRenderer.voxelDebugAxis = axisNum;\n    }\n    /**\n     * Displays a given mip of the voxel grid. `voxelDebugAxis` must be undefined in this\n     * case because we only generate mips for the combined voxel grid.\n     */\n    set voxelDebugDisplayMip(mipNum) {\n        if (!this._voxelRenderer) {\n            return;\n        }\n        this._voxelRenderer.setDebugMipNumber(mipNum);\n    }\n    /**\n     * Display the debug view for just the shadow samples taken this frame.\n     */\n    get voxelTracingDebugEnabled() {\n        return this._voxelTracingPass?.debugEnabled;\n    }\n    set voxelTracingDebugEnabled(enabled) {\n        if (!this._voxelTracingPass) {\n            return;\n        }\n        if (enabled && !this.allowDebugPasses) {\n            Logger.Warn(\"Can't enable voxel tracing debug view without setting allowDebugPasses to true.\");\n            return;\n        }\n        if (enabled === this._voxelTracingPass.debugEnabled) {\n            return;\n        }\n        this._voxelTracingPass.debugEnabled = enabled;\n        if (enabled) {\n            this._enableEffect(this._voxelTracingPass.debugPassName, this.cameras);\n        }\n        else {\n            this._disableEffect(this._voxelTracingPass.debugPassName, this.cameras);\n        }\n    }\n    /**\n     * Display the debug view for the spatial blur pass\n     */\n    get spatialBlurPassDebugEnabled() {\n        return this._spatialBlurPass.debugEnabled;\n    }\n    set spatialBlurPassDebugEnabled(enabled) {\n        if (!this._spatialBlurPass) {\n            return;\n        }\n        if (enabled && !this.allowDebugPasses) {\n            Logger.Warn(\"Can't enable spatial blur debug view without setting allowDebugPasses to true.\");\n            return;\n        }\n        if (enabled === this._spatialBlurPass.debugEnabled) {\n            return;\n        }\n        this._spatialBlurPass.debugEnabled = enabled;\n        if (enabled) {\n            this._enableEffect(this._spatialBlurPass.debugPassName, this.cameras);\n        }\n        else {\n            this._disableEffect(this._spatialBlurPass.debugPassName, this.cameras);\n        }\n    }\n    /**\n     * Display the debug view for the shadows accumulated over time.\n     */\n    get accumulationPassDebugEnabled() {\n        return this._accumulationPass?.debugEnabled;\n    }\n    set accumulationPassDebugEnabled(enabled) {\n        if (!this._accumulationPass) {\n            return;\n        }\n        if (enabled && !this.allowDebugPasses) {\n            Logger.Warn(\"Can't enable accumulation pass debug view without setting allowDebugPasses to true.\");\n            return;\n        }\n        if (enabled === this._accumulationPass.debugEnabled) {\n            return;\n        }\n        this._accumulationPass.debugEnabled = enabled;\n        if (enabled) {\n            this._enableEffect(this._accumulationPass.debugPassName, this.cameras);\n        }\n        else {\n            this._disableEffect(this._accumulationPass.debugPassName, this.cameras);\n        }\n    }\n    /**\n     * Add a mesh to be used for shadow-casting in the IBL shadow pipeline.\n     * These meshes will be written to the voxel grid.\n     * @param mesh A mesh or list of meshes that you want to cast shadows\n     */\n    addShadowCastingMesh(mesh) {\n        if (Array.isArray(mesh)) {\n            for (const m of mesh) {\n                if (m && this._shadowCastingMeshes.indexOf(m) === -1) {\n                    this._shadowCastingMeshes.push(m);\n                }\n            }\n        }\n        else {\n            if (mesh && this._shadowCastingMeshes.indexOf(mesh) === -1) {\n                this._shadowCastingMeshes.push(mesh);\n            }\n        }\n    }\n    /**\n     * Remove a mesh from the shadow-casting list. The mesh will no longer be written\n     * to the voxel grid and will not cast shadows.\n     * @param mesh The mesh or list of meshes that you don't want to cast shadows.\n     */\n    removeShadowCastingMesh(mesh) {\n        if (Array.isArray(mesh)) {\n            for (const m of mesh) {\n                const index = this._shadowCastingMeshes.indexOf(m);\n                if (index !== -1) {\n                    this._shadowCastingMeshes.splice(index, 1);\n                }\n            }\n        }\n        else {\n            const index = this._shadowCastingMeshes.indexOf(mesh);\n            if (index !== -1) {\n                this._shadowCastingMeshes.splice(index, 1);\n            }\n        }\n    }\n    /**\n     * Clear the list of shadow-casting meshes. This will remove all meshes from the list\n     */\n    clearShadowCastingMeshes() {\n        this._shadowCastingMeshes.length = 0;\n    }\n    /**\n     * The exponent of the resolution of the voxel shadow grid. Higher resolutions will result in sharper\n     * shadows but are more expensive to compute and require more memory.\n     * The resolution is calculated as 2 to the power of this number.\n     */\n    get resolutionExp() {\n        return this._voxelRenderer.voxelResolutionExp;\n    }\n    set resolutionExp(newResolution) {\n        if (newResolution === this._voxelRenderer.voxelResolutionExp) {\n            return;\n        }\n        if (this._voxelRenderer.isVoxelizationInProgress()) {\n            Logger.Warn(\"Can't change the resolution of the voxel grid while voxelization is in progress.\");\n            return;\n        }\n        this._voxelRenderer.voxelResolutionExp = Math.max(1, Math.min(newResolution, 8));\n        this._accumulationPass.reset = true;\n    }\n    /**\n     * The number of different directions to sample during the voxel tracing pass\n     */\n    get sampleDirections() {\n        return this._voxelTracingPass?.sampleDirections;\n    }\n    /**\n     * The number of different directions to sample during the voxel tracing pass\n     */\n    set sampleDirections(value) {\n        if (!this._voxelTracingPass) {\n            return;\n        }\n        this._voxelTracingPass.sampleDirections = value;\n    }\n    /**\n     * The decree to which the shadows persist between frames. 0.0 is no persistence, 1.0 is full persistence.\n     **/\n    get shadowRemanence() {\n        return this._accumulationPass?.remanence;\n    }\n    /**\n     * The decree to which the shadows persist between frames. 0.0 is no persistence, 1.0 is full persistence.\n     **/\n    set shadowRemanence(value) {\n        if (!this._accumulationPass) {\n            return;\n        }\n        this._accumulationPass.remanence = value;\n    }\n    /**\n     * The global Y-axis rotation of the IBL for shadows. This should match the Y-rotation of the environment map applied to materials, skybox, etc.\n     */\n    get envRotation() {\n        return this._voxelTracingPass?.envRotation;\n    }\n    /**\n     * The global Y-axis rotation of the IBL for shadows. This should match the Y-rotation of the environment map applied to materials, skybox, etc.\n     */\n    set envRotation(value) {\n        if (!this._voxelTracingPass) {\n            return;\n        }\n        this._voxelTracingPass.envRotation = value;\n        this._accumulationPass.reset = true;\n    }\n    /**\n     * Allow debug passes to be enabled. Default is false.\n     */\n    get allowDebugPasses() {\n        return this._allowDebugPasses;\n    }\n    /**\n     * Allow debug passes to be enabled. Default is false.\n     */\n    set allowDebugPasses(value) {\n        if (this._allowDebugPasses === value) {\n            return;\n        }\n        this._allowDebugPasses = value;\n        if (value && this.scene.iblCdfGenerator) {\n            if (this.scene.iblCdfGenerator.isReady()) {\n                this._createDebugPasses();\n            }\n            else {\n                this.scene.iblCdfGenerator.onGeneratedObservable.addOnce(() => {\n                    this._createDebugPasses();\n                });\n            }\n        }\n        else {\n            this._disposeDebugPasses();\n        }\n    }\n    /**\n     *  Support test.\n     */\n    static get IsSupported() {\n        const engine = EngineStore.LastCreatedEngine;\n        if (!engine) {\n            return false;\n        }\n        return engine._features.supportIBLShadows;\n    }\n    /**\n     * Toggle the shadow tracing on or off\n     * @param enabled Toggle the shadow tracing on or off\n     */\n    toggleShadow(enabled) {\n        this._enabled = enabled;\n        this._voxelTracingPass.enabled = enabled;\n        this._spatialBlurPass.enabled = enabled;\n        this._accumulationPass.enabled = enabled;\n        for (const mat of this._materialsWithRenderPlugin) {\n            if (mat.pluginManager) {\n                const plugin = mat.pluginManager.getPlugin(IBLShadowsPluginMaterial.Name);\n                plugin.isEnabled = enabled;\n            }\n        }\n        this._setPluginParameters();\n    }\n    /**\n     * Trigger the scene to be re-voxelized. This should be run when any shadow-casters have been added, removed or moved.\n     */\n    updateVoxelization() {\n        if (this._shadowCastingMeshes.length === 0) {\n            Logger.Warn(\"IBL Shadows: updateVoxelization called with no shadow-casting meshes to voxelize.\");\n            return;\n        }\n        this._voxelRenderer.updateVoxelGrid(this._shadowCastingMeshes);\n        this._voxelRenderer.onVoxelizationCompleteObservable.addOnce(() => {\n            this.onVoxelizationCompleteObservable.notifyObservers();\n        });\n        this._updateSsShadowParams();\n    }\n    /**\n     * Trigger the scene bounds of shadow-casters to be calculated. This is the world size that the voxel grid will cover and will always be a cube.\n     */\n    updateSceneBounds() {\n        const bounds = {\n            min: new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE),\n            max: new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE),\n        };\n        for (const mesh of this._shadowCastingMeshes) {\n            const localBounds = mesh.getHierarchyBoundingVectors(true);\n            bounds.min = Vector3.Minimize(bounds.min, localBounds.min);\n            bounds.max = Vector3.Maximize(bounds.max, localBounds.max);\n        }\n        const size = bounds.max.subtract(bounds.min);\n        this.voxelGridSize = Math.max(size.x, size.y, size.z);\n        if (this._shadowCastingMeshes.length === 0 || !isFinite(this.voxelGridSize) || this.voxelGridSize === 0) {\n            Logger.Warn(\"IBL Shadows: Scene size is invalid. Can't update bounds.\");\n            this.voxelGridSize = 1.0;\n            return;\n        }\n        const halfSize = this.voxelGridSize / 2.0;\n        const centre = bounds.max.add(bounds.min).multiplyByFloats(-0.5, -0.5, -0.5);\n        const invWorldScaleMatrix = Matrix.Compose(new Vector3(1.0 / halfSize, 1.0 / halfSize, 1.0 / halfSize), new Quaternion(), new Vector3(0, 0, 0));\n        const invTranslationMatrix = Matrix.Compose(new Vector3(1.0, 1.0, 1.0), new Quaternion(), centre);\n        invTranslationMatrix.multiplyToRef(invWorldScaleMatrix, invWorldScaleMatrix);\n        this._voxelTracingPass.setWorldScaleMatrix(invWorldScaleMatrix);\n        this._voxelRenderer.setWorldScaleMatrix(invWorldScaleMatrix);\n        // Set world scale for spatial blur.\n        this._spatialBlurPass.setWorldScale(halfSize * 2.0);\n        this._updateSsShadowParams();\n    }\n    /**\n     * @param name The rendering pipeline name\n     * @param scene The scene linked to this pipeline\n     * @param options Options to configure the pipeline\n     * @param cameras Cameras to apply the pipeline to.\n     */\n    constructor(name, scene, options = {}, cameras) {\n        super(scene.getEngine(), name);\n        this._allowDebugPasses = false;\n        this._debugPasses = [];\n        this._shadowCastingMeshes = [];\n        this._shadowOpacity = 0.8;\n        this._enabled = true;\n        this._coloredShadows = false;\n        this._materialsWithRenderPlugin = [];\n        /**\n         * Observable that triggers when the shadow renderer is ready\n         */\n        this.onShadowTextureReadyObservable = new Observable();\n        /**\n         * Observable that triggers when a new IBL is set and the importance sampling is ready\n         */\n        this.onNewIblReadyObservable = new Observable();\n        /**\n         * Observable that triggers when the voxelization is complete\n         */\n        this.onVoxelizationCompleteObservable = new Observable();\n        /**\n         * The current world-space size of that the voxel grid covers in the scene.\n         */\n        this.voxelGridSize = 1.0;\n        this._renderSizeFactor = 1.0;\n        this._gbufferDebugEnabled = false;\n        this._gBufferDebugSizeParams = new Vector4(0.0, 0.0, 0.0, 0.0);\n        this.scene = scene;\n        this._cameras = cameras || [scene.activeCamera];\n        // Create the dummy textures to be used when the pipeline is not ready\n        const blackPixels = new Uint8Array([0, 0, 0, 255]);\n        this._dummyTexture2d = new RawTexture(blackPixels, 1, 1, Engine.TEXTUREFORMAT_RGBA, scene, false);\n        this._dummyTexture3d = new RawTexture3D(blackPixels, 1, 1, 1, Engine.TEXTUREFORMAT_RGBA, scene, false);\n        // Setup the geometry buffer target formats\n        const textureTypesAndFormats = {};\n        textureTypesAndFormats[GeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE] = { textureFormat: Constants.TEXTUREFORMAT_R, textureType: Constants.TEXTURETYPE_FLOAT };\n        textureTypesAndFormats[GeometryBufferRenderer.VELOCITY_LINEAR_TEXTURE_TYPE] = { textureFormat: Constants.TEXTUREFORMAT_RG, textureType: Constants.TEXTURETYPE_HALF_FLOAT };\n        textureTypesAndFormats[GeometryBufferRenderer.POSITION_TEXTURE_TYPE] = { textureFormat: Constants.TEXTUREFORMAT_RGBA, textureType: Constants.TEXTURETYPE_HALF_FLOAT };\n        textureTypesAndFormats[GeometryBufferRenderer.NORMAL_TEXTURE_TYPE] = { textureFormat: Constants.TEXTUREFORMAT_RGBA, textureType: Constants.TEXTURETYPE_HALF_FLOAT };\n        const geometryBufferRenderer = scene.enableGeometryBufferRenderer(undefined, Constants.TEXTUREFORMAT_DEPTH32_FLOAT, textureTypesAndFormats);\n        if (!geometryBufferRenderer) {\n            Logger.Error(\"Geometry buffer renderer is required for IBL shadows to work.\");\n            return;\n        }\n        this._geometryBufferRenderer = geometryBufferRenderer;\n        this._geometryBufferRenderer.enableScreenspaceDepth = true;\n        this._geometryBufferRenderer.enableVelocityLinear = true;\n        this._geometryBufferRenderer.enablePosition = true;\n        this._geometryBufferRenderer.enableNormal = true;\n        this._geometryBufferRenderer.generateNormalsInWorldSpace = true;\n        this.scene.enableIblCdfGenerator();\n        this.shadowOpacity = options.shadowOpacity || 0.8;\n        this._voxelRenderer = new _IblShadowsVoxelRenderer(this.scene, this, options ? options.resolutionExp : 6, options.triPlanarVoxelization !== undefined ? options.triPlanarVoxelization : true);\n        this._voxelTracingPass = new _IblShadowsVoxelTracingPass(this.scene, this);\n        this._spatialBlurPass = new _IblShadowsSpatialBlurPass(this.scene, this);\n        this._accumulationPass = new _IblShadowsAccumulationPass(this.scene, this);\n        this._accumulationPass.onReadyObservable.addOnce(() => {\n            this.onShadowTextureReadyObservable.notifyObservers();\n        });\n        this.sampleDirections = options.sampleDirections || 2;\n        this.voxelShadowOpacity = options.voxelShadowOpacity ?? 1.0;\n        this.envRotation = options.envRotation ?? 0.0;\n        this.shadowRenderSizeFactor = options.shadowRenderSizeFactor || 1.0;\n        this.ssShadowOpacity = options.ssShadowsEnabled === undefined || options.ssShadowsEnabled ? 1.0 : 0.0;\n        this.ssShadowDistanceScale = options.ssShadowDistanceScale || 1.25;\n        this.ssShadowSampleCount = options.ssShadowSampleCount || 16;\n        this.ssShadowStride = options.ssShadowStride || 8;\n        this.ssShadowThicknessScale = options.ssShadowThicknessScale || 1.0;\n        this.shadowRemanence = options.shadowRemanence ?? 0.75;\n        this._noiseTexture = new Texture(\"https://assets.babylonjs.com/textures/blue_noise/blue_noise_rgb.png\", this.scene, false, true, Constants.TEXTURE_NEAREST_SAMPLINGMODE);\n        scene.postProcessRenderPipelineManager.addPipeline(this);\n        this.scene.onActiveCameraChanged.add(this._listenForCameraChanges.bind(this));\n        this.scene.onBeforeRenderObservable.add(this._updateBeforeRender.bind(this));\n        this._listenForCameraChanges();\n        this.scene.getEngine().onResizeObservable.add(this._handleResize.bind(this));\n        // Assigning the shadow texture to the materials needs to be done after the RT's are created.\n        if (this.scene.iblCdfGenerator) {\n            this.scene.iblCdfGenerator.onGeneratedObservable.add(() => {\n                this._setPluginParameters();\n                this.onNewIblReadyObservable.notifyObservers();\n            });\n        }\n    }\n    _handleResize() {\n        this._voxelRenderer.resize();\n        this._voxelTracingPass.resize(this.shadowRenderSizeFactor);\n        this._spatialBlurPass.resize(this.shadowRenderSizeFactor);\n        this._accumulationPass.resize(this.shadowRenderSizeFactor);\n        this._setPluginParameters();\n    }\n    _getGBufferDebugPass() {\n        if (this._gbufferDebugPass) {\n            return this._gbufferDebugPass;\n        }\n        const isWebGPU = this.engine.isWebGPU;\n        const textureNames = [\"depthSampler\", \"normalSampler\", \"positionSampler\", \"velocitySampler\"];\n        const options = {\n            width: this.scene.getEngine().getRenderWidth(),\n            height: this.scene.getEngine().getRenderHeight(),\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            engine: this.scene.getEngine(),\n            textureType: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n            textureFormat: Constants.TEXTUREFORMAT_RGBA,\n            uniforms: [\"sizeParams\"],\n            samplers: textureNames,\n            reusable: false,\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializations: (useWebGPU, list) => {\n                if (useWebGPU) {\n                    list.push(import(\"../../ShadersWGSL/iblShadowGBufferDebug.fragment\"));\n                }\n                else {\n                    list.push(import(\"../../Shaders/iblShadowGBufferDebug.fragment\"));\n                }\n            },\n        };\n        this._gbufferDebugPass = new PostProcess(\"iblShadowGBufferDebug\", \"iblShadowGBufferDebug\", options);\n        if (this.engine.isWebGPU) {\n            this._gbufferDebugPass.samples = this.engine.currentSampleCount ?? 1;\n        }\n        this._gbufferDebugPass.autoClear = false;\n        this._gbufferDebugPass.onApplyObservable.add((effect) => {\n            const depthIndex = this._geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE);\n            effect.setTexture(\"depthSampler\", this._geometryBufferRenderer.getGBuffer().textures[depthIndex]);\n            const normalIndex = this._geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.NORMAL_TEXTURE_TYPE);\n            effect.setTexture(\"normalSampler\", this._geometryBufferRenderer.getGBuffer().textures[normalIndex]);\n            const positionIndex = this._geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.POSITION_TEXTURE_TYPE);\n            effect.setTexture(\"positionSampler\", this._geometryBufferRenderer.getGBuffer().textures[positionIndex]);\n            const velocityIndex = this._geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.VELOCITY_LINEAR_TEXTURE_TYPE);\n            effect.setTexture(\"velocitySampler\", this._geometryBufferRenderer.getGBuffer().textures[velocityIndex]);\n            effect.setVector4(\"sizeParams\", this._gBufferDebugSizeParams);\n            if (this.scene.activeCamera) {\n                effect.setFloat(\"maxDepth\", this.scene.activeCamera.maxZ);\n            }\n        });\n        return this._gbufferDebugPass;\n    }\n    _createDebugPasses() {\n        if (this.scene.iblCdfGenerator) {\n            this._debugPasses = [{ pass: this.scene.iblCdfGenerator.getDebugPassPP(), enabled: this.cdfDebugEnabled }];\n        }\n        else {\n            this._debugPasses = [];\n        }\n        this._debugPasses.push({ pass: this._voxelRenderer.getDebugPassPP(), enabled: this.voxelDebugEnabled }, { pass: this._voxelTracingPass.getDebugPassPP(), enabled: this.voxelTracingDebugEnabled }, { pass: this._spatialBlurPass.getDebugPassPP(), enabled: this.spatialBlurPassDebugEnabled }, { pass: this._accumulationPass.getDebugPassPP(), enabled: this.accumulationPassDebugEnabled }, { pass: this._getGBufferDebugPass(), enabled: this.gbufferDebugEnabled });\n        for (let i = 0; i < this._debugPasses.length; i++) {\n            if (!this._debugPasses[i].pass) {\n                continue;\n            }\n            this.addEffect(new PostProcessRenderEffect(this.scene.getEngine(), this._debugPasses[i].pass.name, () => {\n                return this._debugPasses[i].pass;\n            }, true));\n        }\n        const cameras = this.cameras.slice();\n        this.scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this.name, this.cameras);\n        this.scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(this.name, cameras);\n        for (let i = 0; i < this._debugPasses.length; i++) {\n            if (!this._debugPasses[i].pass) {\n                continue;\n            }\n            if (this._debugPasses[i].enabled) {\n                this._enableEffect(this._debugPasses[i].pass.name, this.cameras);\n            }\n            else {\n                this._disableEffect(this._debugPasses[i].pass.name, this.cameras);\n            }\n        }\n    }\n    _disposeEffectPasses() {\n        this.scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this.name, this.cameras);\n        this._disposeDebugPasses();\n        this._reset();\n    }\n    _disposeDebugPasses() {\n        for (let i = 0; i < this._debugPasses.length; i++) {\n            this._disableEffect(this._debugPasses[i].pass.name, this.cameras);\n            this._debugPasses[i].pass.dispose();\n        }\n        this._debugPasses = [];\n    }\n    _updateDebugPasses() {\n        let count = 0;\n        if (this._gbufferDebugEnabled) {\n            count++;\n        }\n        if (this.cdfDebugEnabled) {\n            count++;\n        }\n        if (this.voxelDebugEnabled) {\n            count++;\n        }\n        if (this.voxelTracingDebugEnabled) {\n            count++;\n        }\n        if (this.spatialBlurPassDebugEnabled) {\n            count++;\n        }\n        if (this.accumulationPassDebugEnabled) {\n            count++;\n        }\n        const rows = Math.ceil(Math.sqrt(count));\n        const cols = Math.ceil(count / rows);\n        const width = 1.0 / cols;\n        const height = 1.0 / rows;\n        let x = 0;\n        let y = 0;\n        if (this.gbufferDebugEnabled) {\n            this._gBufferDebugSizeParams.set(x, y, cols, rows);\n            x -= width;\n            if (x <= -1) {\n                x = 0;\n                y -= height;\n            }\n        }\n        if (this.cdfDebugEnabled && this.scene.iblCdfGenerator) {\n            this.scene.iblCdfGenerator.setDebugDisplayParams(x, y, cols, rows);\n            x -= width;\n            if (x <= -1) {\n                x = 0;\n                y -= height;\n            }\n        }\n        if (this.voxelDebugEnabled) {\n            this._voxelRenderer.setDebugDisplayParams(x, y, cols, rows);\n            x -= width;\n            if (x <= -1) {\n                x = 0;\n                y -= height;\n            }\n        }\n        if (this.voxelTracingDebugEnabled) {\n            this._voxelTracingPass.setDebugDisplayParams(x, y, cols, rows);\n            x -= width;\n            if (x <= -1) {\n                x = 0;\n                y -= height;\n            }\n        }\n        if (this.spatialBlurPassDebugEnabled) {\n            this._spatialBlurPass.setDebugDisplayParams(x, y, cols, rows);\n            x -= width;\n            if (x <= -1) {\n                x = 0;\n                y -= height;\n            }\n        }\n        if (this.accumulationPassDebugEnabled) {\n            this._accumulationPass.setDebugDisplayParams(x, y, cols, rows);\n            x -= width;\n            if (x <= -1) {\n                x = 0;\n                y -= height;\n            }\n        }\n    }\n    /**\n     * Update the SS shadow max distance and thickness based on the voxel grid size and resolution.\n     * The max distance should be just a little larger than the world size of a single voxel.\n     */\n    _updateSsShadowParams() {\n        this._voxelTracingPass.sssMaxDist = (this._sssMaxDistScale * this.voxelGridSize) / (1 << this.resolutionExp);\n        this._voxelTracingPass.sssThickness = this._sssThicknessScale * 0.005 * this.voxelGridSize;\n    }\n    /**\n     * Apply the shadows to a material or array of materials. If no material is provided, all\n     * materials in the scene will be added.\n     * @param material Material that will be affected by the shadows. If not provided, all materials of the scene will be affected.\n     */\n    addShadowReceivingMaterial(material) {\n        if (material) {\n            if (Array.isArray(material)) {\n                for (const m of material) {\n                    this._addShadowSupportToMaterial(m);\n                }\n            }\n            else {\n                this._addShadowSupportToMaterial(material);\n            }\n        }\n        else {\n            for (const mat of this.scene.materials) {\n                this._addShadowSupportToMaterial(mat);\n            }\n        }\n    }\n    /**\n     * Remove a material from the list of materials that receive shadows. If no material\n     * is provided, all materials in the scene will be removed.\n     * @param material The material or array of materials that will no longer receive shadows\n     */\n    removeShadowReceivingMaterial(material) {\n        if (Array.isArray(material)) {\n            for (const m of material) {\n                const matIndex = this._materialsWithRenderPlugin.indexOf(m);\n                if (matIndex !== -1) {\n                    this._materialsWithRenderPlugin.splice(matIndex, 1);\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\n                    const plugin = m.pluginManager?.getPlugin(IBLShadowsPluginMaterial.Name);\n                    plugin.isEnabled = false;\n                }\n            }\n        }\n        else {\n            const matIndex = this._materialsWithRenderPlugin.indexOf(material);\n            if (matIndex !== -1) {\n                this._materialsWithRenderPlugin.splice(matIndex, 1);\n                const plugin = material.pluginManager.getPlugin(IBLShadowsPluginMaterial.Name);\n                plugin.isEnabled = false;\n            }\n        }\n    }\n    /**\n     * Clear the list of materials that receive shadows. This will remove all materials from the list\n     */\n    clearShadowReceivingMaterials() {\n        for (const mat of this._materialsWithRenderPlugin) {\n            const plugin = mat.pluginManager?.getPlugin(IBLShadowsPluginMaterial.Name);\n            if (plugin) {\n                plugin.isEnabled = false;\n            }\n        }\n        this._materialsWithRenderPlugin.length = 0;\n    }\n    _addShadowSupportToMaterial(material) {\n        if (!(material instanceof PBRBaseMaterial) && !(material instanceof StandardMaterial)) {\n            return;\n        }\n        let plugin = material.pluginManager?.getPlugin(IBLShadowsPluginMaterial.Name);\n        if (!plugin) {\n            plugin = new IBLShadowsPluginMaterial(material);\n        }\n        if (this._materialsWithRenderPlugin.indexOf(material) !== -1) {\n            return;\n        }\n        if (this._enabled) {\n            plugin.iblShadowsTexture = this._getAccumulatedTexture().getInternalTexture();\n            plugin.shadowOpacity = this.shadowOpacity;\n        }\n        plugin.isEnabled = this._enabled;\n        plugin.isColored = this._coloredShadows;\n        this._materialsWithRenderPlugin.push(material);\n    }\n    _setPluginParameters() {\n        if (!this._enabled) {\n            return;\n        }\n        for (const mat of this._materialsWithRenderPlugin) {\n            if (mat.pluginManager) {\n                const plugin = mat.pluginManager.getPlugin(IBLShadowsPluginMaterial.Name);\n                plugin.iblShadowsTexture = this._getAccumulatedTexture().getInternalTexture();\n                plugin.shadowOpacity = this.shadowOpacity;\n                plugin.isColored = this._coloredShadows;\n            }\n        }\n    }\n    _updateBeforeRender() {\n        this._updateDebugPasses();\n    }\n    _listenForCameraChanges() {\n        // We want to listen for camera changes and change settings while the camera is moving.\n        this.scene.activeCamera?.onViewMatrixChangedObservable.add(() => {\n            this._accumulationPass.isMoving = true;\n        });\n    }\n    /**\n     * Checks if the IBL shadow pipeline is ready to render shadows\n     * @returns true if the IBL shadow pipeline is ready to render the shadows\n     */\n    isReady() {\n        return (this._noiseTexture.isReady() &&\n            this._voxelRenderer.isReady() &&\n            this.scene.iblCdfGenerator &&\n            this.scene.iblCdfGenerator.isReady() &&\n            (!this._voxelTracingPass || this._voxelTracingPass.isReady()) &&\n            (!this._spatialBlurPass || this._spatialBlurPass.isReady()) &&\n            (!this._accumulationPass || this._accumulationPass.isReady()));\n    }\n    /**\n     * Get the class name\n     * @returns \"IBLShadowsRenderPipeline\"\n     */\n    getClassName() {\n        return \"IBLShadowsRenderPipeline\";\n    }\n    /**\n     * Disposes the IBL shadow pipeline and associated resources\n     */\n    dispose() {\n        const materials = this._materialsWithRenderPlugin.splice(0);\n        for (const mat of materials) {\n            this.removeShadowReceivingMaterial(mat);\n        }\n        this._disposeEffectPasses();\n        this._noiseTexture.dispose();\n        this._voxelRenderer.dispose();\n        this._voxelTracingPass.dispose();\n        this._spatialBlurPass.dispose();\n        this._accumulationPass.dispose();\n        this._dummyTexture2d.dispose();\n        this._dummyTexture3d.dispose();\n        this.onNewIblReadyObservable.clear();\n        this.onShadowTextureReadyObservable.clear();\n        this.onVoxelizationCompleteObservable.clear();\n        super.dispose();\n    }\n}\n//# sourceMappingURL=iblShadowsRenderPipeline.js.map"],"names":["MultiRenderTarget","RenderTargetTexture","isSupported","this","_engine","getCaps","drawBuffersExtension","textures","_textures","count","_count","depthTexture","length","wrapU","wrap","i","wrapV","constructor","name","size","scene","options","textureNames","generateMipMaps","generateDepthTexture","depthTextureFormat","Constants","TEXTUREFORMAT_DEPTH16","doNotChangeAspectRatio","undefined","drawOnlyOnFirstAttachmentByDefault","super","dispose","_textureNames","types","samplingModes","useSRGBBuffers","formats","targetTypes","faceIndex","layerIndex","layerCounts","_initTypes","generateDepthBuffer","generateStencilBuffer","samples","_multiRenderTargetOptions","textureCount","labels","label","_drawOnlyOnFirstAttachmentByDefault","_createInternalTextures","_createTextures","targets","push","defaultType","TEXTURETYPE_UNSIGNED_BYTE","Texture","BILINEAR_SAMPLINGMODE","TEXTUREFORMAT_RGBA","TEXTURE_2D","_createInternaTextureIndexMapping","mapMainInternalTexture2Index","mapInternalTexture2MainIndex","_renderTarget","internalTextures","texture","mainIndex","uniqueId","_rebuild","fromContextLost","forceFullRebuild","releaseInternalTextures","_releaseTextures","setTexture","_texture","_noMipmap","useMipMaps","_useSRGBBuffer","setSamples","_getEngine","createMultipleRenderTarget","_size","getScene","setInternalTexture","index","disposePrevious","renderTarget","type","samplingMode","target","is2DArray","TEXTURE_2D_ARRAY","isCube","TEXTURE_CUBE_MAP","is3D","TEXTURE_3D","setLayerAndFaceIndex","setLayerAndFaceIndices","layerIndices","faceIndices","_samples","value","resize","_processSizeParameter","updateCount","_unbindFrameBuffer","engine","unBindMultiColorAttachmentFramebuffer","onAfterRenderObservable","notifyObservers","doNotDisposeInternalTextures","_IblShadowsVoxelRenderer","getVoxelGrid","_triPlanarVoxelization","_voxelGridRT","_voxelGridZaxis","getDebugPassPP","_voxelDebugPass","_createDebugPass","triPlanarVoxelization","enabled","_disposeVoxelTextures","setWorldScaleMatrix","matrix","_invWorldScaleMatrix","isVoxelizationInProgress","_voxelizationInProgress","voxelResolutionExp","_voxelResolutionExp","resolutionExp","Math","round","min","max","_voxelResolution","pow","voxelDebugAxis","axis","_voxelDebugAxis","setDebugDisplayParams","x","y","widthScale","heightScale","_debugSizeParams","set","setDebugMipNumber","mipNum","_debugMipNumber","debugPassName","_debugPassName","voxelDebugEnabled","_voxelDebugEnabled","_voxelSlabDebugRT","width","getRenderWidth","height","getRenderHeight","_scene","format","TEXTURE_NEAREST_SAMPLINGMODE","noPrePassRenderer","_removeVoxelRTs","_addRTsForRender","_includedMeshes","_setDebugBindingsBound","_setDebugBindings","bind","onBeforeRenderObservable","add","removeCallback","isWebGPU","debugOptions","textureFormat","textureType","uniforms","samplers","reusable","shaderLanguage","extraInitializations","useWebGPU","list","_isVoxelGrid3D","import","PostProcess","onApplyObservable","effect","_voxelGridXaxis","_voxelGridYaxis","setVector4","setFloat","iblShadowsRenderPipeline","_voxelMrtsXaxis","_voxelMrtsYaxis","_voxelMrtsZaxis","onVoxelizationCompleteObservable","Observable","_renderTargets","Matrix","Identity","_mipArray","Vector4","getEngine","Logger","Error","_maxDrawBuffers","maxDrawBuffers","_copyMipEffectRenderer","EffectRenderer","_copyMipEffectWrapper","EffectWrapper","fragmentShader","useShaderStore","uniformNames","samplerNames","extraInitializationsAsync","async","_generateMipMaps","iterations","ceil","log2","_generateMipMap","lodLevel","mipTarget","render","_copyMipMaps","_copyMipMap","voxelGrid","rt","_rtWrapper","saveStates","bindSize","getSize","layer","bindFramebuffer","applyEffectWrapper","setInt","draw","unBindFramebuffer","restoreStates","_computeNumberOfSlabs","layers","depth","voxelAxisOptions","TEXTUREFORMAT_R","numSlabs","voxelCombinedOptions","TEXTURE_NEAREST_NEAREST_MIPNEAREST","_createVoxelMRTs","ProceduralTexture","proceduralTextures","splice","indexOf","autoClear","CLAMP_ADDRESSMODE","generateVoxelMipOptions","Array","mipIdx","mipDim","mipSize","_createVoxelMaterials","voxelRT","mrtArray","fill","mrtIndex","map","mrt","TEXTURE_TRILINEAR_SAMPLINGMODE","clearColor","Color4","getInternalTexture","_stopVoxelization","mip","_voxelMaterial","_voxelSlabDebugMaterial","ShaderMaterial","defines","Promise","all","cullBackFaces","backFaceCulling","depthFunction","Engine","ALWAYS","setMatrix","activeCamera","getProjectionMatrix","getViewMatrix","isReady","allReady","mipReady","rts","rtIdx","findIndex","customRenderTargets","updateVoxelGrid","includedMeshes","_renderVoxelGridBound","_renderVoxelGrid","rttReady","isReadyForRendering","whenCompiledAsync","then","mrts","shaderType","continuousRender","slabSize","voxelMaterial","renderList","nearPlane","farPlane","stepSize","cameraPosition","Vector3","targetPosition","upDirection","LookAtLH","mesh","subMeshes","setMaterialForRendering","meshes","getChildMeshes","childMesh","concat","ShaderStore","IncludesShadersStore","shader","ShadersStore","geometryPixelShader","geometryVertexShader","Uniforms","AddClipPlaneUniforms","GeometryBufferRenderer","normalsAreUnsigned","_normalsAreUnsigned","_linkPrePassRenderer","prePassRenderer","_linkedWithPrePass","_prePassRenderer","_multiRenderTarget","onClearObservable","clear","_unlinkPrePassRenderer","_createRenderTargets","_resetLayout","_enableDepth","_enableNormal","_enablePosition","_enableReflectivity","_enableVelocity","_enableVelocityLinear","_enableScreenspaceDepth","_attachmentsFromPrePass","_forceTextureType","geometryBufferType","POSITION_TEXTURE_TYPE","_positionIndex","VELOCITY_TEXTURE_TYPE","_velocityIndex","VELOCITY_LINEAR_TEXTURE_TYPE","_velocityLinearIndex","REFLECTIVITY_TEXTURE_TYPE","_reflectivityIndex","DEPTH_TEXTURE_TYPE","_depthIndex","NORMAL_TEXTURE_TYPE","_normalIndex","SCREENSPACE_DEPTH_TEXTURE_TYPE","_screenspaceDepthIndex","_setAttachments","attachments","_linkInternalTexture","internalTexture","getTextureIndex","enableDepth","enable","enableNormal","enablePosition","enableVelocity","_previousTransformationMatrices","needsPreviousWorldMatrices","enableVelocityLinear","enableReflectivity","enableScreenspaceDepth","ratio","_ratioOrDimensions","_shaderLanguage","ratioOrDimensions","depthFormat","textureTypesAndFormats","_previousBonesTransformationMatrices","excludedSkinnedMeshesFromVelocity","renderTransparentMeshes","generateNormalsInWorldSpace","_resizeObserver","_clearColor","_clearDepthColor","useSpecificClearForDepthTexture","_shadersLoaded","_useUbo","supportsUniformBuffers","_depthFormat","_textureTypesAndFormats","_initShaderSourceAsync","_SceneComponentInitialization","ForceGLSL","resolve","geometry_vertex","geometry_fragment","subMesh","useInstances","material","getMaterial","disableDepthWrite","attribs","VertexBuffer","PositionKind","NormalKind","getMesh","uv1","uv2","needUv","needAlphaTestingForMesh","getAlphaTestTexture","coordinatesIndex","bumpTexture","normalTexture","MaterialFlags","BumpTextureEnabled","metallicWorkflow","getClassName","metallicRoughnessTexture","metallic","roughness","baseTexture","gammaSpace","baseColor","specularGlossinessTexture","specularColor","glossiness","metallicTexture","albedoTexture","albedoColor","reflectivityTexture","reflectivityColor","microSurface","specularTexture","isVerticesDataPresent","UVKind","UV2Kind","useBones","computeBonesUsingShaders","skeleton","MatricesIndicesKind","MatricesWeightsKind","numBoneInfluencers","MatricesIndicesExtraKind","MatricesWeightsExtraKind","isUsingTextureForMatrices","bones","numMorphInfluencers","morphTargetManager","PrepareDefinesAndAttributesForMorphTargets","PushAttributesForInstances","getRenderingMesh","hasThinInstances","PrepareStringDefinesForClipPlanes","drawWrapper","_getDrawWrapper","cachedDefines","join","setEffect","createEffect","attributes","uniformsNames","onCompiled","fallbacks","onError","uniformBuffersNames","indexParameters","buffersCount","maxSimultaneousMorphTargets","getGBuffer","onResizeObservable","remove","_assignRenderTargetIndices","textureTypesAndFormat","_caps","textureFloat","textureFloatLinearFiltering","TEXTURETYPE_FLOAT","textureHalfFloat","textureHalfFloatLinearFiltering","TEXTURETYPE_HALF_FLOAT","dimensions","textureTypes","textureFormats","typeAndFormat","TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV","TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV","refreshRate","renderParticles","layoutAttachmentsAll","layoutAttachmentsAllButDepth","layoutAttachmentsDepthOnly","attachmentsAll","buildTextureLayout","attachmentsAllButDepth","attachmentsDepthOnly","bindAttachments","renderSubMesh","renderingMesh","effectiveMesh","getEffectiveMesh","_internalAbstractMeshDataInfo","_isActiveIntermediate","world","viewProjection","getTransformMatrix","bonesTransformations","getTransformMatrices","_copyBonesTransformationMatrices","Float32Array","batch","_getInstancesRenderList","_id","getReplacementMesh","mustReturn","hardwareInstancedRendering","instancedArrays","visibleInstances","getWorldMatrix","sideOrientation","enableEffect","_bind","fillMode","BindSceneUniformBuffer","getSceneUniformBuffer","finalizeSceneUbo","instanceDataStorage","_instanceDataStorage","isFrozen","mainDeterminant","_getWorldMatrixDeterminant","_getEffectiveOrientation","Material","ClockWiseSideOrientation","CounterClockWiseSideOrientation","_preBind","alphaTexture","getTextureMatrix","standardDerivatives","setFloat3","level","parallaxScaleBias","setFloat2","invertNormalMapX","invertNormalMapY","setColor3","BindClipPlane","getUniformIndex","boneTexture","getTransformMatrixTexture","setMatrices","BindMorphTargetParameters","isUsingTextureForTargets","_processRendering","isInstance","w","clone","customIsReadyFunction","preWarm","customRenderFunction","opaqueSubMeshes","alphaTestSubMeshes","transparentSubMeshes","depthOnlySubMeshes","setColorWrite","data","setDepthWrite","source","_","_WarnImport","_IblShadowsVoxelTracingPass","voxelShadowOpacity","_voxelShadowOpacity","ssShadowOpacity","_ssShadowOpacity","sssSamples","_sssSamples","sssStride","_sssStride","sssMaxDist","_sssMaxDist","sssThickness","_sssThickness","voxelNormalBias","_voxelNormalBias","voxelDirectionBias","_voxelDirectionBias","sampleDirections","_sampleDirections","envRotation","_envRotation","getOutputTexture","_outputTexture","_debugPassPP","coloredShadows","_coloredShadows","_cameraInvView","_cameraInvProj","_frameId","_shadowParameters","_sssParameters","_opacityParameters","_voxelBiasParameters","debugEnabled","_debugVoxelMarchEnabled","_renderWhenGBufferReady","_renderPipeline","_createDefines","textureOptions","_setBindings","_render","addOnce","geometryBufferRenderer","useRightHandedSystem","camera","invertToRef","rotation","environmentTexture","rotationY","PI","_getVoxelGridTexture","highestMip","floor","_getNoiseTexture","cdfGenerator","iblCdfGenerator","Warn","getIcdfTexture","depthIndex","wnormalIndex","getEffect","scaleFactor","newSize","_IblShadowsSpatialBlurPass","setWorldScale","scale","_worldScale","_blurParameters","_getVoxelTracingTexture","_IblShadowsAccumulationPass","remanence","_remanence","reset","_reset","isMoving","_isMoving","_accumulationParams","onReadyObservable","outputTextureOptions","onGeneratedObservable","_setOutputTextureBindings","accumulationOptions","_oldAccumulationCopy","onBeforeGenerationObservable","_setAccumulationCopyBindings","localPositionOptions","_oldPositionCopy","_updatePositionCopy","voxelGridSize","_getSpatialBlurTexture","_dummyTexture2d","velocityIndex","wPositionIndex","_disposeTextures","PostProcessRenderPipeline","_name","cameras","_cameras","_renderEffects","_renderEffectsForIsolatedPass","renderEffectName","Object","prototype","hasOwnProperty","call","addEffect","renderEffect","_enableEffect","renderEffects","_enable","Tools","MakeArray","_disableEffect","_disable","_attachCameras","unique","cams","indicesToDelete","_detachCameras","_update","cameraName","_enableMSAAOnFirstPostProcess","sampleCount","_features","supportMSAA","effectKeys","keys","postProcesses","getPostProcesses","_adaptPostProcessesToViewPort","effectKey","postProcess","adaptScaleToCurrentViewport","setPrePassRenderer","__decorate","serialize","PostProcessRenderEffect","singleInstance","_singleInstance","_getPostProcesses","_indicesForCamera","_postProcesses","pps","ppIndex","cameraKey","isArray","attachPostProcess","detachPostProcess","j","RawTexture3D","invertY","TRILINEAR_SAMPLINGMODE","creationFlags","createRawTexture3D","update","updateRawTexture3D","MaterialIBLShadowsRenderDefines","MaterialDefines","arguments","RENDER_WITH_IBL_SHADOWS","COLORED_IBL_SHADOWS","IBLShadowsPluginMaterial","MaterialPluginBase","isColored","_isColored","_markAllSubMeshesAsTexturesDirty","_isEnabled","_internalMarkAllSubMeshesAsTexturesDirty","isCompatible","Name","shadowOpacity","isEnabled","_dirtyCallbacks","MATERIAL_TextureDirtyFlag","prepareDefines","getUniforms","ubo","fragment","getSamplers","bindForSubMesh","uniformBuffer","bindTexture","iblShadowsTexture","updateFloat2","_material","updateFloat","getCustomCode","frag","CUSTOM_FRAGMENT_DEFINITIONS","PBRBaseMaterial","expandToProperty","RegisterClass","defineProperty","Scene","get","_geometryBufferRenderer","enumerable","configurable","enableGeometryBufferRenderer","disableGeometryBufferRenderer","GeometryBufferRendererSceneComponent","SceneComponentConstants","NAME_GEOMETRYBUFFERRENDERER","register","_gatherRenderTargetsStage","registerStep","STEP_GATHERRENDERTARGETS_GEOMETRYBUFFERRENDERER","_gatherRenderTargets","rebuild","renderTargets","component","_getComponent","_addComponent","_iblCdfGenerator","enableIblCdfGenerator","IblCdfGenerator","iblSource","disableIblCdfGenerator","IblCdfGeneratorSceneComponent","NAME_IBLCDFGENERATOR","_newIblObserver","_updateIblSource","onEnvironmentTextureChangedObservable","IblShadowsRenderPipeline","resetAccumulation","_accumulationPass","_shadowOpacity","_setPluginParameters","_voxelTracingPass","shadowRenderSizeFactor","_renderSizeFactor","_spatialBlurPass","ssShadowSampleCount","ssShadowStride","ssShadowDistanceScale","_sssMaxDistScale","_updateSsShadowParams","ssShadowThicknessScale","_sssThicknessScale","tex","_voxelRenderer","_dummyTexture3d","_noiseTexture","_getAccumulatedTexture","gbufferDebugEnabled","_gbufferDebugEnabled","allowDebugPasses","_getGBufferDebugPass","cdfDebugEnabled","axisNum","voxelDebugDisplayMip","voxelTracingDebugEnabled","spatialBlurPassDebugEnabled","accumulationPassDebugEnabled","addShadowCastingMesh","m","_shadowCastingMeshes","removeShadowCastingMesh","clearShadowCastingMeshes","newResolution","shadowRemanence","_allowDebugPasses","_createDebugPasses","_disposeDebugPasses","IsSupported","EngineStore","LastCreatedEngine","supportIBLShadows","toggleShadow","_enabled","mat","_materialsWithRenderPlugin","pluginManager","getPlugin","updateVoxelization","updateSceneBounds","bounds","Number","MAX_VALUE","localBounds","getHierarchyBoundingVectors","Minimize","Maximize","subtract","z","isFinite","halfSize","centre","multiplyByFloats","invWorldScaleMatrix","Compose","Quaternion","multiplyToRef","_debugPasses","onShadowTextureReadyObservable","onNewIblReadyObservable","_gBufferDebugSizeParams","blackPixels","Uint8Array","RawTexture","TEXTUREFORMAT_RG","TEXTUREFORMAT_DEPTH32_FLOAT","ssShadowsEnabled","postProcessRenderPipelineManager","addPipeline","onActiveCameraChanged","_listenForCameraChanges","_updateBeforeRender","_handleResize","_gbufferDebugPass","currentSampleCount","normalIndex","positionIndex","maxZ","pass","slice","detachCamerasFromRenderPipeline","attachCamerasToRenderPipeline","_disposeEffectPasses","_updateDebugPasses","rows","sqrt","cols","addShadowReceivingMaterial","_addShadowSupportToMaterial","materials","removeShadowReceivingMaterial","matIndex","plugin","clearShadowReceivingMaterials","StandardMaterial","onViewMatrixChangedObservable"],"mappings":"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"}