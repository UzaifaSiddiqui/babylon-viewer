{"version":3,"file":"flowGraphThrottleBlock-O8LVRDPb.esm.min.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Execution/ControlFlow/flowGraphThrottleBlock.js"],"sourcesContent":["import { RichTypeNumber } from \"../../../flowGraphRichTypes\";\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../../flowGraphExecutionBlockWithOutSignal\";\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\n/**\n * A block that throttles the execution of its output flow.\n */\nexport class FlowGraphThrottleBlock extends FlowGraphExecutionBlockWithOutSignal {\n    constructor(config) {\n        super(config);\n        this.reset = this._registerSignalInput(\"reset\");\n        this.duration = this.registerDataInput(\"duration\", RichTypeNumber);\n        this.lastRemainingTime = this.registerDataOutput(\"lastRemainingTime\", RichTypeNumber, NaN);\n    }\n    _execute(context, callingSignal) {\n        if (callingSignal === this.reset) {\n            this.lastRemainingTime.setValue(NaN, context);\n            context._setExecutionVariable(this, \"lastRemainingTime\", NaN);\n            context._setExecutionVariable(this, \"timestamp\", 0);\n            return;\n        }\n        // in seconds\n        const durationValue = this.duration.getValue(context);\n        if (durationValue <= 0 || isNaN(durationValue) || !isFinite(durationValue)) {\n            return this._reportError(context, \"Invalid duration in Throttle block\");\n        }\n        const lastRemainingTime = context._getExecutionVariable(this, \"lastRemainingTime\", NaN);\n        // Using Date.now() to get ms since epoch. not using performance.now() because its precision is not needed here\n        const currentTime = Date.now();\n        if (isNaN(lastRemainingTime)) {\n            this.lastRemainingTime.setValue(0, context);\n            context._setExecutionVariable(this, \"lastRemainingTime\", 0);\n            context._setExecutionVariable(this, \"timestamp\", currentTime);\n            // according to glTF interactivity specs\n            return this.out._activateSignal(context);\n        }\n        else {\n            const elapsedTime = currentTime - context._getExecutionVariable(this, \"timestamp\", 0);\n            // duration is in seconds, so we need to multiply by 1000\n            const durationInMs = durationValue * 1000;\n            if (durationInMs <= elapsedTime) {\n                this.lastRemainingTime.setValue(0, context);\n                context._setExecutionVariable(this, \"lastRemainingTime\", 0);\n                context._setExecutionVariable(this, \"timestamp\", currentTime);\n                return this.out._activateSignal(context);\n            }\n            else {\n                const remainingTime = durationInMs - elapsedTime;\n                // output is in seconds\n                this.lastRemainingTime.setValue(remainingTime / 1000, context);\n                context._setExecutionVariable(this, \"lastRemainingTime\", remainingTime);\n            }\n        }\n    }\n    /**\n     * @returns class name of the block.\n     */\n    getClassName() {\n        return \"FlowGraphThrottleBlock\" /* FlowGraphBlockNames.Throttle */;\n    }\n}\nRegisterClass(\"FlowGraphThrottleBlock\" /* FlowGraphBlockNames.Throttle */, FlowGraphThrottleBlock);\n//# sourceMappingURL=flowGraphThrottleBlock.js.map"],"names":["FlowGraphThrottleBlock","FlowGraphExecutionBlockWithOutSignal","constructor","config","super","this","reset","_registerSignalInput","duration","registerDataInput","RichTypeNumber","lastRemainingTime","registerDataOutput","NaN","_execute","context","callingSignal","setValue","_setExecutionVariable","durationValue","getValue","isNaN","isFinite","_reportError","_getExecutionVariable","currentTime","Date","now","out","_activateSignal","elapsedTime","durationInMs","remainingTime","getClassName","RegisterClass"],"mappings":"yNAMO,MAAMA,UAA+BC,EACxC,WAAAC,CAAYC,GACRC,MAAMD,GACNE,KAAKC,MAAQD,KAAKE,qBAAqB,SACvCF,KAAKG,SAAWH,KAAKI,kBAAkB,WAAYC,GACnDL,KAAKM,kBAAoBN,KAAKO,mBAAmB,oBAAqBF,EAAgBG,IAC9F,CACI,QAAAC,CAASC,EAASC,GACd,GAAIA,IAAkBX,KAAKC,MAIvB,OAHAD,KAAKM,kBAAkBM,SAASJ,IAAKE,GACrCA,EAAQG,sBAAsBb,KAAM,oBAAqBQ,UACzDE,EAAQG,sBAAsBb,KAAM,YAAa,GAIrD,MAAMc,EAAgBd,KAAKG,SAASY,SAASL,GAC7C,GAAII,GAAiB,GAAKE,MAAMF,KAAmBG,SAASH,GACxD,OAAOd,KAAKkB,aAAaR,EAAS,sCAEtC,MAAMJ,EAAoBI,EAAQS,sBAAsBnB,KAAM,oBAAqBQ,KAE7EY,EAAcC,KAAKC,MACzB,GAAIN,MAAMV,GAKN,OAJAN,KAAKM,kBAAkBM,SAAS,EAAGF,GACnCA,EAAQG,sBAAsBb,KAAM,oBAAqB,GACzDU,EAAQG,sBAAsBb,KAAM,YAAaoB,GAE1CpB,KAAKuB,IAAIC,gBAAgBd,GAE/B,CACD,MAAMe,EAAcL,EAAcV,EAAQS,sBAAsBnB,KAAM,YAAa,GAE7E0B,EAA+B,IAAhBZ,EACrB,GAAIY,GAAgBD,EAIhB,OAHAzB,KAAKM,kBAAkBM,SAAS,EAAGF,GACnCA,EAAQG,sBAAsBb,KAAM,oBAAqB,GACzDU,EAAQG,sBAAsBb,KAAM,YAAaoB,GAC1CpB,KAAKuB,IAAIC,gBAAgBd,GAE/B,CACD,MAAMiB,EAAgBD,EAAeD,EAErCzB,KAAKM,kBAAkBM,SAASe,EAAgB,IAAMjB,GACtDA,EAAQG,sBAAsBb,KAAM,oBAAqB2B,EACzE,CACA,CACA,CAII,YAAAC,GACI,MAAO,wBACf,EAEAC,EAAc,yBAA6DlC"}