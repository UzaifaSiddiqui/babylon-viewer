{"version":3,"file":"flowGraphMathBlocks-DZ0FfbP5.esm.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Data/flowGraphConstantOperationBlock.js","../../../../../dev/core/dist/FlowGraph/Blocks/Data/flowGraphTernaryOperationBlock.js","../../../../../dev/core/dist/FlowGraph/Blocks/Data/Math/flowGraphMathBlocks.js"],"sourcesContent":["import { FlowGraphCachedOperationBlock } from \"./flowGraphCachedOperationBlock\";\n/**\n * Block that outputs a value of type ResultT, resulting of an operation with no inputs.\n * This block is being extended by some math operations and should not be used directly.\n * @internal\n */\nexport class FlowGraphConstantOperationBlock extends FlowGraphCachedOperationBlock {\n    constructor(richType, _operation, _className, config) {\n        super(richType, config);\n        this._operation = _operation;\n        this._className = _className;\n    }\n    /**\n     * the operation performed by this block\n     * @param context the graph context\n     * @returns the result of the operation\n     */\n    _doOperation(context) {\n        return this._operation(context);\n    }\n    /**\n     * Gets the class name of this block\n     * @returns the class name\n     */\n    getClassName() {\n        return this._className;\n    }\n}\n//# sourceMappingURL=flowGraphConstantOperationBlock.js.map","import { FlowGraphCachedOperationBlock } from \"./flowGraphCachedOperationBlock\";\n/**\n * @internal\n * The base block for all ternary operation blocks.\n */\nexport class FlowGraphTernaryOperationBlock extends FlowGraphCachedOperationBlock {\n    constructor(t1Type, t2Type, t3Type, resultRichType, _operation, _className, config) {\n        super(resultRichType, config);\n        this._operation = _operation;\n        this._className = _className;\n        this.a = this.registerDataInput(\"a\", t1Type);\n        this.b = this.registerDataInput(\"b\", t2Type);\n        this.c = this.registerDataInput(\"c\", t3Type);\n    }\n    /**\n     * the operation performed by this block\n     * @param context the graph context\n     * @returns the result of the operation\n     */\n    _doOperation(context) {\n        return this._operation(this.a.getValue(context), this.b.getValue(context), this.c.getValue(context));\n    }\n    /**\n     * Gets the class name of this block\n     * @returns the class name\n     */\n    getClassName() {\n        return this._className;\n    }\n}\n//# sourceMappingURL=flowGraphTernaryOperationBlock.js.map","import { RegisterClass } from \"../../../../Misc/typeStore\";\nimport { getRichTypeByFlowGraphType, RichTypeAny, RichTypeBoolean, RichTypeFlowGraphInteger, RichTypeNumber } from \"../../../flowGraphRichTypes\";\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\nimport { FlowGraphConstantOperationBlock } from \"../flowGraphConstantOperationBlock\";\nimport { Quaternion, Matrix, Vector2, Vector3, Vector4 } from \"../../../../Maths/math.vector\";\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\nimport { FlowGraphTernaryOperationBlock } from \"../flowGraphTernaryOperationBlock\";\nimport { FlowGraphInteger } from \"../../../CustomTypes/flowGraphInteger\";\nimport { FlowGraphMatrix2D, FlowGraphMatrix3D } from \"core/FlowGraph/CustomTypes/flowGraphMatrix\";\nimport { _AreSameIntegerClass, _AreSameMatrixClass, _AreSameVectorOrQuaternionClass, _GetClassNameOf, getNumericValue, isNumeric } from \"core/FlowGraph/utils\";\n/**\n * Polymorphic add block.\n */\nexport class FlowGraphAddBlock extends FlowGraphBinaryOperationBlock {\n    /**\n     * Construct a new add block.\n     * @param config optional configuration\n     */\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.type), getRichTypeByFlowGraphType(config?.type), getRichTypeByFlowGraphType(config?.type), (a, b) => this._polymorphicAdd(a, b), \"FlowGraphAddBlock\" /* FlowGraphBlockNames.Add */, config);\n    }\n    _polymorphicAdd(a, b) {\n        const aClassName = _GetClassNameOf(a);\n        const bClassName = _GetClassNameOf(b);\n        if (_AreSameVectorOrQuaternionClass(aClassName, bClassName) || _AreSameMatrixClass(aClassName, bClassName) || _AreSameIntegerClass(aClassName, bClassName)) {\n            // cast to vector3, but any other cast will be fine\n            return a.add(b);\n        }\n        else if (aClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */ || bClassName === \"Vector4\" /* FlowGraphTypes.Vector4 */) {\n            return new Vector4(a.x, a.y, a.z, a.w).addInPlace(b);\n        }\n        else if (aClassName === \"Vector4\" /* FlowGraphTypes.Vector4 */ || bClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */) {\n            return a.add(b);\n        }\n        else {\n            // at this point at least one of the variables is a number.\n            if (this.config?.preventIntegerFloatArithmetic && typeof a !== typeof b) {\n                throw new Error(\"Cannot add different types of numbers.\");\n            }\n            return getNumericValue(a) + getNumericValue(b);\n        }\n    }\n}\nRegisterClass(\"FlowGraphAddBlock\" /* FlowGraphBlockNames.Add */, FlowGraphAddBlock);\n/**\n * Polymorphic subtract block.\n */\nexport class FlowGraphSubtractBlock extends FlowGraphBinaryOperationBlock {\n    /**\n     * Construct a new subtract block.\n     * @param config optional configuration\n     */\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.type), getRichTypeByFlowGraphType(config?.type), getRichTypeByFlowGraphType(config?.type), (a, b) => this._polymorphicSubtract(a, b), \"FlowGraphSubtractBlock\" /* FlowGraphBlockNames.Subtract */, config);\n    }\n    _polymorphicSubtract(a, b) {\n        const aClassName = _GetClassNameOf(a);\n        const bClassName = _GetClassNameOf(b);\n        if (_AreSameVectorOrQuaternionClass(aClassName, bClassName) || _AreSameIntegerClass(aClassName, bClassName) || _AreSameMatrixClass(aClassName, bClassName)) {\n            // cast to vector3, but it can be casted to any vector type\n            return a.subtract(b);\n        }\n        else if (aClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */ || bClassName === \"Vector4\" /* FlowGraphTypes.Vector4 */) {\n            return new Vector4(a.x, a.y, a.z, a.w).subtractInPlace(b);\n        }\n        else if (aClassName === \"Vector4\" /* FlowGraphTypes.Vector4 */ || bClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */) {\n            return a.subtract(b);\n        }\n        else {\n            // at this point at least one of the variables is a number.\n            if (this.config?.preventIntegerFloatArithmetic && typeof a !== typeof b) {\n                throw new Error(\"Cannot add different types of numbers.\");\n            }\n            return getNumericValue(a) - getNumericValue(b);\n        }\n    }\n}\nRegisterClass(\"FlowGraphSubtractBlock\" /* FlowGraphBlockNames.Subtract */, FlowGraphSubtractBlock);\n/**\n * Polymorphic multiply block.\n * In case of matrix, it is configurable whether the multiplication is done per component.\n */\nexport class FlowGraphMultiplyBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.type), getRichTypeByFlowGraphType(config?.type), getRichTypeByFlowGraphType(config?.type), (a, b) => this._polymorphicMultiply(a, b), \"FlowGraphMultiplyBlock\" /* FlowGraphBlockNames.Multiply */, config);\n    }\n    _polymorphicMultiply(a, b) {\n        const aClassName = _GetClassNameOf(a);\n        const bClassName = _GetClassNameOf(b);\n        if (_AreSameVectorOrQuaternionClass(aClassName, bClassName) || _AreSameIntegerClass(aClassName, bClassName)) {\n            // cast to vector3, but it can be casted to any vector type\n            return a.multiply(b);\n        }\n        else if (aClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */ || bClassName === \"Vector4\" /* FlowGraphTypes.Vector4 */) {\n            return new Vector4(a.x, a.y, a.z, a.w).multiplyInPlace(b);\n        }\n        else if (aClassName === \"Vector4\" /* FlowGraphTypes.Vector4 */ || bClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */) {\n            return a.multiply(b);\n        }\n        else if (_AreSameMatrixClass(aClassName, bClassName)) {\n            if (this.config?.useMatrixPerComponent) {\n                // this is the definition of multiplication of glTF interactivity\n                // get a's m as array, and multiply each component with b's m\n                const aM = a.m;\n                for (let i = 0; i < aM.length; i++) {\n                    aM[i] *= b.m[i];\n                }\n                if (aClassName === \"Matrix2D\" /* FlowGraphTypes.Matrix2D */) {\n                    return new FlowGraphMatrix2D(aM);\n                }\n                else if (aClassName === \"Matrix3D\" /* FlowGraphTypes.Matrix3D */) {\n                    return new FlowGraphMatrix3D(aM);\n                }\n                else {\n                    return Matrix.FromArray(aM);\n                }\n            }\n            else {\n                a = a;\n                b = b;\n                return b.multiply(a);\n            }\n        }\n        else {\n            // at this point at least one of the variables is a number.\n            if (this.config?.preventIntegerFloatArithmetic && typeof a !== typeof b) {\n                throw new Error(\"Cannot add different types of numbers.\");\n            }\n            return getNumericValue(a) * getNumericValue(b);\n        }\n    }\n}\nRegisterClass(\"FlowGraphMultiplyBlock\" /* FlowGraphBlockNames.Multiply */, FlowGraphMultiplyBlock);\n/**\n * Polymorphic division block.\n */\nexport class FlowGraphDivideBlock extends FlowGraphBinaryOperationBlock {\n    /**\n     * Construct a new divide block.\n     * @param config - Optional configuration\n     */\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.type), getRichTypeByFlowGraphType(config?.type), getRichTypeByFlowGraphType(config?.type), (a, b) => this._polymorphicDivide(a, b), \"FlowGraphDivideBlock\" /* FlowGraphBlockNames.Divide */, config);\n    }\n    _polymorphicDivide(a, b) {\n        const aClassName = _GetClassNameOf(a);\n        const bClassName = _GetClassNameOf(b);\n        if (_AreSameVectorOrQuaternionClass(aClassName, bClassName) || _AreSameIntegerClass(aClassName, bClassName)) {\n            // cast to vector3, but it can be casted to any vector type\n            return a.divide(b);\n        }\n        else if (aClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */ || bClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */) {\n            // this is a simple division (per component!), and should be also supported between Quat and Vector4. Therefore -\n            const aClone = a.clone();\n            aClone.x /= b.x;\n            aClone.y /= b.y;\n            aClone.z /= b.z;\n            aClone.w /= b.w;\n            return aClone;\n        }\n        else if (aClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */ || bClassName === \"Vector4\" /* FlowGraphTypes.Vector4 */) {\n            return new Vector4(a.x, a.y, a.z, a.w).divideInPlace(b);\n        }\n        else if (aClassName === \"Vector4\" /* FlowGraphTypes.Vector4 */ || bClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */) {\n            return a.divide(b);\n        }\n        else if (_AreSameMatrixClass(aClassName, bClassName)) {\n            if (this.config?.useMatrixPerComponent) {\n                // get a's m as array, and divide each component with b's m\n                const aM = a.m;\n                for (let i = 0; i < aM.length; i++) {\n                    aM[i] /= b.m[i];\n                }\n                if (aClassName === \"Matrix2D\" /* FlowGraphTypes.Matrix2D */) {\n                    return new FlowGraphMatrix2D(aM);\n                }\n                else if (aClassName === \"Matrix3D\" /* FlowGraphTypes.Matrix3D */) {\n                    return new FlowGraphMatrix3D(aM);\n                }\n                else {\n                    return Matrix.FromArray(aM);\n                }\n            }\n            else {\n                a = a;\n                b = b;\n                return a.divide(b);\n            }\n        }\n        else {\n            // at this point at least one of the variables is a number.\n            if (this.config?.preventIntegerFloatArithmetic && typeof a !== typeof b) {\n                throw new Error(\"Cannot add different types of numbers.\");\n            }\n            return getNumericValue(a) / getNumericValue(b);\n        }\n    }\n}\nRegisterClass(\"FlowGraphDivideBlock\" /* FlowGraphBlockNames.Divide */, FlowGraphDivideBlock);\n/**\n * Random number between min and max (defaults to 0 to 1)\n *\n * This node will cache the result for he same node reference. i.e., a Math.eq that references the SAME random node will always return true.\n */\nexport class FlowGraphRandomBlock extends FlowGraphConstantOperationBlock {\n    /**\n     * Construct a new random block.\n     * @param config optional configuration\n     */\n    constructor(config) {\n        super(RichTypeNumber, (context) => this._random(context), \"FlowGraphRandomBlock\" /* FlowGraphBlockNames.Random */, config);\n        this.min = this.registerDataInput(\"min\", RichTypeNumber, config?.min ?? 0);\n        this.max = this.registerDataInput(\"max\", RichTypeNumber, config?.max ?? 1);\n        if (config?.seed) {\n            this._seed = config.seed;\n        }\n    }\n    _isSeed(seed = this._seed) {\n        return seed !== undefined;\n    }\n    _getRandomValue() {\n        if (this._isSeed(this._seed)) {\n            // compute seed-based random number, deterministic randomness!\n            const x = Math.sin(this._seed++) * 10000;\n            return x - Math.floor(x);\n        }\n        return Math.random();\n    }\n    _random(context) {\n        const min = this.min.getValue(context);\n        const max = this.max.getValue(context);\n        return this._getRandomValue() * (max - min) + min;\n    }\n}\nRegisterClass(\"FlowGraphRandomBlock\" /* FlowGraphBlockNames.Random */, FlowGraphRandomBlock);\n/**\n * E constant.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class FlowGraphEBlock extends FlowGraphConstantOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, () => Math.E, \"FlowGraphEBlock\" /* FlowGraphBlockNames.E */, config);\n    }\n}\nRegisterClass(\"FlowGraphEBlock\" /* FlowGraphBlockNames.E */, FlowGraphEBlock);\n/**\n * Pi constant.\n */\nexport class FlowGraphPiBlock extends FlowGraphConstantOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, () => Math.PI, \"FlowGraphPIBlock\" /* FlowGraphBlockNames.PI */, config);\n    }\n}\nRegisterClass(\"FlowGraphPIBlock\" /* FlowGraphBlockNames.PI */, FlowGraphPiBlock);\n/**\n * Positive inf constant.\n */\nexport class FlowGraphInfBlock extends FlowGraphConstantOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, () => Number.POSITIVE_INFINITY, \"FlowGraphInfBlock\" /* FlowGraphBlockNames.Inf */, config);\n    }\n}\nRegisterClass(\"FlowGraphInfBlock\" /* FlowGraphBlockNames.Inf */, FlowGraphInfBlock);\n/**\n * NaN constant.\n */\nexport class FlowGraphNaNBlock extends FlowGraphConstantOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, () => Number.NaN, \"FlowGraphNaNBlock\" /* FlowGraphBlockNames.NaN */, config);\n    }\n}\nRegisterClass(\"FlowGraphNaNBlock\" /* FlowGraphBlockNames.NaN */, FlowGraphNaNBlock);\nfunction ComponentWiseUnaryOperation(a, op) {\n    const aClassName = _GetClassNameOf(a);\n    switch (aClassName) {\n        case \"FlowGraphInteger\":\n            a = a;\n            return new FlowGraphInteger(op(a.value));\n        case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n            a = a;\n            return new Vector2(op(a.x), op(a.y));\n        case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n            a = a;\n            return new Vector3(op(a.x), op(a.y), op(a.z));\n        case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n            a = a;\n            return new Vector4(op(a.x), op(a.y), op(a.z), op(a.w));\n        case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n            a = a;\n            return new Quaternion(op(a.x), op(a.y), op(a.z), op(a.w));\n        case \"Matrix\" /* FlowGraphTypes.Matrix */:\n            a = a;\n            return Matrix.FromArray(a.m.map(op));\n        case \"Matrix2D\" /* FlowGraphTypes.Matrix2D */:\n            a = a;\n            // reason for not using .map is performance\n            return new FlowGraphMatrix2D(a.m.map(op));\n        case \"Matrix3D\" /* FlowGraphTypes.Matrix3D */:\n            a = a;\n            return new FlowGraphMatrix3D(a.m.map(op));\n        default:\n            a = a;\n            return op(a);\n    }\n}\n/**\n * Absolute value block.\n */\nexport class FlowGraphAbsBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicAbs(a), \"FlowGraphAbsBlock\" /* FlowGraphBlockNames.Abs */, config);\n    }\n    _polymorphicAbs(a) {\n        return ComponentWiseUnaryOperation(a, Math.abs);\n    }\n}\nRegisterClass(\"FlowGraphAbsBlock\" /* FlowGraphBlockNames.Abs */, FlowGraphAbsBlock);\n/**\n * Sign block.\n */\nexport class FlowGraphSignBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicSign(a), \"FlowGraphSignBlock\" /* FlowGraphBlockNames.Sign */, config);\n    }\n    _polymorphicSign(a) {\n        return ComponentWiseUnaryOperation(a, Math.sign);\n    }\n}\nRegisterClass(\"FlowGraphSignBlock\" /* FlowGraphBlockNames.Sign */, FlowGraphSignBlock);\n/**\n * Truncation block.\n */\nexport class FlowGraphTruncBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicTrunc(a), \"FlowGraphTruncBlock\" /* FlowGraphBlockNames.Trunc */, config);\n    }\n    _polymorphicTrunc(a) {\n        return ComponentWiseUnaryOperation(a, Math.trunc);\n    }\n}\nRegisterClass(\"FlowGraphTruncBlock\" /* FlowGraphBlockNames.Trunc */, FlowGraphTruncBlock);\n/**\n * Floor block.\n */\nexport class FlowGraphFloorBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicFloor(a), \"FlowGraphFloorBlock\" /* FlowGraphBlockNames.Floor */, config);\n    }\n    _polymorphicFloor(a) {\n        return ComponentWiseUnaryOperation(a, Math.floor);\n    }\n}\nRegisterClass(\"FlowGraphFloorBlock\" /* FlowGraphBlockNames.Floor */, FlowGraphFloorBlock);\n/**\n * Ceiling block.\n */\nexport class FlowGraphCeilBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicCeiling(a), \"FlowGraphCeilBlock\" /* FlowGraphBlockNames.Ceil */, config);\n    }\n    _polymorphicCeiling(a) {\n        return ComponentWiseUnaryOperation(a, Math.ceil);\n    }\n}\nRegisterClass(\"FlowGraphCeilBlock\" /* FlowGraphBlockNames.Ceil */, FlowGraphCeilBlock);\n/**\n * Round block.\n */\nexport class FlowGraphRoundBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicRound(a), \"FlowGraphRoundBlock\" /* FlowGraphBlockNames.Round */, config);\n    }\n    _polymorphicRound(a) {\n        return ComponentWiseUnaryOperation(a, (a) => (a < 0 && this.config?.roundHalfAwayFromZero ? -Math.round(-a) : Math.round(a)));\n    }\n}\nRegisterClass(\"FlowGraphRoundBlock\" /* FlowGraphBlockNames.Round */, FlowGraphRoundBlock);\n/**\n * A block that returns the fractional part of a number.\n */\nexport class FlowGraphFractionBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicFraction(a), \"FlowGraphFractBlock\" /* FlowGraphBlockNames.Fraction */, config);\n    }\n    _polymorphicFraction(a) {\n        return ComponentWiseUnaryOperation(a, (a) => a - Math.floor(a));\n    }\n}\nRegisterClass(\"FlowGraphFractBlock\" /* FlowGraphBlockNames.Fraction */, FlowGraphFractionBlock);\n/**\n * Negation block.\n */\nexport class FlowGraphNegationBlock extends FlowGraphUnaryOperationBlock {\n    /**\n     * construct a new negation block.\n     * @param config optional configuration\n     */\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicNeg(a), \"FlowGraphNegationBlock\" /* FlowGraphBlockNames.Negation */, config);\n    }\n    _polymorphicNeg(a) {\n        return ComponentWiseUnaryOperation(a, (a) => -a);\n    }\n}\nRegisterClass(\"FlowGraphNegationBlock\" /* FlowGraphBlockNames.Negation */, FlowGraphNegationBlock);\nfunction ComponentWiseBinaryOperation(a, b, op) {\n    const aClassName = _GetClassNameOf(a);\n    switch (aClassName) {\n        case \"FlowGraphInteger\":\n            a = a;\n            b = b;\n            return new FlowGraphInteger(op(a.value, b.value));\n        case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n            a = a;\n            b = b;\n            return new Vector2(op(a.x, b.x), op(a.y, b.y));\n        case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n            a = a;\n            b = b;\n            return new Vector3(op(a.x, b.x), op(a.y, b.y), op(a.z, b.z));\n        case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n            a = a;\n            b = b;\n            return new Vector4(op(a.x, b.x), op(a.y, b.y), op(a.z, b.z), op(a.w, b.w));\n        case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n            a = a;\n            b = b;\n            return new Quaternion(op(a.x, b.x), op(a.y, b.y), op(a.z, b.z), op(a.w, b.w));\n        case \"Matrix\" /* FlowGraphTypes.Matrix */:\n            a = a;\n            return Matrix.FromArray(a.m.map((v, i) => op(v, b.m[i])));\n        case \"Matrix2D\" /* FlowGraphTypes.Matrix2D */:\n            a = a;\n            return new FlowGraphMatrix2D(a.m.map((v, i) => op(v, b.m[i])));\n        case \"Matrix3D\" /* FlowGraphTypes.Matrix3D */:\n            a = a;\n            return new FlowGraphMatrix3D(a.m.map((v, i) => op(v, b.m[i])));\n        default:\n            return op(getNumericValue(a), getNumericValue(b));\n    }\n}\n/**\n * Remainder block.\n */\nexport class FlowGraphModuloBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicRemainder(a, b), \"FlowGraphModuloBlock\" /* FlowGraphBlockNames.Modulo */, config);\n    }\n    _polymorphicRemainder(a, b) {\n        return ComponentWiseBinaryOperation(a, b, (a, b) => a % b);\n    }\n}\nRegisterClass(\"FlowGraphModuloBlock\" /* FlowGraphBlockNames.Modulo */, FlowGraphModuloBlock);\n/**\n * Min block.\n */\nexport class FlowGraphMinBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicMin(a, b), \"FlowGraphMinBlock\" /* FlowGraphBlockNames.Min */, config);\n    }\n    _polymorphicMin(a, b) {\n        return ComponentWiseBinaryOperation(a, b, Math.min);\n    }\n}\nRegisterClass(\"FlowGraphMinBlock\" /* FlowGraphBlockNames.Min */, FlowGraphMinBlock);\n/**\n * Max block\n */\nexport class FlowGraphMaxBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicMax(a, b), \"FlowGraphMaxBlock\" /* FlowGraphBlockNames.Max */, config);\n    }\n    _polymorphicMax(a, b) {\n        return ComponentWiseBinaryOperation(a, b, Math.max);\n    }\n}\nRegisterClass(\"FlowGraphMaxBlock\" /* FlowGraphBlockNames.Max */, FlowGraphMaxBlock);\nfunction Clamp(a, b, c) {\n    return Math.min(Math.max(a, Math.min(b, c)), Math.max(b, c));\n}\nfunction ComponentWiseTernaryOperation(a, b, c, op) {\n    const aClassName = _GetClassNameOf(a);\n    switch (aClassName) {\n        case \"FlowGraphInteger\":\n            a = a;\n            b = b;\n            c = c;\n            return new FlowGraphInteger(op(a.value, b.value, c.value));\n        case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n            a = a;\n            b = b;\n            c = c;\n            return new Vector2(op(a.x, b.x, c.x), op(a.y, b.y, c.y));\n        case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n            a = a;\n            b = b;\n            c = c;\n            return new Vector3(op(a.x, b.x, c.x), op(a.y, b.y, c.y), op(a.z, b.z, c.z));\n        case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n            a = a;\n            b = b;\n            c = c;\n            return new Vector4(op(a.x, b.x, c.x), op(a.y, b.y, c.y), op(a.z, b.z, c.z), op(a.w, b.w, c.w));\n        case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n            a = a;\n            b = b;\n            c = c;\n            return new Quaternion(op(a.x, b.x, c.x), op(a.y, b.y, c.y), op(a.z, b.z, c.z), op(a.w, b.w, c.w));\n        case \"Matrix\" /* FlowGraphTypes.Matrix */:\n            return Matrix.FromArray(a.m.map((v, i) => op(v, b.m[i], c.m[i])));\n        case \"Matrix2D\" /* FlowGraphTypes.Matrix2D */:\n            return new FlowGraphMatrix2D(a.m.map((v, i) => op(v, b.m[i], c.m[i])));\n        case \"Matrix3D\" /* FlowGraphTypes.Matrix3D */:\n            return new FlowGraphMatrix3D(a.m.map((v, i) => op(v, b.m[i], c.m[i])));\n        default:\n            return op(getNumericValue(a), getNumericValue(b), getNumericValue(c));\n    }\n}\n/**\n * Clamp block.\n */\nexport class FlowGraphClampBlock extends FlowGraphTernaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeAny, RichTypeAny, (a, b, c) => this._polymorphicClamp(a, b, c), \"FlowGraphClampBlock\" /* FlowGraphBlockNames.Clamp */, config);\n    }\n    _polymorphicClamp(a, b, c) {\n        return ComponentWiseTernaryOperation(a, b, c, Clamp);\n    }\n}\nRegisterClass(\"FlowGraphClampBlock\" /* FlowGraphBlockNames.Clamp */, FlowGraphClampBlock);\nfunction Saturate(a) {\n    return Math.min(Math.max(a, 0), 1);\n}\n/**\n * Saturate block.\n */\nexport class FlowGraphSaturateBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicSaturate(a), \"FlowGraphSaturateBlock\" /* FlowGraphBlockNames.Saturate */, config);\n    }\n    _polymorphicSaturate(a) {\n        return ComponentWiseUnaryOperation(a, Saturate);\n    }\n}\nRegisterClass(\"FlowGraphSaturateBlock\" /* FlowGraphBlockNames.Saturate */, FlowGraphSaturateBlock);\nfunction Interpolate(a, b, c) {\n    return (1 - c) * a + c * b;\n}\n/**\n * Interpolate block.\n */\nexport class FlowGraphMathInterpolationBlock extends FlowGraphTernaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeAny, RichTypeAny, (a, b, c) => this._polymorphicInterpolate(a, b, c), \"FlowGraphMathInterpolationBlock\" /* FlowGraphBlockNames.MathInterpolation */, config);\n    }\n    _polymorphicInterpolate(a, b, c) {\n        return ComponentWiseTernaryOperation(a, b, c, Interpolate);\n    }\n}\nRegisterClass(\"FlowGraphMathInterpolationBlock\" /* FlowGraphBlockNames.MathInterpolation */, FlowGraphMathInterpolationBlock);\n/**\n * Equals block.\n */\nexport class FlowGraphEqualityBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicEq(a, b), \"FlowGraphEqualityBlock\" /* FlowGraphBlockNames.Equality */, config);\n    }\n    _polymorphicEq(a, b) {\n        const aClassName = _GetClassNameOf(a);\n        const bClassName = _GetClassNameOf(b);\n        if (typeof a !== typeof b) {\n            return false;\n        }\n        if (_AreSameVectorOrQuaternionClass(aClassName, bClassName) || _AreSameMatrixClass(aClassName, bClassName) || _AreSameIntegerClass(aClassName, bClassName)) {\n            return a.equals(b);\n        }\n        else {\n            return a === b;\n        }\n    }\n}\nRegisterClass(\"FlowGraphEqualityBlock\" /* FlowGraphBlockNames.Equality */, FlowGraphEqualityBlock);\nfunction ComparisonOperators(a, b, op) {\n    if (isNumeric(a) && isNumeric(b)) {\n        return op(getNumericValue(a), getNumericValue(b));\n    }\n    else {\n        throw new Error(`Cannot compare ${a} and ${b}`);\n    }\n}\n/**\n * Less than block.\n */\nexport class FlowGraphLessThanBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicLessThan(a, b), \"FlowGraphLessThanBlock\" /* FlowGraphBlockNames.LessThan */, config);\n    }\n    _polymorphicLessThan(a, b) {\n        return ComparisonOperators(a, b, (a, b) => a < b);\n    }\n}\nRegisterClass(\"FlowGraphLessThanBlock\" /* FlowGraphBlockNames.LessThan */, FlowGraphLessThanBlock);\n/**\n * Less than or equal block.\n */\nexport class FlowGraphLessThanOrEqualBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicLessThanOrEqual(a, b), \"FlowGraphLessThanOrEqualBlock\" /* FlowGraphBlockNames.LessThanOrEqual */, config);\n    }\n    _polymorphicLessThanOrEqual(a, b) {\n        return ComparisonOperators(a, b, (a, b) => a <= b);\n    }\n}\nRegisterClass(\"FlowGraphLessThanOrEqualBlock\" /* FlowGraphBlockNames.LessThanOrEqual */, FlowGraphLessThanOrEqualBlock);\n/**\n * Greater than block.\n */\nexport class FlowGraphGreaterThanBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicGreaterThan(a, b), \"FlowGraphGreaterThanBlock\" /* FlowGraphBlockNames.GreaterThan */, config);\n    }\n    _polymorphicGreaterThan(a, b) {\n        return ComparisonOperators(a, b, (a, b) => a > b);\n    }\n}\nRegisterClass(\"FlowGraphGreaterThanBlock\" /* FlowGraphBlockNames.GreaterThan */, FlowGraphGreaterThanBlock);\n/**\n * Greater than or equal block.\n */\nexport class FlowGraphGreaterThanOrEqualBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicGreaterThanOrEqual(a, b), \"FlowGraphGreaterThanOrEqualBlock\" /* FlowGraphBlockNames.GreaterThanOrEqual */, config);\n    }\n    _polymorphicGreaterThanOrEqual(a, b) {\n        return ComparisonOperators(a, b, (a, b) => a >= b);\n    }\n}\nRegisterClass(\"FlowGraphGreaterThanOrEqualBlock\" /* FlowGraphBlockNames.GreaterThanOrEqual */, FlowGraphGreaterThanOrEqualBlock);\n/**\n * Is NaN block.\n */\nexport class FlowGraphIsNanBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeBoolean, (a) => this._polymorphicIsNan(a), \"FlowGraphIsNaNBlock\" /* FlowGraphBlockNames.IsNaN */, config);\n    }\n    _polymorphicIsNan(a) {\n        if (isNumeric(a, true)) {\n            return isNaN(getNumericValue(a));\n        }\n        else {\n            throw new Error(`Cannot get NaN of ${a}`);\n        }\n    }\n}\nRegisterClass(\"FlowGraphIsNaNBlock\" /* FlowGraphBlockNames.IsNaN */, FlowGraphIsNanBlock);\n/**\n * Is Inf block.\n */\nexport class FlowGraphIsInfinityBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeBoolean, (a) => this._polymorphicIsInf(a), \"FlowGraphIsInfBlock\" /* FlowGraphBlockNames.IsInfinity */, config);\n    }\n    _polymorphicIsInf(a) {\n        if (isNumeric(a)) {\n            return !isFinite(getNumericValue(a));\n        }\n        else {\n            throw new Error(`Cannot get isInf of ${a}`);\n        }\n    }\n}\nRegisterClass(\"FlowGraphIsInfBlock\" /* FlowGraphBlockNames.IsInfinity */, FlowGraphIsInfinityBlock);\n/**\n * Convert degrees to radians block.\n */\nexport class FlowGraphDegToRadBlock extends FlowGraphUnaryOperationBlock {\n    /**\n     * Constructs a new instance of the flow graph math block.\n     * @param config - Optional configuration for the flow graph block.\n     */\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicDegToRad(a), \"FlowGraphDegToRadBlock\" /* FlowGraphBlockNames.DegToRad */, config);\n    }\n    _degToRad(a) {\n        return (a * Math.PI) / 180;\n    }\n    _polymorphicDegToRad(a) {\n        return ComponentWiseUnaryOperation(a, this._degToRad);\n    }\n}\nRegisterClass(\"FlowGraphDegToRadBlock\" /* FlowGraphBlockNames.DegToRad */, FlowGraphDegToRadBlock);\n/**\n * Convert radians to degrees block.\n */\nexport class FlowGraphRadToDegBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicRadToDeg(a), \"FlowGraphRadToDegBlock\" /* FlowGraphBlockNames.RadToDeg */, config);\n    }\n    _radToDeg(a) {\n        return (a * 180) / Math.PI;\n    }\n    _polymorphicRadToDeg(a) {\n        return ComponentWiseUnaryOperation(a, this._radToDeg);\n    }\n}\nRegisterClass(\"FlowGraphRadToDegBlock\" /* FlowGraphBlockNames.RadToDeg */, FlowGraphRadToDegBlock);\n/**\n * Sin block.\n */\nexport class FlowGraphSinBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicSin(a), \"FlowGraphSinBlock\" /* FlowGraphBlockNames.Sin */, config);\n    }\n    _polymorphicSin(a) {\n        return ComponentWiseUnaryOperation(a, Math.sin);\n    }\n}\n/**\n * Cos block.\n */\nexport class FlowGraphCosBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicCos(a), \"FlowGraphCosBlock\" /* FlowGraphBlockNames.Cos */, config);\n    }\n    _polymorphicCos(a) {\n        return ComponentWiseUnaryOperation(a, Math.cos);\n    }\n}\n/**\n * Tan block.\n */\nexport class FlowGraphTanBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicTan(a), \"FlowGraphTanBlock\" /* FlowGraphBlockNames.Tan */, config);\n    }\n    _polymorphicTan(a) {\n        return ComponentWiseUnaryOperation(a, Math.tan);\n    }\n}\n/**\n * Arcsin block.\n */\nexport class FlowGraphAsinBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicAsin(a), \"FlowGraphASinBlock\" /* FlowGraphBlockNames.Asin */, config);\n    }\n    _polymorphicAsin(a) {\n        return ComponentWiseUnaryOperation(a, Math.asin);\n    }\n}\nRegisterClass(\"FlowGraphASinBlock\" /* FlowGraphBlockNames.Asin */, FlowGraphAsinBlock);\n/**\n * Arccos block.\n */\nexport class FlowGraphAcosBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicAcos(a), \"FlowGraphACosBlock\" /* FlowGraphBlockNames.Acos */, config);\n    }\n    _polymorphicAcos(a) {\n        return ComponentWiseUnaryOperation(a, Math.acos);\n    }\n}\nRegisterClass(\"FlowGraphACosBlock\" /* FlowGraphBlockNames.Acos */, FlowGraphAcosBlock);\n/**\n * Arctan block.\n */\nexport class FlowGraphAtanBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicAtan(a), \"FlowGraphATanBlock\" /* FlowGraphBlockNames.Atan */, config);\n    }\n    _polymorphicAtan(a) {\n        return ComponentWiseUnaryOperation(a, Math.atan);\n    }\n}\nRegisterClass(\"FlowGraphATanBlock\" /* FlowGraphBlockNames.Atan */, FlowGraphAtanBlock);\n/**\n * Arctan2 block.\n */\nexport class FlowGraphAtan2Block extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicAtan2(a, b), \"FlowGraphATan2Block\" /* FlowGraphBlockNames.Atan2 */, config);\n    }\n    _polymorphicAtan2(a, b) {\n        return ComponentWiseBinaryOperation(a, b, Math.atan2);\n    }\n}\nRegisterClass(\"FlowGraphATan2Block\" /* FlowGraphBlockNames.Atan2 */, FlowGraphAtan2Block);\n/**\n * Hyperbolic sin block.\n */\nexport class FlowGraphSinhBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicSinh(a), \"FlowGraphSinhBlock\" /* FlowGraphBlockNames.Sinh */, config);\n    }\n    _polymorphicSinh(a) {\n        return ComponentWiseUnaryOperation(a, Math.sinh);\n    }\n}\nRegisterClass(\"FlowGraphSinhBlock\" /* FlowGraphBlockNames.Sinh */, FlowGraphSinhBlock);\n/**\n * Hyperbolic cos block.\n */\nexport class FlowGraphCoshBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicCosh(a), \"FlowGraphCoshBlock\" /* FlowGraphBlockNames.Cosh */, config);\n    }\n    _polymorphicCosh(a) {\n        return ComponentWiseUnaryOperation(a, Math.cosh);\n    }\n}\nRegisterClass(\"FlowGraphCoshBlock\" /* FlowGraphBlockNames.Cosh */, FlowGraphCoshBlock);\n/**\n * Hyperbolic tan block.\n */\nexport class FlowGraphTanhBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicTanh(a), \"FlowGraphTanhBlock\" /* FlowGraphBlockNames.Tanh */, config);\n    }\n    _polymorphicTanh(a) {\n        return ComponentWiseUnaryOperation(a, Math.tanh);\n    }\n}\nRegisterClass(\"FlowGraphTanhBlock\" /* FlowGraphBlockNames.Tanh */, FlowGraphTanhBlock);\n/**\n * Hyperbolic arcsin block.\n */\nexport class FlowGraphAsinhBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicAsinh(a), \"FlowGraphASinhBlock\" /* FlowGraphBlockNames.Asinh */, config);\n    }\n    _polymorphicAsinh(a) {\n        return ComponentWiseUnaryOperation(a, Math.asinh);\n    }\n}\nRegisterClass(\"FlowGraphASinhBlock\" /* FlowGraphBlockNames.Asinh */, FlowGraphAsinhBlock);\n/**\n * Hyperbolic arccos block.\n */\nexport class FlowGraphAcoshBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicAcosh(a), \"FlowGraphACoshBlock\" /* FlowGraphBlockNames.Acosh */, config);\n    }\n    _polymorphicAcosh(a) {\n        return ComponentWiseUnaryOperation(a, Math.acosh);\n    }\n}\nRegisterClass(\"FlowGraphACoshBlock\" /* FlowGraphBlockNames.Acosh */, FlowGraphAcoshBlock);\n/**\n * Hyperbolic arctan block.\n */\nexport class FlowGraphAtanhBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicAtanh(a), \"FlowGraphATanhBlock\" /* FlowGraphBlockNames.Atanh */, config);\n    }\n    _polymorphicAtanh(a) {\n        return ComponentWiseUnaryOperation(a, Math.atanh);\n    }\n}\nRegisterClass(\"FlowGraphATanhBlock\" /* FlowGraphBlockNames.Atanh */, FlowGraphAtanhBlock);\n/**\n * Exponential block.\n */\nexport class FlowGraphExpBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicExp(a), \"FlowGraphExponentialBlock\" /* FlowGraphBlockNames.Exponential */, config);\n    }\n    _polymorphicExp(a) {\n        return ComponentWiseUnaryOperation(a, Math.exp);\n    }\n}\nRegisterClass(\"FlowGraphExponentialBlock\" /* FlowGraphBlockNames.Exponential */, FlowGraphExpBlock);\n/**\n * Logarithm block.\n */\nexport class FlowGraphLogBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicLog(a), \"FlowGraphLogBlock\" /* FlowGraphBlockNames.Log */, config);\n    }\n    _polymorphicLog(a) {\n        return ComponentWiseUnaryOperation(a, Math.log);\n    }\n}\nRegisterClass(\"FlowGraphLogBlock\" /* FlowGraphBlockNames.Log */, FlowGraphLogBlock);\n/**\n * Base 2 logarithm block.\n */\nexport class FlowGraphLog2Block extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicLog2(a), \"FlowGraphLog2Block\" /* FlowGraphBlockNames.Log2 */, config);\n    }\n    _polymorphicLog2(a) {\n        return ComponentWiseUnaryOperation(a, Math.log2);\n    }\n}\nRegisterClass(\"FlowGraphLog2Block\" /* FlowGraphBlockNames.Log2 */, FlowGraphLog2Block);\n/**\n * Base 10 logarithm block.\n */\nexport class FlowGraphLog10Block extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicLog10(a), \"FlowGraphLog10Block\" /* FlowGraphBlockNames.Log10 */, config);\n    }\n    _polymorphicLog10(a) {\n        return ComponentWiseUnaryOperation(a, Math.log10);\n    }\n}\nRegisterClass(\"FlowGraphLog10Block\" /* FlowGraphBlockNames.Log10 */, FlowGraphLog10Block);\n/**\n * Square root block.\n */\nexport class FlowGraphSquareRootBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicSqrt(a), \"FlowGraphSquareRootBlock\" /* FlowGraphBlockNames.SquareRoot */, config);\n    }\n    _polymorphicSqrt(a) {\n        return ComponentWiseUnaryOperation(a, Math.sqrt);\n    }\n}\nRegisterClass(\"FlowGraphSquareRootBlock\" /* FlowGraphBlockNames.SquareRoot */, FlowGraphSquareRootBlock);\n/**\n * Cube root block.\n */\nexport class FlowGraphCubeRootBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicCubeRoot(a), \"FlowGraphCubeRootBlock\" /* FlowGraphBlockNames.CubeRoot */, config);\n    }\n    _polymorphicCubeRoot(a) {\n        return ComponentWiseUnaryOperation(a, Math.cbrt);\n    }\n}\nRegisterClass(\"FlowGraphCubeRootBlock\" /* FlowGraphBlockNames.CubeRoot */, FlowGraphCubeRootBlock);\n/**\n * Power block.\n */\nexport class FlowGraphPowerBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, RichTypeNumber, (a, b) => this._polymorphicPow(a, b), \"FlowGraphPowerBlock\" /* FlowGraphBlockNames.Power */, config);\n    }\n    _polymorphicPow(a, b) {\n        return ComponentWiseBinaryOperation(a, b, Math.pow);\n    }\n}\nRegisterClass(\"FlowGraphPowerBlock\" /* FlowGraphBlockNames.Power */, FlowGraphPowerBlock);\n/**\n * Bitwise NOT operation\n */\nexport class FlowGraphBitwiseNotBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), (a) => {\n            if (typeof a === \"boolean\") {\n                return !a;\n            }\n            else if (typeof a === \"number\") {\n                return ~a;\n            }\n            return new FlowGraphInteger(~a.value);\n        }, \"FlowGraphBitwiseNotBlock\" /* FlowGraphBlockNames.BitwiseNot */, config);\n    }\n}\nRegisterClass(\"FlowGraphBitwiseNotBlock\" /* FlowGraphBlockNames.BitwiseNot */, FlowGraphBitwiseNotBlock);\n/**\n * Bitwise AND operation\n */\nexport class FlowGraphBitwiseAndBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), (a, b) => {\n            if (typeof a === \"boolean\" && typeof b === \"boolean\") {\n                return a && b;\n            }\n            else if (typeof a === \"number\" && typeof b === \"number\") {\n                return a & b;\n            }\n            else if (typeof a === \"object\" && typeof b === \"object\") {\n                return new FlowGraphInteger(a.value & b.value);\n            }\n            else {\n                throw new Error(`Cannot perform bitwise AND on ${a} and ${b}`);\n            }\n        }, \"FlowGraphBitwiseAndBlock\" /* FlowGraphBlockNames.BitwiseAnd */, config);\n    }\n}\nRegisterClass(\"FlowGraphBitwiseAndBlock\" /* FlowGraphBlockNames.BitwiseAnd */, FlowGraphBitwiseAndBlock);\n/**\n * Bitwise OR operation\n */\nexport class FlowGraphBitwiseOrBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), (a, b) => {\n            if (typeof a === \"boolean\" && typeof b === \"boolean\") {\n                return a || b;\n            }\n            else if (typeof a === \"number\" && typeof b === \"number\") {\n                return a | b;\n            }\n            else if (typeof a === \"object\" && typeof b === \"object\") {\n                return new FlowGraphInteger(a.value | b.value);\n            }\n            else {\n                throw new Error(`Cannot perform bitwise OR on ${a} and ${b}`);\n            }\n        }, \"FlowGraphBitwiseOrBlock\" /* FlowGraphBlockNames.BitwiseOr */, config);\n    }\n}\nRegisterClass(\"FlowGraphBitwiseOrBlock\" /* FlowGraphBlockNames.BitwiseOr */, FlowGraphBitwiseOrBlock);\n/**\n * Bitwise XOR operation\n */\nexport class FlowGraphBitwiseXorBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), (a, b) => {\n            if (typeof a === \"boolean\" && typeof b === \"boolean\") {\n                return a !== b;\n            }\n            else if (typeof a === \"number\" && typeof b === \"number\") {\n                return a ^ b;\n            }\n            else if (typeof a === \"object\" && typeof b === \"object\") {\n                return new FlowGraphInteger(a.value ^ b.value);\n            }\n            else {\n                throw new Error(`Cannot perform bitwise XOR on ${a} and ${b}`);\n            }\n        }, \"FlowGraphBitwiseXorBlock\" /* FlowGraphBlockNames.BitwiseXor */, config);\n    }\n}\nRegisterClass(\"FlowGraphBitwiseXorBlock\" /* FlowGraphBlockNames.BitwiseXor */, FlowGraphBitwiseXorBlock);\n/**\n * Bitwise left shift operation\n */\nexport class FlowGraphBitwiseLeftShiftBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, (a, b) => new FlowGraphInteger(a.value << b.value), \"FlowGraphBitwiseLeftShiftBlock\" /* FlowGraphBlockNames.BitwiseLeftShift */, config);\n    }\n}\nRegisterClass(\"FlowGraphBitwiseLeftShiftBlock\" /* FlowGraphBlockNames.BitwiseLeftShift */, FlowGraphBitwiseLeftShiftBlock);\n/**\n * Bitwise right shift operation\n */\nexport class FlowGraphBitwiseRightShiftBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, (a, b) => new FlowGraphInteger(a.value >> b.value), \"FlowGraphBitwiseRightShiftBlock\" /* FlowGraphBlockNames.BitwiseRightShift */, config);\n    }\n}\nRegisterClass(\"FlowGraphBitwiseRightShiftBlock\" /* FlowGraphBlockNames.BitwiseRightShift */, FlowGraphBitwiseRightShiftBlock);\n/**\n * Count leading zeros operation\n */\nexport class FlowGraphLeadingZerosBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, (a) => new FlowGraphInteger(Math.clz32(a.value)), \"FlowGraphLeadingZerosBlock\" /* FlowGraphBlockNames.LeadingZeros */, config);\n    }\n}\nRegisterClass(\"FlowGraphLeadingZerosBlock\" /* FlowGraphBlockNames.LeadingZeros */, FlowGraphLeadingZerosBlock);\n/**\n * Count trailing zeros operation\n */\nexport class FlowGraphTrailingZerosBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, (a) => new FlowGraphInteger(a.value ? 31 - Math.clz32(a.value & -a.value) : 32), \"FlowGraphTrailingZerosBlock\" /* FlowGraphBlockNames.TrailingZeros */, config);\n    }\n}\nRegisterClass(\"FlowGraphTrailingZerosBlock\" /* FlowGraphBlockNames.TrailingZeros */, FlowGraphTrailingZerosBlock);\n/**\n * Given a number (which is converted to a 32-bit integer), return the\n * number of bits set to one on that number.\n * @param n the number to run the op on\n * @returns the number of bits set to one on that number\n */\nfunction CountOnes(n) {\n    let result = 0;\n    while (n) {\n        // This zeroes out all bits except for the least significant one.\n        // So if the bit is set, it will be 1, otherwise it will be 0.\n        result += n & 1;\n        // This shifts n's bits to the right by one\n        n >>= 1;\n    }\n    return result;\n}\n/**\n * Count one bits operation\n */\nexport class FlowGraphOneBitsCounterBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, (a) => new FlowGraphInteger(CountOnes(a.value)), \"FlowGraphOneBitsCounterBlock\" /* FlowGraphBlockNames.OneBitsCounter */, config);\n    }\n}\nRegisterClass(\"FlowGraphOneBitsCounterBlock\" /* FlowGraphBlockNames.OneBitsCounter */, FlowGraphOneBitsCounterBlock);\n//# sourceMappingURL=flowGraphMathBlocks.js.map"],"names":[],"mappings":";;;;;;;;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,+BAA+B,SAAS,6BAA6B,CAAC;AACnF,IAAI,WAAW,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,EAAE;AAC1D,QAAQ,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC;AAC/B,QAAQ,IAAI,CAAC,UAAU,GAAG,UAAU;AACpC,QAAQ,IAAI,CAAC,UAAU,GAAG,UAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,YAAY,CAAC,OAAO,EAAE;AAC1B,QAAQ,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA,IAAI,YAAY,GAAG;AACnB,QAAQ,OAAO,IAAI,CAAC,UAAU;AAC9B;AACA;;AC1BA;AACA;AACA;AACA;AACO,MAAM,8BAA8B,SAAS,6BAA6B,CAAC;AAClF,IAAI,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,EAAE;AACxF,QAAQ,KAAK,CAAC,cAAc,EAAE,MAAM,CAAC;AACrC,QAAQ,IAAI,CAAC,UAAU,GAAG,UAAU;AACpC,QAAQ,IAAI,CAAC,UAAU,GAAG,UAAU;AACpC,QAAQ,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,MAAM,CAAC;AACpD,QAAQ,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,MAAM,CAAC;AACpD,QAAQ,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,MAAM,CAAC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,YAAY,CAAC,OAAO,EAAE;AAC1B,QAAQ,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AAC5G;AACA;AACA;AACA;AACA;AACA,IAAI,YAAY,GAAG;AACnB,QAAQ,OAAO,IAAI,CAAC,UAAU;AAC9B;AACA;;ACnBA;AACA;AACA;AACO,MAAM,iBAAiB,SAAS,6BAA6B,CAAC;AACrE;AACA;AACA;AACA;AACA,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,0BAA0B,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,0BAA0B,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,0BAA0B,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,mBAAmB,gCAAgC,MAAM,CAAC;AAC5O;AACA,IAAI,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;AAC1B,QAAQ,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC;AAC7C,QAAQ,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC;AAC7C,QAAQ,IAAI,+BAA+B,CAAC,UAAU,EAAE,UAAU,CAAC,IAAI,mBAAmB,CAAC,UAAU,EAAE,UAAU,CAAC,IAAI,oBAAoB,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE;AACpK;AACA,YAAY,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAC3B;AACA,aAAa,IAAI,UAAU,KAAK,YAAY,oCAAoC,UAAU,KAAK,SAAS,+BAA+B;AACvI,YAAY,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;AAChE;AACA,aAAa,IAAI,UAAU,KAAK,SAAS,iCAAiC,UAAU,KAAK,YAAY,kCAAkC;AACvI,YAAY,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAC3B;AACA,aAAa;AACb;AACA,YAAY,IAAI,IAAI,CAAC,MAAM,EAAE,6BAA6B,IAAI,OAAO,CAAC,KAAK,OAAO,CAAC,EAAE;AACrF,gBAAgB,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC;AACzE;AACA,YAAY,OAAO,eAAe,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;AAC1D;AACA;AACA;AACA,aAAa,CAAC,mBAAmB,gCAAgC,iBAAiB,CAAC;AACnF;AACA;AACA;AACO,MAAM,sBAAsB,SAAS,6BAA6B,CAAC;AAC1E;AACA;AACA;AACA;AACA,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,0BAA0B,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,0BAA0B,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,0BAA0B,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,wBAAwB,qCAAqC,MAAM,CAAC;AAC3P;AACA,IAAI,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE;AAC/B,QAAQ,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC;AAC7C,QAAQ,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC;AAC7C,QAAQ,IAAI,+BAA+B,CAAC,UAAU,EAAE,UAAU,CAAC,IAAI,oBAAoB,CAAC,UAAU,EAAE,UAAU,CAAC,IAAI,mBAAmB,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE;AACpK;AACA,YAAY,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;AAChC;AACA,aAAa,IAAI,UAAU,KAAK,YAAY,oCAAoC,UAAU,KAAK,SAAS,+BAA+B;AACvI,YAAY,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;AACrE;AACA,aAAa,IAAI,UAAU,KAAK,SAAS,iCAAiC,UAAU,KAAK,YAAY,kCAAkC;AACvI,YAAY,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;AAChC;AACA,aAAa;AACb;AACA,YAAY,IAAI,IAAI,CAAC,MAAM,EAAE,6BAA6B,IAAI,OAAO,CAAC,KAAK,OAAO,CAAC,EAAE;AACrF,gBAAgB,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC;AACzE;AACA,YAAY,OAAO,eAAe,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;AAC1D;AACA;AACA;AACA,aAAa,CAAC,wBAAwB,qCAAqC,sBAAsB,CAAC;AAClG;AACA;AACA;AACA;AACO,MAAM,sBAAsB,SAAS,6BAA6B,CAAC;AAC1E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,0BAA0B,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,0BAA0B,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,0BAA0B,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,wBAAwB,qCAAqC,MAAM,CAAC;AAC3P;AACA,IAAI,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE;AAC/B,QAAQ,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC;AAC7C,QAAQ,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC;AAC7C,QAAQ,IAAI,+BAA+B,CAAC,UAAU,EAAE,UAAU,CAAC,IAAI,oBAAoB,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE;AACrH;AACA,YAAY,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;AAChC;AACA,aAAa,IAAI,UAAU,KAAK,YAAY,oCAAoC,UAAU,KAAK,SAAS,+BAA+B;AACvI,YAAY,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;AACrE;AACA,aAAa,IAAI,UAAU,KAAK,SAAS,iCAAiC,UAAU,KAAK,YAAY,kCAAkC;AACvI,YAAY,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;AAChC;AACA,aAAa,IAAI,mBAAmB,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE;AAC9D,YAAY,IAAI,IAAI,CAAC,MAAM,EAAE,qBAAqB,EAAE;AACpD;AACA;AACA,gBAAgB,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;AAC9B,gBAAgB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpD,oBAAoB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC;AACA,gBAAgB,IAAI,UAAU,KAAK,UAAU,gCAAgC;AAC7E,oBAAoB,OAAO,IAAI,iBAAiB,CAAC,EAAE,CAAC;AACpD;AACA,qBAAqB,IAAI,UAAU,KAAK,UAAU,gCAAgC;AAClF,oBAAoB,OAAO,IAAI,iBAAiB,CAAC,EAAE,CAAC;AACpD;AACA,qBAAqB;AACrB,oBAAoB,OAAO,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC;AAC/C;AACA;AACA,iBAAiB;AACjB,gBAAgB,CAAC,GAAG,CAAC;AACrB,gBAAgB,CAAC,GAAG,CAAC;AACrB,gBAAgB,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;AACpC;AACA;AACA,aAAa;AACb;AACA,YAAY,IAAI,IAAI,CAAC,MAAM,EAAE,6BAA6B,IAAI,OAAO,CAAC,KAAK,OAAO,CAAC,EAAE;AACrF,gBAAgB,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC;AACzE;AACA,YAAY,OAAO,eAAe,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;AAC1D;AACA;AACA;AACA,aAAa,CAAC,wBAAwB,qCAAqC,sBAAsB,CAAC;AAClG;AACA;AACA;AACO,MAAM,oBAAoB,SAAS,6BAA6B,CAAC;AACxE;AACA;AACA;AACA;AACA,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,0BAA0B,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,0BAA0B,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,0BAA0B,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,sBAAsB,mCAAmC,MAAM,CAAC;AACrP;AACA,IAAI,kBAAkB,CAAC,CAAC,EAAE,CAAC,EAAE;AAC7B,QAAQ,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC;AAC7C,QAAQ,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC;AAC7C,QAAQ,IAAI,+BAA+B,CAAC,UAAU,EAAE,UAAU,CAAC,IAAI,oBAAoB,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE;AACrH;AACA,YAAY,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;AAC9B;AACA,aAAa,IAAI,UAAU,KAAK,YAAY,oCAAoC,UAAU,KAAK,YAAY,kCAAkC;AAC7I;AACA,YAAY,MAAM,MAAM,GAAG,CAAC,CAAC,KAAK,EAAE;AACpC,YAAY,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;AAC3B,YAAY,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;AAC3B,YAAY,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;AAC3B,YAAY,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;AAC3B,YAAY,OAAO,MAAM;AACzB;AACA,aAAa,IAAI,UAAU,KAAK,YAAY,oCAAoC,UAAU,KAAK,SAAS,+BAA+B;AACvI,YAAY,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;AACnE;AACA,aAAa,IAAI,UAAU,KAAK,SAAS,iCAAiC,UAAU,KAAK,YAAY,kCAAkC;AACvI,YAAY,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;AAC9B;AACA,aAAa,IAAI,mBAAmB,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE;AAC9D,YAAY,IAAI,IAAI,CAAC,MAAM,EAAE,qBAAqB,EAAE;AACpD;AACA,gBAAgB,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;AAC9B,gBAAgB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpD,oBAAoB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC;AACA,gBAAgB,IAAI,UAAU,KAAK,UAAU,gCAAgC;AAC7E,oBAAoB,OAAO,IAAI,iBAAiB,CAAC,EAAE,CAAC;AACpD;AACA,qBAAqB,IAAI,UAAU,KAAK,UAAU,gCAAgC;AAClF,oBAAoB,OAAO,IAAI,iBAAiB,CAAC,EAAE,CAAC;AACpD;AACA,qBAAqB;AACrB,oBAAoB,OAAO,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC;AAC/C;AACA;AACA,iBAAiB;AACjB,gBAAgB,CAAC,GAAG,CAAC;AACrB,gBAAgB,CAAC,GAAG,CAAC;AACrB,gBAAgB,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;AAClC;AACA;AACA,aAAa;AACb;AACA,YAAY,IAAI,IAAI,CAAC,MAAM,EAAE,6BAA6B,IAAI,OAAO,CAAC,KAAK,OAAO,CAAC,EAAE;AACrF,gBAAgB,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC;AACzE;AACA,YAAY,OAAO,eAAe,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;AAC1D;AACA;AACA;AACA,aAAa,CAAC,sBAAsB,mCAAmC,oBAAoB,CAAC;AAC5F;AACA;AACA;AACA;AACA;AACO,MAAM,oBAAoB,SAAS,+BAA+B,CAAC;AAC1E;AACA;AACA;AACA;AACA,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,cAAc,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,sBAAsB,mCAAmC,MAAM,CAAC;AAClI,QAAQ,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,cAAc,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC;AAClF,QAAQ,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,cAAc,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC;AAClF,QAAQ,IAAI,MAAM,EAAE,IAAI,EAAE;AAC1B,YAAY,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI;AACpC;AACA;AACA,IAAI,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE;AAC/B,QAAQ,OAAO,IAAI,KAAK,SAAS;AACjC;AACA,IAAI,eAAe,GAAG;AACtB,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AACtC;AACA,YAAY,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK;AACpD,YAAY,OAAO,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AACpC;AACA,QAAQ,OAAO,IAAI,CAAC,MAAM,EAAE;AAC5B;AACA,IAAI,OAAO,CAAC,OAAO,EAAE;AACrB,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC;AAC9C,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC;AAC9C,QAAQ,OAAO,IAAI,CAAC,eAAe,EAAE,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG;AACzD;AACA;AACA,aAAa,CAAC,sBAAsB,mCAAmC,oBAAoB,CAAC;AAC5F;AACA;AACA;AACA;AACO,MAAM,eAAe,SAAS,+BAA+B,CAAC;AACrE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,cAAc,EAAE,MAAM,IAAI,CAAC,CAAC,EAAE,iBAAiB,8BAA8B,MAAM,CAAC;AAClG;AACA;AACA,aAAa,CAAC,iBAAiB,8BAA8B,eAAe,CAAC;AAC7E;AACA;AACA;AACO,MAAM,gBAAgB,SAAS,+BAA+B,CAAC;AACtE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,cAAc,EAAE,MAAM,IAAI,CAAC,EAAE,EAAE,kBAAkB,+BAA+B,MAAM,CAAC;AACrG;AACA;AACA,aAAa,CAAC,kBAAkB,+BAA+B,gBAAgB,CAAC;AAChF;AACA;AACA;AACO,MAAM,iBAAiB,SAAS,+BAA+B,CAAC;AACvE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,cAAc,EAAE,MAAM,MAAM,CAAC,iBAAiB,EAAE,mBAAmB,gCAAgC,MAAM,CAAC;AACxH;AACA;AACA,aAAa,CAAC,mBAAmB,gCAAgC,iBAAiB,CAAC;AACnF;AACA;AACA;AACO,MAAM,iBAAiB,SAAS,+BAA+B,CAAC;AACvE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,cAAc,EAAE,MAAM,MAAM,CAAC,GAAG,EAAE,mBAAmB,gCAAgC,MAAM,CAAC;AAC1G;AACA;AACA,aAAa,CAAC,mBAAmB,gCAAgC,iBAAiB,CAAC;AACnF,SAAS,2BAA2B,CAAC,CAAC,EAAE,EAAE,EAAE;AAC5C,IAAI,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC;AACzC,IAAI,QAAQ,UAAU;AACtB,QAAQ,KAAK,kBAAkB;AAC/B,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,IAAI,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AACpD,QAAQ,KAAK,SAAS;AACtB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,QAAQ,KAAK,SAAS;AACtB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,QAAQ,KAAK,SAAS;AACtB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClE,QAAQ,KAAK,YAAY;AACzB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,QAAQ,KAAK,QAAQ;AACrB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AAChD,QAAQ,KAAK,UAAU;AACvB,YAAY,CAAC,GAAG,CAAC;AACjB;AACA,YAAY,OAAO,IAAI,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AACrD,QAAQ,KAAK,UAAU;AACvB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,IAAI,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AACrD,QAAQ;AACR,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,EAAE,CAAC,CAAC,CAAC;AACxB;AACA;AACA;AACA;AACA;AACO,MAAM,iBAAiB,SAAS,4BAA4B,CAAC;AACpE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,mBAAmB,gCAAgC,MAAM,CAAC;AACxI;AACA,IAAI,eAAe,CAAC,CAAC,EAAE;AACvB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC;AACvD;AACA;AACA,aAAa,CAAC,mBAAmB,gCAAgC,iBAAiB,CAAC;AACnF;AACA;AACA;AACO,MAAM,kBAAkB,SAAS,4BAA4B,CAAC;AACrE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,oBAAoB,iCAAiC,MAAM,CAAC;AAC3I;AACA,IAAI,gBAAgB,CAAC,CAAC,EAAE;AACxB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC;AACxD;AACA;AACA,aAAa,CAAC,oBAAoB,iCAAiC,kBAAkB,CAAC;AACtF;AACA;AACA;AACO,MAAM,mBAAmB,SAAS,4BAA4B,CAAC;AACtE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,qBAAqB,kCAAkC,MAAM,CAAC;AAC9I;AACA,IAAI,iBAAiB,CAAC,CAAC,EAAE;AACzB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC;AACzD;AACA;AACA,aAAa,CAAC,qBAAqB,kCAAkC,mBAAmB,CAAC;AACzF;AACA;AACA;AACO,MAAM,mBAAmB,SAAS,4BAA4B,CAAC;AACtE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,qBAAqB,kCAAkC,MAAM,CAAC;AAC9I;AACA,IAAI,iBAAiB,CAAC,CAAC,EAAE;AACzB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC;AACzD;AACA;AACA,aAAa,CAAC,qBAAqB,kCAAkC,mBAAmB,CAAC;AACzF;AACA;AACA;AACO,MAAM,kBAAkB,SAAS,4BAA4B,CAAC;AACrE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,oBAAoB,iCAAiC,MAAM,CAAC;AACxI;AACA,IAAI,mBAAmB,CAAC,CAAC,EAAE;AAC3B,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC;AACxD;AACA;AACA,aAAa,CAAC,oBAAoB,iCAAiC,kBAAkB,CAAC;AACtF;AACA;AACA;AACO,MAAM,mBAAmB,SAAS,4BAA4B,CAAC;AACtE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,qBAAqB,kCAAkC,MAAM,CAAC;AACxI;AACA,IAAI,iBAAiB,CAAC,CAAC,EAAE;AACzB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,qBAAqB,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACrI;AACA;AACA,aAAa,CAAC,qBAAqB,kCAAkC,mBAAmB,CAAC;AACzF;AACA;AACA;AACO,MAAM,sBAAsB,SAAS,4BAA4B,CAAC;AACzE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,qBAAqB,qCAAqC,MAAM,CAAC;AAC9I;AACA,IAAI,oBAAoB,CAAC,CAAC,EAAE;AAC5B,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACvE;AACA;AACA,aAAa,CAAC,qBAAqB,qCAAqC,sBAAsB,CAAC;AAC/F;AACA;AACA;AACO,MAAM,sBAAsB,SAAS,4BAA4B,CAAC;AACzE;AACA;AACA;AACA;AACA,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,wBAAwB,qCAAqC,MAAM,CAAC;AAC5I;AACA,IAAI,eAAe,CAAC,CAAC,EAAE;AACvB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACxD;AACA;AACA,aAAa,CAAC,wBAAwB,qCAAqC,sBAAsB,CAAC;AAClG,SAAS,4BAA4B,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE;AAChD,IAAI,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC;AACzC,IAAI,QAAQ,UAAU;AACtB,QAAQ,KAAK,kBAAkB;AAC/B,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,IAAI,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;AAC7D,QAAQ,KAAK,SAAS;AACtB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1D,QAAQ,KAAK,SAAS;AACtB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACxE,QAAQ,KAAK,SAAS;AACtB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACtF,QAAQ,KAAK,YAAY;AACzB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACzF,QAAQ,KAAK,QAAQ;AACrB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,QAAQ,KAAK,UAAU;AACvB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,IAAI,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1E,QAAQ,KAAK,UAAU;AACvB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,IAAI,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1E,QAAQ;AACR,YAAY,OAAO,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACO,MAAM,oBAAoB,SAAS,6BAA6B,CAAC;AACxE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,sBAAsB,mCAAmC,MAAM,CAAC;AACjK;AACA,IAAI,qBAAqB,CAAC,CAAC,EAAE,CAAC,EAAE;AAChC,QAAQ,OAAO,4BAA4B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAClE;AACA;AACA,aAAa,CAAC,sBAAsB,mCAAmC,oBAAoB,CAAC;AAC5F;AACA;AACA;AACO,MAAM,iBAAiB,SAAS,6BAA6B,CAAC;AACrE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,mBAAmB,gCAAgC,MAAM,CAAC;AACrJ;AACA,IAAI,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;AAC1B,QAAQ,OAAO,4BAA4B,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC;AAC3D;AACA;AACA,aAAa,CAAC,mBAAmB,gCAAgC,iBAAiB,CAAC;AACnF;AACA;AACA;AACO,MAAM,iBAAiB,SAAS,6BAA6B,CAAC;AACrE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,mBAAmB,gCAAgC,MAAM,CAAC;AACrJ;AACA,IAAI,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;AAC1B,QAAQ,OAAO,4BAA4B,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC;AAC3D;AACA;AACA,aAAa,CAAC,mBAAmB,gCAAgC,iBAAiB,CAAC;AACnF,SAAS,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;AACxB,IAAI,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAChE;AACA,SAAS,6BAA6B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE;AACpD,IAAI,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC;AACzC,IAAI,QAAQ,UAAU;AACtB,QAAQ,KAAK,kBAAkB;AAC/B,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,IAAI,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;AACtE,QAAQ,KAAK,SAAS;AACtB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,QAAQ,KAAK,SAAS;AACtB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACvF,QAAQ,KAAK,SAAS;AACtB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1G,QAAQ,KAAK,YAAY;AACzB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,CAAC,GAAG,CAAC;AACjB,YAAY,OAAO,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7G,QAAQ,KAAK,QAAQ;AACrB,YAAY,OAAO,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7E,QAAQ,KAAK,UAAU;AACvB,YAAY,OAAO,IAAI,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClF,QAAQ,KAAK,UAAU;AACvB,YAAY,OAAO,IAAI,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClF,QAAQ;AACR,YAAY,OAAO,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC;AACjF;AACA;AACA;AACA;AACA;AACO,MAAM,mBAAmB,SAAS,8BAA8B,CAAC;AACxE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,qBAAqB,kCAAkC,MAAM,CAAC;AAC9K;AACA,IAAI,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;AAC/B,QAAQ,OAAO,6BAA6B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;AAC5D;AACA;AACA,aAAa,CAAC,qBAAqB,kCAAkC,mBAAmB,CAAC;AACzF,SAAS,QAAQ,CAAC,CAAC,EAAE;AACrB,IAAI,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AACtC;AACA;AACA;AACA;AACO,MAAM,sBAAsB,SAAS,4BAA4B,CAAC;AACzE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,wBAAwB,qCAAqC,MAAM,CAAC;AACjJ;AACA,IAAI,oBAAoB,CAAC,CAAC,EAAE;AAC5B,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,QAAQ,CAAC;AACvD;AACA;AACA,aAAa,CAAC,wBAAwB,qCAAqC,sBAAsB,CAAC;AAClG,SAAS,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;AAC9B,IAAI,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;AAC9B;AACA;AACA;AACA;AACO,MAAM,+BAA+B,SAAS,8BAA8B,CAAC;AACpF,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,uBAAuB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,iCAAiC,8CAA8C,MAAM,CAAC;AAC5M;AACA,IAAI,uBAAuB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;AACrC,QAAQ,OAAO,6BAA6B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,CAAC;AAClE;AACA;AACA,aAAa,CAAC,iCAAiC,8CAA8C,+BAA+B,CAAC;AAC7H;AACA;AACA;AACO,MAAM,sBAAsB,SAAS,6BAA6B,CAAC;AAC1E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,wBAAwB,qCAAqC,MAAM,CAAC;AAClK;AACA,IAAI,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE;AACzB,QAAQ,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC;AAC7C,QAAQ,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC;AAC7C,QAAQ,IAAI,OAAO,CAAC,KAAK,OAAO,CAAC,EAAE;AACnC,YAAY,OAAO,KAAK;AACxB;AACA,QAAQ,IAAI,+BAA+B,CAAC,UAAU,EAAE,UAAU,CAAC,IAAI,mBAAmB,CAAC,UAAU,EAAE,UAAU,CAAC,IAAI,oBAAoB,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE;AACpK,YAAY,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;AAC9B;AACA,aAAa;AACb,YAAY,OAAO,CAAC,KAAK,CAAC;AAC1B;AACA;AACA;AACA,aAAa,CAAC,wBAAwB,qCAAqC,sBAAsB,CAAC;AAClG,SAAS,mBAAmB,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE;AACvC,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE;AACtC,QAAQ,OAAO,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC;AACzD;AACA,SAAS;AACT,QAAQ,MAAM,IAAI,KAAK,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;AACvD;AACA;AACA;AACA;AACA;AACO,MAAM,sBAAsB,SAAS,6BAA6B,CAAC;AAC1E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,wBAAwB,qCAAqC,MAAM,CAAC;AACxK;AACA,IAAI,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE;AAC/B,QAAQ,OAAO,mBAAmB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACzD;AACA;AACA,aAAa,CAAC,wBAAwB,qCAAqC,sBAAsB,CAAC;AAClG;AACA;AACA;AACO,MAAM,6BAA6B,SAAS,6BAA6B,CAAC;AACjF,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,2BAA2B,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,+BAA+B,4CAA4C,MAAM,CAAC;AAC7L;AACA,IAAI,2BAA2B,CAAC,CAAC,EAAE,CAAC,EAAE;AACtC,QAAQ,OAAO,mBAAmB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC1D;AACA;AACA,aAAa,CAAC,+BAA+B,4CAA4C,6BAA6B,CAAC;AACvH;AACA;AACA;AACO,MAAM,yBAAyB,SAAS,6BAA6B,CAAC;AAC7E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,uBAAuB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,2BAA2B,wCAAwC,MAAM,CAAC;AACjL;AACA,IAAI,uBAAuB,CAAC,CAAC,EAAE,CAAC,EAAE;AAClC,QAAQ,OAAO,mBAAmB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACzD;AACA;AACA,aAAa,CAAC,2BAA2B,wCAAwC,yBAAyB,CAAC;AAC3G;AACA;AACA;AACO,MAAM,gCAAgC,SAAS,6BAA6B,CAAC;AACpF,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,8BAA8B,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,kCAAkC,+CAA+C,MAAM,CAAC;AACtM;AACA,IAAI,8BAA8B,CAAC,CAAC,EAAE,CAAC,EAAE;AACzC,QAAQ,OAAO,mBAAmB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC1D;AACA;AACA,aAAa,CAAC,kCAAkC,+CAA+C,gCAAgC,CAAC;AAChI;AACA;AACA;AACO,MAAM,mBAAmB,SAAS,4BAA4B,CAAC;AACtE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,eAAe,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,qBAAqB,kCAAkC,MAAM,CAAC;AAC5I;AACA,IAAI,iBAAiB,CAAC,CAAC,EAAE;AACzB,QAAQ,IAAI,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE;AAChC,YAAY,OAAO,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;AAC5C;AACA,aAAa;AACb,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,CAAC;AACrD;AACA;AACA;AACA,aAAa,CAAC,qBAAqB,kCAAkC,mBAAmB,CAAC;AACzF;AACA;AACA;AACO,MAAM,wBAAwB,SAAS,4BAA4B,CAAC;AAC3E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,eAAe,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,qBAAqB,uCAAuC,MAAM,CAAC;AACjJ;AACA,IAAI,iBAAiB,CAAC,CAAC,EAAE;AACzB,QAAQ,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE;AAC1B,YAAY,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;AAChD;AACA,aAAa;AACb,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC,CAAC;AACvD;AACA;AACA;AACA,aAAa,CAAC,qBAAqB,uCAAuC,wBAAwB,CAAC;AACnG;AACA;AACA;AACO,MAAM,sBAAsB,SAAS,4BAA4B,CAAC;AACzE;AACA;AACA;AACA;AACA,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,wBAAwB,qCAAqC,MAAM,CAAC;AACjJ;AACA,IAAI,SAAS,CAAC,CAAC,EAAE;AACjB,QAAQ,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,IAAI,GAAG;AAClC;AACA,IAAI,oBAAoB,CAAC,CAAC,EAAE;AAC5B,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC;AAC7D;AACA;AACA,aAAa,CAAC,wBAAwB,qCAAqC,sBAAsB,CAAC;AAClG;AACA;AACA;AACO,MAAM,sBAAsB,SAAS,4BAA4B,CAAC;AACzE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,wBAAwB,qCAAqC,MAAM,CAAC;AACjJ;AACA,IAAI,SAAS,CAAC,CAAC,EAAE;AACjB,QAAQ,OAAO,CAAC,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,EAAE;AAClC;AACA,IAAI,oBAAoB,CAAC,CAAC,EAAE;AAC5B,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC;AAC7D;AACA;AACA,aAAa,CAAC,wBAAwB,qCAAqC,sBAAsB,CAAC;AAClG;AACA;AACA;AACO,MAAM,iBAAiB,SAAS,4BAA4B,CAAC;AACpE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,mBAAmB,gCAAgC,MAAM,CAAC;AACxI;AACA,IAAI,eAAe,CAAC,CAAC,EAAE;AACvB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC;AACvD;AACA;AACA;AACA;AACA;AACO,MAAM,iBAAiB,SAAS,4BAA4B,CAAC;AACpE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,mBAAmB,gCAAgC,MAAM,CAAC;AACxI;AACA,IAAI,eAAe,CAAC,CAAC,EAAE;AACvB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC;AACvD;AACA;AACA;AACA;AACA;AACO,MAAM,iBAAiB,SAAS,4BAA4B,CAAC;AACpE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,mBAAmB,gCAAgC,MAAM,CAAC;AACxI;AACA,IAAI,eAAe,CAAC,CAAC,EAAE;AACvB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC;AACvD;AACA;AACA;AACA;AACA;AACO,MAAM,kBAAkB,SAAS,4BAA4B,CAAC;AACrE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,oBAAoB,iCAAiC,MAAM,CAAC;AAC3I;AACA,IAAI,gBAAgB,CAAC,CAAC,EAAE;AACxB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC;AACxD;AACA;AACA,aAAa,CAAC,oBAAoB,iCAAiC,kBAAkB,CAAC;AACtF;AACA;AACA;AACO,MAAM,kBAAkB,SAAS,4BAA4B,CAAC;AACrE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,oBAAoB,iCAAiC,MAAM,CAAC;AAC3I;AACA,IAAI,gBAAgB,CAAC,CAAC,EAAE;AACxB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC;AACxD;AACA;AACA,aAAa,CAAC,oBAAoB,iCAAiC,kBAAkB,CAAC;AACtF;AACA;AACA;AACO,MAAM,kBAAkB,SAAS,4BAA4B,CAAC;AACrE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,oBAAoB,iCAAiC,MAAM,CAAC;AAC3I;AACA,IAAI,gBAAgB,CAAC,CAAC,EAAE;AACxB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC;AACxD;AACA;AACA,aAAa,CAAC,oBAAoB,iCAAiC,kBAAkB,CAAC;AACtF;AACA;AACA;AACO,MAAM,mBAAmB,SAAS,6BAA6B,CAAC;AACvE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,qBAAqB,kCAAkC,MAAM,CAAC;AAC3J;AACA,IAAI,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE;AAC5B,QAAQ,OAAO,4BAA4B,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC;AAC7D;AACA;AACA,aAAa,CAAC,qBAAqB,kCAAkC,mBAAmB,CAAC;AACzF;AACA;AACA;AACO,MAAM,kBAAkB,SAAS,4BAA4B,CAAC;AACrE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,oBAAoB,iCAAiC,MAAM,CAAC;AACrI;AACA,IAAI,gBAAgB,CAAC,CAAC,EAAE;AACxB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC;AACxD;AACA;AACA,aAAa,CAAC,oBAAoB,iCAAiC,kBAAkB,CAAC;AACtF;AACA;AACA;AACO,MAAM,kBAAkB,SAAS,4BAA4B,CAAC;AACrE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,oBAAoB,iCAAiC,MAAM,CAAC;AACrI;AACA,IAAI,gBAAgB,CAAC,CAAC,EAAE;AACxB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC;AACxD;AACA;AACA,aAAa,CAAC,oBAAoB,iCAAiC,kBAAkB,CAAC;AACtF;AACA;AACA;AACO,MAAM,kBAAkB,SAAS,4BAA4B,CAAC;AACrE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,oBAAoB,iCAAiC,MAAM,CAAC;AACrI;AACA,IAAI,gBAAgB,CAAC,CAAC,EAAE;AACxB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC;AACxD;AACA;AACA,aAAa,CAAC,oBAAoB,iCAAiC,kBAAkB,CAAC;AACtF;AACA;AACA;AACO,MAAM,mBAAmB,SAAS,4BAA4B,CAAC;AACtE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,qBAAqB,kCAAkC,MAAM,CAAC;AAC3I;AACA,IAAI,iBAAiB,CAAC,CAAC,EAAE;AACzB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC;AACzD;AACA;AACA,aAAa,CAAC,qBAAqB,kCAAkC,mBAAmB,CAAC;AACzF;AACA;AACA;AACO,MAAM,mBAAmB,SAAS,4BAA4B,CAAC;AACtE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,qBAAqB,kCAAkC,MAAM,CAAC;AAC3I;AACA,IAAI,iBAAiB,CAAC,CAAC,EAAE;AACzB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC;AACzD;AACA;AACA,aAAa,CAAC,qBAAqB,kCAAkC,mBAAmB,CAAC;AACzF;AACA;AACA;AACO,MAAM,mBAAmB,SAAS,4BAA4B,CAAC;AACtE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,qBAAqB,kCAAkC,MAAM,CAAC;AAC3I;AACA,IAAI,iBAAiB,CAAC,CAAC,EAAE;AACzB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC;AACzD;AACA;AACA,aAAa,CAAC,qBAAqB,kCAAkC,mBAAmB,CAAC;AACzF;AACA;AACA;AACO,MAAM,iBAAiB,SAAS,4BAA4B,CAAC;AACpE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,2BAA2B,wCAAwC,MAAM,CAAC;AACrJ;AACA,IAAI,eAAe,CAAC,CAAC,EAAE;AACvB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC;AACvD;AACA;AACA,aAAa,CAAC,2BAA2B,wCAAwC,iBAAiB,CAAC;AACnG;AACA;AACA;AACO,MAAM,iBAAiB,SAAS,4BAA4B,CAAC;AACpE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,mBAAmB,gCAAgC,MAAM,CAAC;AACrI;AACA,IAAI,eAAe,CAAC,CAAC,EAAE;AACvB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC;AACvD;AACA;AACA,aAAa,CAAC,mBAAmB,gCAAgC,iBAAiB,CAAC;AACnF;AACA;AACA;AACO,MAAM,kBAAkB,SAAS,4BAA4B,CAAC;AACrE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,oBAAoB,iCAAiC,MAAM,CAAC;AACxI;AACA,IAAI,gBAAgB,CAAC,CAAC,EAAE;AACxB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC;AACxD;AACA;AACA,aAAa,CAAC,oBAAoB,iCAAiC,kBAAkB,CAAC;AACtF;AACA;AACA;AACO,MAAM,mBAAmB,SAAS,4BAA4B,CAAC;AACtE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,qBAAqB,kCAAkC,MAAM,CAAC;AAC3I;AACA,IAAI,iBAAiB,CAAC,CAAC,EAAE;AACzB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC;AACzD;AACA;AACA,aAAa,CAAC,qBAAqB,kCAAkC,mBAAmB,CAAC;AACzF;AACA;AACA;AACO,MAAM,wBAAwB,SAAS,4BAA4B,CAAC;AAC3E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,0BAA0B,uCAAuC,MAAM,CAAC;AACpJ;AACA,IAAI,gBAAgB,CAAC,CAAC,EAAE;AACxB,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC;AACxD;AACA;AACA,aAAa,CAAC,0BAA0B,uCAAuC,wBAAwB,CAAC;AACxG;AACA;AACA;AACO,MAAM,sBAAsB,SAAS,4BAA4B,CAAC;AACzE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,wBAAwB,qCAAqC,MAAM,CAAC;AACpJ;AACA,IAAI,oBAAoB,CAAC,CAAC,EAAE;AAC5B,QAAQ,OAAO,2BAA2B,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC;AACxD;AACA;AACA,aAAa,CAAC,wBAAwB,qCAAqC,sBAAsB,CAAC;AAClG;AACA;AACA;AACO,MAAM,mBAAmB,SAAS,6BAA6B,CAAC;AACvE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,WAAW,EAAE,cAAc,EAAE,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,qBAAqB,kCAAkC,MAAM,CAAC;AAC/J;AACA,IAAI,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;AAC1B,QAAQ,OAAO,4BAA4B,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC;AAC3D;AACA;AACA,aAAa,CAAC,qBAAqB,kCAAkC,mBAAmB,CAAC;AACzF;AACA;AACA;AACO,MAAM,wBAAwB,SAAS,4BAA4B,CAAC;AAC3E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,0BAA0B,CAAC,MAAM,EAAE,SAAS,IAAI,kBAAkB,8BAA8B,EAAE,0BAA0B,CAAC,MAAM,EAAE,SAAS,IAAI,kBAAkB,8BAA8B,EAAE,CAAC,CAAC,KAAK;AACzN,YAAY,IAAI,OAAO,CAAC,KAAK,SAAS,EAAE;AACxC,gBAAgB,OAAO,CAAC,CAAC;AACzB;AACA,iBAAiB,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;AAC5C,gBAAgB,OAAO,CAAC,CAAC;AACzB;AACA,YAAY,OAAO,IAAI,gBAAgB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;AACjD,SAAS,EAAE,0BAA0B,uCAAuC,MAAM,CAAC;AACnF;AACA;AACA,aAAa,CAAC,0BAA0B,uCAAuC,wBAAwB,CAAC;AACxG;AACA;AACA;AACO,MAAM,wBAAwB,SAAS,6BAA6B,CAAC;AAC5E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,0BAA0B,CAAC,MAAM,EAAE,SAAS,IAAI,kBAAkB,8BAA8B,EAAE,0BAA0B,CAAC,MAAM,EAAE,SAAS,IAAI,kBAAkB,8BAA8B,EAAE,0BAA0B,CAAC,MAAM,EAAE,SAAS,IAAI,kBAAkB,8BAA8B,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK;AAC9T,YAAY,IAAI,OAAO,CAAC,KAAK,SAAS,IAAI,OAAO,CAAC,KAAK,SAAS,EAAE;AAClE,gBAAgB,OAAO,CAAC,IAAI,CAAC;AAC7B;AACA,iBAAiB,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;AACrE,gBAAgB,OAAO,CAAC,GAAG,CAAC;AAC5B;AACA,iBAAiB,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;AACrE,gBAAgB,OAAO,IAAI,gBAAgB,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;AAC9D;AACA,iBAAiB;AACjB,gBAAgB,MAAM,IAAI,KAAK,CAAC,CAAC,8BAA8B,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;AAC9E;AACA,SAAS,EAAE,0BAA0B,uCAAuC,MAAM,CAAC;AACnF;AACA;AACA,aAAa,CAAC,0BAA0B,uCAAuC,wBAAwB,CAAC;AACxG;AACA;AACA;AACO,MAAM,uBAAuB,SAAS,6BAA6B,CAAC;AAC3E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,0BAA0B,CAAC,MAAM,EAAE,SAAS,IAAI,kBAAkB,8BAA8B,EAAE,0BAA0B,CAAC,MAAM,EAAE,SAAS,IAAI,kBAAkB,8BAA8B,EAAE,0BAA0B,CAAC,MAAM,EAAE,SAAS,IAAI,kBAAkB,8BAA8B,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK;AAC9T,YAAY,IAAI,OAAO,CAAC,KAAK,SAAS,IAAI,OAAO,CAAC,KAAK,SAAS,EAAE;AAClE,gBAAgB,OAAO,CAAC,IAAI,CAAC;AAC7B;AACA,iBAAiB,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;AACrE,gBAAgB,OAAO,CAAC,GAAG,CAAC;AAC5B;AACA,iBAAiB,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;AACrE,gBAAgB,OAAO,IAAI,gBAAgB,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;AAC9D;AACA,iBAAiB;AACjB,gBAAgB,MAAM,IAAI,KAAK,CAAC,CAAC,6BAA6B,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;AAC7E;AACA,SAAS,EAAE,yBAAyB,sCAAsC,MAAM,CAAC;AACjF;AACA;AACA,aAAa,CAAC,yBAAyB,sCAAsC,uBAAuB,CAAC;AACrG;AACA;AACA;AACO,MAAM,wBAAwB,SAAS,6BAA6B,CAAC;AAC5E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,0BAA0B,CAAC,MAAM,EAAE,SAAS,IAAI,kBAAkB,8BAA8B,EAAE,0BAA0B,CAAC,MAAM,EAAE,SAAS,IAAI,kBAAkB,8BAA8B,EAAE,0BAA0B,CAAC,MAAM,EAAE,SAAS,IAAI,kBAAkB,8BAA8B,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK;AAC9T,YAAY,IAAI,OAAO,CAAC,KAAK,SAAS,IAAI,OAAO,CAAC,KAAK,SAAS,EAAE;AAClE,gBAAgB,OAAO,CAAC,KAAK,CAAC;AAC9B;AACA,iBAAiB,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;AACrE,gBAAgB,OAAO,CAAC,GAAG,CAAC;AAC5B;AACA,iBAAiB,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;AACrE,gBAAgB,OAAO,IAAI,gBAAgB,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;AAC9D;AACA,iBAAiB;AACjB,gBAAgB,MAAM,IAAI,KAAK,CAAC,CAAC,8BAA8B,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;AAC9E;AACA,SAAS,EAAE,0BAA0B,uCAAuC,MAAM,CAAC;AACnF;AACA;AACA,aAAa,CAAC,0BAA0B,uCAAuC,wBAAwB,CAAC;AACxG;AACA;AACA;AACO,MAAM,8BAA8B,SAAS,6BAA6B,CAAC;AAClF,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,wBAAwB,EAAE,wBAAwB,EAAE,wBAAwB,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,gBAAgB,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,gCAAgC,6CAA6C,MAAM,CAAC;AACpO;AACA;AACA,aAAa,CAAC,gCAAgC,6CAA6C,8BAA8B,CAAC;AAC1H;AACA;AACA;AACO,MAAM,+BAA+B,SAAS,6BAA6B,CAAC;AACnF,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,wBAAwB,EAAE,wBAAwB,EAAE,wBAAwB,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,gBAAgB,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,iCAAiC,8CAA8C,MAAM,CAAC;AACtO;AACA;AACA,aAAa,CAAC,iCAAiC,8CAA8C,+BAA+B,CAAC;AAC7H;AACA;AACA;AACO,MAAM,0BAA0B,SAAS,4BAA4B,CAAC;AAC7E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,wBAAwB,EAAE,wBAAwB,EAAE,CAAC,CAAC,KAAK,IAAI,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,4BAA4B,yCAAyC,MAAM,CAAC;AAChM;AACA;AACA,aAAa,CAAC,4BAA4B,yCAAyC,0BAA0B,CAAC;AAC9G;AACA;AACA;AACO,MAAM,2BAA2B,SAAS,4BAA4B,CAAC;AAC9E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,wBAAwB,EAAE,wBAAwB,EAAE,CAAC,CAAC,KAAK,IAAI,gBAAgB,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,6BAA6B,0CAA0C,MAAM,CAAC;AACjO;AACA;AACA,aAAa,CAAC,6BAA6B,0CAA0C,2BAA2B,CAAC;AACjH;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,SAAS,CAAC,CAAC,EAAE;AACtB,IAAI,IAAI,MAAM,GAAG,CAAC;AAClB,IAAI,OAAO,CAAC,EAAE;AACd;AACA;AACA,QAAQ,MAAM,IAAI,CAAC,GAAG,CAAC;AACvB;AACA,QAAQ,CAAC,KAAK,CAAC;AACf;AACA,IAAI,OAAO,MAAM;AACjB;AACA;AACA;AACA;AACO,MAAM,4BAA4B,SAAS,4BAA4B,CAAC;AAC/E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,wBAAwB,EAAE,wBAAwB,EAAE,CAAC,CAAC,KAAK,IAAI,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,8BAA8B,2CAA2C,MAAM,CAAC;AACnM;AACA;AACA,aAAa,CAAC,8BAA8B,2CAA2C,4BAA4B,CAAC;;;;"}