{"version":3,"file":"flowGraphMathCombineExtractBlocks-PuyBhis_.esm.min.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Data/Math/flowGraphMathCombineExtractBlocks.js"],"sourcesContent":["import { FlowGraphCachedOperationBlock } from \"../flowGraphCachedOperationBlock\";\nimport { RichTypeMatrix, RichTypeMatrix2D, RichTypeMatrix3D, RichTypeNumber, RichTypeVector2, RichTypeVector3, RichTypeVector4, } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport { Matrix, Vector2, Vector3, Vector4 } from \"core/Maths/math.vector\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphMatrix2D, FlowGraphMatrix3D } from \"core/FlowGraph/CustomTypes/flowGraphMatrix\";\nclass FlowGraphMathCombineBlock extends FlowGraphCachedOperationBlock {\n    /**\n     * Base class for blocks that combine multiple numeric inputs into a single result.\n     * Handles registering data inputs and managing cached outputs.\n     * @param numberOfInputs The number of input values to combine.\n     * @param type The type of the result.\n     * @param config The block configuration.\n     */\n    constructor(numberOfInputs, type, config) {\n        super(type, config);\n        for (let i = 0; i < numberOfInputs; i++) {\n            this.registerDataInput(`input_${i}`, RichTypeNumber, 0);\n        }\n    }\n}\n/**\n * Abstract class representing a flow graph block that extracts multiple outputs from a single input.\n */\nclass FlowGraphMathExtractBlock extends FlowGraphBlock {\n    /**\n     * Creates an instance of FlowGraphMathExtractBlock.\n     *\n     * @param numberOfOutputs - The number of outputs to be extracted from the input.\n     * @param type - The type of the input data.\n     * @param config - Optional configuration for the flow graph block.\n     */\n    constructor(numberOfOutputs, type, config) {\n        super(config);\n        this.registerDataInput(\"input\", type);\n        for (let i = 0; i < numberOfOutputs; i++) {\n            this.registerDataOutput(`output_${i}`, RichTypeNumber, 0);\n        }\n    }\n}\n/**\n * Combines two floats into a new Vector2\n */\nexport class FlowGraphCombineVector2Block extends FlowGraphMathCombineBlock {\n    constructor(config) {\n        super(2, RichTypeVector2, config);\n    }\n    /**\n     * @internal\n     * Combines two floats into a new Vector2\n     */\n    _doOperation(context) {\n        if (!context._hasExecutionVariable(this, \"cachedVector\")) {\n            context._setExecutionVariable(this, \"cachedVector\", new Vector2());\n        }\n        const vector = context._getExecutionVariable(this, \"cachedVector\", null);\n        vector.set(this.getDataInput(\"input_0\").getValue(context), this.getDataInput(\"input_1\").getValue(context));\n        return vector;\n    }\n    getClassName() {\n        return \"FlowGraphCombineVector2Block\" /* FlowGraphBlockNames.CombineVector2 */;\n    }\n}\nRegisterClass(\"FlowGraphCombineVector2Block\" /* FlowGraphBlockNames.CombineVector2 */, FlowGraphCombineVector2Block);\n/**\n * Combines three floats into a new Vector3\n */\nexport class FlowGraphCombineVector3Block extends FlowGraphMathCombineBlock {\n    constructor(config) {\n        super(3, RichTypeVector3, config);\n    }\n    _doOperation(context) {\n        if (!context._hasExecutionVariable(this, \"cachedVector\")) {\n            context._setExecutionVariable(this, \"cachedVector\", new Vector3());\n        }\n        const vector = context._getExecutionVariable(this, \"cachedVector\", null);\n        vector.set(this.getDataInput(\"input_0\").getValue(context), this.getDataInput(\"input_1\").getValue(context), this.getDataInput(\"input_2\").getValue(context));\n        return vector;\n    }\n    getClassName() {\n        return \"FlowGraphCombineVector3Block\" /* FlowGraphBlockNames.CombineVector3 */;\n    }\n}\nRegisterClass(\"FlowGraphCombineVector3Block\" /* FlowGraphBlockNames.CombineVector3 */, FlowGraphCombineVector3Block);\n/**\n * Combines four floats into a new Vector4\n */\nexport class FlowGraphCombineVector4Block extends FlowGraphMathCombineBlock {\n    constructor(config) {\n        super(4, RichTypeVector4, config);\n    }\n    _doOperation(context) {\n        if (!context._hasExecutionVariable(this, \"cachedVector\")) {\n            context._setExecutionVariable(this, \"cachedVector\", new Vector4());\n        }\n        const vector = context._getExecutionVariable(this, \"cachedVector\", null);\n        vector.set(this.getDataInput(\"input_0\").getValue(context), this.getDataInput(\"input_1\").getValue(context), this.getDataInput(\"input_2\").getValue(context), this.getDataInput(\"input_3\").getValue(context));\n        return vector;\n    }\n    getClassName() {\n        return \"FlowGraphCombineVector4Block\" /* FlowGraphBlockNames.CombineVector4 */;\n    }\n}\nRegisterClass(\"FlowGraphCombineVector4Block\" /* FlowGraphBlockNames.CombineVector4 */, FlowGraphCombineVector4Block);\n/**\n * Combines 16 floats into a new Matrix\n *\n * Note that glTF interactivity's combine4x4 uses column-major order, while Babylon.js uses row-major order.\n */\nexport class FlowGraphCombineMatrixBlock extends FlowGraphMathCombineBlock {\n    constructor(config) {\n        super(16, RichTypeMatrix, config);\n    }\n    _doOperation(context) {\n        if (!context._hasExecutionVariable(this, \"cachedMatrix\")) {\n            context._setExecutionVariable(this, \"cachedMatrix\", new Matrix());\n        }\n        const matrix = context._getExecutionVariable(this, \"cachedMatrix\", null);\n        if (this.config?.inputIsColumnMajor) {\n            matrix.set(this.getDataInput(\"input_0\").getValue(context), this.getDataInput(\"input_4\").getValue(context), this.getDataInput(\"input_8\").getValue(context), this.getDataInput(\"input_12\").getValue(context), this.getDataInput(\"input_1\").getValue(context), this.getDataInput(\"input_5\").getValue(context), this.getDataInput(\"input_9\").getValue(context), this.getDataInput(\"input_13\").getValue(context), this.getDataInput(\"input_2\").getValue(context), this.getDataInput(\"input_6\").getValue(context), this.getDataInput(\"input_10\").getValue(context), this.getDataInput(\"input_14\").getValue(context), this.getDataInput(\"input_3\").getValue(context), this.getDataInput(\"input_7\").getValue(context), this.getDataInput(\"input_11\").getValue(context), this.getDataInput(\"input_15\").getValue(context));\n        }\n        else {\n            matrix.set(this.getDataInput(\"input_0\").getValue(context), this.getDataInput(\"input_1\").getValue(context), this.getDataInput(\"input_2\").getValue(context), this.getDataInput(\"input_3\").getValue(context), this.getDataInput(\"input_4\").getValue(context), this.getDataInput(\"input_5\").getValue(context), this.getDataInput(\"input_6\").getValue(context), this.getDataInput(\"input_7\").getValue(context), this.getDataInput(\"input_8\").getValue(context), this.getDataInput(\"input_9\").getValue(context), this.getDataInput(\"input_10\").getValue(context), this.getDataInput(\"input_11\").getValue(context), this.getDataInput(\"input_12\").getValue(context), this.getDataInput(\"input_13\").getValue(context), this.getDataInput(\"input_14\").getValue(context), this.getDataInput(\"input_15\").getValue(context));\n        }\n        return matrix;\n    }\n    getClassName() {\n        return \"FlowGraphCombineMatrixBlock\" /* FlowGraphBlockNames.CombineMatrix */;\n    }\n}\nRegisterClass(\"FlowGraphCombineMatrixBlock\" /* FlowGraphBlockNames.CombineMatrix */, FlowGraphCombineMatrixBlock);\n/**\n * Combines 4 floats into a new Matrix\n */\nexport class FlowGraphCombineMatrix2DBlock extends FlowGraphMathCombineBlock {\n    constructor(config) {\n        super(4, RichTypeMatrix2D, config);\n    }\n    _doOperation(context) {\n        if (!context._hasExecutionVariable(this, \"cachedMatrix\")) {\n            context._setExecutionVariable(this, \"cachedMatrix\", new FlowGraphMatrix2D());\n        }\n        const matrix = context._getExecutionVariable(this, \"cachedMatrix\", null);\n        const array = this.config?.inputIsColumnMajor\n            ? [\n                // column to row-major\n                this.getDataInput(\"input_0\").getValue(context),\n                this.getDataInput(\"input_2\").getValue(context),\n                this.getDataInput(\"input_1\").getValue(context),\n                this.getDataInput(\"input_3\").getValue(context),\n            ]\n            : [\n                this.getDataInput(\"input_0\").getValue(context),\n                this.getDataInput(\"input_1\").getValue(context),\n                this.getDataInput(\"input_2\").getValue(context),\n                this.getDataInput(\"input_3\").getValue(context),\n            ];\n        matrix.fromArray(array);\n        return matrix;\n    }\n    getClassName() {\n        return \"FlowGraphCombineMatrix2DBlock\" /* FlowGraphBlockNames.CombineMatrix2D */;\n    }\n}\nRegisterClass(\"FlowGraphCombineMatrix2DBlock\" /* FlowGraphBlockNames.CombineMatrix2D */, FlowGraphCombineMatrix2DBlock);\n/**\n * Combines 9 floats into a new Matrix3D\n */\nexport class FlowGraphCombineMatrix3DBlock extends FlowGraphMathCombineBlock {\n    constructor(config) {\n        super(9, RichTypeMatrix3D, config);\n    }\n    _doOperation(context) {\n        if (!context._hasExecutionVariable(this, \"cachedMatrix\")) {\n            context._setExecutionVariable(this, \"cachedMatrix\", new FlowGraphMatrix3D());\n        }\n        const matrix = context._getExecutionVariable(this, \"cachedMatrix\", null);\n        const array = this.config?.inputIsColumnMajor\n            ? [\n                // column to row major\n                this.getDataInput(\"input_0\").getValue(context),\n                this.getDataInput(\"input_3\").getValue(context),\n                this.getDataInput(\"input_6\").getValue(context),\n                this.getDataInput(\"input_1\").getValue(context),\n                this.getDataInput(\"input_4\").getValue(context),\n                this.getDataInput(\"input_7\").getValue(context),\n                this.getDataInput(\"input_2\").getValue(context),\n                this.getDataInput(\"input_5\").getValue(context),\n                this.getDataInput(\"input_8\").getValue(context),\n            ]\n            : [\n                this.getDataInput(\"input_0\").getValue(context),\n                this.getDataInput(\"input_1\").getValue(context),\n                this.getDataInput(\"input_2\").getValue(context),\n                this.getDataInput(\"input_3\").getValue(context),\n                this.getDataInput(\"input_4\").getValue(context),\n                this.getDataInput(\"input_5\").getValue(context),\n                this.getDataInput(\"input_6\").getValue(context),\n                this.getDataInput(\"input_7\").getValue(context),\n                this.getDataInput(\"input_8\").getValue(context),\n            ];\n        matrix.fromArray(array);\n        return matrix;\n    }\n    getClassName() {\n        return \"FlowGraphCombineMatrix3DBlock\" /* FlowGraphBlockNames.CombineMatrix3D */;\n    }\n}\nRegisterClass(\"FlowGraphCombineMatrix3DBlock\" /* FlowGraphBlockNames.CombineMatrix3D */, FlowGraphCombineMatrix3DBlock);\n/**\n * Extracts two floats from a Vector2\n */\nexport class FlowGraphExtractVector2Block extends FlowGraphMathExtractBlock {\n    constructor(config) {\n        super(2, RichTypeVector2, config);\n    }\n    _updateOutputs(context) {\n        let input = this.getDataInput(\"input\")?.getValue(context);\n        if (!input) {\n            input = Vector2.Zero();\n            this.getDataInput(\"input\").setValue(input, context);\n        }\n        this.getDataOutput(\"output_0\").setValue(input.x, context);\n        this.getDataOutput(\"output_1\").setValue(input.y, context);\n    }\n    getClassName() {\n        return \"FlowGraphExtractVector2Block\" /* FlowGraphBlockNames.ExtractVector2 */;\n    }\n}\nRegisterClass(\"FlowGraphExtractVector2Block\" /* FlowGraphBlockNames.ExtractVector2 */, FlowGraphExtractVector2Block);\n/**\n * Extracts three floats from a Vector3\n */\nexport class FlowGraphExtractVector3Block extends FlowGraphMathExtractBlock {\n    constructor(config) {\n        super(3, RichTypeVector3, config);\n    }\n    _updateOutputs(context) {\n        let input = this.getDataInput(\"input\")?.getValue(context);\n        if (!input) {\n            input = Vector3.Zero();\n            this.getDataInput(\"input\").setValue(input, context);\n        }\n        this.getDataOutput(\"output_0\").setValue(input.x, context);\n        this.getDataOutput(\"output_1\").setValue(input.y, context);\n        this.getDataOutput(\"output_2\").setValue(input.z, context);\n    }\n    getClassName() {\n        return \"FlowGraphExtractVector3Block\" /* FlowGraphBlockNames.ExtractVector3 */;\n    }\n}\nRegisterClass(\"FlowGraphExtractVector3Block\" /* FlowGraphBlockNames.ExtractVector3 */, FlowGraphExtractVector3Block);\n/**\n * Extracts four floats from a Vector4\n */\nexport class FlowGraphExtractVector4Block extends FlowGraphMathExtractBlock {\n    constructor(config) {\n        super(4, RichTypeVector4, config);\n    }\n    _updateOutputs(context) {\n        let input = this.getDataInput(\"input\")?.getValue(context);\n        if (!input) {\n            input = Vector4.Zero();\n            this.getDataInput(\"input\").setValue(input, context);\n        }\n        this.getDataOutput(\"output_0\").setValue(input.x, context);\n        this.getDataOutput(\"output_1\").setValue(input.y, context);\n        this.getDataOutput(\"output_2\").setValue(input.z, context);\n        this.getDataOutput(\"output_3\").setValue(input.w, context);\n    }\n    getClassName() {\n        return \"FlowGraphExtractVector4Block\" /* FlowGraphBlockNames.ExtractVector4 */;\n    }\n}\nRegisterClass(\"FlowGraphExtractVector4Block\" /* FlowGraphBlockNames.ExtractVector4 */, FlowGraphExtractVector4Block);\n/**\n * Extracts 16 floats from a Matrix\n */\nexport class FlowGraphExtractMatrixBlock extends FlowGraphMathExtractBlock {\n    constructor(config) {\n        super(16, RichTypeMatrix, config);\n    }\n    _updateOutputs(context) {\n        let input = this.getDataInput(\"input\")?.getValue(context);\n        if (!input) {\n            input = Matrix.Identity();\n            this.getDataInput(\"input\").setValue(input, context);\n        }\n        for (let i = 0; i < 16; i++) {\n            this.getDataOutput(`output_${i}`).setValue(input.m[i], context);\n        }\n    }\n    getClassName() {\n        return \"FlowGraphExtractMatrixBlock\" /* FlowGraphBlockNames.ExtractMatrix */;\n    }\n}\nRegisterClass(\"FlowGraphExtractMatrixBlock\" /* FlowGraphBlockNames.ExtractMatrix */, FlowGraphExtractMatrixBlock);\n/**\n * Extracts 4 floats from a Matrix2D\n */\nexport class FlowGraphExtractMatrix2DBlock extends FlowGraphMathExtractBlock {\n    constructor(config) {\n        super(4, RichTypeMatrix2D, config);\n    }\n    _updateOutputs(context) {\n        let input = this.getDataInput(\"input\")?.getValue(context);\n        if (!input) {\n            input = new FlowGraphMatrix2D();\n            this.getDataInput(\"input\").setValue(input, context);\n        }\n        for (let i = 0; i < 4; i++) {\n            this.getDataOutput(`output_${i}`).setValue(input.m[i], context);\n        }\n    }\n    getClassName() {\n        return \"FlowGraphExtractMatrix2DBlock\" /* FlowGraphBlockNames.ExtractMatrix2D */;\n    }\n}\nRegisterClass(\"FlowGraphExtractMatrix2DBlock\" /* FlowGraphBlockNames.ExtractMatrix2D */, FlowGraphExtractMatrix2DBlock);\n/**\n * Extracts 4 floats from a Matrix2D\n */\nexport class FlowGraphExtractMatrix3DBlock extends FlowGraphMathExtractBlock {\n    constructor(config) {\n        super(9, RichTypeMatrix3D, config);\n    }\n    _updateOutputs(context) {\n        let input = this.getDataInput(\"input\")?.getValue(context);\n        if (!input) {\n            input = new FlowGraphMatrix3D();\n            this.getDataInput(\"input\").setValue(input, context);\n        }\n        for (let i = 0; i < 9; i++) {\n            this.getDataOutput(`output_${i}`).setValue(input.m[i], context);\n        }\n    }\n    getClassName() {\n        return \"FlowGraphExtractMatrix3DBlock\" /* FlowGraphBlockNames.ExtractMatrix3D */;\n    }\n}\nRegisterClass(\"FlowGraphExtractMatrix3DBlock\" /* FlowGraphBlockNames.ExtractMatrix3D */, FlowGraphExtractMatrix3DBlock);\n//# sourceMappingURL=flowGraphMathCombineExtractBlocks.js.map"],"names":["FlowGraphMathCombineBlock","FlowGraphCachedOperationBlock","constructor","numberOfInputs","type","config","super","i","this","registerDataInput","RichTypeNumber","FlowGraphMathExtractBlock","FlowGraphBlock","numberOfOutputs","registerDataOutput","FlowGraphCombineVector2Block","RichTypeVector2","_doOperation","context","_hasExecutionVariable","_setExecutionVariable","Vector2","vector","_getExecutionVariable","set","getDataInput","getValue","getClassName","RegisterClass","FlowGraphCombineVector3Block","RichTypeVector3","Vector3","FlowGraphCombineVector4Block","RichTypeVector4","Vector4","FlowGraphCombineMatrixBlock","RichTypeMatrix","Matrix","matrix","inputIsColumnMajor","FlowGraphCombineMatrix2DBlock","RichTypeMatrix2D","FlowGraphMatrix2D","array","fromArray","FlowGraphCombineMatrix3DBlock","RichTypeMatrix3D","FlowGraphMatrix3D","FlowGraphExtractVector2Block","_updateOutputs","input","Zero","setValue","getDataOutput","x","y","FlowGraphExtractVector3Block","z","FlowGraphExtractVector4Block","w","FlowGraphExtractMatrixBlock","Identity","m","FlowGraphExtractMatrix2DBlock","FlowGraphExtractMatrix3DBlock"],"mappings":"iXAMA,MAAMA,UAAkCC,EAQpC,WAAAC,CAAYC,EAAgBC,EAAMC,GAC9BC,MAAMF,EAAMC,GACZ,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAgBI,IAChCC,KAAKC,kBAAkB,SAASF,IAAKG,EAAgB,EAEjE,EAKA,MAAMC,UAAkCC,EAQpC,WAAAV,CAAYW,EAAiBT,EAAMC,GAC/BC,MAAMD,GACNG,KAAKC,kBAAkB,QAASL,GAChC,IAAK,IAAIG,EAAI,EAAGA,EAAIM,EAAiBN,IACjCC,KAAKM,mBAAmB,UAAUP,IAAKG,EAAgB,EAEnE,EAKO,MAAMK,UAAqCf,EAC9C,WAAAE,CAAYG,GACRC,MAAM,EAAGU,EAAiBX,EAClC,CAKI,YAAAY,CAAaC,GACJA,EAAQC,sBAAsBX,KAAM,iBACrCU,EAAQE,sBAAsBZ,KAAM,eAAgB,IAAIa,GAE5D,MAAMC,EAASJ,EAAQK,sBAAsBf,KAAM,eAAgB,MAEnE,OADAc,EAAOE,IAAIhB,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,IAC1FI,CACf,CACI,YAAAK,GACI,MAAO,8BACf,EAEAC,EAAc,+BAAyEb,GAIhF,MAAMc,UAAqC7B,EAC9C,WAAAE,CAAYG,GACRC,MAAM,EAAGwB,EAAiBzB,EAClC,CACI,YAAAY,CAAaC,GACJA,EAAQC,sBAAsBX,KAAM,iBACrCU,EAAQE,sBAAsBZ,KAAM,eAAgB,IAAIuB,GAE5D,MAAMT,EAASJ,EAAQK,sBAAsBf,KAAM,eAAgB,MAEnE,OADAc,EAAOE,IAAIhB,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,IAC1II,CACf,CACI,YAAAK,GACI,MAAO,8BACf,EAEAC,EAAc,+BAAyEC,GAIhF,MAAMG,UAAqChC,EAC9C,WAAAE,CAAYG,GACRC,MAAM,EAAG2B,EAAiB5B,EAClC,CACI,YAAAY,CAAaC,GACJA,EAAQC,sBAAsBX,KAAM,iBACrCU,EAAQE,sBAAsBZ,KAAM,eAAgB,IAAI0B,GAE5D,MAAMZ,EAASJ,EAAQK,sBAAsBf,KAAM,eAAgB,MAEnE,OADAc,EAAOE,IAAIhB,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,IAC1LI,CACf,CACI,YAAAK,GACI,MAAO,8BACf,EAEAC,EAAc,+BAAyEI,GAMhF,MAAMG,UAAoCnC,EAC7C,WAAAE,CAAYG,GACRC,MAAM,GAAI8B,EAAgB/B,EAClC,CACI,YAAAY,CAAaC,GACJA,EAAQC,sBAAsBX,KAAM,iBACrCU,EAAQE,sBAAsBZ,KAAM,eAAgB,IAAI6B,GAE5D,MAAMC,EAASpB,EAAQK,sBAAsBf,KAAM,eAAgB,MAOnE,OANIA,KAAKH,QAAQkC,mBACbD,EAAOd,IAAIhB,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,YAAYC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,YAAYC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,YAAYC,SAASR,GAAUV,KAAKiB,aAAa,YAAYC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,YAAYC,SAASR,GAAUV,KAAKiB,aAAa,YAAYC,SAASR,IAGvwBoB,EAAOd,IAAIhB,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,WAAWC,SAASR,GAAUV,KAAKiB,aAAa,YAAYC,SAASR,GAAUV,KAAKiB,aAAa,YAAYC,SAASR,GAAUV,KAAKiB,aAAa,YAAYC,SAASR,GAAUV,KAAKiB,aAAa,YAAYC,SAASR,GAAUV,KAAKiB,aAAa,YAAYC,SAASR,GAAUV,KAAKiB,aAAa,YAAYC,SAASR,IAEpwBoB,CACf,CACI,YAAAX,GACI,MAAO,6BACf,EAEAC,EAAc,8BAAuEO,GAI9E,MAAMK,UAAsCxC,EAC/C,WAAAE,CAAYG,GACRC,MAAM,EAAGmC,EAAkBpC,EACnC,CACI,YAAAY,CAAaC,GACJA,EAAQC,sBAAsBX,KAAM,iBACrCU,EAAQE,sBAAsBZ,KAAM,eAAgB,IAAIkC,GAE5D,MAAMJ,EAASpB,EAAQK,sBAAsBf,KAAM,eAAgB,MAC7DmC,EAAQnC,KAAKH,QAAQkC,mBACrB,CAEE/B,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,IAExC,CACEV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,IAG9C,OADAoB,EAAOM,UAAUD,GACVL,CACf,CACI,YAAAX,GACI,MAAO,+BACf,EAEAC,EAAc,gCAA2EY,GAIlF,MAAMK,UAAsC7C,EAC/C,WAAAE,CAAYG,GACRC,MAAM,EAAGwC,EAAkBzC,EACnC,CACI,YAAAY,CAAaC,GACJA,EAAQC,sBAAsBX,KAAM,iBACrCU,EAAQE,sBAAsBZ,KAAM,eAAgB,IAAIuC,GAE5D,MAAMT,EAASpB,EAAQK,sBAAsBf,KAAM,eAAgB,MAC7DmC,EAAQnC,KAAKH,QAAQkC,mBACrB,CAEE/B,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,IAExC,CACEV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,GACtCV,KAAKiB,aAAa,WAAWC,SAASR,IAG9C,OADAoB,EAAOM,UAAUD,GACVL,CACf,CACI,YAAAX,GACI,MAAO,+BACf,EAEAC,EAAc,gCAA2EiB,GAIlF,MAAMG,UAAqCrC,EAC9C,WAAAT,CAAYG,GACRC,MAAM,EAAGU,EAAiBX,EAClC,CACI,cAAA4C,CAAe/B,GACX,IAAIgC,EAAQ1C,KAAKiB,aAAa,UAAUC,SAASR,GAC5CgC,IACDA,EAAQ7B,EAAQ8B,OAChB3C,KAAKiB,aAAa,SAAS2B,SAASF,EAAOhC,IAE/CV,KAAK6C,cAAc,YAAYD,SAASF,EAAMI,EAAGpC,GACjDV,KAAK6C,cAAc,YAAYD,SAASF,EAAMK,EAAGrC,EACzD,CACI,YAAAS,GACI,MAAO,8BACf,EAEAC,EAAc,+BAAyEoB,GAIhF,MAAMQ,UAAqC7C,EAC9C,WAAAT,CAAYG,GACRC,MAAM,EAAGwB,EAAiBzB,EAClC,CACI,cAAA4C,CAAe/B,GACX,IAAIgC,EAAQ1C,KAAKiB,aAAa,UAAUC,SAASR,GAC5CgC,IACDA,EAAQnB,EAAQoB,OAChB3C,KAAKiB,aAAa,SAAS2B,SAASF,EAAOhC,IAE/CV,KAAK6C,cAAc,YAAYD,SAASF,EAAMI,EAAGpC,GACjDV,KAAK6C,cAAc,YAAYD,SAASF,EAAMK,EAAGrC,GACjDV,KAAK6C,cAAc,YAAYD,SAASF,EAAMO,EAAGvC,EACzD,CACI,YAAAS,GACI,MAAO,8BACf,EAEAC,EAAc,+BAAyE4B,GAIhF,MAAME,UAAqC/C,EAC9C,WAAAT,CAAYG,GACRC,MAAM,EAAG2B,EAAiB5B,EAClC,CACI,cAAA4C,CAAe/B,GACX,IAAIgC,EAAQ1C,KAAKiB,aAAa,UAAUC,SAASR,GAC5CgC,IACDA,EAAQhB,EAAQiB,OAChB3C,KAAKiB,aAAa,SAAS2B,SAASF,EAAOhC,IAE/CV,KAAK6C,cAAc,YAAYD,SAASF,EAAMI,EAAGpC,GACjDV,KAAK6C,cAAc,YAAYD,SAASF,EAAMK,EAAGrC,GACjDV,KAAK6C,cAAc,YAAYD,SAASF,EAAMO,EAAGvC,GACjDV,KAAK6C,cAAc,YAAYD,SAASF,EAAMS,EAAGzC,EACzD,CACI,YAAAS,GACI,MAAO,8BACf,EAEAC,EAAc,+BAAyE8B,GAIhF,MAAME,UAAoCjD,EAC7C,WAAAT,CAAYG,GACRC,MAAM,GAAI8B,EAAgB/B,EAClC,CACI,cAAA4C,CAAe/B,GACX,IAAIgC,EAAQ1C,KAAKiB,aAAa,UAAUC,SAASR,GAC5CgC,IACDA,EAAQb,EAAOwB,WACfrD,KAAKiB,aAAa,SAAS2B,SAASF,EAAOhC,IAE/C,IAAK,IAAIX,EAAI,EAAGA,EAAI,GAAIA,IACpBC,KAAK6C,cAAc,UAAU9C,KAAK6C,SAASF,EAAMY,EAAEvD,GAAIW,EAEnE,CACI,YAAAS,GACI,MAAO,6BACf,EAEAC,EAAc,8BAAuEgC,GAI9E,MAAMG,UAAsCpD,EAC/C,WAAAT,CAAYG,GACRC,MAAM,EAAGmC,EAAkBpC,EACnC,CACI,cAAA4C,CAAe/B,GACX,IAAIgC,EAAQ1C,KAAKiB,aAAa,UAAUC,SAASR,GAC5CgC,IACDA,EAAQ,IAAIR,EACZlC,KAAKiB,aAAa,SAAS2B,SAASF,EAAOhC,IAE/C,IAAK,IAAIX,EAAI,EAAGA,EAAI,EAAGA,IACnBC,KAAK6C,cAAc,UAAU9C,KAAK6C,SAASF,EAAMY,EAAEvD,GAAIW,EAEnE,CACI,YAAAS,GACI,MAAO,+BACf,EAEAC,EAAc,gCAA2EmC,GAIlF,MAAMC,UAAsCrD,EAC/C,WAAAT,CAAYG,GACRC,MAAM,EAAGwC,EAAkBzC,EACnC,CACI,cAAA4C,CAAe/B,GACX,IAAIgC,EAAQ1C,KAAKiB,aAAa,UAAUC,SAASR,GAC5CgC,IACDA,EAAQ,IAAIH,EACZvC,KAAKiB,aAAa,SAAS2B,SAASF,EAAOhC,IAE/C,IAAK,IAAIX,EAAI,EAAGA,EAAI,EAAGA,IACnBC,KAAK6C,cAAc,UAAU9C,KAAK6C,SAASF,EAAMY,EAAEvD,GAAIW,EAEnE,CACI,YAAAS,GACI,MAAO,+BACf,EAEAC,EAAc,gCAA2EoC"}