{"version":3,"file":"glTFLoaderAnimation-BkBzMwap.esm.min.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/glTFLoaderAnimation.js"],"sourcesContent":["import { Animation } from \"core/Animations/animation\";\nimport { Quaternion, Vector3 } from \"core/Maths/math.vector\";\nimport { SetInterpolationForKey } from \"./Extensions/objectModelMapping\";\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getVector3(_target, source, offset, scale) {\n    return Vector3.FromArray(source, offset).scaleInPlace(scale);\n}\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getQuaternion(_target, source, offset, scale) {\n    return Quaternion.FromArray(source, offset).scaleInPlace(scale);\n}\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getWeights(target, source, offset, scale) {\n    const value = new Array(target._numMorphTargets);\n    for (let i = 0; i < value.length; i++) {\n        value[i] = source[offset++] * scale;\n    }\n    return value;\n}\n/** @internal */\nexport class AnimationPropertyInfo {\n    /** @internal */\n    constructor(type, name, getValue, getStride) {\n        this.type = type;\n        this.name = name;\n        this.getValue = getValue;\n        this.getStride = getStride;\n    }\n    _buildAnimation(name, fps, keys) {\n        const babylonAnimation = new Animation(name, this.name, fps, this.type);\n        babylonAnimation.setKeys(keys);\n        return babylonAnimation;\n    }\n}\n/** @internal */\nexport class TransformNodeAnimationPropertyInfo extends AnimationPropertyInfo {\n    /** @internal */\n    buildAnimations(target, name, fps, keys) {\n        const babylonAnimations = [];\n        babylonAnimations.push({ babylonAnimatable: target._babylonTransformNode, babylonAnimation: this._buildAnimation(name, fps, keys) });\n        return babylonAnimations;\n    }\n}\n/** @internal */\nexport class WeightAnimationPropertyInfo extends AnimationPropertyInfo {\n    buildAnimations(target, name, fps, keys) {\n        const babylonAnimations = [];\n        if (target._numMorphTargets) {\n            for (let targetIndex = 0; targetIndex < target._numMorphTargets; targetIndex++) {\n                const babylonAnimation = new Animation(`${name}_${targetIndex}`, this.name, fps, this.type);\n                babylonAnimation.setKeys(keys.map((key) => ({\n                    frame: key.frame,\n                    inTangent: key.inTangent ? key.inTangent[targetIndex] : undefined,\n                    value: key.value[targetIndex],\n                    outTangent: key.outTangent ? key.outTangent[targetIndex] : undefined,\n                    interpolation: key.interpolation,\n                })));\n                if (target._primitiveBabylonMeshes) {\n                    for (const babylonMesh of target._primitiveBabylonMeshes) {\n                        if (babylonMesh.morphTargetManager) {\n                            const morphTarget = babylonMesh.morphTargetManager.getTarget(targetIndex);\n                            const babylonAnimationClone = babylonAnimation.clone();\n                            morphTarget.animations.push(babylonAnimationClone);\n                            babylonAnimations.push({ babylonAnimatable: morphTarget, babylonAnimation: babylonAnimationClone });\n                        }\n                    }\n                }\n            }\n        }\n        return babylonAnimations;\n    }\n}\nSetInterpolationForKey(\"/nodes/{}/translation\", [new TransformNodeAnimationPropertyInfo(Animation.ANIMATIONTYPE_VECTOR3, \"position\", getVector3, () => 3)]);\nSetInterpolationForKey(\"/nodes/{}/rotation\", [new TransformNodeAnimationPropertyInfo(Animation.ANIMATIONTYPE_QUATERNION, \"rotationQuaternion\", getQuaternion, () => 4)]);\nSetInterpolationForKey(\"/nodes/{}/scale\", [new TransformNodeAnimationPropertyInfo(Animation.ANIMATIONTYPE_VECTOR3, \"scaling\", getVector3, () => 3)]);\nSetInterpolationForKey(\"/nodes/{}/weights\", [new WeightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"influence\", getWeights, (target) => target._numMorphTargets)]);\n//# sourceMappingURL=glTFLoaderAnimation.js.map"],"names":["getVector3","_target","source","offset","scale","Vector3","FromArray","scaleInPlace","getQuaternion","Quaternion","getWeights","target","value","Array","_numMorphTargets","i","length","AnimationPropertyInfo","constructor","type","name","getValue","getStride","this","_buildAnimation","fps","keys","babylonAnimation","Animation","setKeys","TransformNodeAnimationPropertyInfo","buildAnimations","babylonAnimations","push","babylonAnimatable","_babylonTransformNode","WeightAnimationPropertyInfo","targetIndex","map","key","frame","inTangent","undefined","outTangent","interpolation","_primitiveBabylonMeshes","babylonMesh","morphTargetManager","morphTarget","getTarget","babylonAnimationClone","clone","animations","SetInterpolationForKey","ANIMATIONTYPE_VECTOR3","ANIMATIONTYPE_QUATERNION","ANIMATIONTYPE_FLOAT"],"mappings":"4HAKO,SAASA,EAAWC,EAASC,EAAQC,EAAQC,GAChD,OAAOC,EAAQC,UAAUJ,EAAQC,GAAQI,aAAaH,EAC1D,CAGO,SAASI,EAAcP,EAASC,EAAQC,EAAQC,GACnD,OAAOK,EAAWH,UAAUJ,EAAQC,GAAQI,aAAaH,EAC7D,CAGO,SAASM,EAAWC,EAAQT,EAAQC,EAAQC,GAC/C,MAAMQ,EAAQ,IAAIC,MAAMF,EAAOG,kBAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAC9BH,EAAMG,GAAKb,EAAOC,KAAYC,EAElC,OAAOQ,CACX,CAEO,MAAMK,EAET,WAAAC,CAAYC,EAAMC,EAAMC,EAAUC,GAC9BC,KAAKJ,KAAOA,EACZI,KAAKH,KAAOA,EACZG,KAAKF,SAAWA,EAChBE,KAAKD,UAAYA,CACzB,CACI,eAAAE,CAAgBJ,EAAMK,EAAKC,GACvB,MAAMC,EAAmB,IAAIC,EAAUR,EAAMG,KAAKH,KAAMK,EAAKF,KAAKJ,MAElE,OADAQ,EAAiBE,QAAQH,GAClBC,CACf,EAGO,MAAMG,UAA2Cb,EAEpD,eAAAc,CAAgBpB,EAAQS,EAAMK,EAAKC,GAC/B,MAAMM,EAAoB,GAE1B,OADAA,EAAkBC,KAAK,CAAEC,kBAAmBvB,EAAOwB,sBAAuBR,iBAAkBJ,KAAKC,gBAAgBJ,EAAMK,EAAKC,KACrHM,CACf,EAGO,MAAMI,UAAoCnB,EAC7C,eAAAc,CAAgBpB,EAAQS,EAAMK,EAAKC,GAC/B,MAAMM,EAAoB,GAC1B,GAAIrB,EAAOG,iBACP,IAAK,IAAIuB,EAAc,EAAGA,EAAc1B,EAAOG,iBAAkBuB,IAAe,CAC5E,MAAMV,EAAmB,IAAIC,EAAU,GAAGR,KAAQiB,IAAed,KAAKH,KAAMK,EAAKF,KAAKJ,MAQtF,GAPAQ,EAAiBE,QAAQH,EAAKY,KAAKC,IAAS,CACxCC,MAAOD,EAAIC,MACXC,UAAWF,EAAIE,UAAYF,EAAIE,UAAUJ,QAAeK,EACxD9B,MAAO2B,EAAI3B,MAAMyB,GACjBM,WAAYJ,EAAII,WAAaJ,EAAII,WAAWN,QAAeK,EAC3DE,cAAeL,EAAIK,mBAEnBjC,EAAOkC,wBACP,IAAK,MAAMC,KAAenC,EAAOkC,wBAC7B,GAAIC,EAAYC,mBAAoB,CAChC,MAAMC,EAAcF,EAAYC,mBAAmBE,UAAUZ,GACvDa,EAAwBvB,EAAiBwB,QAC/CH,EAAYI,WAAWnB,KAAKiB,GAC5BlB,EAAkBC,KAAK,CAAEC,kBAAmBc,EAAarB,iBAAkBuB,GACvG,CAGA,CAEQ,OAAOlB,CACf,EAEAqB,EAAuB,wBAAyB,CAAC,IAAIvB,EAAmCF,EAAU0B,sBAAuB,WAAYtD,GAAY,IAAM,MACvJqD,EAAuB,qBAAsB,CAAC,IAAIvB,EAAmCF,EAAU2B,yBAA0B,qBAAsB/C,GAAe,IAAM,MACpK6C,EAAuB,kBAAmB,CAAC,IAAIvB,EAAmCF,EAAU0B,sBAAuB,UAAWtD,GAAY,IAAM,MAChJqD,EAAuB,oBAAqB,CAAC,IAAIjB,EAA4BR,EAAU4B,oBAAqB,YAAa9C,GAAaC,GAAWA,EAAOG"}