{"version":3,"file":"KHR_node_hoverability-C0dzoJ-_.esm.min.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/Extensions/KHR_node_hoverability.js"],"sourcesContent":["import { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nimport { addNewInteractivityFlowGraphMapping } from \"./KHR_interactivity/declarationMapper\";\nimport { AddObjectAccessorToKey } from \"./objectModelMapping\";\nconst NAME = \"KHR_node_hoverability\";\n// interactivity\nconst MeshPointerOverPrefix = \"targetMeshPointerOver_\";\naddNewInteractivityFlowGraphMapping(\"event/onHoverIn\", NAME, {\n    // using GetVariable as the nodeIndex is a configuration and not a value (i.e. it's not mutable)\n    blocks: [\"FlowGraphPointerOverEventBlock\" /* FlowGraphBlockNames.PointerOverEvent */, \"FlowGraphGetVariableBlock\" /* FlowGraphBlockNames.GetVariable */, \"FlowGraphIndexOfBlock\" /* FlowGraphBlockNames.IndexOf */, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n    configuration: {\n        stopPropagation: { name: \"stopPropagation\" },\n        nodeIndex: {\n            name: \"variable\",\n            toBlock: \"FlowGraphGetVariableBlock\" /* FlowGraphBlockNames.GetVariable */,\n            dataTransformer(data) {\n                return [MeshPointerOverPrefix + data[0]];\n            },\n        },\n    },\n    outputs: {\n        values: {\n            hoverNodeIndex: { name: \"index\", toBlock: \"FlowGraphIndexOfBlock\" /* FlowGraphBlockNames.IndexOf */ },\n            controllerIndex: { name: \"pointerId\" },\n        },\n        flows: {\n            out: { name: \"done\" },\n        },\n    },\n    interBlockConnectors: [\n        {\n            input: \"targetMesh\",\n            output: \"value\",\n            inputBlockIndex: 0,\n            outputBlockIndex: 1,\n            isVariable: true,\n        },\n        {\n            input: \"array\",\n            output: \"nodes\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 3,\n            isVariable: true,\n        },\n        {\n            input: \"object\",\n            output: \"meshUnderPointer\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 0,\n            isVariable: true,\n        },\n    ],\n    extraProcessor(gltfBlock, _declaration, _mapping, _arrays, serializedObjects, context, globalGLTF) {\n        // add the glTF to the configuration of the last serialized object\n        const serializedObject = serializedObjects[serializedObjects.length - 1];\n        serializedObject.config = serializedObject.config || {};\n        serializedObject.config.glTF = globalGLTF;\n        // find the listener nodeIndex value\n        const nodeIndex = gltfBlock.configuration?.[\"nodeIndex\"]?.value[0];\n        if (nodeIndex === undefined || typeof nodeIndex !== \"number\") {\n            throw new Error(\"nodeIndex not found in configuration\");\n        }\n        const variableName = MeshPointerOverPrefix + nodeIndex;\n        // find the nodeIndex value\n        serializedObjects[1].config.variable = variableName;\n        context._userVariables[variableName] = {\n            className: \"Mesh\",\n            id: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.id,\n            uniqueId: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.uniqueId,\n        };\n        return serializedObjects;\n    },\n});\nconst MeshPointerOutPrefix = \"targetMeshPointerOut_\";\naddNewInteractivityFlowGraphMapping(\"event/onHoverOut\", NAME, {\n    // using GetVariable as the nodeIndex is a configuration and not a value (i.e. it's not mutable)\n    blocks: [\"FlowGraphPointerOutEventBlock\" /* FlowGraphBlockNames.PointerOutEvent */, \"FlowGraphGetVariableBlock\" /* FlowGraphBlockNames.GetVariable */, \"FlowGraphIndexOfBlock\" /* FlowGraphBlockNames.IndexOf */, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n    configuration: {\n        stopPropagation: { name: \"stopPropagation\" },\n        nodeIndex: {\n            name: \"variable\",\n            toBlock: \"FlowGraphGetVariableBlock\" /* FlowGraphBlockNames.GetVariable */,\n            dataTransformer(data) {\n                return [MeshPointerOutPrefix + data[0]];\n            },\n        },\n    },\n    outputs: {\n        values: {\n            hoverNodeIndex: { name: \"index\", toBlock: \"FlowGraphIndexOfBlock\" /* FlowGraphBlockNames.IndexOf */ },\n            controllerIndex: { name: \"pointerId\" },\n        },\n        flows: {\n            out: { name: \"done\" },\n        },\n    },\n    interBlockConnectors: [\n        {\n            input: \"targetMesh\",\n            output: \"value\",\n            inputBlockIndex: 0,\n            outputBlockIndex: 1,\n            isVariable: true,\n        },\n        {\n            input: \"array\",\n            output: \"nodes\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 3,\n            isVariable: true,\n        },\n        {\n            input: \"object\",\n            output: \"meshOutOfPointer\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 0,\n            isVariable: true,\n        },\n    ],\n    extraProcessor(gltfBlock, _declaration, _mapping, _arrays, serializedObjects, context, globalGLTF) {\n        // add the glTF to the configuration of the last serialized object\n        const serializedObject = serializedObjects[serializedObjects.length - 1];\n        serializedObject.config = serializedObject.config || {};\n        serializedObject.config.glTF = globalGLTF;\n        const nodeIndex = gltfBlock.configuration?.[\"nodeIndex\"]?.value[0];\n        if (nodeIndex === undefined || typeof nodeIndex !== \"number\") {\n            throw new Error(\"nodeIndex not found in configuration\");\n        }\n        const variableName = MeshPointerOutPrefix + nodeIndex;\n        // find the nodeIndex value\n        serializedObjects[1].config.variable = variableName;\n        context._userVariables[variableName] = {\n            className: \"Mesh\",\n            id: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.id,\n            uniqueId: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.uniqueId,\n        };\n        return serializedObjects;\n    },\n});\nAddObjectAccessorToKey(\"/nodes/{}/extensions/KHR_node_hoverability/hoverable\", {\n    get: (node) => {\n        const tn = node._babylonTransformNode;\n        if (tn && tn.pointerOverDisableMeshTesting !== undefined) {\n            return tn.pointerOverDisableMeshTesting;\n        }\n        return true;\n    },\n    set: (value, node) => {\n        node._primitiveBabylonMeshes?.forEach((mesh) => {\n            mesh.pointerOverDisableMeshTesting = !value;\n        });\n    },\n    getTarget: (node) => node._babylonTransformNode,\n    getPropertyName: [() => \"pointerOverDisableMeshTesting\"],\n    type: \"boolean\",\n});\n/**\n * Loader extension for KHR_node_hoverability\n * @see https://github.com/KhronosGroup/glTF/pull/2426\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_node_hoverability {\n    /**\n     * @internal\n     */\n    constructor(loader) {\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        this._loader = loader;\n        this.enabled = loader.isExtensionUsed(NAME);\n    }\n    // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-misused-promises\n    async onReady() {\n        this._loader.gltf.nodes?.forEach((node) => {\n            // default is true, so only apply if false\n            if (node.extensions?.KHR_node_hoverability && node.extensions?.KHR_node_hoverability.hoverable === false) {\n                node._babylonTransformNode?.getChildMeshes().forEach((mesh) => {\n                    mesh.pointerOverDisableMeshTesting = true;\n                });\n            }\n        });\n    }\n    dispose() {\n        this._loader = null;\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_node_hoverability(loader));\n//# sourceMappingURL=KHR_node_hoverability.js.map"],"names":["NAME","MeshPointerOverPrefix","addNewInteractivityFlowGraphMapping","blocks","configuration","stopPropagation","name","nodeIndex","toBlock","dataTransformer","data","outputs","values","hoverNodeIndex","controllerIndex","flows","out","interBlockConnectors","input","output","inputBlockIndex","outputBlockIndex","isVariable","extraProcessor","gltfBlock","_declaration","_mapping","_arrays","serializedObjects","context","globalGLTF","serializedObject","length","config","glTF","value","undefined","Error","variableName","variable","_userVariables","className","id","nodes","_babylonTransformNode","uniqueId","MeshPointerOutPrefix","AddObjectAccessorToKey","get","node","tn","pointerOverDisableMeshTesting","set","_primitiveBabylonMeshes","forEach","mesh","getTarget","getPropertyName","type","KHR_node_hoverability","constructor","loader","this","_loader","enabled","isExtensionUsed","onReady","gltf","extensions","hoverable","getChildMeshes","dispose","unregisterGLTFExtension","registerGLTFExtension"],"mappings":"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"}