import{c3 as e,c4 as s,c5 as a,c6 as t,c7 as i,c8 as n,c9 as r,R as c}from"./index-VvGulz6u.esm.min.js";import{F as o}from"./KHR_interactivity-CxC8fKZd.esm.min.js";import{R as u,f as E}from"./declarationMapper-wc0CNyr2.esm.min.js";import"./objectModelMapping-CghNRpa4.esm.min.js";var p;!function(e){e[e.CircleEase=0]="CircleEase",e[e.BackEase=1]="BackEase",e[e.BounceEase=2]="BounceEase",e[e.CubicEase=3]="CubicEase",e[e.ElasticEase=4]="ElasticEase",e[e.ExponentialEase=5]="ExponentialEase",e[e.PowerEase=6]="PowerEase",e[e.QuadraticEase=7]="QuadraticEase",e[e.QuarticEase=8]="QuarticEase",e[e.QuinticEase=9]="QuinticEase",e[e.SineEase=10]="SineEase",e[e.BezierCurveEase=11]="BezierCurveEase"}(p||(p={}));class m extends o{constructor(e){super(e),this.config=e,this._easingFunctions={},this.type=this.registerDataInput("type",u,11),this.mode=this.registerDataInput("mode",E,0),this.parameters=this.registerDataInput("parameters",u,[1,0,0,1]),this.easingFunction=this.registerDataOutput("easingFunction",u)}_updateOutputs(c){const o=this.type.getValue(c),u=this.mode.getValue(c),E=this.parameters.getValue(c);if(void 0===o||void 0===u)return;const p=`${o}-${u}-${E.join("-")}`;if(!this._easingFunctions[p]){const c=function(c,...o){switch(c){case 11:return new r(...o);case 0:return new n;case 1:return new i(...o);case 2:return new t(...o);case 3:return new a;case 4:return new s(...o);case 5:return new e(...o);default:throw new Error("Easing type not yet implemented")}}(o,...E);c.setEasingMode(u),this._easingFunctions[p]=c}this.easingFunction.setValue(this._easingFunctions[p],c)}getClassName(){return"FlowGraphEasingBlock"}}c("FlowGraphEasingBlock",m);export{p as EasingFunctionType,m as FlowGraphEasingBlock};
//# sourceMappingURL=flowGraphEasingBlock-0rWCH6Bu.esm.min.js.map
