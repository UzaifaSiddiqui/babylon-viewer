{"version":3,"file":"basisTextureLoader-BDpeTpxL.esm.js","sources":["../../../../../dev/core/dist/Misc/basisWorker.js","../../../../../dev/core/dist/Misc/basis.js","../../../../../dev/core/dist/Materials/Textures/Loaders/basisTextureLoader.js"],"sourcesContent":["import { Tools } from \"./tools\";\n/**\n * The worker function that gets converted to a blob url to pass into a worker.\n * To be used if a developer wants to create their own worker instance and inject it instead of using the default worker.\n */\nexport function workerFunction() {\n    const _BASIS_FORMAT = {\n        cTFETC1: 0,\n        cTFETC2: 1,\n        cTFBC1: 2,\n        cTFBC3: 3,\n        cTFBC4: 4,\n        cTFBC5: 5,\n        cTFBC7: 6,\n        cTFPVRTC1_4_RGB: 8,\n        cTFPVRTC1_4_RGBA: 9,\n        cTFASTC_4x4: 10,\n        cTFATC_RGB: 11,\n        cTFATC_RGBA_INTERPOLATED_ALPHA: 12,\n        cTFRGBA32: 13,\n        cTFRGB565: 14,\n        cTFBGR565: 15,\n        cTFRGBA4444: 16,\n        cTFFXT1_RGB: 17,\n        cTFPVRTC2_4_RGB: 18,\n        cTFPVRTC2_4_RGBA: 19,\n        cTFETC2_EAC_R11: 20,\n        cTFETC2_EAC_RG11: 21,\n    };\n    let transcoderModulePromise = null;\n    onmessage = (event) => {\n        if (event.data.action === \"init\") {\n            // Load the transcoder if it hasn't been yet\n            if (event.data.url) {\n                // make sure we loaded the script correctly\n                try {\n                    importScripts(event.data.url);\n                }\n                catch (e) {\n                    postMessage({ action: \"error\", error: e });\n                }\n            }\n            if (!transcoderModulePromise) {\n                transcoderModulePromise = BASIS({\n                    // Override wasm binary\n                    wasmBinary: event.data.wasmBinary,\n                });\n            }\n            if (transcoderModulePromise !== null) {\n                // eslint-disable-next-line github/no-then\n                transcoderModulePromise.then((m) => {\n                    BASIS = m;\n                    m.initializeBasis();\n                    postMessage({ action: \"init\" });\n                });\n            }\n        }\n        else if (event.data.action === \"transcode\") {\n            // Transcode the basis image and return the resulting pixels\n            const config = event.data.config;\n            const imgData = event.data.imageData;\n            const loadedFile = new BASIS.BasisFile(imgData);\n            const fileInfo = GetFileInfo(loadedFile);\n            let format = event.data.ignoreSupportedFormats ? null : GetSupportedTranscodeFormat(event.data.config, fileInfo);\n            let needsConversion = false;\n            if (format === null) {\n                needsConversion = true;\n                format = fileInfo.hasAlpha ? _BASIS_FORMAT.cTFBC3 : _BASIS_FORMAT.cTFBC1;\n            }\n            // Begin transcode\n            let success = true;\n            if (!loadedFile.startTranscoding()) {\n                success = false;\n            }\n            const buffers = [];\n            for (let imageIndex = 0; imageIndex < fileInfo.images.length; imageIndex++) {\n                if (!success) {\n                    break;\n                }\n                const image = fileInfo.images[imageIndex];\n                if (config.loadSingleImage === undefined || config.loadSingleImage === imageIndex) {\n                    let mipCount = image.levels.length;\n                    if (config.loadMipmapLevels === false) {\n                        mipCount = 1;\n                    }\n                    for (let levelIndex = 0; levelIndex < mipCount; levelIndex++) {\n                        const levelInfo = image.levels[levelIndex];\n                        const pixels = TranscodeLevel(loadedFile, imageIndex, levelIndex, format, needsConversion);\n                        if (!pixels) {\n                            success = false;\n                            break;\n                        }\n                        levelInfo.transcodedPixels = pixels;\n                        buffers.push(levelInfo.transcodedPixels.buffer);\n                    }\n                }\n            }\n            // Close file\n            loadedFile.close();\n            loadedFile.delete();\n            if (needsConversion) {\n                format = -1;\n            }\n            if (!success) {\n                postMessage({ action: \"transcode\", success: success, id: event.data.id });\n            }\n            else {\n                postMessage({ action: \"transcode\", success: success, id: event.data.id, fileInfo: fileInfo, format: format }, buffers);\n            }\n        }\n    };\n    /**\n     * Detects the supported transcode format for the file\n     * @param config transcode config\n     * @param fileInfo info about the file\n     * @returns the chosed format or null if none are supported\n     */\n    function GetSupportedTranscodeFormat(config, fileInfo) {\n        let format = null;\n        if (config.supportedCompressionFormats) {\n            if (config.supportedCompressionFormats.astc) {\n                format = _BASIS_FORMAT.cTFASTC_4x4;\n            }\n            else if (config.supportedCompressionFormats.bc7) {\n                format = _BASIS_FORMAT.cTFBC7;\n            }\n            else if (config.supportedCompressionFormats.s3tc) {\n                format = fileInfo.hasAlpha ? _BASIS_FORMAT.cTFBC3 : _BASIS_FORMAT.cTFBC1;\n            }\n            else if (config.supportedCompressionFormats.pvrtc) {\n                format = fileInfo.hasAlpha ? _BASIS_FORMAT.cTFPVRTC1_4_RGBA : _BASIS_FORMAT.cTFPVRTC1_4_RGB;\n            }\n            else if (config.supportedCompressionFormats.etc2) {\n                format = _BASIS_FORMAT.cTFETC2;\n            }\n            else if (config.supportedCompressionFormats.etc1) {\n                format = _BASIS_FORMAT.cTFETC1;\n            }\n            else {\n                format = _BASIS_FORMAT.cTFRGB565;\n            }\n        }\n        return format;\n    }\n    /**\n     * Retrieves information about the basis file eg. dimensions\n     * @param basisFile the basis file to get the info from\n     * @returns information about the basis file\n     */\n    function GetFileInfo(basisFile) {\n        const hasAlpha = basisFile.getHasAlpha();\n        const imageCount = basisFile.getNumImages();\n        const images = [];\n        for (let i = 0; i < imageCount; i++) {\n            const imageInfo = {\n                levels: [],\n            };\n            const levelCount = basisFile.getNumLevels(i);\n            for (let level = 0; level < levelCount; level++) {\n                const levelInfo = {\n                    width: basisFile.getImageWidth(i, level),\n                    height: basisFile.getImageHeight(i, level),\n                };\n                imageInfo.levels.push(levelInfo);\n            }\n            images.push(imageInfo);\n        }\n        const info = { hasAlpha, images };\n        return info;\n    }\n    function TranscodeLevel(loadedFile, imageIndex, levelIndex, format, convertToRgb565) {\n        const dstSize = loadedFile.getImageTranscodedSizeInBytes(imageIndex, levelIndex, format);\n        let dst = new Uint8Array(dstSize);\n        if (!loadedFile.transcodeImage(dst, imageIndex, levelIndex, format, 1, 0)) {\n            return null;\n        }\n        // If no supported format is found, load as dxt and convert to rgb565\n        if (convertToRgb565) {\n            const alignedWidth = (loadedFile.getImageWidth(imageIndex, levelIndex) + 3) & ~3;\n            const alignedHeight = (loadedFile.getImageHeight(imageIndex, levelIndex) + 3) & ~3;\n            dst = ConvertDxtToRgb565(dst, 0, alignedWidth, alignedHeight);\n        }\n        return dst;\n    }\n    /**\n     * From https://github.com/BinomialLLC/basis_universal/blob/master/webgl/texture/dxt-to-rgb565.js\n     * An unoptimized version of dxtToRgb565.  Also, the floating\n     * point math used to compute the colors actually results in\n     * slightly different colors compared to hardware DXT decoders.\n     * @param src dxt src pixels\n     * @param srcByteOffset offset for the start of src\n     * @param  width aligned width of the image\n     * @param  height aligned height of the image\n     * @returns the converted pixels\n     */\n    function ConvertDxtToRgb565(src, srcByteOffset, width, height) {\n        const c = new Uint16Array(4);\n        const dst = new Uint16Array(width * height);\n        const blockWidth = width / 4;\n        const blockHeight = height / 4;\n        for (let blockY = 0; blockY < blockHeight; blockY++) {\n            for (let blockX = 0; blockX < blockWidth; blockX++) {\n                const i = srcByteOffset + 8 * (blockY * blockWidth + blockX);\n                c[0] = src[i] | (src[i + 1] << 8);\n                c[1] = src[i + 2] | (src[i + 3] << 8);\n                c[2] =\n                    ((2 * (c[0] & 0x1f) + 1 * (c[1] & 0x1f)) / 3) |\n                        (((2 * (c[0] & 0x7e0) + 1 * (c[1] & 0x7e0)) / 3) & 0x7e0) |\n                        (((2 * (c[0] & 0xf800) + 1 * (c[1] & 0xf800)) / 3) & 0xf800);\n                c[3] =\n                    ((2 * (c[1] & 0x1f) + 1 * (c[0] & 0x1f)) / 3) |\n                        (((2 * (c[1] & 0x7e0) + 1 * (c[0] & 0x7e0)) / 3) & 0x7e0) |\n                        (((2 * (c[1] & 0xf800) + 1 * (c[0] & 0xf800)) / 3) & 0xf800);\n                for (let row = 0; row < 4; row++) {\n                    const m = src[i + 4 + row];\n                    let dstI = (blockY * 4 + row) * width + blockX * 4;\n                    dst[dstI++] = c[m & 0x3];\n                    dst[dstI++] = c[(m >> 2) & 0x3];\n                    dst[dstI++] = c[(m >> 4) & 0x3];\n                    dst[dstI++] = c[(m >> 6) & 0x3];\n                }\n            }\n        }\n        return dst;\n    }\n}\n/**\n * Initialize a web worker with the basis transcoder\n * @param worker the worker to initialize\n * @param wasmBinary the wasm binary to load into the worker\n * @param moduleUrl the url to the basis transcoder module\n * @returns a promise that resolves when the worker is initialized\n */\n// eslint-disable-next-line no-restricted-syntax\nexport async function initializeWebWorker(worker, wasmBinary, moduleUrl) {\n    return await new Promise((res, reject) => {\n        const initHandler = (msg) => {\n            if (msg.data.action === \"init\") {\n                worker.removeEventListener(\"message\", initHandler);\n                res(worker);\n            }\n            else if (msg.data.action === \"error\") {\n                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                reject(msg.data.error || \"error initializing worker\");\n            }\n        };\n        worker.addEventListener(\"message\", initHandler);\n        // we can use transferable objects here because the worker will own the ArrayBuffer\n        worker.postMessage({ action: \"init\", url: moduleUrl ? Tools.GetBabylonScriptURL(moduleUrl) : undefined, wasmBinary }, [wasmBinary]);\n    });\n}\n//# sourceMappingURL=basisWorker.js.map","import { Tools } from \"./tools\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { InternalTexture } from \"../Materials/Textures/internalTexture\";\nimport { Constants } from \"../Engines/constants\";\nimport { initializeWebWorker, workerFunction } from \"./basisWorker\";\n/**\n * Info about the .basis files\n */\nexport class BasisFileInfo {\n}\n/**\n * Result of transcoding a basis file\n */\nclass TranscodeResult {\n}\n/**\n * Configuration options for the Basis transcoder\n */\nexport class BasisTranscodeConfiguration {\n}\n/**\n * @internal\n * Enum of basis transcoder formats\n */\nvar BASIS_FORMATS;\n(function (BASIS_FORMATS) {\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFETC1\"] = 0] = \"cTFETC1\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFETC2\"] = 1] = \"cTFETC2\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC1\"] = 2] = \"cTFBC1\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC3\"] = 3] = \"cTFBC3\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC4\"] = 4] = \"cTFBC4\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC5\"] = 5] = \"cTFBC5\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC7\"] = 6] = \"cTFBC7\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFPVRTC1_4_RGB\"] = 8] = \"cTFPVRTC1_4_RGB\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFPVRTC1_4_RGBA\"] = 9] = \"cTFPVRTC1_4_RGBA\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFASTC_4x4\"] = 10] = \"cTFASTC_4x4\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFATC_RGB\"] = 11] = \"cTFATC_RGB\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFATC_RGBA_INTERPOLATED_ALPHA\"] = 12] = \"cTFATC_RGBA_INTERPOLATED_ALPHA\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFRGBA32\"] = 13] = \"cTFRGBA32\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFRGB565\"] = 14] = \"cTFRGB565\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBGR565\"] = 15] = \"cTFBGR565\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFRGBA4444\"] = 16] = \"cTFRGBA4444\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFFXT1_RGB\"] = 17] = \"cTFFXT1_RGB\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFPVRTC2_4_RGB\"] = 18] = \"cTFPVRTC2_4_RGB\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFPVRTC2_4_RGBA\"] = 19] = \"cTFPVRTC2_4_RGBA\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFETC2_EAC_R11\"] = 20] = \"cTFETC2_EAC_R11\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFETC2_EAC_RG11\"] = 21] = \"cTFETC2_EAC_RG11\";\n})(BASIS_FORMATS || (BASIS_FORMATS = {}));\n/**\n * Used to load .Basis files\n * See https://github.com/BinomialLLC/basis_universal/tree/master/webgl\n */\nexport const BasisToolsOptions = {\n    /**\n     * URL to use when loading the basis transcoder\n     */\n    JSModuleURL: `${Tools._DefaultCdnUrl}/basisTranscoder/1/basis_transcoder.js`,\n    /**\n     * URL to use when loading the wasm module for the transcoder\n     */\n    WasmModuleURL: `${Tools._DefaultCdnUrl}/basisTranscoder/1/basis_transcoder.wasm`,\n};\n/**\n * Get the internal format to be passed to texImage2D corresponding to the .basis format value\n * @param basisFormat format chosen from GetSupportedTranscodeFormat\n * @param engine\n * @returns internal format corresponding to the Basis format\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const GetInternalFormatFromBasisFormat = (basisFormat, engine) => {\n    let format;\n    switch (basisFormat) {\n        case BASIS_FORMATS.cTFETC1:\n            format = Constants.TEXTUREFORMAT_COMPRESSED_RGB_ETC1_WEBGL;\n            break;\n        case BASIS_FORMATS.cTFBC1:\n            format = Constants.TEXTUREFORMAT_COMPRESSED_RGB_S3TC_DXT1;\n            break;\n        case BASIS_FORMATS.cTFBC4:\n            format = Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT5;\n            break;\n        case BASIS_FORMATS.cTFASTC_4x4:\n            format = Constants.TEXTUREFORMAT_COMPRESSED_RGBA_ASTC_4x4;\n            break;\n        case BASIS_FORMATS.cTFETC2:\n            format = Constants.TEXTUREFORMAT_COMPRESSED_RGBA8_ETC2_EAC;\n            break;\n        case BASIS_FORMATS.cTFBC7:\n            format = Constants.TEXTUREFORMAT_COMPRESSED_RGBA_BPTC_UNORM;\n            break;\n    }\n    if (format === undefined) {\n        // eslint-disable-next-line no-throw-literal\n        throw \"The chosen Basis transcoder format is not currently supported\";\n    }\n    return format;\n};\nlet WorkerPromise = null;\nlet LocalWorker = null;\nlet ActionId = 0;\nconst IgnoreSupportedFormats = false;\nconst CreateWorkerAsync = async () => {\n    if (!WorkerPromise) {\n        WorkerPromise = new Promise((res, reject) => {\n            if (LocalWorker) {\n                res(LocalWorker);\n            }\n            else {\n                Tools.LoadFileAsync(Tools.GetBabylonScriptURL(BasisToolsOptions.WasmModuleURL))\n                    // eslint-disable-next-line github/no-then\n                    .then((wasmBinary) => {\n                    if (typeof URL !== \"function\") {\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                        return reject(\"Basis transcoder requires an environment with a URL constructor\");\n                    }\n                    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                    const workerBlobUrl = URL.createObjectURL(new Blob([`(${workerFunction})()`], { type: \"application/javascript\" }));\n                    LocalWorker = new Worker(workerBlobUrl);\n                    // eslint-disable-next-line github/no-then\n                    initializeWebWorker(LocalWorker, wasmBinary, BasisToolsOptions.JSModuleURL).then(res, reject);\n                })\n                    // eslint-disable-next-line github/no-then\n                    .catch(reject);\n            }\n        });\n    }\n    return await WorkerPromise;\n};\n/**\n * Set the worker to use for transcoding\n * @param worker The worker that will be used for transcoding\n */\nexport const SetBasisTranscoderWorker = (worker) => {\n    LocalWorker = worker;\n};\n/**\n * Transcodes a loaded image file to compressed pixel data\n * @param data image data to transcode\n * @param config configuration options for the transcoding\n * @returns a promise resulting in the transcoded image\n */\nexport const TranscodeAsync = async (data, config) => {\n    const dataView = data instanceof ArrayBuffer ? new Uint8Array(data) : data;\n    return await new Promise((res, rej) => {\n        // eslint-disable-next-line github/no-then\n        CreateWorkerAsync().then(() => {\n            const actionId = ActionId++;\n            const messageHandler = (msg) => {\n                if (msg.data.action === \"transcode\" && msg.data.id === actionId) {\n                    LocalWorker.removeEventListener(\"message\", messageHandler);\n                    if (!msg.data.success) {\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                        rej(\"Transcode is not supported on this device\");\n                    }\n                    else {\n                        res(msg.data);\n                    }\n                }\n            };\n            LocalWorker.addEventListener(\"message\", messageHandler);\n            const dataViewCopy = new Uint8Array(dataView.byteLength);\n            dataViewCopy.set(new Uint8Array(dataView.buffer, dataView.byteOffset, dataView.byteLength));\n            LocalWorker.postMessage({ action: \"transcode\", id: actionId, imageData: dataViewCopy, config: config, ignoreSupportedFormats: IgnoreSupportedFormats }, [\n                dataViewCopy.buffer,\n            ]);\n        }, (error) => {\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            rej(error);\n        });\n    });\n};\n/**\n * Binds a texture according to its underlying target.\n * @param texture texture to bind\n * @param engine the engine to bind the texture in\n */\nconst BindTexture = (texture, engine) => {\n    let target = engine._gl?.TEXTURE_2D;\n    if (texture.isCube) {\n        target = engine._gl?.TEXTURE_CUBE_MAP;\n    }\n    engine._bindTextureDirectly(target, texture, true);\n};\n/**\n * Loads a texture from the transcode result\n * @param texture texture load to\n * @param transcodeResult the result of transcoding the basis file to load from\n */\nexport const LoadTextureFromTranscodeResult = (texture, transcodeResult) => {\n    const engine = texture.getEngine();\n    for (let i = 0; i < transcodeResult.fileInfo.images.length; i++) {\n        const rootImage = transcodeResult.fileInfo.images[i].levels[0];\n        texture._invertVScale = texture.invertY;\n        if (transcodeResult.format === -1 || transcodeResult.format === BASIS_FORMATS.cTFRGB565) {\n            // No compatable compressed format found, fallback to RGB\n            texture.type = Constants.TEXTURETYPE_UNSIGNED_SHORT_5_6_5;\n            texture.format = Constants.TEXTUREFORMAT_RGB;\n            if (engine._features.basisNeedsPOT && (Math.log2(rootImage.width) % 1 !== 0 || Math.log2(rootImage.height) % 1 !== 0)) {\n                // Create non power of two texture\n                const source = new InternalTexture(engine, 2 /* InternalTextureSource.Temp */);\n                texture._invertVScale = texture.invertY;\n                source.type = Constants.TEXTURETYPE_UNSIGNED_SHORT_5_6_5;\n                source.format = Constants.TEXTUREFORMAT_RGB;\n                // Fallback requires aligned width/height\n                source.width = (rootImage.width + 3) & ~3;\n                source.height = (rootImage.height + 3) & ~3;\n                BindTexture(source, engine);\n                engine._uploadDataToTextureDirectly(source, new Uint16Array(rootImage.transcodedPixels.buffer), i, 0, Constants.TEXTUREFORMAT_RGB, true);\n                // Resize to power of two\n                engine._rescaleTexture(source, texture, engine.scenes[0], engine._getInternalFormat(Constants.TEXTUREFORMAT_RGB), () => {\n                    engine._releaseTexture(source);\n                    BindTexture(texture, engine);\n                });\n            }\n            else {\n                // Fallback is already inverted\n                texture._invertVScale = !texture.invertY;\n                // Upload directly\n                texture.width = (rootImage.width + 3) & ~3;\n                texture.height = (rootImage.height + 3) & ~3;\n                texture.samplingMode = Constants.TEXTURE_LINEAR_LINEAR;\n                BindTexture(texture, engine);\n                engine._uploadDataToTextureDirectly(texture, new Uint16Array(rootImage.transcodedPixels.buffer), i, 0, Constants.TEXTUREFORMAT_RGB, true);\n            }\n        }\n        else {\n            texture.width = rootImage.width;\n            texture.height = rootImage.height;\n            texture.generateMipMaps = transcodeResult.fileInfo.images[i].levels.length > 1;\n            const format = BasisTools.GetInternalFormatFromBasisFormat(transcodeResult.format, engine);\n            texture.format = format;\n            BindTexture(texture, engine);\n            // Upload all mip levels in the file\n            const levels = transcodeResult.fileInfo.images[i].levels;\n            for (let index = 0; index < levels.length; index++) {\n                const level = levels[index];\n                engine._uploadCompressedDataToTextureDirectly(texture, format, level.width, level.height, level.transcodedPixels, i, index);\n            }\n            if (engine._features.basisNeedsPOT && (Math.log2(texture.width) % 1 !== 0 || Math.log2(texture.height) % 1 !== 0)) {\n                Tools.Warn(\"Loaded .basis texture width and height are not a power of two. Texture wrapping will be set to Texture.CLAMP_ADDRESSMODE as other modes are not supported with non power of two dimensions in webGL 1.\");\n                texture._cachedWrapU = Texture.CLAMP_ADDRESSMODE;\n                texture._cachedWrapV = Texture.CLAMP_ADDRESSMODE;\n            }\n        }\n    }\n};\n/**\n * Used to load .Basis files\n * See https://github.com/BinomialLLC/basis_universal/tree/master/webgl\n */\nexport const BasisTools = {\n    /**\n     * URL to use when loading the basis transcoder\n     */\n    JSModuleURL: BasisToolsOptions.JSModuleURL,\n    /**\n     * URL to use when loading the wasm module for the transcoder\n     */\n    WasmModuleURL: BasisToolsOptions.WasmModuleURL,\n    /**\n     * Get the internal format to be passed to texImage2D corresponding to the .basis format value\n     * @param basisFormat format chosen from GetSupportedTranscodeFormat\n     * @returns internal format corresponding to the Basis format\n     */\n    GetInternalFormatFromBasisFormat,\n    /**\n     * Transcodes a loaded image file to compressed pixel data\n     * @param data image data to transcode\n     * @param config configuration options for the transcoding\n     * @returns a promise resulting in the transcoded image\n     */\n    TranscodeAsync,\n    /**\n     * Loads a texture from the transcode result\n     * @param texture texture load to\n     * @param transcodeResult the result of transcoding the basis file to load from\n     */\n    LoadTextureFromTranscodeResult,\n};\nObject.defineProperty(BasisTools, \"JSModuleURL\", {\n    get: function () {\n        return BasisToolsOptions.JSModuleURL;\n    },\n    set: function (value) {\n        BasisToolsOptions.JSModuleURL = value;\n    },\n});\nObject.defineProperty(BasisTools, \"WasmModuleURL\", {\n    get: function () {\n        return BasisToolsOptions.WasmModuleURL;\n    },\n    set: function (value) {\n        BasisToolsOptions.WasmModuleURL = value;\n    },\n});\n//# sourceMappingURL=basis.js.map","import { LoadTextureFromTranscodeResult, TranscodeAsync } from \"../../../Misc/basis\";\nimport { Tools } from \"../../../Misc/tools\";\n/**\n * Loader for .basis file format\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _BasisTextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param createPolynomials will be true if polynomials have been requested\n     * @param onLoad defines the callback to trigger once the texture is ready\n     * @param onError defines the callback to trigger in case of error\n     */\n    loadCubeData(data, texture, createPolynomials, onLoad, onError) {\n        if (Array.isArray(data)) {\n            return;\n        }\n        const caps = texture.getEngine().getCaps();\n        const transcodeConfig = {\n            supportedCompressionFormats: {\n                etc1: caps.etc1 ? true : false,\n                s3tc: caps.s3tc ? true : false,\n                pvrtc: caps.pvrtc ? true : false,\n                etc2: caps.etc2 ? true : false,\n                astc: caps.astc ? true : false,\n                bc7: caps.bptc ? true : false,\n            },\n        };\n        TranscodeAsync(data, transcodeConfig)\n            // eslint-disable-next-line github/no-then\n            .then((result) => {\n            const hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\n            LoadTextureFromTranscodeResult(texture, result);\n            texture.getEngine()._setCubeMapTextureParams(texture, hasMipmap);\n            texture.isReady = true;\n            texture.onLoadedObservable.notifyObservers(texture);\n            texture.onLoadedObservable.clear();\n            if (onLoad) {\n                onLoad();\n            }\n        })\n            // eslint-disable-next-line github/no-then\n            .catch((err) => {\n            const errorMessage = \"Failed to transcode Basis file, transcoding may not be supported on this device\";\n            Tools.Warn(errorMessage);\n            texture.isReady = true;\n            if (onError) {\n                onError(err);\n            }\n        });\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     */\n    loadData(data, texture, callback) {\n        const caps = texture.getEngine().getCaps();\n        const transcodeConfig = {\n            supportedCompressionFormats: {\n                etc1: caps.etc1 ? true : false,\n                s3tc: caps.s3tc ? true : false,\n                pvrtc: caps.pvrtc ? true : false,\n                etc2: caps.etc2 ? true : false,\n                astc: caps.astc ? true : false,\n                bc7: caps.bptc ? true : false,\n            },\n        };\n        TranscodeAsync(data, transcodeConfig)\n            // eslint-disable-next-line github/no-then\n            .then((result) => {\n            const rootImage = result.fileInfo.images[0].levels[0];\n            const hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\n            callback(rootImage.width, rootImage.height, hasMipmap, result.format !== -1, () => {\n                LoadTextureFromTranscodeResult(texture, result);\n            });\n        })\n            // eslint-disable-next-line github/no-then\n            .catch((err) => {\n            Tools.Warn(\"Failed to transcode Basis file, transcoding may not be supported on this device\");\n            Tools.Warn(`Failed to transcode Basis file: ${err}`);\n            callback(0, 0, false, false, () => { }, true);\n        });\n    }\n}\n//# sourceMappingURL=basisTextureLoader.js.map"],"names":[],"mappings":"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"}