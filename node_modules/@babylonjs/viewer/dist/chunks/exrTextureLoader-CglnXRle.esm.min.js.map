{"version":3,"file":"exrTextureLoader-CglnXRle.esm.min.js","sources":["../../../../../dev/core/dist/Materials/Textures/Loaders/EXR/exrLoader.interfaces.js","../../../../../dev/core/dist/Materials/Textures/Loaders/EXR/exrLoader.core.js","../../../../../dev/core/dist/Materials/Textures/Loaders/EXR/exrLoader.compression.huf.js","../../../../../dev/core/dist/Materials/Textures/Loaders/EXR/exrLoader.compression.js","../../../../../dev/core/dist/Materials/Textures/Loaders/EXR/exrLoader.compression.rle.js","../../../../../dev/core/dist/Materials/Textures/Loaders/EXR/exrLoader.configuration.js","../../../../../dev/core/dist/Materials/Textures/Loaders/exrTextureLoader.js","../../../../../dev/core/dist/Materials/Textures/Loaders/EXR/exrLoader.header.js","../../../../../dev/core/dist/Materials/Textures/Loaders/EXR/exrLoader.decoder.js"],"sourcesContent":["export const INT32_SIZE = 4;\nexport const FLOAT32_SIZE = 4;\nexport const INT8_SIZE = 1;\nexport const INT16_SIZE = 2;\nexport const ULONG_SIZE = 8;\nexport const USHORT_RANGE = 1 << 16;\nexport const BITMAP_SIZE = USHORT_RANGE >> 3;\nexport const HUF_ENCBITS = 16;\nexport const HUF_DECBITS = 14;\nexport const HUF_ENCSIZE = (1 << HUF_ENCBITS) + 1;\nexport const HUF_DECSIZE = 1 << HUF_DECBITS;\nexport const HUF_DECMASK = HUF_DECSIZE - 1;\nexport const SHORT_ZEROCODE_RUN = 59;\nexport const LONG_ZEROCODE_RUN = 63;\nexport const SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;\n//# sourceMappingURL=exrLoader.interfaces.js.map","import { Clamp } from \"core/Maths/math.scalar.functions\";\nimport { FLOAT32_SIZE, INT16_SIZE, INT32_SIZE, INT8_SIZE, ULONG_SIZE } from \"./exrLoader.interfaces\";\n/**\n * Inspired by https://github.com/sciecode/three.js/blob/dev/examples/jsm/loaders/EXRLoader.js\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\nexport var CompressionCodes;\n(function (CompressionCodes) {\n    CompressionCodes[CompressionCodes[\"NO_COMPRESSION\"] = 0] = \"NO_COMPRESSION\";\n    CompressionCodes[CompressionCodes[\"RLE_COMPRESSION\"] = 1] = \"RLE_COMPRESSION\";\n    CompressionCodes[CompressionCodes[\"ZIPS_COMPRESSION\"] = 2] = \"ZIPS_COMPRESSION\";\n    CompressionCodes[CompressionCodes[\"ZIP_COMPRESSION\"] = 3] = \"ZIP_COMPRESSION\";\n    CompressionCodes[CompressionCodes[\"PIZ_COMPRESSION\"] = 4] = \"PIZ_COMPRESSION\";\n    CompressionCodes[CompressionCodes[\"PXR24_COMPRESSION\"] = 5] = \"PXR24_COMPRESSION\";\n})(CompressionCodes || (CompressionCodes = {}));\nvar LineOrders;\n(function (LineOrders) {\n    LineOrders[LineOrders[\"INCREASING_Y\"] = 0] = \"INCREASING_Y\";\n    LineOrders[LineOrders[\"DECREASING_Y\"] = 1] = \"DECREASING_Y\";\n})(LineOrders || (LineOrders = {}));\nconst Tables = GenerateTables();\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\nfunction GenerateTables() {\n    // float32 to float16 helpers\n    const buffer = new ArrayBuffer(4);\n    const floatView = new Float32Array(buffer);\n    const uint32View = new Uint32Array(buffer);\n    const baseTable = new Uint32Array(512);\n    const shiftTable = new Uint32Array(512);\n    for (let i = 0; i < 256; ++i) {\n        const e = i - 127;\n        // very small number (0, -0)\n        if (e < -27) {\n            baseTable[i] = 0x0000;\n            baseTable[i | 0x100] = 0x8000;\n            shiftTable[i] = 24;\n            shiftTable[i | 0x100] = 24;\n            // small number (denorm)\n        }\n        else if (e < -14) {\n            baseTable[i] = 0x0400 >> (-e - 14);\n            baseTable[i | 0x100] = (0x0400 >> (-e - 14)) | 0x8000;\n            shiftTable[i] = -e - 1;\n            shiftTable[i | 0x100] = -e - 1;\n            // normal number\n        }\n        else if (e <= 15) {\n            baseTable[i] = (e + 15) << 10;\n            baseTable[i | 0x100] = ((e + 15) << 10) | 0x8000;\n            shiftTable[i] = 13;\n            shiftTable[i | 0x100] = 13;\n            // large number (Infinity, -Infinity)\n        }\n        else if (e < 128) {\n            baseTable[i] = 0x7c00;\n            baseTable[i | 0x100] = 0xfc00;\n            shiftTable[i] = 24;\n            shiftTable[i | 0x100] = 24;\n            // stay (NaN, Infinity, -Infinity)\n        }\n        else {\n            baseTable[i] = 0x7c00;\n            baseTable[i | 0x100] = 0xfc00;\n            shiftTable[i] = 13;\n            shiftTable[i | 0x100] = 13;\n        }\n    }\n    // float16 to float32 helpers\n    const mantissaTable = new Uint32Array(2048);\n    const exponentTable = new Uint32Array(64);\n    const offsetTable = new Uint32Array(64);\n    for (let i = 1; i < 1024; ++i) {\n        let m = i << 13; // zero pad mantissa bits\n        let e = 0; // zero exponent\n        // normalized\n        while ((m & 0x00800000) === 0) {\n            m <<= 1;\n            e -= 0x00800000; // decrement exponent\n        }\n        m &= ~0x00800000; // clear leading 1 bit\n        e += 0x38800000; // adjust bias\n        mantissaTable[i] = m | e;\n    }\n    for (let i = 1024; i < 2048; ++i) {\n        mantissaTable[i] = 0x38000000 + ((i - 1024) << 13);\n    }\n    for (let i = 1; i < 31; ++i) {\n        exponentTable[i] = i << 23;\n    }\n    exponentTable[31] = 0x47800000;\n    exponentTable[32] = 0x80000000;\n    for (let i = 33; i < 63; ++i) {\n        exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n    }\n    exponentTable[63] = 0xc7800000;\n    for (let i = 1; i < 64; ++i) {\n        if (i !== 32) {\n            offsetTable[i] = 1024;\n        }\n    }\n    return {\n        floatView: floatView,\n        uint32View: uint32View,\n        baseTable: baseTable,\n        shiftTable: shiftTable,\n        mantissaTable: mantissaTable,\n        exponentTable: exponentTable,\n        offsetTable: offsetTable,\n    };\n}\n/**\n * Parse a null terminated string from the buffer\n * @param buffer buffer to read from\n * @param offset current offset in the buffer\n * @returns a string\n */\nexport function ParseNullTerminatedString(buffer, offset) {\n    const uintBuffer = new Uint8Array(buffer);\n    let endOffset = 0;\n    while (uintBuffer[offset.value + endOffset] != 0) {\n        endOffset += 1;\n    }\n    const stringValue = new TextDecoder().decode(uintBuffer.slice(offset.value, offset.value + endOffset));\n    offset.value = offset.value + endOffset + 1;\n    return stringValue;\n}\n/**\n * Parse an int32 from the buffer\n * @param dataView dataview on the data\n * @param offset current offset in the data view\n * @returns an int32\n */\nexport function ParseInt32(dataView, offset) {\n    const value = dataView.getInt32(offset.value, true);\n    offset.value += INT32_SIZE;\n    return value;\n}\n/**\n * Parse an uint32 from the buffer\n * @param dataView data view to read from\n * @param offset offset in the data view\n * @returns an uint32\n */\nexport function ParseUint32(dataView, offset) {\n    const value = dataView.getUint32(offset.value, true);\n    offset.value += INT32_SIZE;\n    return value;\n}\n/**\n * Parse an uint8 from the buffer\n * @param dataView dataview on the data\n * @param offset current offset in the data view\n * @returns an uint8\n */\nexport function ParseUint8(dataView, offset) {\n    const value = dataView.getUint8(offset.value);\n    offset.value += INT8_SIZE;\n    return value;\n}\n/**\n * Parse an uint16 from the buffer\n * @param dataView dataview on the data\n * @param offset current offset in the data view\n * @returns an uint16\n */\nexport function ParseUint16(dataView, offset) {\n    const value = dataView.getUint16(offset.value, true);\n    offset.value += INT16_SIZE;\n    return value;\n}\n/**\n * Parse an uint8 from an array buffer\n * @param array array buffer\n * @param offset current offset in the data view\n * @returns an uint16\n */\nexport function ParseUint8Array(array, offset) {\n    const value = array[offset.value];\n    offset.value += INT8_SIZE;\n    return value;\n}\n/**\n * Parse an int64 from the buffer\n * @param dataView dataview on the data\n * @param offset current offset in the data view\n * @returns an int64\n */\nexport function ParseInt64(dataView, offset) {\n    let int;\n    if (\"getBigInt64\" in DataView.prototype) {\n        int = Number(dataView.getBigInt64(offset.value, true));\n    }\n    else {\n        int = dataView.getUint32(offset.value + 4, true) + Number(dataView.getUint32(offset.value, true) << 32);\n    }\n    offset.value += ULONG_SIZE;\n    return int;\n}\n/**\n * Parse a float32 from the buffer\n * @param dataView dataview on the data\n * @param offset current offset in the data view\n * @returns a float32\n */\nexport function ParseFloat32(dataView, offset) {\n    const value = dataView.getFloat32(offset.value, true);\n    offset.value += FLOAT32_SIZE;\n    return value;\n}\n/**\n * Parse a float16 from the buffer\n * @param dataView dataview on the data\n * @param offset current offset in the data view\n * @returns a float16\n */\nexport function ParseFloat16(dataView, offset) {\n    return DecodeFloat16(ParseUint16(dataView, offset));\n}\nfunction DecodeFloat16(binary) {\n    const exponent = (binary & 0x7c00) >> 10;\n    const fraction = binary & 0x03ff;\n    return ((binary >> 15 ? -1 : 1) *\n        (exponent ? (exponent === 0x1f ? (fraction ? NaN : Infinity) : Math.pow(2, exponent - 15) * (1 + fraction / 0x400)) : 6.103515625e-5 * (fraction / 0x400)));\n}\nfunction ToHalfFloat(value) {\n    if (Math.abs(value) > 65504) {\n        throw new Error(\"Value out of range.Consider using float instead of half-float.\");\n    }\n    value = Clamp(value, -65504, 65504);\n    Tables.floatView[0] = value;\n    const f = Tables.uint32View[0];\n    const e = (f >> 23) & 0x1ff;\n    return Tables.baseTable[e] + ((f & 0x007fffff) >> Tables.shiftTable[e]);\n}\n/**\n * Decode a float32 from the buffer\n * @param dataView dataview on the data\n * @param offset current offset in the data view\n * @returns a float32\n */\nexport function DecodeFloat32(dataView, offset) {\n    return ToHalfFloat(ParseFloat32(dataView, offset));\n}\nfunction ParseFixedLengthString(buffer, offset, size) {\n    const stringValue = new TextDecoder().decode(new Uint8Array(buffer).slice(offset.value, offset.value + size));\n    offset.value = offset.value + size;\n    return stringValue;\n}\nfunction ParseRational(dataView, offset) {\n    const x = ParseInt32(dataView, offset);\n    const y = ParseUint32(dataView, offset);\n    return [x, y];\n}\nfunction ParseTimecode(dataView, offset) {\n    const x = ParseUint32(dataView, offset);\n    const y = ParseUint32(dataView, offset);\n    return [x, y];\n}\nfunction ParseV2f(dataView, offset) {\n    const x = ParseFloat32(dataView, offset);\n    const y = ParseFloat32(dataView, offset);\n    return [x, y];\n}\nfunction ParseV3f(dataView, offset) {\n    const x = ParseFloat32(dataView, offset);\n    const y = ParseFloat32(dataView, offset);\n    const z = ParseFloat32(dataView, offset);\n    return [x, y, z];\n}\nfunction ParseChlist(dataView, offset, size) {\n    const startOffset = offset.value;\n    const channels = [];\n    while (offset.value < startOffset + size - 1) {\n        const name = ParseNullTerminatedString(dataView.buffer, offset);\n        const pixelType = ParseInt32(dataView, offset);\n        const pLinear = ParseUint8(dataView, offset);\n        offset.value += 3; // reserved, three chars\n        const xSampling = ParseInt32(dataView, offset);\n        const ySampling = ParseInt32(dataView, offset);\n        channels.push({\n            name: name,\n            pixelType: pixelType,\n            pLinear: pLinear,\n            xSampling: xSampling,\n            ySampling: ySampling,\n        });\n    }\n    offset.value += 1;\n    return channels;\n}\nfunction ParseChromaticities(dataView, offset) {\n    const redX = ParseFloat32(dataView, offset);\n    const redY = ParseFloat32(dataView, offset);\n    const greenX = ParseFloat32(dataView, offset);\n    const greenY = ParseFloat32(dataView, offset);\n    const blueX = ParseFloat32(dataView, offset);\n    const blueY = ParseFloat32(dataView, offset);\n    const whiteX = ParseFloat32(dataView, offset);\n    const whiteY = ParseFloat32(dataView, offset);\n    return { redX: redX, redY: redY, greenX: greenX, greenY: greenY, blueX: blueX, blueY: blueY, whiteX: whiteX, whiteY: whiteY };\n}\nfunction ParseCompression(dataView, offset) {\n    return ParseUint8(dataView, offset);\n}\nfunction ParseBox2i(dataView, offset) {\n    const xMin = ParseInt32(dataView, offset);\n    const yMin = ParseInt32(dataView, offset);\n    const xMax = ParseInt32(dataView, offset);\n    const yMax = ParseInt32(dataView, offset);\n    return { xMin: xMin, yMin: yMin, xMax: xMax, yMax: yMax };\n}\nfunction ParseLineOrder(dataView, offset) {\n    const lineOrder = ParseUint8(dataView, offset);\n    return LineOrders[lineOrder];\n}\n/**\n * Parse a value from the data view\n * @param dataView defines the data view to read from\n * @param offset defines the current offset in the data view\n * @param type defines the type of the value to read\n * @param size defines the size of the value to read\n * @returns the parsed value\n */\nexport function ParseValue(dataView, offset, type, size) {\n    switch (type) {\n        case \"string\":\n        case \"stringvector\":\n        case \"iccProfile\":\n            return ParseFixedLengthString(dataView.buffer, offset, size);\n        case \"chlist\":\n            return ParseChlist(dataView, offset, size);\n        case \"chromaticities\":\n            return ParseChromaticities(dataView, offset);\n        case \"compression\":\n            return ParseCompression(dataView, offset);\n        case \"box2i\":\n            return ParseBox2i(dataView, offset);\n        case \"lineOrder\":\n            return ParseLineOrder(dataView, offset);\n        case \"float\":\n            return ParseFloat32(dataView, offset);\n        case \"v2f\":\n            return ParseV2f(dataView, offset);\n        case \"v3f\":\n            return ParseV3f(dataView, offset);\n        case \"int\":\n            return ParseInt32(dataView, offset);\n        case \"rational\":\n            return ParseRational(dataView, offset);\n        case \"timecode\":\n            return ParseTimecode(dataView, offset);\n        case \"preview\":\n            offset.value += size;\n            return \"skipped\";\n        default:\n            offset.value += size;\n            return undefined;\n    }\n}\n/**\n * Revert the endianness of the data\n * @param source defines the source\n */\nexport function Predictor(source) {\n    for (let t = 1; t < source.length; t++) {\n        const d = source[t - 1] + source[t] - 128;\n        source[t] = d;\n    }\n}\n/**\n * Interleave pixels\n * @param source defines the data source\n * @param out defines the output\n */\nexport function InterleaveScalar(source, out) {\n    let t1 = 0;\n    let t2 = Math.floor((source.length + 1) / 2);\n    let s = 0;\n    const stop = source.length - 1;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        if (s > stop) {\n            break;\n        }\n        out[s++] = source[t1++];\n        if (s > stop) {\n            break;\n        }\n        out[s++] = source[t2++];\n    }\n}\n//# sourceMappingURL=exrLoader.core.js.map","import { ParseUint32, ParseUint8Array } from \"./exrLoader.core\";\nimport { HUF_DECBITS, HUF_DECMASK, HUF_DECSIZE, HUF_ENCSIZE, LONG_ZEROCODE_RUN, SHORT_ZEROCODE_RUN, SHORTEST_LONG_RUN, USHORT_RANGE } from \"./exrLoader.interfaces\";\n/**\n * Inspired by https://github.com/sciecode/three.js/blob/dev/examples/jsm/loaders/EXRLoader.js\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\nconst NBITS = 16;\nconst A_OFFSET = 1 << (NBITS - 1);\nconst MOD_MASK = (1 << NBITS) - 1;\n/** @internal */\nexport function ReverseLutFromBitmap(bitmap, lut) {\n    let k = 0;\n    for (let i = 0; i < USHORT_RANGE; ++i) {\n        if (i == 0 || bitmap[i >> 3] & (1 << (i & 7))) {\n            lut[k++] = i;\n        }\n    }\n    const n = k - 1;\n    while (k < USHORT_RANGE) {\n        lut[k++] = 0;\n    }\n    return n;\n}\nfunction HufClearDecTable(hdec) {\n    for (let i = 0; i < HUF_DECSIZE; i++) {\n        hdec[i] = {};\n        hdec[i].len = 0;\n        hdec[i].lit = 0;\n        hdec[i].p = null;\n    }\n}\nfunction GetBits(nBits, c, lc, array, offset) {\n    while (lc < nBits) {\n        c = (c << 8) | ParseUint8Array(array, offset);\n        lc += 8;\n    }\n    lc -= nBits;\n    return {\n        l: (c >> lc) & ((1 << nBits) - 1),\n        c,\n        lc,\n    };\n}\nfunction GetChar(c, lc, array, offset) {\n    c = (c << 8) | ParseUint8Array(array, offset);\n    lc += 8;\n    return {\n        c,\n        lc,\n    };\n}\nfunction GetCode(po, rlc, c, lc, array, offset, outBuffer, outBufferOffset, outBufferEndOffset) {\n    if (po == rlc) {\n        if (lc < 8) {\n            const gc = GetChar(c, lc, array, offset);\n            c = gc.c;\n            lc = gc.lc;\n        }\n        lc -= 8;\n        let cs = c >> lc;\n        cs = new Uint8Array([cs])[0];\n        if (outBufferOffset.value + cs > outBufferEndOffset) {\n            return null;\n        }\n        const s = outBuffer[outBufferOffset.value - 1];\n        while (cs-- > 0) {\n            outBuffer[outBufferOffset.value++] = s;\n        }\n    }\n    else if (outBufferOffset.value < outBufferEndOffset) {\n        outBuffer[outBufferOffset.value++] = po;\n    }\n    else {\n        return null;\n    }\n    return { c, lc };\n}\nconst HufTableBuffer = new Array(59);\nfunction HufCanonicalCodeTable(hcode) {\n    for (let i = 0; i <= 58; ++i) {\n        HufTableBuffer[i] = 0;\n    }\n    for (let i = 0; i < HUF_ENCSIZE; ++i) {\n        HufTableBuffer[hcode[i]] += 1;\n    }\n    let c = 0;\n    for (let i = 58; i > 0; --i) {\n        const nc = (c + HufTableBuffer[i]) >> 1;\n        HufTableBuffer[i] = c;\n        c = nc;\n    }\n    for (let i = 0; i < HUF_ENCSIZE; ++i) {\n        const l = hcode[i];\n        if (l > 0) {\n            hcode[i] = l | (HufTableBuffer[l]++ << 6);\n        }\n    }\n}\nfunction HufUnpackEncTable(array, offset, ni, im, iM, hcode) {\n    const p = offset;\n    let c = 0;\n    let lc = 0;\n    for (; im <= iM; im++) {\n        if (p.value - offset.value > ni) {\n            return;\n        }\n        let gb = GetBits(6, c, lc, array, p);\n        const l = gb.l;\n        c = gb.c;\n        lc = gb.lc;\n        hcode[im] = l;\n        if (l == LONG_ZEROCODE_RUN) {\n            if (p.value - offset.value > ni) {\n                throw new Error(\"Error in HufUnpackEncTable\");\n            }\n            gb = GetBits(8, c, lc, array, p);\n            let zerun = gb.l + SHORTEST_LONG_RUN;\n            c = gb.c;\n            lc = gb.lc;\n            if (im + zerun > iM + 1) {\n                throw new Error(\"Error in HufUnpackEncTable\");\n            }\n            while (zerun--) {\n                hcode[im++] = 0;\n            }\n            im--;\n        }\n        else if (l >= SHORT_ZEROCODE_RUN) {\n            let zerun = l - SHORT_ZEROCODE_RUN + 2;\n            if (im + zerun > iM + 1) {\n                throw new Error(\"Error in HufUnpackEncTable\");\n            }\n            while (zerun--) {\n                hcode[im++] = 0;\n            }\n            im--;\n        }\n    }\n    HufCanonicalCodeTable(hcode);\n}\nfunction HufLength(code) {\n    return code & 63;\n}\nfunction HufCode(code) {\n    return code >> 6;\n}\nfunction HufBuildDecTable(hcode, im, iM, hdecod) {\n    for (; im <= iM; im++) {\n        const c = HufCode(hcode[im]);\n        const l = HufLength(hcode[im]);\n        if (c >> l) {\n            throw new Error(\"Invalid table entry\");\n        }\n        if (l > HUF_DECBITS) {\n            const pl = hdecod[c >> (l - HUF_DECBITS)];\n            if (pl.len) {\n                throw new Error(\"Invalid table entry\");\n            }\n            pl.lit++;\n            if (pl.p) {\n                const p = pl.p;\n                pl.p = new Array(pl.lit);\n                for (let i = 0; i < pl.lit - 1; ++i) {\n                    pl.p[i] = p[i];\n                }\n            }\n            else {\n                pl.p = new Array(1);\n            }\n            pl.p[pl.lit - 1] = im;\n        }\n        else if (l) {\n            let plOffset = 0;\n            for (let i = 1 << (HUF_DECBITS - l); i > 0; i--) {\n                const pl = hdecod[(c << (HUF_DECBITS - l)) + plOffset];\n                if (pl.len || pl.p) {\n                    throw new Error(\"Invalid table entry\");\n                }\n                pl.len = l;\n                pl.lit = im;\n                plOffset++;\n            }\n        }\n    }\n    return true;\n}\nfunction HufDecode(encodingTable, decodingTable, array, offset, ni, rlc, no, outBuffer, outOffset) {\n    let c = 0;\n    let lc = 0;\n    const outBufferEndOffset = no;\n    const inOffsetEnd = Math.trunc(offset.value + (ni + 7) / 8);\n    while (offset.value < inOffsetEnd) {\n        let gc = GetChar(c, lc, array, offset);\n        c = gc.c;\n        lc = gc.lc;\n        while (lc >= HUF_DECBITS) {\n            const index = (c >> (lc - HUF_DECBITS)) & HUF_DECMASK;\n            const pl = decodingTable[index];\n            if (pl.len) {\n                lc -= pl.len;\n                const gCode = GetCode(pl.lit, rlc, c, lc, array, offset, outBuffer, outOffset, outBufferEndOffset);\n                if (gCode) {\n                    c = gCode.c;\n                    lc = gCode.lc;\n                }\n            }\n            else {\n                if (!pl.p) {\n                    throw new Error(\"hufDecode issues\");\n                }\n                let j;\n                for (j = 0; j < pl.lit; j++) {\n                    const l = HufLength(encodingTable[pl.p[j]]);\n                    while (lc < l && offset.value < inOffsetEnd) {\n                        gc = GetChar(c, lc, array, offset);\n                        c = gc.c;\n                        lc = gc.lc;\n                    }\n                    if (lc >= l) {\n                        if (HufCode(encodingTable[pl.p[j]]) == ((c >> (lc - l)) & ((1 << l) - 1))) {\n                            lc -= l;\n                            const gCode = GetCode(pl.p[j], rlc, c, lc, array, offset, outBuffer, outOffset, outBufferEndOffset);\n                            if (gCode) {\n                                c = gCode.c;\n                                lc = gCode.lc;\n                            }\n                            break;\n                        }\n                    }\n                }\n                if (j == pl.lit) {\n                    throw new Error(\"HufDecode issues\");\n                }\n            }\n        }\n    }\n    const i = (8 - ni) & 7;\n    c >>= i;\n    lc -= i;\n    while (lc > 0) {\n        const pl = decodingTable[(c << (HUF_DECBITS - lc)) & HUF_DECMASK];\n        if (pl.len) {\n            lc -= pl.len;\n            const gCode = GetCode(pl.lit, rlc, c, lc, array, offset, outBuffer, outOffset, outBufferEndOffset);\n            if (gCode) {\n                c = gCode.c;\n                lc = gCode.lc;\n            }\n        }\n        else {\n            throw new Error(\"HufDecode issues\");\n        }\n    }\n    return true;\n}\n/** @internal */\nexport function HufUncompress(array, dataView, offset, nCompressed, outBuffer, nRaw) {\n    const outOffset = { value: 0 };\n    const initialInOffset = offset.value;\n    const im = ParseUint32(dataView, offset);\n    const iM = ParseUint32(dataView, offset);\n    offset.value += 4;\n    const nBits = ParseUint32(dataView, offset);\n    offset.value += 4;\n    if (im < 0 || im >= HUF_ENCSIZE || iM < 0 || iM >= HUF_ENCSIZE) {\n        throw new Error(\"Wrong HUF_ENCSIZE\");\n    }\n    const freq = new Array(HUF_ENCSIZE);\n    const hdec = new Array(HUF_DECSIZE);\n    HufClearDecTable(hdec);\n    const ni = nCompressed - (offset.value - initialInOffset);\n    HufUnpackEncTable(array, offset, ni, im, iM, freq);\n    if (nBits > 8 * (nCompressed - (offset.value - initialInOffset))) {\n        throw new Error(\"Wrong hufUncompress\");\n    }\n    HufBuildDecTable(freq, im, iM, hdec);\n    HufDecode(freq, hdec, array, offset, nBits, iM, nRaw, outBuffer, outOffset);\n}\nfunction UInt16(value) {\n    return value & 0xffff;\n}\nfunction Int16(value) {\n    const ref = UInt16(value);\n    return ref > 0x7fff ? ref - 0x10000 : ref;\n}\nfunction Wdec14(l, h) {\n    const ls = Int16(l);\n    const hs = Int16(h);\n    const hi = hs;\n    const ai = ls + (hi & 1) + (hi >> 1);\n    const as = ai;\n    const bs = ai - hi;\n    return { a: as, b: bs };\n}\nfunction Wdec16(l, h) {\n    const m = UInt16(l);\n    const d = UInt16(h);\n    const bb = (m - (d >> 1)) & MOD_MASK;\n    const aa = (d + bb - A_OFFSET) & MOD_MASK;\n    return { a: aa, b: bb };\n}\n/** @internal */\nexport function Wav2Decode(buffer, j, nx, ox, ny, oy, mx) {\n    const w14 = mx < 1 << 14;\n    const n = nx > ny ? ny : nx;\n    let p = 1;\n    let p2;\n    let py;\n    while (p <= n) {\n        p <<= 1;\n    }\n    p >>= 1;\n    p2 = p;\n    p >>= 1;\n    while (p >= 1) {\n        py = 0;\n        const ey = py + oy * (ny - p2);\n        const oy1 = oy * p;\n        const oy2 = oy * p2;\n        const ox1 = ox * p;\n        const ox2 = ox * p2;\n        let i00, i01, i10, i11;\n        for (; py <= ey; py += oy2) {\n            let px = py;\n            const ex = py + ox * (nx - p2);\n            for (; px <= ex; px += ox2) {\n                const p01 = px + ox1;\n                const p10 = px + oy1;\n                const p11 = p10 + ox1;\n                if (w14) {\n                    let result = Wdec14(buffer[px + j], buffer[p10 + j]);\n                    i00 = result.a;\n                    i10 = result.b;\n                    result = Wdec14(buffer[p01 + j], buffer[p11 + j]);\n                    i01 = result.a;\n                    i11 = result.b;\n                    result = Wdec14(i00, i01);\n                    buffer[px + j] = result.a;\n                    buffer[p01 + j] = result.b;\n                    result = Wdec14(i10, i11);\n                    buffer[p10 + j] = result.a;\n                    buffer[p11 + j] = result.b;\n                }\n                else {\n                    let result = Wdec16(buffer[px + j], buffer[p10 + j]);\n                    i00 = result.a;\n                    i10 = result.b;\n                    result = Wdec16(buffer[p01 + j], buffer[p11 + j]);\n                    i01 = result.a;\n                    i11 = result.b;\n                    result = Wdec16(i00, i01);\n                    buffer[px + j] = result.a;\n                    buffer[p01 + j] = result.b;\n                    result = Wdec16(i10, i11);\n                    buffer[p10 + j] = result.a;\n                    buffer[p11 + j] = result.b;\n                }\n            }\n            if (nx & p) {\n                const p10 = px + oy1;\n                let result;\n                if (w14) {\n                    result = Wdec14(buffer[px + j], buffer[p10 + j]);\n                }\n                else {\n                    result = Wdec16(buffer[px + j], buffer[p10 + j]);\n                }\n                i00 = result.a;\n                buffer[p10 + j] = result.b;\n                buffer[px + j] = i00;\n            }\n        }\n        if (ny & p) {\n            let px = py;\n            const ex = py + ox * (nx - p2);\n            for (; px <= ex; px += ox2) {\n                const p01 = px + ox1;\n                let result;\n                if (w14) {\n                    result = Wdec14(buffer[px + j], buffer[p01 + j]);\n                }\n                else {\n                    result = Wdec16(buffer[px + j], buffer[p01 + j]);\n                }\n                i00 = result.a;\n                buffer[p01 + j] = result.b;\n                buffer[px + j] = i00;\n            }\n        }\n        p2 = p;\n        p >>= 1;\n    }\n    return py;\n}\n/** @internal */\nexport function ApplyLut(lut, data, nData) {\n    for (let i = 0; i < nData; ++i) {\n        data[i] = lut[data[i]];\n    }\n}\n//# sourceMappingURL=exrLoader.compression.huf.js.map","import { ApplyLut, HufUncompress, ReverseLutFromBitmap, Wav2Decode } from \"./exrLoader.compression.huf\";\nimport { DecodeRunLength } from \"./exrLoader.compression.rle\";\nimport { InterleaveScalar, ParseUint16, ParseUint32, ParseUint8, Predictor } from \"./exrLoader.core\";\nimport { BITMAP_SIZE, INT16_SIZE, USHORT_RANGE } from \"./exrLoader.interfaces\";\n/**\n * No compression\n * @param decoder defines the decoder to use\n * @returns a decompressed data view\n */\nexport function UncompressRAW(decoder) {\n    return new DataView(decoder.array.buffer, decoder.offset.value, decoder.size);\n}\n/**\n * RLE compression\n * @param decoder defines the decoder to use\n * @returns a decompressed data view\n */\nexport function UncompressRLE(decoder) {\n    const compressed = decoder.viewer.buffer.slice(decoder.offset.value, decoder.offset.value + decoder.size);\n    const rawBuffer = new Uint8Array(DecodeRunLength(compressed));\n    const tmpBuffer = new Uint8Array(rawBuffer.length);\n    Predictor(rawBuffer);\n    InterleaveScalar(rawBuffer, tmpBuffer);\n    return new DataView(tmpBuffer.buffer);\n}\n/**\n * Zip compression\n * @param decoder defines the decoder to use\n * @returns a decompressed data view\n */\nexport function UncompressZIP(decoder) {\n    const compressed = decoder.array.slice(decoder.offset.value, decoder.offset.value + decoder.size);\n    const rawBuffer = fflate.unzlibSync(compressed);\n    const tmpBuffer = new Uint8Array(rawBuffer.length);\n    Predictor(rawBuffer);\n    InterleaveScalar(rawBuffer, tmpBuffer);\n    return new DataView(tmpBuffer.buffer);\n}\n/**\n * PXR compression\n * @param decoder defines the decoder to use\n * @returns a decompressed data view\n */\nexport function UncompressPXR(decoder) {\n    const compressed = decoder.array.slice(decoder.offset.value, decoder.offset.value + decoder.size);\n    const rawBuffer = fflate.unzlibSync(compressed);\n    const sz = decoder.lines * decoder.channels * decoder.width;\n    const tmpBuffer = decoder.type == 1 ? new Uint16Array(sz) : new Uint32Array(sz);\n    let tmpBufferEnd = 0;\n    let writePtr = 0;\n    const ptr = new Array(4);\n    for (let y = 0; y < decoder.lines; y++) {\n        for (let c = 0; c < decoder.channels; c++) {\n            let pixel = 0;\n            switch (decoder.type) {\n                case 1:\n                    ptr[0] = tmpBufferEnd;\n                    ptr[1] = ptr[0] + decoder.width;\n                    tmpBufferEnd = ptr[1] + decoder.width;\n                    for (let j = 0; j < decoder.width; ++j) {\n                        const diff = (rawBuffer[ptr[0]++] << 8) | rawBuffer[ptr[1]++];\n                        pixel += diff;\n                        tmpBuffer[writePtr] = pixel;\n                        writePtr++;\n                    }\n                    break;\n                case 2:\n                    ptr[0] = tmpBufferEnd;\n                    ptr[1] = ptr[0] + decoder.width;\n                    ptr[2] = ptr[1] + decoder.width;\n                    tmpBufferEnd = ptr[2] + decoder.width;\n                    for (let j = 0; j < decoder.width; ++j) {\n                        const diff = (rawBuffer[ptr[0]++] << 24) | (rawBuffer[ptr[1]++] << 16) | (rawBuffer[ptr[2]++] << 8);\n                        pixel += diff;\n                        tmpBuffer[writePtr] = pixel;\n                        writePtr++;\n                    }\n                    break;\n            }\n        }\n    }\n    return new DataView(tmpBuffer.buffer);\n}\n/**\n * PIZ compression\n * @param decoder defines the decoder to use\n * @returns a decompressed data view\n */\nexport function UncompressPIZ(decoder) {\n    const inDataView = decoder.viewer;\n    const inOffset = { value: decoder.offset.value };\n    const outBuffer = new Uint16Array(decoder.width * decoder.scanlineBlockSize * (decoder.channels * decoder.type));\n    const bitmap = new Uint8Array(BITMAP_SIZE);\n    // Setup channel info\n    let outBufferEnd = 0;\n    const pizChannelData = new Array(decoder.channels);\n    for (let i = 0; i < decoder.channels; i++) {\n        pizChannelData[i] = {};\n        pizChannelData[i][\"start\"] = outBufferEnd;\n        pizChannelData[i][\"end\"] = pizChannelData[i][\"start\"];\n        pizChannelData[i][\"nx\"] = decoder.width;\n        pizChannelData[i][\"ny\"] = decoder.lines;\n        pizChannelData[i][\"size\"] = decoder.type;\n        outBufferEnd += pizChannelData[i].nx * pizChannelData[i].ny * pizChannelData[i].size;\n    }\n    // Read range compression data\n    const minNonZero = ParseUint16(inDataView, inOffset);\n    const maxNonZero = ParseUint16(inDataView, inOffset);\n    if (maxNonZero >= BITMAP_SIZE) {\n        throw new Error(\"Wrong PIZ_COMPRESSION BITMAP_SIZE\");\n    }\n    if (minNonZero <= maxNonZero) {\n        for (let i = 0; i < maxNonZero - minNonZero + 1; i++) {\n            bitmap[i + minNonZero] = ParseUint8(inDataView, inOffset);\n        }\n    }\n    // Reverse LUT\n    const lut = new Uint16Array(USHORT_RANGE);\n    const maxValue = ReverseLutFromBitmap(bitmap, lut);\n    const length = ParseUint32(inDataView, inOffset);\n    // Huffman decoding\n    HufUncompress(decoder.array, inDataView, inOffset, length, outBuffer, outBufferEnd);\n    // Wavelet decoding\n    for (let i = 0; i < decoder.channels; ++i) {\n        const cd = pizChannelData[i];\n        for (let j = 0; j < pizChannelData[i].size; ++j) {\n            Wav2Decode(outBuffer, cd.start + j, cd.nx, cd.size, cd.ny, cd.nx * cd.size, maxValue);\n        }\n    }\n    // Expand the pixel data to their original range\n    ApplyLut(lut, outBuffer, outBufferEnd);\n    // Rearrange the pixel data into the format expected by the caller.\n    let tmpOffset = 0;\n    const tmpBuffer = new Uint8Array(outBuffer.buffer.byteLength);\n    for (let y = 0; y < decoder.lines; y++) {\n        for (let c = 0; c < decoder.channels; c++) {\n            const cd = pizChannelData[c];\n            const n = cd.nx * cd.size;\n            const cp = new Uint8Array(outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE);\n            tmpBuffer.set(cp, tmpOffset);\n            tmpOffset += n * INT16_SIZE;\n            cd.end += n;\n        }\n    }\n    return new DataView(tmpBuffer.buffer);\n}\n//# sourceMappingURL=exrLoader.compression.js.map","/**\n * Inspired by https://github.com/sciecode/three.js/blob/dev/examples/jsm/loaders/EXRLoader.js\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\n/** @internal */\nexport function DecodeRunLength(source) {\n    let size = source.byteLength;\n    const out = [];\n    let p = 0;\n    const reader = new DataView(source);\n    while (size > 0) {\n        const l = reader.getInt8(p++);\n        if (l < 0) {\n            const count = -l;\n            size -= count + 1;\n            for (let i = 0; i < count; i++) {\n                out.push(reader.getUint8(p++));\n            }\n        }\n        else {\n            const count = l;\n            size -= 2;\n            const value = reader.getUint8(p++);\n            for (let i = 0; i < count + 1; i++) {\n                out.push(value);\n            }\n        }\n    }\n    return out;\n}\n//# sourceMappingURL=exrLoader.compression.rle.js.map","export var EXROutputType;\n(function (EXROutputType) {\n    EXROutputType[EXROutputType[\"Float\"] = 0] = \"Float\";\n    EXROutputType[EXROutputType[\"HalfFloat\"] = 1] = \"HalfFloat\";\n})(EXROutputType || (EXROutputType = {}));\n/**\n * Class used to store configuration of the exr loader\n */\nexport class ExrLoaderGlobalConfiguration {\n}\n/**\n * Defines the default output type to use (Half float by default)\n */\nExrLoaderGlobalConfiguration.DefaultOutputType = EXROutputType.HalfFloat;\n/**\n * Url to use to load the fflate library (for zip decompression)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nExrLoaderGlobalConfiguration.FFLATEUrl = \"https://unpkg.com/fflate@0.8.2\";\n//# sourceMappingURL=exrLoader.configuration.js.map","import { GetExrHeader } from \"./EXR/exrLoader.header\";\nimport { CreateDecoderAsync, ScanData } from \"./EXR/exrLoader.decoder\";\nimport { ExrLoaderGlobalConfiguration, EXROutputType } from \"./EXR/exrLoader.configuration\";\nimport { Logger } from \"core/Misc/logger\";\n/**\n * Inspired by https://github.com/sciecode/three.js/blob/dev/examples/jsm/loaders/EXRLoader.js\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\n/**\n * Loader for .exr file format\n * @see [PIZ compression](https://playground.babylonjs.com/#4RN0VF#151)\n * @see [ZIP compression](https://playground.babylonjs.com/#4RN0VF#146)\n * @see [RLE compression](https://playground.babylonjs.com/#4RN0VF#149)\n * @see [PXR24 compression](https://playground.babylonjs.com/#4RN0VF#150)\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _ExrTextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * @param _data contains the texture data\n     * @param _texture defines the BabylonJS internal texture\n     * @param _createPolynomials will be true if polynomials have been requested\n     * @param _onLoad defines the callback to trigger once the texture is ready\n     * @param _onError defines the callback to trigger in case of error\n     * Cube texture are not supported by .exr files\n     */\n    loadCubeData(_data, _texture, _createPolynomials, _onLoad, _onError) {\n        // eslint-disable-next-line no-throw-literal\n        throw \".exr not supported in Cube.\";\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    loadData(data, texture, callback) {\n        const dataView = new DataView(data.buffer);\n        const offset = { value: 0 };\n        const header = GetExrHeader(dataView, offset);\n        CreateDecoderAsync(header, dataView, offset, ExrLoaderGlobalConfiguration.DefaultOutputType)\n            // eslint-disable-next-line github/no-then\n            .then((decoder) => {\n            ScanData(decoder, header, dataView, offset);\n            // Updating texture\n            const width = header.dataWindow.xMax - header.dataWindow.xMin + 1;\n            const height = header.dataWindow.yMax - header.dataWindow.yMin + 1;\n            callback(width, height, texture.generateMipMaps, false, () => {\n                const engine = texture.getEngine();\n                texture.format = header.format;\n                texture.type = decoder.textureType;\n                texture.invertY = false;\n                texture._gammaSpace = !header.linearSpace;\n                if (decoder.byteArray) {\n                    engine._uploadDataToTextureDirectly(texture, decoder.byteArray, 0, 0, undefined, true);\n                }\n            });\n        })\n            // eslint-disable-next-line github/no-then\n            .catch((error) => {\n            Logger.Error(\"Failed to load EXR texture: \", error);\n        });\n    }\n}\n/**\n * Read the EXR data from an ArrayBufferView asynchronously.\n * @param data ArrayBufferView containing the EXR data\n * @returns An object containing the width, height, and data of the EXR texture.\n */\nexport async function ReadExrDataAsync(data) {\n    const dataView = new DataView(data);\n    const offset = { value: 0 };\n    const header = GetExrHeader(dataView, offset);\n    try {\n        const decoder = await CreateDecoderAsync(header, dataView, offset, EXROutputType.Float);\n        ScanData(decoder, header, dataView, offset);\n        if (!decoder.byteArray) {\n            Logger.Error(\"Failed to decode EXR data: No byte array available.\");\n            return { width: 0, height: 0, data: null };\n        }\n        return {\n            width: header.dataWindow.xMax - header.dataWindow.xMin + 1,\n            height: header.dataWindow.yMax - header.dataWindow.yMin + 1,\n            data: new Float32Array(decoder.byteArray),\n        };\n    }\n    catch (error) {\n        Logger.Error(\"Failed to load EXR data: \", error);\n    }\n    return { width: 0, height: 0, data: null };\n}\n//# sourceMappingURL=exrTextureLoader.js.map","/* eslint-disable @typescript-eslint/naming-convention */\nimport { Logger } from \"core/Misc/logger\";\nimport { ParseNullTerminatedString, ParseUint32, ParseValue } from \"./exrLoader.core\";\n/**\n * Inspired by https://github.com/sciecode/three.js/blob/dev/examples/jsm/loaders/EXRLoader.js\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\nconst EXR_MAGIC = 20000630;\n/**\n * Gets the EXR header\n * @param dataView defines the data view to read from\n * @param offset defines the offset to start reading from\n * @returns the header\n */\nexport function GetExrHeader(dataView, offset) {\n    if (dataView.getUint32(0, true) != EXR_MAGIC) {\n        throw new Error(\"Incorrect OpenEXR format\");\n    }\n    const version = dataView.getUint8(4);\n    const specData = dataView.getUint8(5); // fullMask\n    const spec = {\n        singleTile: !!(specData & 2),\n        longName: !!(specData & 4),\n        deepFormat: !!(specData & 8),\n        multiPart: !!(specData & 16),\n    };\n    offset.value = 8;\n    const headerData = {};\n    let keepReading = true;\n    while (keepReading) {\n        const attributeName = ParseNullTerminatedString(dataView.buffer, offset);\n        if (!attributeName) {\n            keepReading = false;\n        }\n        else {\n            const attributeType = ParseNullTerminatedString(dataView.buffer, offset);\n            const attributeSize = ParseUint32(dataView, offset);\n            const attributeValue = ParseValue(dataView, offset, attributeType, attributeSize);\n            if (attributeValue === undefined) {\n                Logger.Warn(`Unknown header attribute type ${attributeType}'.`);\n            }\n            else {\n                headerData[attributeName] = attributeValue;\n            }\n        }\n    }\n    if ((specData & ~0x04) != 0) {\n        throw new Error(\"Unsupported file format\");\n    }\n    return { version: version, spec: spec, ...headerData };\n}\n//# sourceMappingURL=exrLoader.header.js.map","import { CompressionCodes, DecodeFloat32, ParseFloat16, ParseFloat32, ParseInt32, ParseInt64, ParseUint16, ParseUint32 } from \"./exrLoader.core\";\nimport { UncompressPIZ, UncompressPXR, UncompressRAW, UncompressRLE, UncompressZIP } from \"./exrLoader.compression\";\nimport { FLOAT32_SIZE, INT16_SIZE } from \"./exrLoader.interfaces\";\nimport { Constants } from \"core/Engines/constants\";\nimport { Tools } from \"core/Misc/tools\";\nimport { ExrLoaderGlobalConfiguration, EXROutputType } from \"./exrLoader.configuration\";\n/**\n * Inspired by https://github.com/sciecode/three.js/blob/dev/examples/jsm/loaders/EXRLoader.js\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\n/**\n * Create a decoder for the exr file\n * @param header header of the exr file\n * @param dataView dataview of the exr file\n * @param offset current offset\n * @param outputType expected output type (float or half float)\n * @returns a promise that resolves with the decoder\n */\nexport async function CreateDecoderAsync(header, dataView, offset, outputType) {\n    const decoder = {\n        size: 0,\n        viewer: dataView,\n        array: new Uint8Array(dataView.buffer),\n        offset: offset,\n        width: header.dataWindow.xMax - header.dataWindow.xMin + 1,\n        height: header.dataWindow.yMax - header.dataWindow.yMin + 1,\n        channels: header.channels.length,\n        channelLineOffsets: {},\n        scanOrder: () => 0,\n        bytesPerLine: 0,\n        outLineWidth: 0,\n        lines: 0,\n        scanlineBlockSize: 0,\n        inputSize: null,\n        type: 0,\n        uncompress: null,\n        getter: () => 0,\n        format: Constants.TEXTUREFORMAT_RGBA,\n        outputChannels: 0,\n        decodeChannels: {},\n        blockCount: null,\n        byteArray: null,\n        linearSpace: false,\n        textureType: 0,\n    };\n    switch (header.compression) {\n        case CompressionCodes.NO_COMPRESSION:\n            decoder.lines = 1;\n            decoder.uncompress = UncompressRAW;\n            break;\n        case CompressionCodes.RLE_COMPRESSION:\n            decoder.lines = 1;\n            decoder.uncompress = UncompressRLE;\n            break;\n        case CompressionCodes.ZIPS_COMPRESSION:\n            decoder.lines = 1;\n            decoder.uncompress = UncompressZIP;\n            await Tools.LoadScriptAsync(ExrLoaderGlobalConfiguration.FFLATEUrl);\n            break;\n        case CompressionCodes.ZIP_COMPRESSION:\n            decoder.lines = 16;\n            decoder.uncompress = UncompressZIP;\n            await Tools.LoadScriptAsync(ExrLoaderGlobalConfiguration.FFLATEUrl);\n            break;\n        case CompressionCodes.PIZ_COMPRESSION:\n            decoder.lines = 32;\n            decoder.uncompress = UncompressPIZ;\n            break;\n        case CompressionCodes.PXR24_COMPRESSION:\n            decoder.lines = 16;\n            decoder.uncompress = UncompressPXR;\n            await Tools.LoadScriptAsync(ExrLoaderGlobalConfiguration.FFLATEUrl);\n            break;\n        default:\n            throw new Error(CompressionCodes[header.compression] + \" is unsupported\");\n    }\n    decoder.scanlineBlockSize = decoder.lines;\n    const channels = {};\n    for (const channel of header.channels) {\n        switch (channel.name) {\n            case \"R\":\n            case \"G\":\n            case \"B\":\n            case \"A\":\n                channels[channel.name] = true;\n                decoder.type = channel.pixelType;\n                break;\n            case \"Y\":\n                channels[channel.name] = true;\n                decoder.type = channel.pixelType;\n                // Note: 'Y' is deprecated in OpenGL 3.0+; prefer 'R' for single-channel EXRs.\n                break;\n            default:\n                // Skip unsupported channels\n                break;\n        }\n    }\n    // RGB images will be converted to RGBA format, preventing software emulation in select devices.\n    let fillAlpha = false;\n    if (channels.R && channels.G && channels.B && channels.A) {\n        decoder.outputChannels = 4;\n        decoder.decodeChannels = { R: 0, G: 1, B: 2, A: 3 };\n    }\n    else if (channels.R && channels.G && channels.B) {\n        fillAlpha = true;\n        decoder.outputChannels = 4;\n        decoder.decodeChannels = { R: 0, G: 1, B: 2, A: 3 };\n    }\n    else if (channels.R && channels.G) {\n        decoder.outputChannels = 2;\n        decoder.decodeChannels = { R: 0, G: 1 };\n    }\n    else if (channels.R) {\n        decoder.outputChannels = 1;\n        decoder.decodeChannels = { R: 0 };\n    }\n    else if (channels.Y) {\n        decoder.outputChannels = 1;\n        decoder.decodeChannels = { Y: 0 };\n        // Note: Supporting 'Y' channel for legacy compatibility; prefer 'R' in new EXRs.\n    }\n    else {\n        throw new Error(\"EXRLoader.parse: file contains unsupported data channels.\");\n    }\n    if (decoder.type === 1) {\n        // half\n        switch (outputType) {\n            case EXROutputType.Float:\n                decoder.getter = ParseFloat16;\n                decoder.inputSize = INT16_SIZE;\n                break;\n            case EXROutputType.HalfFloat:\n                decoder.getter = ParseUint16;\n                decoder.inputSize = INT16_SIZE;\n                break;\n        }\n    }\n    else if (decoder.type === 2) {\n        // float\n        switch (outputType) {\n            case EXROutputType.Float:\n                decoder.getter = ParseFloat32;\n                decoder.inputSize = FLOAT32_SIZE;\n                break;\n            case EXROutputType.HalfFloat:\n                decoder.getter = DecodeFloat32;\n                decoder.inputSize = FLOAT32_SIZE;\n        }\n    }\n    else {\n        throw new Error(\"Unsupported pixelType \" + decoder.type + \" for \" + header.compression);\n    }\n    decoder.blockCount = decoder.height / decoder.scanlineBlockSize;\n    for (let i = 0; i < decoder.blockCount; i++) {\n        ParseInt64(dataView, offset); // scanlineOffset\n    }\n    // we should be passed the scanline offset table, ready to start reading pixel data.\n    const size = decoder.width * decoder.height * decoder.outputChannels;\n    switch (outputType) {\n        case EXROutputType.Float:\n            decoder.byteArray = new Float32Array(size);\n            decoder.textureType = Constants.TEXTURETYPE_FLOAT;\n            // Fill initially with 1s for the alpha value if the texture is not RGBA, RGB values will be overwritten\n            if (fillAlpha) {\n                decoder.byteArray.fill(1, 0, size);\n            }\n            break;\n        case EXROutputType.HalfFloat:\n            decoder.byteArray = new Uint16Array(size);\n            decoder.textureType = Constants.TEXTURETYPE_HALF_FLOAT;\n            if (fillAlpha) {\n                decoder.byteArray.fill(0x3c00, 0, size); // Uint16Array holds half float data, 0x3C00 is 1\n            }\n            break;\n        default:\n            throw new Error(\"Unsupported type: \" + outputType);\n    }\n    let byteOffset = 0;\n    for (const channel of header.channels) {\n        if (decoder.decodeChannels[channel.name] !== undefined) {\n            decoder.channelLineOffsets[channel.name] = byteOffset * decoder.width;\n        }\n        byteOffset += channel.pixelType * 2;\n    }\n    decoder.bytesPerLine = decoder.width * byteOffset;\n    decoder.outLineWidth = decoder.width * decoder.outputChannels;\n    if (header.lineOrder === \"INCREASING_Y\") {\n        decoder.scanOrder = (y) => y;\n    }\n    else {\n        decoder.scanOrder = (y) => decoder.height - 1 - y;\n    }\n    if (decoder.outputChannels == 4) {\n        decoder.format = Constants.TEXTUREFORMAT_RGBA;\n        decoder.linearSpace = true;\n    }\n    else {\n        decoder.format = Constants.TEXTUREFORMAT_R;\n        decoder.linearSpace = false;\n    }\n    return decoder;\n}\n/**\n * Scan the data of the exr file\n * @param decoder decoder to use\n * @param header header of the exr file\n * @param dataView dataview of the exr file\n * @param offset current offset\n */\nexport function ScanData(decoder, header, dataView, offset) {\n    const tmpOffset = { value: 0 };\n    for (let scanlineBlockIdx = 0; scanlineBlockIdx < decoder.height / decoder.scanlineBlockSize; scanlineBlockIdx++) {\n        const line = ParseInt32(dataView, offset) - header.dataWindow.yMin; // line_no\n        decoder.size = ParseUint32(dataView, offset); // data_len\n        decoder.lines = line + decoder.scanlineBlockSize > decoder.height ? decoder.height - line : decoder.scanlineBlockSize;\n        const isCompressed = decoder.size < decoder.lines * decoder.bytesPerLine;\n        const viewer = isCompressed && decoder.uncompress ? decoder.uncompress(decoder) : UncompressRAW(decoder);\n        offset.value += decoder.size;\n        for (let lineY = 0; lineY < decoder.scanlineBlockSize; lineY++) {\n            const scanY = scanlineBlockIdx * decoder.scanlineBlockSize;\n            const trueY = lineY + decoder.scanOrder(scanY);\n            if (trueY >= decoder.height) {\n                continue;\n            }\n            const lineOffset = lineY * decoder.bytesPerLine;\n            const outLineOffset = (decoder.height - 1 - trueY) * decoder.outLineWidth;\n            for (let channelID = 0; channelID < decoder.channels; channelID++) {\n                const name = header.channels[channelID].name;\n                const lOff = decoder.channelLineOffsets[name];\n                const cOff = decoder.decodeChannels[name];\n                if (cOff === undefined) {\n                    continue;\n                }\n                tmpOffset.value = lineOffset + lOff;\n                for (let x = 0; x < decoder.width; x++) {\n                    const outIndex = outLineOffset + x * decoder.outputChannels + cOff;\n                    if (decoder.byteArray) {\n                        decoder.byteArray[outIndex] = decoder.getter(viewer, tmpOffset);\n                    }\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=exrLoader.decoder.js.map"],"names":["USHORT_RANGE","HUF_DECBITS","HUF_ENCSIZE","HUF_DECSIZE","CompressionCodes","LineOrders","Tables","buffer","ArrayBuffer","floatView","Float32Array","uint32View","Uint32Array","baseTable","shiftTable","i","e","mantissaTable","exponentTable","offsetTable","m","GenerateTables","ParseNullTerminatedString","offset","uintBuffer","Uint8Array","endOffset","value","stringValue","TextDecoder","decode","slice","ParseInt32","dataView","getInt32","ParseUint32","getUint32","ParseUint8","getUint8","ParseUint16","getUint16","ParseUint8Array","array","ParseInt64","int","DataView","prototype","Number","getBigInt64","ParseFloat32","getFloat32","ParseFloat16","binary","exponent","fraction","NaN","Infinity","Math","pow","DecodeFloat16","DecodeFloat32","abs","Error","Clamp","f","ToHalfFloat","ParseValue","type","size","ParseFixedLengthString","startOffset","channels","name","pixelType","pLinear","xSampling","ySampling","push","ParseChlist","redX","redY","greenX","greenY","blueX","blueY","whiteX","whiteY","ParseChromaticities","ParseCompression","xMin","yMin","xMax","yMax","ParseBox2i","lineOrder","ParseLineOrder","ParseV2f","ParseV3f","ParseRational","ParseTimecode","Predictor","source","t","length","d","InterleaveScalar","out","t1","t2","floor","s","stop","GetBits","nBits","c","lc","l","GetChar","GetCode","po","rlc","outBuffer","outBufferOffset","outBufferEndOffset","gc","cs","HufTableBuffer","Array","HufUnpackEncTable","ni","im","iM","hcode","p","gb","zerun","nc","HufCanonicalCodeTable","HufLength","code","HufCode","HufUncompress","nCompressed","nRaw","initialInOffset","freq","hdec","len","lit","HufClearDecTable","hdecod","pl","plOffset","HufBuildDecTable","encodingTable","decodingTable","no","outOffset","inOffsetEnd","trunc","gCode","j","HufDecode","UInt16","Int16","ref","Wdec14","h","ls","hs","ai","a","b","Wdec16","bb","Wav2Decode","nx","ox","ny","oy","mx","w14","n","p2","py","ey","oy1","oy2","ox1","ox2","i00","i01","i10","i11","px","ex","p01","p10","p11","result","UncompressRAW","decoder","UncompressRLE","compressed","viewer","rawBuffer","byteLength","reader","getInt8","count","DecodeRunLength","tmpBuffer","UncompressZIP","fflate","unzlibSync","UncompressPXR","sz","lines","width","Uint16Array","tmpBufferEnd","writePtr","ptr","y","pixel","UncompressPIZ","inDataView","inOffset","scanlineBlockSize","bitmap","outBufferEnd","pizChannelData","minNonZero","maxNonZero","lut","maxValue","k","ReverseLutFromBitmap","cd","start","data","nData","ApplyLut","tmpOffset","cp","end","set","EXROutputType","ExrLoaderGlobalConfiguration","DefaultOutputType","HalfFloat","FFLATEUrl","_ExrTextureLoader","constructor","this","supportCascades","loadCubeData","_data","_texture","_createPolynomials","_onLoad","_onError","loadData","texture","callback","header","version","specData","spec","singleTile","longName","deepFormat","multiPart","headerData","keepReading","attributeName","attributeType","attributeValue","undefined","Logger","Warn","GetExrHeader","async","outputType","dataWindow","height","channelLineOffsets","scanOrder","bytesPerLine","outLineWidth","inputSize","uncompress","getter","format","Constants","TEXTUREFORMAT_RGBA","outputChannels","decodeChannels","blockCount","byteArray","linearSpace","textureType","compression","NO_COMPRESSION","RLE_COMPRESSION","ZIPS_COMPRESSION","Tools","LoadScriptAsync","ZIP_COMPRESSION","PIZ_COMPRESSION","PXR24_COMPRESSION","channel","fillAlpha","R","G","B","A","Y","Float","TEXTURETYPE_FLOAT","fill","TEXTURETYPE_HALF_FLOAT","byteOffset","TEXTUREFORMAT_R","CreateDecoderAsync","then","scanlineBlockIdx","line","lineY","scanY","trueY","lineOffset","outLineOffset","channelID","lOff","cOff","x","outIndex","ScanData","generateMipMaps","engine","getEngine","invertY","_gammaSpace","_uploadDataToTextureDirectly","catch","error"],"mappings":"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"}