{"version":3,"file":"ExtrasAsMetadata-D6ilNqQT.esm.min.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/Extensions/ExtrasAsMetadata.js"],"sourcesContent":["import { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nconst NAME = \"ExtrasAsMetadata\";\n/**\n * Store glTF extras (if present) in BJS objects' metadata\n */\nexport class ExtrasAsMetadata {\n    _assignExtras(babylonObject, gltfProp) {\n        if (gltfProp.extras && Object.keys(gltfProp.extras).length > 0) {\n            const metadata = (babylonObject.metadata = babylonObject.metadata || {});\n            const gltf = (metadata.gltf = metadata.gltf || {});\n            gltf.extras = gltfProp.extras;\n        }\n    }\n    /**\n     * @internal\n     */\n    constructor(loader) {\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        /**\n         * Defines whether this extension is enabled.\n         */\n        this.enabled = true;\n        this._loader = loader;\n    }\n    /** @internal */\n    dispose() {\n        this._loader = null;\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line no-restricted-syntax\n    loadNodeAsync(context, node, assign) {\n        return this._loader.loadNodeAsync(context, node, (babylonTransformNode) => {\n            this._assignExtras(babylonTransformNode, node);\n            assign(babylonTransformNode);\n        });\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line no-restricted-syntax\n    loadCameraAsync(context, camera, assign) {\n        return this._loader.loadCameraAsync(context, camera, (babylonCamera) => {\n            this._assignExtras(babylonCamera, camera);\n            assign(babylonCamera);\n        });\n    }\n    /**\n     * @internal\n     */\n    createMaterial(context, material, babylonDrawMode) {\n        const babylonMaterial = this._loader.createMaterial(context, material, babylonDrawMode);\n        this._assignExtras(babylonMaterial, material);\n        return babylonMaterial;\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, false, (loader) => new ExtrasAsMetadata(loader));\n//# sourceMappingURL=ExtrasAsMetadata.js.map"],"names":["NAME","ExtrasAsMetadata","_assignExtras","babylonObject","gltfProp","extras","Object","keys","length","metadata","gltf","constructor","loader","this","name","enabled","_loader","dispose","loadNodeAsync","context","node","assign","babylonTransformNode","loadCameraAsync","camera","babylonCamera","createMaterial","material","babylonDrawMode","babylonMaterial","unregisterGLTFExtension","registerGLTFExtension"],"mappings":"yDACA,MAAMA,EAAO,mBAIN,MAAMC,EACT,aAAAC,CAAcC,EAAeC,GACzB,GAAIA,EAASC,QAAUC,OAAOC,KAAKH,EAASC,QAAQG,OAAS,EAAG,CAC5D,MAAMC,EAAYN,EAAcM,SAAWN,EAAcM,UAAY,CAAA,GACvDA,EAASC,KAAOD,EAASC,MAAQ,CAAA,GAC1CL,OAASD,EAASC,MACnC,CACA,CAII,WAAAM,CAAYC,GAIRC,KAAKC,KAAOd,EAIZa,KAAKE,SAAU,EACfF,KAAKG,QAAUJ,CACvB,CAEI,OAAAK,GACIJ,KAAKG,QAAU,IACvB,CAKI,aAAAE,CAAcC,EAASC,EAAMC,GACzB,OAAOR,KAAKG,QAAQE,cAAcC,EAASC,GAAOE,IAC9CT,KAAKX,cAAcoB,EAAsBF,GACzCC,EAAOC,KAEnB,CAKI,eAAAC,CAAgBJ,EAASK,EAAQH,GAC7B,OAAOR,KAAKG,QAAQO,gBAAgBJ,EAASK,GAASC,IAClDZ,KAAKX,cAAcuB,EAAeD,GAClCH,EAAOI,KAEnB,CAII,cAAAC,CAAeP,EAASQ,EAAUC,GAC9B,MAAMC,EAAkBhB,KAAKG,QAAQU,eAAeP,EAASQ,EAAUC,GAEvE,OADAf,KAAKX,cAAc2B,EAAiBF,GAC7BE,CACf,EAEAC,EAAwB9B,GACxB+B,EAAsB/B,GAAM,GAAQY,GAAW,IAAIX,EAAiBW"}