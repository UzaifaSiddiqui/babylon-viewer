{"version":3,"file":"flowGraphStopAnimationBlock-CD5IoPnn.esm.min.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Execution/Animation/flowGraphStopAnimationBlock.js"],"sourcesContent":["import { RichTypeAny, RichTypeNumber } from \"../../../flowGraphRichTypes\";\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\nimport { Logger } from \"core/Misc/logger\";\nimport { FlowGraphAsyncExecutionBlock } from \"core/FlowGraph/flowGraphAsyncExecutionBlock\";\n/**\n * @experimental\n * Block that stops a running animation\n */\nexport class FlowGraphStopAnimationBlock extends FlowGraphAsyncExecutionBlock {\n    constructor(config) {\n        super(config);\n        this.animationGroup = this.registerDataInput(\"animationGroup\", RichTypeAny);\n        this.stopAtFrame = this.registerDataInput(\"stopAtFrame\", RichTypeNumber, -1);\n    }\n    _preparePendingTasks(context) {\n        const animationToStopValue = this.animationGroup.getValue(context);\n        const stopAtFrame = this.stopAtFrame.getValue(context) ?? -1;\n        // get the context variable\n        const pendingStopAnimations = context._getGlobalContextVariable(\"pendingStopAnimations\", []);\n        // add the animation to the list\n        pendingStopAnimations.push({ uniqueId: animationToStopValue.uniqueId, stopAtFrame });\n        // set the global context variable\n        context._setGlobalContextVariable(\"pendingStopAnimations\", pendingStopAnimations);\n    }\n    _cancelPendingTasks(context) {\n        // remove the animation from the list\n        const animationToStopValue = this.animationGroup.getValue(context);\n        const pendingStopAnimations = context._getGlobalContextVariable(\"pendingStopAnimations\", []);\n        for (let i = 0; i < pendingStopAnimations.length; i++) {\n            if (pendingStopAnimations[i].uniqueId === animationToStopValue.uniqueId) {\n                pendingStopAnimations.splice(i, 1);\n                // set the global context variable\n                context._setGlobalContextVariable(\"pendingStopAnimations\", pendingStopAnimations);\n                break;\n            }\n        }\n    }\n    _execute(context) {\n        const animationToStopValue = this.animationGroup.getValue(context);\n        const stopTime = this.stopAtFrame.getValue(context) ?? -1;\n        // check the values\n        if (!animationToStopValue) {\n            Logger.Warn(\"No animation group provided to stop.\");\n            return this._reportError(context, \"No animation group provided to stop.\");\n        }\n        if (isNaN(stopTime)) {\n            return this._reportError(context, \"Invalid stop time.\");\n        }\n        if (stopTime > 0) {\n            this._startPendingTasks(context);\n        }\n        else {\n            this._stopAnimation(animationToStopValue, context);\n        }\n        // note that out will not be triggered in case of an error\n        this.out._activateSignal(context);\n    }\n    _executeOnTick(context) {\n        const animationToStopValue = this.animationGroup.getValue(context);\n        // check each frame if any animation should be stopped\n        const pendingStopAnimations = context._getGlobalContextVariable(\"pendingStopAnimations\", []);\n        for (let i = 0; i < pendingStopAnimations.length; i++) {\n            // compare the uniqueId to the animation to stop\n            if (pendingStopAnimations[i].uniqueId === animationToStopValue.uniqueId) {\n                // check if the current frame is AFTER the stopAtFrame\n                if (animationToStopValue.getCurrentFrame() >= pendingStopAnimations[i].stopAtFrame) {\n                    // stop the animation\n                    this._stopAnimation(animationToStopValue, context);\n                    // remove the animation from the list\n                    pendingStopAnimations.splice(i, 1);\n                    // set the global context variable\n                    context._setGlobalContextVariable(\"pendingStopAnimations\", pendingStopAnimations);\n                    this.done._activateSignal(context);\n                    context._removePendingBlock(this);\n                    break;\n                }\n            }\n        }\n    }\n    /**\n     * @returns class name of the block.\n     */\n    getClassName() {\n        return \"FlowGraphStopAnimationBlock\" /* FlowGraphBlockNames.StopAnimation */;\n    }\n    _stopAnimation(animationGroup, context) {\n        const currentlyRunning = context._getGlobalContextVariable(\"currentlyRunningAnimationGroups\", []);\n        const index = currentlyRunning.indexOf(animationGroup.uniqueId);\n        if (index !== -1) {\n            animationGroup.stop();\n            currentlyRunning.splice(index, 1);\n            // update the global context variable\n            context._setGlobalContextVariable(\"currentlyRunningAnimationGroups\", currentlyRunning);\n        }\n        else {\n            // Logger.Warn(\"Trying to stop an animation that is not running.\");\n            // no-op for now. Probably no need to log anything here.\n        }\n    }\n}\nRegisterClass(\"FlowGraphStopAnimationBlock\" /* FlowGraphBlockNames.StopAnimation */, FlowGraphStopAnimationBlock);\n//# sourceMappingURL=flowGraphStopAnimationBlock.js.map"],"names":["FlowGraphStopAnimationBlock","FlowGraphAsyncExecutionBlock","constructor","config","super","this","animationGroup","registerDataInput","RichTypeAny","stopAtFrame","RichTypeNumber","_preparePendingTasks","context","animationToStopValue","getValue","pendingStopAnimations","_getGlobalContextVariable","push","uniqueId","_setGlobalContextVariable","_cancelPendingTasks","i","length","splice","_execute","stopTime","isNaN","_reportError","_startPendingTasks","_stopAnimation","out","_activateSignal","Logger","Warn","_executeOnTick","getCurrentFrame","done","_removePendingBlock","getClassName","currentlyRunning","index","indexOf","stop","RegisterClass"],"mappings":"uOAQO,MAAMA,UAAoCC,EAC7C,WAAAC,CAAYC,GACRC,MAAMD,GACNE,KAAKC,eAAiBD,KAAKE,kBAAkB,iBAAkBC,GAC/DH,KAAKI,YAAcJ,KAAKE,kBAAkB,cAAeG,KACjE,CACI,oBAAAC,CAAqBC,GACjB,MAAMC,EAAuBR,KAAKC,eAAeQ,SAASF,GACpDH,EAAcJ,KAAKI,YAAYK,SAASF,KAAc,EAEtDG,EAAwBH,EAAQI,0BAA0B,wBAAyB,IAEzFD,EAAsBE,KAAK,CAAEC,SAAUL,EAAqBK,SAAUT,gBAEtEG,EAAQO,0BAA0B,wBAAyBJ,EACnE,CACI,mBAAAK,CAAoBR,GAEhB,MAAMC,EAAuBR,KAAKC,eAAeQ,SAASF,GACpDG,EAAwBH,EAAQI,0BAA0B,wBAAyB,IACzF,IAAK,IAAIK,EAAI,EAAGA,EAAIN,EAAsBO,OAAQD,IAC9C,GAAIN,EAAsBM,GAAGH,WAAaL,EAAqBK,SAAU,CACrEH,EAAsBQ,OAAOF,EAAG,GAEhCT,EAAQO,0BAA0B,wBAAyBJ,GAC3D,KAChB,CAEA,CACI,QAAAS,CAASZ,GACL,MAAMC,EAAuBR,KAAKC,eAAeQ,SAASF,GACpDa,EAAWpB,KAAKI,YAAYK,SAASF,KAAc,EAEzD,OAAKC,EAIDa,MAAMD,GACCpB,KAAKsB,aAAaf,EAAS,uBAElCa,EAAW,EACXpB,KAAKuB,mBAAmBhB,GAGxBP,KAAKwB,eAAehB,EAAsBD,QAG9CP,KAAKyB,IAAIC,gBAAgBnB,KAbrBoB,EAAOC,KAAK,wCACL5B,KAAKsB,aAAaf,EAAS,wCAa9C,CACI,cAAAsB,CAAetB,GACX,MAAMC,EAAuBR,KAAKC,eAAeQ,SAASF,GAEpDG,EAAwBH,EAAQI,0BAA0B,wBAAyB,IACzF,IAAK,IAAIK,EAAI,EAAGA,EAAIN,EAAsBO,OAAQD,IAE9C,GAAIN,EAAsBM,GAAGH,WAAaL,EAAqBK,UAEvDL,EAAqBsB,mBAAqBpB,EAAsBM,GAAGZ,YAAa,CAEhFJ,KAAKwB,eAAehB,EAAsBD,GAE1CG,EAAsBQ,OAAOF,EAAG,GAEhCT,EAAQO,0BAA0B,wBAAyBJ,GAC3DV,KAAK+B,KAAKL,gBAAgBnB,GAC1BA,EAAQyB,oBAAoBhC,MAC5B,KACpB,CAGA,CAII,YAAAiC,GACI,MAAO,6BACf,CACI,cAAAT,CAAevB,EAAgBM,GAC3B,MAAM2B,EAAmB3B,EAAQI,0BAA0B,kCAAmC,IACxFwB,EAAQD,EAAiBE,QAAQnC,EAAeY,WACxC,IAAVsB,IACAlC,EAAeoC,OACfH,EAAiBhB,OAAOiB,EAAO,GAE/B5B,EAAQO,0BAA0B,kCAAmCoB,GAMjF,EAEAI,EAAc,8BAAuE3C"}