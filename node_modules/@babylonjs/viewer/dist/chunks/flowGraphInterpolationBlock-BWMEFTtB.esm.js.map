{"version":3,"file":"flowGraphInterpolationBlock-BWMEFTtB.esm.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Execution/Animation/flowGraphInterpolationBlock.js"],"sourcesContent":["import { Constants } from \"core/Engines/constants\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport { getRichTypeByAnimationType, getRichTypeByFlowGraphType, RichTypeAny, RichTypeNumber } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { Animation } from \"core/Animations/animation\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\n/**\n * This block is responsible for interpolating between two values.\n * The babylon concept used is Animation, and it is the output of this block.\n *\n * Note that values will be parsed when the in connection is triggered. until then changing the value will not trigger a new interpolation.\n *\n * Internally this block uses the Animation class.\n *\n * Note that if the interpolation is already running a signal will be sent to stop the animation group running it.\n */\nexport class FlowGraphInterpolationBlock extends FlowGraphBlock {\n    constructor(config = {}) {\n        super(config);\n        /**\n         * The keyframes to interpolate between.\n         * Each keyframe has a duration input and a value input.\n         */\n        this.keyFrames = [];\n        const type = typeof config?.animationType === \"string\"\n            ? getRichTypeByFlowGraphType(config.animationType)\n            : getRichTypeByAnimationType(config?.animationType ?? Constants.ANIMATIONTYPE_FLOAT);\n        const numberOfKeyFrames = config?.keyFramesCount ?? 1;\n        const duration = this.registerDataInput(`duration_0`, RichTypeNumber, 0);\n        const value = this.registerDataInput(`value_0`, type);\n        this.keyFrames.push({ duration, value });\n        for (let i = 1; i < numberOfKeyFrames + 1; i++) {\n            const duration = this.registerDataInput(`duration_${i}`, RichTypeNumber, i === numberOfKeyFrames ? config.duration : undefined);\n            const value = this.registerDataInput(`value_${i}`, type);\n            this.keyFrames.push({ duration, value });\n        }\n        this.initialValue = this.keyFrames[0].value;\n        this.endValue = this.keyFrames[numberOfKeyFrames].value;\n        this.easingFunction = this.registerDataInput(\"easingFunction\", RichTypeAny);\n        this.animation = this.registerDataOutput(\"animation\", RichTypeAny);\n        this.propertyName = this.registerDataInput(\"propertyName\", RichTypeAny, config?.propertyName);\n        this.customBuildAnimation = this.registerDataInput(\"customBuildAnimation\", RichTypeAny);\n    }\n    _updateOutputs(context) {\n        const interpolationAnimations = context._getGlobalContextVariable(\"interpolationAnimations\", []);\n        const propertyName = this.propertyName.getValue(context);\n        const easingFunction = this.easingFunction.getValue(context);\n        const animation = this._createAnimation(context, propertyName, easingFunction);\n        // If an old animation exists, it will be ignored here.\n        // This is because if the animation is running and they both have the same target, the old will be stopped.\n        // This doesn't happen here, it happens in the play animation block.\n        this.animation.setValue(animation, context);\n        // to make sure no 2 interpolations are running on the same target, we will mark the animation in the context\n        if (Array.isArray(animation)) {\n            for (const anim of animation) {\n                interpolationAnimations.push(anim.uniqueId);\n            }\n        }\n        else {\n            interpolationAnimations.push(animation.uniqueId);\n        }\n        context._setGlobalContextVariable(\"interpolationAnimations\", interpolationAnimations);\n    }\n    _createAnimation(context, propertyName, easingFunction) {\n        const type = this.initialValue.richType;\n        const keys = [];\n        // add initial value\n        const currentValue = this.initialValue.getValue(context) || type.defaultValue;\n        keys.push({ frame: 0, value: currentValue });\n        const numberOfKeyFrames = this.config?.numberOfKeyFrames ?? 1;\n        for (let i = 1; i < numberOfKeyFrames + 1; i++) {\n            const duration = this.keyFrames[i].duration?.getValue(context);\n            let value = this.keyFrames[i].value?.getValue(context);\n            if (i === numberOfKeyFrames - 1) {\n                value = value || type.defaultValue;\n            }\n            if (duration !== undefined && value) {\n                // convert duration to frames, based on 60 fps\n                keys.push({ frame: duration * 60, value });\n            }\n        }\n        const customBuildAnimation = this.customBuildAnimation.getValue(context);\n        if (customBuildAnimation) {\n            return customBuildAnimation(null, null, context)(keys, 60, type.animationType, easingFunction);\n        }\n        if (typeof propertyName === \"string\") {\n            const animation = Animation.CreateAnimation(propertyName, type.animationType, 60, easingFunction);\n            animation.setKeys(keys);\n            return [animation];\n        }\n        else {\n            const animations = propertyName.map((name) => {\n                const animation = Animation.CreateAnimation(name, type.animationType, 60, easingFunction);\n                animation.setKeys(keys);\n                return animation;\n            });\n            return animations;\n        }\n    }\n    getClassName() {\n        return \"FlowGraphInterpolationBlock\" /* FlowGraphBlockNames.ValueInterpolation */;\n    }\n}\nRegisterClass(\"FlowGraphInterpolationBlock\" /* FlowGraphBlockNames.ValueInterpolation */, FlowGraphInterpolationBlock);\n// #L54P2C\n//# sourceMappingURL=flowGraphInterpolationBlock.js.map"],"names":[],"mappings":"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"}