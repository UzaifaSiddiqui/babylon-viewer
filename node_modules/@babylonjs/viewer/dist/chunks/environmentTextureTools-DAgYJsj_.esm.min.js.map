{"version":3,"file":"environmentTextureTools-DAgYJsj_.esm.min.js","sources":["../../../../../dev/core/dist/Misc/environmentTextureTools.js"],"sourcesContent":["import { Tools } from \"./tools\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { ILog2 } from \"../Maths/math.scalar.functions\";\nimport { SphericalPolynomial } from \"../Maths/sphericalPolynomial\";\nimport { InternalTexture } from \"../Materials/Textures/internalTexture\";\nimport { BaseTexture } from \"../Materials/Textures/baseTexture\";\nimport { Constants } from \"../Engines/constants\";\nimport { Scene } from \"../scene\";\nimport { PostProcess } from \"../PostProcesses/postProcess\";\nimport { Logger } from \"../Misc/logger\";\nimport { RGBDTextureTools } from \"./rgbdTextureTools\";\nimport { DumpDataAsync } from \"../Misc/dumpTools\";\nimport \"../Materials/Textures/baseTexture.polynomial\";\nconst DefaultEnvironmentTextureImageType = \"image/png\";\nconst CurrentVersion = 2;\n/**\n * Magic number identifying the env file.\n */\nconst MagicBytes = [0x86, 0x16, 0x87, 0x96, 0xf6, 0xd6, 0x96, 0x36];\n/**\n * Gets the environment info from an env file.\n * @param data The array buffer containing the .env bytes.\n * @returns the environment file info (the json header) if successfully parsed, normalized to the latest supported version.\n */\nexport function GetEnvInfo(data) {\n    const dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\n    let pos = 0;\n    for (let i = 0; i < MagicBytes.length; i++) {\n        if (dataView.getUint8(pos++) !== MagicBytes[i]) {\n            Logger.Error(\"Not a babylon environment map\");\n            return null;\n        }\n    }\n    // Read json manifest - collect characters up to null terminator\n    let manifestString = \"\";\n    let charCode = 0x00;\n    while ((charCode = dataView.getUint8(pos++))) {\n        manifestString += String.fromCharCode(charCode);\n    }\n    let manifest = JSON.parse(manifestString);\n    manifest = normalizeEnvInfo(manifest);\n    // Extend the header with the position of the payload.\n    manifest.binaryDataPosition = pos;\n    if (manifest.specular) {\n        // Fallback to 0.8 exactly if lodGenerationScale is not defined for backward compatibility.\n        manifest.specular.lodGenerationScale = manifest.specular.lodGenerationScale || 0.8;\n    }\n    return manifest;\n}\n/**\n * Normalizes any supported version of the environment file info to the latest version\n * @param info environment file info on any supported version\n * @returns environment file info in the latest supported version\n * @private\n */\nexport function normalizeEnvInfo(info) {\n    if (info.version > CurrentVersion) {\n        throw new Error(`Unsupported babylon environment map version \"${info.version}\". Latest supported version is \"${CurrentVersion}\".`);\n    }\n    if (info.version === 2) {\n        return info;\n    }\n    // Migrate a v1 info to v2\n    info = { ...info, version: 2, imageType: DefaultEnvironmentTextureImageType };\n    return info;\n}\n/**\n * Creates an environment texture from a loaded cube texture.\n * @param texture defines the cube texture to convert in env file\n * @param options options for the conversion process\n * @returns a promise containing the environment data if successful.\n */\nexport async function CreateEnvTextureAsync(texture, options = {}) {\n    const internalTexture = texture.getInternalTexture();\n    if (!internalTexture) {\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return await Promise.reject(\"The cube texture is invalid.\");\n    }\n    const engine = internalTexture.getEngine();\n    if (texture.textureType !== Constants.TEXTURETYPE_HALF_FLOAT &&\n        texture.textureType !== Constants.TEXTURETYPE_FLOAT &&\n        texture.textureType !== Constants.TEXTURETYPE_UNSIGNED_BYTE &&\n        texture.textureType !== Constants.TEXTURETYPE_UNSIGNED_BYTE &&\n        texture.textureType !== Constants.TEXTURETYPE_UNSIGNED_INTEGER &&\n        texture.textureType !== -1) {\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return await Promise.reject(\"The cube texture should allow HDR (Full Float or Half Float).\");\n    }\n    let textureType = Constants.TEXTURETYPE_FLOAT;\n    if (!engine.getCaps().textureFloatRender) {\n        textureType = Constants.TEXTURETYPE_HALF_FLOAT;\n        if (!engine.getCaps().textureHalfFloatRender) {\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            return await Promise.reject(\"Env texture can only be created when the browser supports half float or full float rendering.\");\n        }\n    }\n    // sphericalPolynomial is lazy loaded so simply accessing it should trigger the computation.\n    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n    texture.sphericalPolynomial;\n    // Lets keep track of the polynomial promise so we can wait for it to be ready before generating the pixels.\n    const sphericalPolynomialPromise = texture.getInternalTexture()?._sphericalPolynomialPromise;\n    const cubeWidth = internalTexture.width;\n    const hostingScene = new Scene(engine);\n    const specularTextures = {};\n    const diffuseTextures = {};\n    // As we are going to readPixels the faces of the cube, make sure the drawing/update commands for the cube texture are fully sent to the GPU in case it is drawn for the first time in this very frame!\n    engine.flushFramebuffer();\n    const imageType = options.imageType ?? DefaultEnvironmentTextureImageType;\n    // Read and collect all mipmaps data from the cube.\n    const mipmapsCount = ILog2(internalTexture.width);\n    for (let i = 0; i <= mipmapsCount; i++) {\n        const faceWidth = Math.pow(2, mipmapsCount - i);\n        // All faces of the cube.\n        for (let face = 0; face < 6; face++) {\n            // eslint-disable-next-line no-await-in-loop\n            specularTextures[i * 6 + face] = await _GetTextureEncodedDataAsync(hostingScene, texture, textureType, face, i, faceWidth, imageType, options.imageQuality);\n        }\n    }\n    // Read and collect all irradiance data from the cube.\n    const irradianceTexture = options.disableIrradianceTexture ? null : texture.irradianceTexture;\n    if (irradianceTexture) {\n        const faceWidth = irradianceTexture.getSize().width;\n        // All faces of the cube.\n        for (let face = 0; face < 6; face++) {\n            // eslint-disable-next-line no-await-in-loop\n            diffuseTextures[face] = await _GetTextureEncodedDataAsync(hostingScene, irradianceTexture, textureType, face, 0, faceWidth, imageType, options.imageQuality);\n        }\n    }\n    // We can delete the hosting scene keeping track of all the creation objects\n    hostingScene.dispose();\n    // Ensure completion of the polynomial creation promise.\n    if (sphericalPolynomialPromise) {\n        await sphericalPolynomialPromise;\n    }\n    // Creates the json header for the env texture\n    const info = {\n        version: CurrentVersion,\n        width: cubeWidth,\n        imageType,\n        irradiance: CreateEnvTextureIrradiance(texture),\n        specular: {\n            mipmaps: [],\n            lodGenerationScale: texture.lodGenerationScale,\n        },\n    };\n    // Sets the specular image data information\n    let position = 0;\n    for (let i = 0; i <= mipmapsCount; i++) {\n        for (let face = 0; face < 6; face++) {\n            const byteLength = specularTextures[i * 6 + face].byteLength;\n            info.specular.mipmaps.push({\n                length: byteLength,\n                position: position,\n            });\n            position += byteLength;\n        }\n    }\n    // Sets the irradiance image data information\n    if (irradianceTexture) {\n        info.irradiance = info.irradiance || {\n            x: [0, 0, 0],\n            xx: [0, 0, 0],\n            y: [0, 0, 0],\n            yy: [0, 0, 0],\n            z: [0, 0, 0],\n            zz: [0, 0, 0],\n            yz: [0, 0, 0],\n            zx: [0, 0, 0],\n            xy: [0, 0, 0],\n        };\n        info.irradiance.irradianceTexture = {\n            size: irradianceTexture.getSize().width,\n            faces: [],\n            dominantDirection: irradianceTexture._dominantDirection?.asArray(),\n        };\n        for (let face = 0; face < 6; face++) {\n            const byteLength = diffuseTextures[face].byteLength;\n            info.irradiance.irradianceTexture.faces.push({\n                length: byteLength,\n                position: position,\n            });\n            position += byteLength;\n        }\n    }\n    // Encode the JSON as an array buffer\n    const infoString = JSON.stringify(info);\n    const infoBuffer = new ArrayBuffer(infoString.length + 1);\n    const infoView = new Uint8Array(infoBuffer); // Limited to ascii subset matching unicode.\n    for (let i = 0, strLen = infoString.length; i < strLen; i++) {\n        infoView[i] = infoString.charCodeAt(i);\n    }\n    // Ends up with a null terminator for easier parsing\n    infoView[infoString.length] = 0x00;\n    // Computes the final required size and creates the storage\n    const totalSize = MagicBytes.length + position + infoBuffer.byteLength;\n    const finalBuffer = new ArrayBuffer(totalSize);\n    const finalBufferView = new Uint8Array(finalBuffer);\n    const dataView = new DataView(finalBuffer);\n    // Copy the magic bytes identifying the file in\n    let pos = 0;\n    for (let i = 0; i < MagicBytes.length; i++) {\n        dataView.setUint8(pos++, MagicBytes[i]);\n    }\n    // Add the json info\n    finalBufferView.set(new Uint8Array(infoBuffer), pos);\n    pos += infoBuffer.byteLength;\n    // Finally inserts the radiance texture data\n    for (let i = 0; i <= mipmapsCount; i++) {\n        for (let face = 0; face < 6; face++) {\n            const dataBuffer = specularTextures[i * 6 + face];\n            finalBufferView.set(new Uint8Array(dataBuffer), pos);\n            pos += dataBuffer.byteLength;\n        }\n    }\n    // Finally inserts the irradiance texture data\n    if (irradianceTexture) {\n        for (let face = 0; face < 6; face++) {\n            const dataBuffer = diffuseTextures[face];\n            finalBufferView.set(new Uint8Array(dataBuffer), pos);\n            pos += dataBuffer.byteLength;\n        }\n    }\n    // Voila\n    return finalBuffer;\n}\n/**\n * Get the texture encoded data from the current texture\n * @internal\n */\nasync function _GetTextureEncodedDataAsync(hostingScene, texture, textureType, face, i, size, imageType, imageQuality) {\n    let faceData = await texture.readPixels(face, i, undefined, false);\n    if (faceData && faceData.byteLength === faceData.length) {\n        const faceDataFloat = new Float32Array(faceData.byteLength * 4);\n        for (let i = 0; i < faceData.byteLength; i++) {\n            faceDataFloat[i] = faceData[i] / 255;\n            // Gamma to linear\n            faceDataFloat[i] = Math.pow(faceDataFloat[i], 2.2);\n        }\n        faceData = faceDataFloat;\n    }\n    else if (faceData && texture.gammaSpace) {\n        const floatData = faceData;\n        for (let i = 0; i < floatData.length; i++) {\n            // Gamma to linear\n            floatData[i] = Math.pow(floatData[i], 2.2);\n        }\n    }\n    const engine = hostingScene.getEngine();\n    const tempTexture = engine.createRawTexture(faceData, size, size, Constants.TEXTUREFORMAT_RGBA, false, true, Constants.TEXTURE_NEAREST_SAMPLINGMODE, null, textureType);\n    await RGBDTextureTools.EncodeTextureToRGBD(tempTexture, hostingScene, textureType);\n    const rgbdEncodedData = await engine._readTexturePixels(tempTexture, size, size);\n    const imageEncodedData = await DumpDataAsync(size, size, rgbdEncodedData, imageType, undefined, false, true, imageQuality);\n    tempTexture.dispose();\n    return imageEncodedData;\n}\n/**\n * Creates a JSON representation of the spherical data.\n * @param texture defines the texture containing the polynomials\n * @returns the JSON representation of the spherical info\n */\nfunction CreateEnvTextureIrradiance(texture) {\n    const polynmials = texture.sphericalPolynomial;\n    if (polynmials == null) {\n        return null;\n    }\n    return {\n        x: [polynmials.x.x, polynmials.x.y, polynmials.x.z],\n        y: [polynmials.y.x, polynmials.y.y, polynmials.y.z],\n        z: [polynmials.z.x, polynmials.z.y, polynmials.z.z],\n        xx: [polynmials.xx.x, polynmials.xx.y, polynmials.xx.z],\n        yy: [polynmials.yy.x, polynmials.yy.y, polynmials.yy.z],\n        zz: [polynmials.zz.x, polynmials.zz.y, polynmials.zz.z],\n        yz: [polynmials.yz.x, polynmials.yz.y, polynmials.yz.z],\n        zx: [polynmials.zx.x, polynmials.zx.y, polynmials.zx.z],\n        xy: [polynmials.xy.x, polynmials.xy.y, polynmials.xy.z],\n    };\n}\n/**\n * Creates the ArrayBufferViews used for initializing environment texture image data.\n * @param data the image data\n * @param info parameters that determine what views will be created for accessing the underlying buffer\n * @returns the views described by info providing access to the underlying buffer\n */\nexport function CreateRadianceImageDataArrayBufferViews(data, info) {\n    info = normalizeEnvInfo(info);\n    const specularInfo = info.specular;\n    // Double checks the enclosed info\n    let mipmapsCount = Math.log2(info.width);\n    mipmapsCount = Math.round(mipmapsCount) + 1;\n    if (specularInfo.mipmaps.length !== 6 * mipmapsCount) {\n        throw new Error(`Unsupported specular mipmaps number \"${specularInfo.mipmaps.length}\"`);\n    }\n    const imageData = new Array(mipmapsCount);\n    for (let i = 0; i < mipmapsCount; i++) {\n        imageData[i] = new Array(6);\n        for (let face = 0; face < 6; face++) {\n            const imageInfo = specularInfo.mipmaps[i * 6 + face];\n            imageData[i][face] = new Uint8Array(data.buffer, data.byteOffset + info.binaryDataPosition + imageInfo.position, imageInfo.length);\n        }\n    }\n    return imageData;\n}\n/**\n * Creates the ArrayBufferViews used for initializing environment texture image data.\n * @param data the image data\n * @param info parameters that determine what views will be created for accessing the underlying buffer\n * @returns the views described by info providing access to the underlying buffer\n */\nexport function CreateIrradianceImageDataArrayBufferViews(data, info) {\n    info = normalizeEnvInfo(info);\n    const imageData = new Array(6);\n    const irradianceTexture = info.irradiance?.irradianceTexture;\n    if (irradianceTexture) {\n        if (irradianceTexture.faces.length !== 6) {\n            throw new Error(`Incorrect irradiance texture faces number \"${irradianceTexture.faces.length}\"`);\n        }\n        for (let face = 0; face < 6; face++) {\n            const imageInfo = irradianceTexture.faces[face];\n            imageData[face] = new Uint8Array(data.buffer, data.byteOffset + info.binaryDataPosition + imageInfo.position, imageInfo.length);\n        }\n    }\n    return imageData;\n}\n/**\n * Uploads the texture info contained in the env file to the GPU.\n * @param texture defines the internal texture to upload to\n * @param data defines the data to load\n * @param info defines the texture info retrieved through the GetEnvInfo method\n * @returns a promise\n */\n// eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\nexport function UploadEnvLevelsAsync(texture, data, info) {\n    info = normalizeEnvInfo(info);\n    const specularInfo = info.specular;\n    if (!specularInfo) {\n        // Nothing else parsed so far\n        return Promise.resolve([]);\n    }\n    texture._lodGenerationScale = specularInfo.lodGenerationScale;\n    const promises = [];\n    const radianceImageData = CreateRadianceImageDataArrayBufferViews(data, info);\n    promises.push(UploadRadianceLevelsAsync(texture, radianceImageData, info.imageType));\n    const irradianceTexture = info.irradiance?.irradianceTexture;\n    if (irradianceTexture) {\n        const irradianceImageData = CreateIrradianceImageDataArrayBufferViews(data, info);\n        let dominantDirection = null;\n        if (info.irradiance?.irradianceTexture?.dominantDirection) {\n            dominantDirection = Vector3.FromArray(info.irradiance.irradianceTexture.dominantDirection);\n        }\n        promises.push(UploadIrradianceLevelsAsync(texture, irradianceImageData, irradianceTexture.size, info.imageType, dominantDirection));\n    }\n    return Promise.all(promises);\n}\nasync function _OnImageReadyAsync(image, engine, expandTexture, rgbdPostProcess, url, face, i, generateNonLODTextures, lodTextures, cubeRtt, texture) {\n    return await new Promise((resolve, reject) => {\n        if (expandTexture) {\n            const tempTexture = engine.createTexture(null, true, true, null, Constants.TEXTURE_NEAREST_SAMPLINGMODE, null, (message) => {\n                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                reject(message);\n            }, image);\n            rgbdPostProcess?.onEffectCreatedObservable.addOnce((effect) => {\n                effect.executeWhenCompiled(() => {\n                    // Uncompress the data to a RTT\n                    rgbdPostProcess.externalTextureSamplerBinding = true;\n                    rgbdPostProcess.onApply = (effect) => {\n                        effect._bindTexture(\"textureSampler\", tempTexture);\n                        effect.setFloat2(\"scale\", 1, engine._features.needsInvertingBitmap && image instanceof ImageBitmap ? -1 : 1);\n                    };\n                    if (!engine.scenes.length) {\n                        return;\n                    }\n                    engine.scenes[0].postProcessManager.directRender([rgbdPostProcess], cubeRtt, true, face, i);\n                    // Cleanup\n                    engine.restoreDefaultFramebuffer();\n                    tempTexture.dispose();\n                    URL.revokeObjectURL(url);\n                    resolve();\n                });\n            });\n        }\n        else {\n            engine._uploadImageToTexture(texture, image, face, i);\n            // Upload the face to the non lod texture support\n            if (generateNonLODTextures) {\n                const lodTexture = lodTextures[i];\n                if (lodTexture) {\n                    engine._uploadImageToTexture(lodTexture._texture, image, face, 0);\n                }\n            }\n            resolve();\n        }\n    });\n}\n/**\n * Uploads the levels of image data to the GPU.\n * @param texture defines the internal texture to upload to\n * @param imageData defines the array buffer views of image data [mipmap][face]\n * @param imageType the mime type of the image data\n * @returns a promise\n */\nexport async function UploadRadianceLevelsAsync(texture, imageData, imageType = DefaultEnvironmentTextureImageType) {\n    const engine = texture.getEngine();\n    texture.format = Constants.TEXTUREFORMAT_RGBA;\n    texture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\n    texture.generateMipMaps = true;\n    texture._cachedAnisotropicFilteringLevel = null;\n    engine.updateTextureSamplingMode(Constants.TEXTURE_TRILINEAR_SAMPLINGMODE, texture);\n    await _UploadLevelsAsync(texture, imageData, true, imageType);\n    // Flag internal texture as ready in case they are in use.\n    texture.isReady = true;\n}\n/**\n * Uploads the levels of image data to the GPU.\n * @param mainTexture defines the internal texture to upload to\n * @param imageData defines the array buffer views of image data [mipmap][face]\n * @param size defines the size of the texture faces\n * @param imageType the mime type of the image data\n * @param dominantDirection the dominant direction of light in the environment texture, if available\n * @returns a promise\n */\nexport async function UploadIrradianceLevelsAsync(mainTexture, imageData, size, imageType = DefaultEnvironmentTextureImageType, dominantDirection = null) {\n    // Gets everything ready.\n    const engine = mainTexture.getEngine();\n    const texture = new InternalTexture(engine, 5 /* InternalTextureSource.RenderTarget */);\n    const baseTexture = new BaseTexture(engine, texture);\n    mainTexture._irradianceTexture = baseTexture;\n    baseTexture._dominantDirection = dominantDirection;\n    texture.isCube = true;\n    texture.format = Constants.TEXTUREFORMAT_RGBA;\n    texture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\n    texture.generateMipMaps = true;\n    texture._cachedAnisotropicFilteringLevel = null;\n    texture.generateMipMaps = true;\n    texture.width = size;\n    texture.height = size;\n    engine.updateTextureSamplingMode(Constants.TEXTURE_TRILINEAR_SAMPLINGMODE, texture);\n    await _UploadLevelsAsync(texture, [imageData], false, imageType);\n    engine.generateMipMapsForCubemap(texture);\n    // Flag internal texture as ready in case they are in use.\n    texture.isReady = true;\n}\n/**\n * Uploads the levels of image data to the GPU.\n * @param texture defines the internal texture to upload to\n * @param imageData defines the array buffer views of image data [mipmap][face]\n * @param canGenerateNonLODTextures defines whether or not to generate non lod textures\n * @param imageType the mime type of the image data\n * @returns a promise\n */\nasync function _UploadLevelsAsync(texture, imageData, canGenerateNonLODTextures, imageType = DefaultEnvironmentTextureImageType) {\n    if (!Tools.IsExponentOfTwo(texture.width)) {\n        throw new Error(\"Texture size must be a power of two\");\n    }\n    const mipmapsCount = ILog2(texture.width) + 1;\n    // Gets everything ready.\n    const engine = texture.getEngine();\n    let expandTexture = false;\n    let generateNonLODTextures = false;\n    let rgbdPostProcess = null;\n    let cubeRtt = null;\n    let lodTextures = null;\n    const caps = engine.getCaps();\n    if (!caps.textureLOD) {\n        expandTexture = false;\n        generateNonLODTextures = canGenerateNonLODTextures;\n    }\n    else if (!engine._features.supportRenderAndCopyToLodForFloatTextures) {\n        expandTexture = false;\n    }\n    // If half float available we can uncompress the texture\n    else if (caps.textureHalfFloatRender && caps.textureHalfFloatLinearFiltering) {\n        expandTexture = true;\n        texture.type = Constants.TEXTURETYPE_HALF_FLOAT;\n    }\n    // If full float available we can uncompress the texture\n    else if (caps.textureFloatRender && caps.textureFloatLinearFiltering) {\n        expandTexture = true;\n        texture.type = Constants.TEXTURETYPE_FLOAT;\n    }\n    // Expand the texture if possible\n    let shaderLanguage = 0 /* ShaderLanguage.GLSL */;\n    if (expandTexture) {\n        if (engine.isWebGPU) {\n            shaderLanguage = 1 /* ShaderLanguage.WGSL */;\n            await import(\"../ShadersWGSL/rgbdDecode.fragment\");\n        }\n        else {\n            await import(\"../Shaders/rgbdDecode.fragment\");\n        }\n        // Simply run through the decode PP\n        rgbdPostProcess = new PostProcess(\"rgbdDecode\", \"rgbdDecode\", null, null, 1, null, Constants.TEXTURE_TRILINEAR_SAMPLINGMODE, engine, false, undefined, texture.type, undefined, null, false, undefined, shaderLanguage);\n        texture._isRGBD = false;\n        texture.invertY = false;\n        cubeRtt = engine.createRenderTargetCubeTexture(texture.width, {\n            generateDepthBuffer: false,\n            generateMipMaps: true,\n            generateStencilBuffer: false,\n            samplingMode: Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\n            type: texture.type,\n            format: Constants.TEXTUREFORMAT_RGBA,\n        });\n    }\n    else {\n        texture._isRGBD = true;\n        texture.invertY = true;\n        // In case of missing support, applies the same patch than DDS files.\n        if (generateNonLODTextures) {\n            const mipSlices = 3;\n            lodTextures = {};\n            const scale = texture._lodGenerationScale;\n            const offset = texture._lodGenerationOffset;\n            for (let i = 0; i < mipSlices; i++) {\n                //compute LOD from even spacing in smoothness (matching shader calculation)\n                const smoothness = i / (mipSlices - 1);\n                const roughness = 1 - smoothness;\n                const minLODIndex = offset; // roughness = 0\n                const maxLODIndex = (mipmapsCount - 1) * scale + offset; // roughness = 1 (mipmaps start from 0)\n                const lodIndex = minLODIndex + (maxLODIndex - minLODIndex) * roughness;\n                const mipmapIndex = Math.round(Math.min(Math.max(lodIndex, 0), maxLODIndex));\n                //compute LOD from even spacing in smoothness (matching shader calculation)\n                const glTextureFromLod = new InternalTexture(engine, 2 /* InternalTextureSource.Temp */);\n                glTextureFromLod.isCube = true;\n                glTextureFromLod.invertY = true;\n                glTextureFromLod.generateMipMaps = false;\n                engine.updateTextureSamplingMode(Constants.TEXTURE_LINEAR_LINEAR, glTextureFromLod);\n                // Wrap in a base texture for easy binding.\n                const lodTexture = new BaseTexture(null);\n                lodTexture._isCube = true;\n                lodTexture._texture = glTextureFromLod;\n                lodTextures[mipmapIndex] = lodTexture;\n                switch (i) {\n                    case 0:\n                        texture._lodTextureLow = lodTexture;\n                        break;\n                    case 1:\n                        texture._lodTextureMid = lodTexture;\n                        break;\n                    case 2:\n                        texture._lodTextureHigh = lodTexture;\n                        break;\n                }\n            }\n        }\n    }\n    const promises = [];\n    // All mipmaps up to provided number of images\n    for (let i = 0; i < imageData.length; i++) {\n        // All faces\n        for (let face = 0; face < 6; face++) {\n            // Constructs an image element from image data\n            const bytes = imageData[i][face];\n            const blob = new Blob([bytes], { type: imageType });\n            const url = URL.createObjectURL(blob);\n            let promise;\n            if (engine._features.forceBitmapOverHTMLImageElement) {\n                // eslint-disable-next-line github/no-then\n                promise = engine.createImageBitmap(blob, { premultiplyAlpha: \"none\" }).then(async (img) => {\n                    return await _OnImageReadyAsync(img, engine, expandTexture, rgbdPostProcess, url, face, i, generateNonLODTextures, lodTextures, cubeRtt, texture);\n                });\n            }\n            else {\n                const image = new Image();\n                image.src = url;\n                // Enqueue promise to upload to the texture.\n                promise = new Promise((resolve, reject) => {\n                    image.onload = () => {\n                        _OnImageReadyAsync(image, engine, expandTexture, rgbdPostProcess, url, face, i, generateNonLODTextures, lodTextures, cubeRtt, texture)\n                            // eslint-disable-next-line github/no-then\n                            .then(() => resolve())\n                            // eslint-disable-next-line github/no-then\n                            .catch((reason) => {\n                            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                            reject(reason);\n                        });\n                    };\n                    image.onerror = (error) => {\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                        reject(error);\n                    };\n                });\n            }\n            promises.push(promise);\n        }\n    }\n    await Promise.all(promises);\n    // Fill remaining mipmaps with black textures.\n    if (imageData.length < mipmapsCount) {\n        let data;\n        const size = Math.pow(2, mipmapsCount - 1 - imageData.length);\n        const dataLength = size * size * 4;\n        switch (texture.type) {\n            case Constants.TEXTURETYPE_UNSIGNED_BYTE: {\n                data = new Uint8Array(dataLength);\n                break;\n            }\n            case Constants.TEXTURETYPE_HALF_FLOAT: {\n                data = new Uint16Array(dataLength);\n                break;\n            }\n            case Constants.TEXTURETYPE_FLOAT: {\n                data = new Float32Array(dataLength);\n                break;\n            }\n        }\n        for (let i = imageData.length; i < mipmapsCount; i++) {\n            for (let face = 0; face < 6; face++) {\n                engine._uploadArrayBufferViewToTexture(cubeRtt?.texture || texture, data, face, i);\n            }\n        }\n    }\n    // Release temp RTT.\n    if (cubeRtt) {\n        const irradiance = texture._irradianceTexture;\n        texture._irradianceTexture = null;\n        engine._releaseTexture(texture);\n        cubeRtt._swapAndDie(texture);\n        texture._irradianceTexture = irradiance;\n    }\n    // Release temp Post Process.\n    if (rgbdPostProcess) {\n        rgbdPostProcess.dispose();\n    }\n    // Flag internal texture as ready in case they are in use.\n    if (generateNonLODTextures) {\n        if (texture._lodTextureHigh && texture._lodTextureHigh._texture) {\n            texture._lodTextureHigh._texture.isReady = true;\n        }\n        if (texture._lodTextureMid && texture._lodTextureMid._texture) {\n            texture._lodTextureMid._texture.isReady = true;\n        }\n        if (texture._lodTextureLow && texture._lodTextureLow._texture) {\n            texture._lodTextureLow._texture.isReady = true;\n        }\n    }\n}\n/**\n * Uploads spherical polynomials information to the texture.\n * @param texture defines the texture we are trying to upload the information to\n * @param info defines the environment texture info retrieved through the GetEnvInfo method\n */\nexport function UploadEnvSpherical(texture, info) {\n    info = normalizeEnvInfo(info);\n    const irradianceInfo = info.irradiance;\n    if (!irradianceInfo) {\n        return;\n    }\n    const sp = new SphericalPolynomial();\n    Vector3.FromArrayToRef(irradianceInfo.x, 0, sp.x);\n    Vector3.FromArrayToRef(irradianceInfo.y, 0, sp.y);\n    Vector3.FromArrayToRef(irradianceInfo.z, 0, sp.z);\n    Vector3.FromArrayToRef(irradianceInfo.xx, 0, sp.xx);\n    Vector3.FromArrayToRef(irradianceInfo.yy, 0, sp.yy);\n    Vector3.FromArrayToRef(irradianceInfo.zz, 0, sp.zz);\n    Vector3.FromArrayToRef(irradianceInfo.yz, 0, sp.yz);\n    Vector3.FromArrayToRef(irradianceInfo.zx, 0, sp.zx);\n    Vector3.FromArrayToRef(irradianceInfo.xy, 0, sp.xy);\n    texture._sphericalPolynomial = sp;\n}\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\nexport function _UpdateRGBDAsync(internalTexture, data, sphericalPolynomial, lodScale, lodOffset) {\n    const proxy = internalTexture\n        .getEngine()\n        .createRawCubeTexture(null, internalTexture.width, internalTexture.format, internalTexture.type, internalTexture.generateMipMaps, internalTexture.invertY, internalTexture.samplingMode, internalTexture._compression);\n    // eslint-disable-next-line github/no-then\n    const proxyPromise = UploadRadianceLevelsAsync(proxy, data).then(() => internalTexture);\n    internalTexture.onRebuildCallback = (_internalTexture) => {\n        return {\n            proxy: proxyPromise,\n            isReady: true,\n            isAsync: true,\n        };\n    };\n    internalTexture._source = 13 /* InternalTextureSource.CubeRawRGBD */;\n    internalTexture._bufferViewArrayArray = data;\n    internalTexture._lodGenerationScale = lodScale;\n    internalTexture._lodGenerationOffset = lodOffset;\n    internalTexture._sphericalPolynomial = sphericalPolynomial;\n    // eslint-disable-next-line github/no-then\n    return UploadRadianceLevelsAsync(internalTexture, data).then(() => {\n        internalTexture.isReady = true;\n        return internalTexture;\n    });\n}\n/**\n * Sets of helpers addressing the serialization and deserialization of environment texture\n * stored in a BabylonJS env file.\n * Those files are usually stored as .env files.\n */\nexport const EnvironmentTextureTools = {\n    /**\n     * Gets the environment info from an env file.\n     * @param data The array buffer containing the .env bytes.\n     * @returns the environment file info (the json header) if successfully parsed, normalized to the latest supported version.\n     */\n    GetEnvInfo,\n    /**\n     * Creates an environment texture from a loaded cube texture.\n     * @param texture defines the cube texture to convert in env file\n     * @param options options for the conversion process\n     * @param options.imageType the mime type for the encoded images, with support for \"image/png\" (default) and \"image/webp\"\n     * @param options.imageQuality the image quality of encoded WebP images.\n     * @returns a promise containing the environment data if successful.\n     */\n    CreateEnvTextureAsync,\n    /**\n     * Creates the ArrayBufferViews used for initializing environment texture image data.\n     * @param data the image data\n     * @param info parameters that determine what views will be created for accessing the underlying buffer\n     * @returns the views described by info providing access to the underlying buffer\n     */\n    CreateRadianceImageDataArrayBufferViews,\n    /**\n     * Creates the ArrayBufferViews used for initializing environment texture image data.\n     * @param data the image data\n     * @param info parameters that determine what views will be created for accessing the underlying buffer\n     * @returns the views described by info providing access to the underlying buffer\n     */\n    CreateIrradianceImageDataArrayBufferViews,\n    /**\n     * Uploads the texture info contained in the env file to the GPU.\n     * @param texture defines the internal texture to upload to\n     * @param data defines the data to load\n     * @param info defines the texture info retrieved through the GetEnvInfo method\n     * @returns a promise\n     */\n    UploadEnvLevelsAsync,\n    /**\n     * Uploads the levels of image data to the GPU.\n     * @param texture defines the internal texture to upload to\n     * @param imageData defines the array buffer views of image data [mipmap][face]\n     * @param imageType the mime type of the image data\n     * @returns a promise\n     */\n    UploadRadianceLevelsAsync,\n    /**\n     * Uploads the levels of image data to the GPU.\n     * @param texture defines the internal texture to upload to\n     * @param imageData defines the array buffer views of image data [mipmap][face]\n     * @param imageType the mime type of the image data\n     * @param dominantDirection the dominant direction of light in the environment texture, if available\n     * @returns a promise\n     */\n    UploadIrradianceLevelsAsync,\n    /**\n     * Uploads spherical polynomials information to the texture.\n     * @param texture defines the texture we are trying to upload the information to\n     * @param info defines the environment texture info retrieved through the GetEnvInfo method\n     */\n    UploadEnvSpherical,\n};\n//# sourceMappingURL=environmentTextureTools.js.map"],"names":["DefaultEnvironmentTextureImageType","MagicBytes","GetEnvInfo","data","dataView","DataView","buffer","byteOffset","byteLength","pos","i","length","getUint8","Logger","Error","manifestString","charCode","String","fromCharCode","manifest","JSON","parse","normalizeEnvInfo","binaryDataPosition","specular","lodGenerationScale","info","version","imageType","UploadEnvLevelsAsync","texture","specularInfo","Promise","resolve","_lodGenerationScale","promises","radianceImageData","mipmapsCount","Math","log2","width","round","mipmaps","imageData","Array","face","imageInfo","Uint8Array","position","CreateRadianceImageDataArrayBufferViews","push","UploadRadianceLevelsAsync","irradianceTexture","irradiance","irradianceImageData","faces","CreateIrradianceImageDataArrayBufferViews","dominantDirection","Vector3","FromArray","async","mainTexture","size","engine","getEngine","InternalTexture","baseTexture","BaseTexture","_irradianceTexture","_dominantDirection","isCube","format","Constants","TEXTUREFORMAT_RGBA","type","TEXTURETYPE_UNSIGNED_BYTE","generateMipMaps","_cachedAnisotropicFilteringLevel","height","updateTextureSamplingMode","TEXTURE_TRILINEAR_SAMPLINGMODE","_UploadLevelsAsync","generateMipMapsForCubemap","isReady","UploadIrradianceLevelsAsync","all","_OnImageReadyAsync","image","expandTexture","rgbdPostProcess","url","generateNonLODTextures","lodTextures","cubeRtt","reject","tempTexture","createTexture","TEXTURE_NEAREST_SAMPLINGMODE","message","onEffectCreatedObservable","addOnce","effect","executeWhenCompiled","externalTextureSamplerBinding","onApply","_bindTexture","setFloat2","_features","needsInvertingBitmap","ImageBitmap","scenes","postProcessManager","directRender","restoreDefaultFramebuffer","dispose","URL","revokeObjectURL","_uploadImageToTexture","lodTexture","_texture","canGenerateNonLODTextures","Tools","IsExponentOfTwo","ILog2","caps","getCaps","textureLOD","supportRenderAndCopyToLodForFloatTextures","textureHalfFloatRender","textureHalfFloatLinearFiltering","TEXTURETYPE_HALF_FLOAT","textureFloatRender","textureFloatLinearFiltering","TEXTURETYPE_FLOAT","shaderLanguage","isWebGPU","import","PostProcess","undefined","_isRGBD","invertY","createRenderTargetCubeTexture","generateDepthBuffer","generateStencilBuffer","samplingMode","mipSlices","scale","offset","_lodGenerationOffset","maxLODIndex","lodIndex","mipmapIndex","min","max","glTextureFromLod","TEXTURE_LINEAR_LINEAR","_isCube","_lodTextureLow","_lodTextureMid","_lodTextureHigh","bytes","blob","Blob","createObjectURL","promise","forceBitmapOverHTMLImageElement","createImageBitmap","premultiplyAlpha","then","img","Image","src","onload","catch","reason","onerror","error","pow","dataLength","Uint16Array","Float32Array","_uploadArrayBufferViewToTexture","_releaseTexture","_swapAndDie","UploadEnvSpherical","irradianceInfo","sp","SphericalPolynomial","FromArrayToRef","x","y","z","xx","yy","zz","yz","zx","xy","_sphericalPolynomial","_UpdateRGBDAsync","internalTexture","sphericalPolynomial","lodScale","lodOffset","proxyPromise","createRawCubeTexture","_compression","onRebuildCallback","_internalTexture","proxy","isAsync","_source","_bufferViewArrayArray"],"mappings":"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"}