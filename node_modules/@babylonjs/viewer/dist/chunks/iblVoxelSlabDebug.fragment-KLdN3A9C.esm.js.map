{"version":3,"file":"iblVoxelSlabDebug.fragment-KLdN3A9C.esm.js","sources":["../../../../../dev/core/dist/Shaders/iblVoxelSlabDebug.fragment.js"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nconst name = \"iblVoxelSlabDebugPixelShader\";\nconst shader = `precision highp float;varying vec3 vNormalizedPosition;uniform float nearPlane;uniform float farPlane;uniform float stepSize;void main(void) {vec3 normPos=vNormalizedPosition.xyz;float chunkSize=stepSize*float(MAX_DRAW_BUFFERS);float numChunks=1.0/chunkSize;float positionInChunk=fract(normPos.z/chunkSize);float slab=floor(positionInChunk*float(MAX_DRAW_BUFFERS)) /\nfloat(MAX_DRAW_BUFFERS);if (normPos.x<0.0 || normPos.y<0.0 || normPos.z<0.0 ||\nnormPos.x>1.0 || normPos.y>1.0 || normPos.z>1.0) {gl_FragColor=vec4(0.0,0.0,0.0,0.0);} else {gl_FragColor=vec4(slab,0.0,0.0,0.75);}}`;\n// Sideeffect\nif (!ShaderStore.ShadersStore[name]) {\n    ShaderStore.ShadersStore[name] = shader;\n}\n/** @internal */\nexport const iblVoxelSlabDebugPixelShader = { name, shader };\n//# sourceMappingURL=iblVoxelSlabDebug.fragment.js.map"],"names":[],"mappings":";;AAAA;AAEA,MAAM,IAAI,GAAG,8BAA8B;AAC3C,MAAM,MAAM,GAAG,CAAC;AAChB;AACA,oIAAoI,CAAC;AACrI;AACA,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;AACrC,IAAI,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM;AAC3C;AACA;AACY,MAAC,4BAA4B,GAAG,EAAE,IAAI,EAAE,MAAM;;;;"}