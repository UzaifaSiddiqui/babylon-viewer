{"version":3,"file":"hdrTextureLoader-CBqOIs5P.esm.js","sources":["../../../../../dev/core/dist/Materials/Textures/Loaders/hdrTextureLoader.js"],"sourcesContent":["import { RGBE_ReadHeader, RGBE_ReadPixels } from \"../../../Misc/HighDynamicRange/hdr\";\nimport { Constants } from \"../../../Engines/constants\";\n/**\n * Implementation of the HDR Texture Loader.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _HDRTextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * Cube texture are not supported by .hdr files\n     */\n    loadCubeData() {\n        // eslint-disable-next-line no-throw-literal\n        throw \".hdr not supported in Cube.\";\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     */\n    loadData(data, texture, callback) {\n        const uint8array = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n        const hdrInfo = RGBE_ReadHeader(uint8array);\n        const pixelsDataRGB32 = RGBE_ReadPixels(uint8array, hdrInfo);\n        const pixels = hdrInfo.width * hdrInfo.height;\n        const pixelsDataRGBA32 = new Float32Array(pixels * 4);\n        for (let i = 0; i < pixels; i += 1) {\n            pixelsDataRGBA32[i * 4] = pixelsDataRGB32[i * 3];\n            pixelsDataRGBA32[i * 4 + 1] = pixelsDataRGB32[i * 3 + 1];\n            pixelsDataRGBA32[i * 4 + 2] = pixelsDataRGB32[i * 3 + 2];\n            pixelsDataRGBA32[i * 4 + 3] = 1;\n        }\n        callback(hdrInfo.width, hdrInfo.height, texture.generateMipMaps, false, () => {\n            const engine = texture.getEngine();\n            texture.type = Constants.TEXTURETYPE_FLOAT;\n            texture.format = Constants.TEXTUREFORMAT_RGBA;\n            texture._gammaSpace = false;\n            engine._uploadDataToTextureDirectly(texture, pixelsDataRGBA32);\n        });\n    }\n}\n//# sourceMappingURL=hdrTextureLoader.js.map"],"names":[],"mappings":";;;AAEA;AACA;AACA;AACA;AACA;AACO,MAAM,iBAAiB,CAAC;AAC/B,IAAI,WAAW,GAAG;AAClB;AACA;AACA;AACA,QAAQ,IAAI,CAAC,eAAe,GAAG,KAAK;AACpC;AACA;AACA;AACA;AACA;AACA,IAAI,YAAY,GAAG;AACnB;AACA,QAAQ,MAAM,6BAA6B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,QAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE;AACtC,QAAQ,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC;AACxF,QAAQ,MAAM,OAAO,GAAG,eAAe,CAAC,UAAU,CAAC;AACnD,QAAQ,MAAM,eAAe,GAAG,eAAe,CAAC,UAAU,EAAE,OAAO,CAAC;AACpE,QAAQ,MAAM,MAAM,GAAG,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,MAAM;AACrD,QAAQ,MAAM,gBAAgB,GAAG,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;AAC7D,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;AAC5C,YAAY,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC;AAC5D,YAAY,gBAAgB,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACpE,YAAY,gBAAgB,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACpE,YAAY,gBAAgB,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;AAC3C;AACA,QAAQ,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,eAAe,EAAE,KAAK,EAAE,MAAM;AACtF,YAAY,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,EAAE;AAC9C,YAAY,OAAO,CAAC,IAAI,GAAG,SAAS,CAAC,iBAAiB;AACtD,YAAY,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC,kBAAkB;AACzD,YAAY,OAAO,CAAC,WAAW,GAAG,KAAK;AACvC,YAAY,MAAM,CAAC,4BAA4B,CAAC,OAAO,EAAE,gBAAgB,CAAC;AAC1E,SAAS,CAAC;AACV;AACA;;;;"}