import { S as ShaderStore } from './index-D3asnK0t.esm.js';
import './helperFunctions-DMHUq4sf.esm.js';
import './hdrFilteringFunctions-D11d8ESE.esm.js';
import './pbrBRDFFunctions-DNU21MA4.esm.js';

// Do not edit.
const name = "hdrIrradianceFilteringPixelShader";
const shader = `#include<helperFunctions>
#include<importanceSampling>
#include<pbrBRDFFunctions>
#include<hdrFilteringFunctions>
var inputTextureSampler: sampler;var inputTexture: texture_cube<f32>;
#ifdef IBL_CDF_FILTERING
var icdfTextureSampler: sampler;var icdfTexture: texture_2d<f32>;
#endif
uniform vFilteringInfo: vec2f;uniform hdrScale: f32;varying direction: vec3f;@fragment
fn main(input: FragmentInputs)->FragmentOutputs {var color: vec3f=irradiance(inputTexture,inputTextureSampler,input.direction,uniforms.vFilteringInfo,0.0,vec3f(1.0),input.direction
#ifdef IBL_CDF_FILTERING
,icdfTexture,icdfTextureSampler
#endif
);fragmentOutputs.color= vec4f(color*uniforms.hdrScale,1.0);}`;
// Sideeffect
if (!ShaderStore.ShadersStoreWGSL[name]) {
    ShaderStore.ShadersStoreWGSL[name] = shader;
}
/** @internal */
const hdrIrradianceFilteringPixelShaderWGSL = { name, shader };

export { hdrIrradianceFilteringPixelShaderWGSL };
//# sourceMappingURL=hdrIrradianceFiltering.fragment-DeXpZJKL.esm.js.map
