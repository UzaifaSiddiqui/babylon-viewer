{"version":3,"file":"flowGraphDataSwitchBlock-SdLTfPZR.esm.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Data/flowGraphDataSwitchBlock.js"],"sourcesContent":["import { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport { RichTypeAny } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { getNumericValue, isNumeric } from \"core/FlowGraph/utils\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\n/**\n * This block conditionally outputs one of its inputs, based on a condition and a list of cases.\n *\n * This of it as a passive (data) version of the switch statement in programming languages.\n */\nexport class FlowGraphDataSwitchBlock extends FlowGraphBlock {\n    constructor(\n    /**\n     * the configuration of the block\n     */\n    config) {\n        super(config);\n        this.config = config;\n        this._inputCases = new Map();\n        this.case = this.registerDataInput(\"case\", RichTypeAny, NaN);\n        this.default = this.registerDataInput(\"default\", RichTypeAny);\n        this.value = this.registerDataOutput(\"value\", RichTypeAny);\n        // iterate the set not using for of\n        const array = this.config.cases || [];\n        for (let caseValue of array) {\n            // if treat as integers, make sure not to set it again if it exists\n            caseValue = getNumericValue(caseValue);\n            if (this.config.treatCasesAsIntegers) {\n                caseValue = caseValue | 0;\n                if (this._inputCases.has(caseValue)) {\n                    return;\n                }\n            }\n            this._inputCases.set(caseValue, this.registerDataInput(`in_${caseValue}`, RichTypeAny));\n        }\n    }\n    _updateOutputs(context) {\n        const selectionValue = this.case.getValue(context);\n        let outputValue;\n        if (isNumeric(selectionValue)) {\n            outputValue = this._getOutputValueForCase(getNumericValue(selectionValue), context);\n        }\n        if (!outputValue) {\n            outputValue = this.default.getValue(context);\n        }\n        this.value.setValue(outputValue, context);\n    }\n    _getOutputValueForCase(caseValue, context) {\n        return this._inputCases.get(caseValue)?.getValue(context);\n    }\n    getClassName() {\n        return \"FlowGraphDataSwitchBlock\" /* FlowGraphBlockNames.DataSwitch */;\n    }\n}\nRegisterClass(\"FlowGraphDataSwitchBlock\" /* FlowGraphBlockNames.DataSwitch */, FlowGraphDataSwitchBlock);\n//# sourceMappingURL=flowGraphDataSwitchBlock.js.map"],"names":[],"mappings":";;;;;AAIA;AACA;AACA;AACA;AACA;AACO,MAAM,wBAAwB,SAAS,cAAc,CAAC;AAC7D,IAAI,WAAW;AACf;AACA;AACA;AACA,IAAI,MAAM,EAAE;AACZ,QAAQ,KAAK,CAAC,MAAM,CAAC;AACrB,QAAQ,IAAI,CAAC,MAAM,GAAG,MAAM;AAC5B,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,EAAE;AACpC,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,WAAW,EAAE,GAAG,CAAC;AACpE,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,WAAW,CAAC;AACrE,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,WAAW,CAAC;AAClE;AACA,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE;AAC7C,QAAQ,KAAK,IAAI,SAAS,IAAI,KAAK,EAAE;AACrC;AACA,YAAY,SAAS,GAAG,eAAe,CAAC,SAAS,CAAC;AAClD,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE;AAClD,gBAAgB,SAAS,GAAG,SAAS,GAAG,CAAC;AACzC,gBAAgB,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;AACrD,oBAAoB;AACpB;AACA;AACA,YAAY,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;AACnG;AACA;AACA,IAAI,cAAc,CAAC,OAAO,EAAE;AAC5B,QAAQ,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;AAC1D,QAAQ,IAAI,WAAW;AACvB,QAAQ,IAAI,SAAS,CAAC,cAAc,CAAC,EAAE;AACvC,YAAY,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,cAAc,CAAC,EAAE,OAAO,CAAC;AAC/F;AACA,QAAQ,IAAI,CAAC,WAAW,EAAE;AAC1B,YAAY,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC;AACxD;AACA,QAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,OAAO,CAAC;AACjD;AACA,IAAI,sBAAsB,CAAC,SAAS,EAAE,OAAO,EAAE;AAC/C,QAAQ,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,QAAQ,CAAC,OAAO,CAAC;AACjE;AACA,IAAI,YAAY,GAAG;AACnB,QAAQ,OAAO,0BAA0B;AACzC;AACA;AACA,aAAa,CAAC,0BAA0B,uCAAuC,wBAAwB,CAAC;;;;"}