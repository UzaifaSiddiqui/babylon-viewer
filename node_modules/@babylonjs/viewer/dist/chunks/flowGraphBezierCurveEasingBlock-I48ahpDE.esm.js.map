{"version":3,"file":"flowGraphBezierCurveEasingBlock-I48ahpDE.esm.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Execution/Animation/flowGraphBezierCurveEasingBlock.js"],"sourcesContent":["import { BezierCurveEase } from \"core/Animations/easing\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport { RichTypeAny, RichTypeNumber, RichTypeVector2 } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\n/**\n * An easing block that generates a BezierCurveEase easingFunction object based on the data provided.\n */\nexport class FlowGraphBezierCurveEasingBlock extends FlowGraphBlock {\n    constructor(\n    /**\n     * the configuration of the block\n     */\n    config) {\n        super(config);\n        this.config = config;\n        /**\n         * Internal cache of reusable easing functions.\n         * key is type-mode-properties\n         */\n        this._easingFunctions = {};\n        this.mode = this.registerDataInput(\"mode\", RichTypeNumber, 0);\n        this.controlPoint1 = this.registerDataInput(\"controlPoint1\", RichTypeVector2);\n        this.controlPoint2 = this.registerDataInput(\"controlPoint2\", RichTypeVector2);\n        this.easingFunction = this.registerDataOutput(\"easingFunction\", RichTypeAny);\n    }\n    _updateOutputs(context) {\n        const mode = this.mode.getValue(context);\n        const controlPoint1 = this.controlPoint1.getValue(context);\n        const controlPoint2 = this.controlPoint2.getValue(context);\n        if (mode === undefined) {\n            return;\n        }\n        const key = `${mode}-${controlPoint1.x}-${controlPoint1.y}-${controlPoint2.x}-${controlPoint2.y}`;\n        if (!this._easingFunctions[key]) {\n            const easing = new BezierCurveEase(controlPoint1.x, controlPoint1.y, controlPoint2.x, controlPoint2.y);\n            easing.setEasingMode(mode);\n            this._easingFunctions[key] = easing;\n        }\n        this.easingFunction.setValue(this._easingFunctions[key], context);\n    }\n    getClassName() {\n        return \"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */;\n    }\n}\nRegisterClass(\"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */, FlowGraphBezierCurveEasingBlock);\n//# sourceMappingURL=flowGraphBezierCurveEasingBlock.js.map"],"names":[],"mappings":";;;;;AAIA;AACA;AACA;AACO,MAAM,+BAA+B,SAAS,cAAc,CAAC;AACpE,IAAI,WAAW;AACf;AACA;AACA;AACA,IAAI,MAAM,EAAE;AACZ,QAAQ,KAAK,CAAC,MAAM,CAAC;AACrB,QAAQ,IAAI,CAAC,MAAM,GAAG,MAAM;AAC5B;AACA;AACA;AACA;AACA,QAAQ,IAAI,CAAC,gBAAgB,GAAG,EAAE;AAClC,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,cAAc,EAAE,CAAC,CAAC;AACrE,QAAQ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAE,eAAe,CAAC;AACrF,QAAQ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAE,eAAe,CAAC;AACrF,QAAQ,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,WAAW,CAAC;AACpF;AACA,IAAI,cAAc,CAAC,OAAO,EAAE;AAC5B,QAAQ,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;AAChD,QAAQ,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC;AAClE,QAAQ,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC;AAClE,QAAQ,IAAI,IAAI,KAAK,SAAS,EAAE;AAChC,YAAY;AACZ;AACA,QAAQ,MAAM,GAAG,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;AACzG,QAAQ,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAE;AACzC,YAAY,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,aAAa,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC;AAClH,YAAY,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC;AACtC,YAAY,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,MAAM;AAC/C;AACA,QAAQ,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC;AACzE;AACA,IAAI,YAAY,GAAG;AACnB,QAAQ,OAAO,4BAA4B;AAC3C;AACA;AACA,aAAa,CAAC,4BAA4B,8CAA8C,+BAA+B,CAAC;;;;"}