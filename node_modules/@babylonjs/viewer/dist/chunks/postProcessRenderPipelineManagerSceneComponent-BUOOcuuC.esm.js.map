{"version":3,"file":"postProcessRenderPipelineManagerSceneComponent-BUOOcuuC.esm.js","sources":["../../../../../dev/core/dist/PostProcesses/RenderPipeline/postProcessRenderPipelineManager.js","../../../../../dev/core/dist/PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js"],"sourcesContent":["/**\n * PostProcessRenderPipelineManager class\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/postProcessRenderPipeline\n */\nexport class PostProcessRenderPipelineManager {\n    /**\n     * Initializes a PostProcessRenderPipelineManager\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/postProcessRenderPipeline\n     */\n    constructor() {\n        this._renderPipelines = {};\n    }\n    /**\n     * Gets the list of supported render pipelines\n     */\n    get supportedPipelines() {\n        const result = [];\n        for (const renderPipelineName in this._renderPipelines) {\n            if (Object.prototype.hasOwnProperty.call(this._renderPipelines, renderPipelineName)) {\n                const pipeline = this._renderPipelines[renderPipelineName];\n                if (pipeline.isSupported) {\n                    result.push(pipeline);\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Adds a pipeline to the manager\n     * @param renderPipeline The pipeline to add\n     */\n    addPipeline(renderPipeline) {\n        this._renderPipelines[renderPipeline._name] = renderPipeline;\n    }\n    /**\n     * Remove the pipeline from the manager\n     * @param renderPipelineName the name of the pipeline to remove\n     */\n    removePipeline(renderPipelineName) {\n        delete this._renderPipelines[renderPipelineName];\n    }\n    /**\n     * Attaches a camera to the pipeline\n     * @param renderPipelineName The name of the pipeline to attach to\n     * @param cameras the camera to attach\n     * @param unique if the camera can be attached multiple times to the pipeline\n     */\n    attachCamerasToRenderPipeline(renderPipelineName, cameras, unique = false) {\n        const renderPipeline = this._renderPipelines[renderPipelineName];\n        if (!renderPipeline) {\n            return;\n        }\n        renderPipeline._attachCameras(cameras, unique);\n    }\n    /**\n     * Detaches a camera from the pipeline\n     * @param renderPipelineName The name of the pipeline to detach from\n     * @param cameras the camera to detach\n     */\n    detachCamerasFromRenderPipeline(renderPipelineName, cameras) {\n        const renderPipeline = this._renderPipelines[renderPipelineName];\n        if (!renderPipeline) {\n            return;\n        }\n        renderPipeline._detachCameras(cameras);\n    }\n    /**\n     * Enables an effect by name on a pipeline\n     * @param renderPipelineName the name of the pipeline to enable the effect in\n     * @param renderEffectName the name of the effect to enable\n     * @param cameras the cameras that the effect should be enabled on\n     */\n    enableEffectInPipeline(renderPipelineName, renderEffectName, cameras) {\n        const renderPipeline = this._renderPipelines[renderPipelineName];\n        if (!renderPipeline) {\n            return;\n        }\n        renderPipeline._enableEffect(renderEffectName, cameras);\n    }\n    /**\n     * Disables an effect by name on a pipeline\n     * @param renderPipelineName the name of the pipeline to disable the effect in\n     * @param renderEffectName the name of the effect to disable\n     * @param cameras the cameras that the effect should be disabled on\n     */\n    disableEffectInPipeline(renderPipelineName, renderEffectName, cameras) {\n        const renderPipeline = this._renderPipelines[renderPipelineName];\n        if (!renderPipeline) {\n            return;\n        }\n        renderPipeline._disableEffect(renderEffectName, cameras);\n    }\n    /**\n     * Updates the state of all contained render pipelines and disposes of any non supported pipelines\n     */\n    update() {\n        for (const renderPipelineName in this._renderPipelines) {\n            if (Object.prototype.hasOwnProperty.call(this._renderPipelines, renderPipelineName)) {\n                const pipeline = this._renderPipelines[renderPipelineName];\n                if (!pipeline.isSupported) {\n                    pipeline.dispose();\n                    delete this._renderPipelines[renderPipelineName];\n                }\n                else {\n                    pipeline._update();\n                }\n            }\n        }\n    }\n    /** @internal */\n    _rebuild() {\n        for (const renderPipelineName in this._renderPipelines) {\n            if (Object.prototype.hasOwnProperty.call(this._renderPipelines, renderPipelineName)) {\n                const pipeline = this._renderPipelines[renderPipelineName];\n                pipeline._rebuild();\n            }\n        }\n    }\n    /**\n     * Disposes of the manager and pipelines\n     */\n    dispose() {\n        for (const renderPipelineName in this._renderPipelines) {\n            if (Object.prototype.hasOwnProperty.call(this._renderPipelines, renderPipelineName)) {\n                const pipeline = this._renderPipelines[renderPipelineName];\n                pipeline.dispose();\n            }\n        }\n    }\n}\n//# sourceMappingURL=postProcessRenderPipelineManager.js.map","import { SceneComponentConstants } from \"../../sceneComponent\";\nimport { PostProcessRenderPipelineManager } from \"./postProcessRenderPipelineManager\";\nimport { Scene } from \"../../scene\";\nObject.defineProperty(Scene.prototype, \"postProcessRenderPipelineManager\", {\n    get: function () {\n        if (!this._postProcessRenderPipelineManager) {\n            // Register the G Buffer component to the scene.\n            let component = this._getComponent(SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER);\n            if (!component) {\n                component = new PostProcessRenderPipelineManagerSceneComponent(this);\n                this._addComponent(component);\n            }\n            this._postProcessRenderPipelineManager = new PostProcessRenderPipelineManager();\n        }\n        return this._postProcessRenderPipelineManager;\n    },\n    enumerable: true,\n    configurable: true,\n});\n/**\n * Defines the Render Pipeline scene component responsible to rendering pipelines\n */\nexport class PostProcessRenderPipelineManagerSceneComponent {\n    /**\n     * Creates a new instance of the component for the given scene\n     * @param scene Defines the scene to register the component in\n     */\n    constructor(scene) {\n        /**\n         * The component name helpful to identify the component in the list of scene components.\n         */\n        this.name = SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER;\n        this.scene = scene;\n    }\n    /**\n     * Registers the component in a given scene\n     */\n    register() {\n        this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER, this, this._gatherRenderTargets);\n    }\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    rebuild() {\n        if (this.scene._postProcessRenderPipelineManager) {\n            this.scene._postProcessRenderPipelineManager._rebuild();\n        }\n    }\n    /**\n     * Disposes the component and the associated resources\n     */\n    dispose() {\n        if (this.scene._postProcessRenderPipelineManager) {\n            this.scene._postProcessRenderPipelineManager.dispose();\n        }\n    }\n    _gatherRenderTargets() {\n        if (this.scene._postProcessRenderPipelineManager) {\n            this.scene._postProcessRenderPipelineManager.update();\n        }\n    }\n}\n//# sourceMappingURL=postProcessRenderPipelineManagerSceneComponent.js.map"],"names":[],"mappings":"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"}