{"version":3,"file":"bvhFileLoader-B6csIH5P.esm.min.js","sources":["../../../../../dev/loaders/dist/BVH/bvhLoader.js","../../../../../dev/loaders/dist/BVH/bvhFileLoader.js"],"sourcesContent":["import { Animation } from \"core/Animations/animation\";\nimport { Bone } from \"core/Bones/bone\";\nimport { Skeleton } from \"core/Bones/skeleton\";\nimport { Matrix, Quaternion, Vector3 } from \"core/Maths/math.vector\";\nimport { Tools } from \"core/Misc/tools\";\nconst _XPosition = \"Xposition\";\nconst _YPosition = \"Yposition\";\nconst _ZPosition = \"Zposition\";\nconst _XRotation = \"Xrotation\";\nconst _YRotation = \"Yrotation\";\nconst _ZRotation = \"Zrotation\";\nconst _HierarchyNode = \"HIERARCHY\";\nconst _MotionNode = \"MOTION\";\nclass LoaderContext {\n    constructor(skeleton) {\n        this.loopMode = Animation.ANIMATIONLOOPMODE_CYCLE;\n        this.list = [];\n        this.root = CreateBVHNode();\n        this.numFrames = 0;\n        this.frameRate = 0;\n        this.skeleton = skeleton;\n    }\n}\nfunction CreateBVHNode() {\n    return {\n        name: \"\",\n        type: \"\",\n        offset: new Vector3(),\n        channels: [],\n        children: [],\n        frames: [],\n        parent: null,\n    };\n}\nfunction CreateBVHKeyFrame() {\n    return {\n        frame: 0,\n        position: new Vector3(),\n        rotation: new Quaternion(),\n    };\n}\n/**\n * Converts the BVH node's offset to a Babylon matrix\n * @param node - The BVH node to convert\n * @returns The converted matrix\n */\nfunction BoneOffset(node) {\n    const x = node.offset.x;\n    const y = node.offset.y;\n    const z = node.offset.z;\n    return Matrix.Translation(x, y, z);\n}\n/**\n * Creates animations for the BVH node\n * @param node - The BVH node to create animations for\n * @param context - The loader context\n * @returns The created animations\n */\nfunction CreateAnimations(node, context) {\n    if (node.frames.length === 0) {\n        return [];\n    }\n    const animations = [];\n    // Create position animation if there are position channels\n    const hasPosition = node.channels.some((c) => c === _XPosition || c === _YPosition || c === _ZPosition);\n    // Create rotation animation if there are rotation channels\n    const hasRotation = node.channels.some((c) => c === _XRotation || c === _YRotation || c === _ZRotation);\n    const posAnim = new Animation(`${node.name}_pos`, \"position\", context.frameRate, Animation.ANIMATIONTYPE_VECTOR3, context.loopMode);\n    const rotAnim = new Animation(`${node.name}_rot`, \"rotationQuaternion\", context.frameRate, Animation.ANIMATIONTYPE_QUATERNION, context.loopMode);\n    const posKeys = [];\n    const rotKeys = [];\n    for (let i = 0; i < node.frames.length; i++) {\n        const frame = node.frames[i];\n        if (hasPosition && frame.position) {\n            posKeys.push({\n                frame: frame.frame,\n                value: frame.position.clone(),\n            });\n        }\n        if (hasRotation) {\n            rotKeys.push({\n                frame: frame.frame,\n                value: frame.rotation.clone(),\n            });\n        }\n    }\n    if (posKeys.length > 0) {\n        posAnim.setKeys(posKeys);\n        animations.push(posAnim);\n    }\n    if (rotKeys.length > 0) {\n        rotAnim.setKeys(rotKeys);\n        animations.push(rotAnim);\n    }\n    return animations;\n}\n/**\n * Converts a BVH node to a Babylon bone\n * @param node - The BVH node to convert\n * @param parent - The parent bone\n * @param context - The loader context\n */\nfunction ConvertNode(node, parent, context) {\n    const matrix = BoneOffset(node);\n    const bone = new Bone(node.name, context.skeleton, parent, matrix);\n    // Create animation for this bone\n    const animations = CreateAnimations(node, context);\n    for (const animation of animations) {\n        if (animation.getKeys() && animation.getKeys().length > 0) {\n            bone.animations.push(animation);\n        }\n    }\n    for (const child of node.children) {\n        ConvertNode(child, bone, context);\n    }\n}\n/**\n * Recursively reads data from a single frame into the bone hierarchy.\n * The bone hierarchy has to be structured in the same order as the BVH file.\n * keyframe data is stored in bone.frames.\n * @param data - splitted string array (frame values), values are shift()ed\n * @param frameNumber - playback time for this keyframe\n * @param bone - the bone to read frame data from\n * @param tokenIndex - the index of the token to read\n */\nfunction ReadFrameData(data, frameNumber, bone, tokenIndex) {\n    if (bone.type === \"ENDSITE\") {\n        // end sites have no motion data\n        return;\n    }\n    // add keyframe\n    const keyframe = CreateBVHKeyFrame();\n    keyframe.frame = frameNumber;\n    keyframe.position = new Vector3();\n    keyframe.rotation = new Quaternion();\n    bone.frames.push(keyframe);\n    let combinedRotation = Matrix.Identity();\n    // parse values for each channel in node\n    for (let i = 0; i < bone.channels.length; ++i) {\n        const channel = bone.channels[i];\n        const value = data[tokenIndex.i++];\n        if (!value) {\n            continue;\n        }\n        const parsedValue = parseFloat(value.trim());\n        if (channel.endsWith(\"position\")) {\n            switch (channel) {\n                case _XPosition:\n                    keyframe.position.x = parsedValue;\n                    break;\n                case _YPosition:\n                    keyframe.position.y = parsedValue;\n                    break;\n                case _ZPosition:\n                    keyframe.position.z = parsedValue;\n                    break;\n            }\n        }\n        else if (channel.endsWith(\"rotation\")) {\n            const angle = Tools.ToRadians(parsedValue);\n            let rotationMatrix;\n            switch (channel) {\n                case _XRotation:\n                    rotationMatrix = Matrix.RotationX(angle);\n                    break;\n                case _YRotation:\n                    rotationMatrix = Matrix.RotationY(angle);\n                    break;\n                case _ZRotation:\n                    rotationMatrix = Matrix.RotationZ(angle);\n                    break;\n            }\n            combinedRotation = rotationMatrix.multiply(combinedRotation);\n        }\n    }\n    Quaternion.FromRotationMatrixToRef(combinedRotation, keyframe.rotation);\n    // parse child nodes\n    for (const child of bone.children) {\n        ReadFrameData(data, frameNumber, child, tokenIndex);\n    }\n}\n/**\n * Recursively parses the HIERARCHY section of the BVH file\n * @param lines - all lines of the file. lines are consumed as we go along\n * @param firstLine - line containing the node type and name e.g. \"JOINT hip\"\n * @param parent - the parent node for hierarchy\n * @param context - the loader context containing the list of nodes and other data\n * @returns a BVH node including children\n */\nfunction ReadNode(lines, firstLine, parent, context) {\n    const node = CreateBVHNode();\n    node.parent = parent;\n    context.list.push(node);\n    // parse node type and name.\n    let tokens = firstLine.trim().split(/\\s+/);\n    if (tokens[0].toUpperCase() === \"END\" && tokens[1].toUpperCase() === \"SITE\") {\n        node.type = \"ENDSITE\";\n        node.name = \"ENDSITE\"; // bvh end sites have no name\n    }\n    else {\n        node.name = tokens[1];\n        node.type = tokens[0].toUpperCase();\n    }\n    // opening bracket\n    if (lines.shift()?.trim() != \"{\") {\n        throw new Error(\"Expected opening { after type & name\");\n    }\n    // parse OFFSET\n    const tokensSplit = lines.shift()?.trim().split(/\\s+/);\n    if (!tokensSplit) {\n        throw new Error(\"Unexpected end of file: missing OFFSET\");\n    }\n    tokens = tokensSplit;\n    if (tokens[0].toUpperCase() != \"OFFSET\") {\n        throw new Error(\"Expected OFFSET, but got: \" + tokens[0]);\n    }\n    if (tokens.length != 4) {\n        throw new Error(\"OFFSET: Invalid number of values\");\n    }\n    const offset = new Vector3(parseFloat(tokens[1]), parseFloat(tokens[2]), parseFloat(tokens[3]));\n    if (isNaN(offset.x) || isNaN(offset.y) || isNaN(offset.z)) {\n        throw new Error(\"OFFSET: Invalid values\");\n    }\n    node.offset = offset;\n    // parse CHANNELS definitions\n    if (node.type != \"ENDSITE\") {\n        tokens = lines.shift()?.trim().split(/\\s+/);\n        if (!tokens) {\n            throw new Error(\"Unexpected end of file: missing CHANNELS\");\n        }\n        if (tokens[0].toUpperCase() != \"CHANNELS\") {\n            throw new Error(\"Expected CHANNELS definition\");\n        }\n        const numChannels = parseInt(tokens[1]);\n        // Skip CHANNELS and the number of channels\n        node.channels = tokens.splice(2, numChannels);\n        node.children = [];\n    }\n    // read children\n    while (lines.length > 0) {\n        const line = lines.shift()?.trim();\n        if (line === \"}\") {\n            // Finish reading the node\n            return node;\n        }\n        else if (line) {\n            node.children.push(ReadNode(lines, line, node, context));\n        }\n    }\n    throw new Error(\"Unexpected end of file: missing closing brace\");\n}\n/**\n * Reads a BVH file, returns a skeleton\n * @param text - The BVH file content\n * @param scene - The scene to add the skeleton to\n * @param assetContainer - The asset container to add the skeleton to\n * @param loadingOptions - The loading options\n * @returns The skeleton\n */\nexport function ReadBvh(text, scene, assetContainer, loadingOptions) {\n    const lines = text.split(\"\\n\");\n    const { loopMode } = loadingOptions;\n    scene._blockEntityCollection = !!assetContainer;\n    const skeleton = new Skeleton(\"\", \"\", scene);\n    skeleton._parentContainer = assetContainer;\n    scene._blockEntityCollection = false;\n    const context = new LoaderContext(skeleton);\n    context.loopMode = loopMode;\n    // read model structure\n    const firstLine = lines.shift();\n    if (!firstLine || firstLine.trim().toUpperCase() !== _HierarchyNode) {\n        throw new Error(\"HIERARCHY expected\");\n    }\n    const nodeLine = lines.shift();\n    if (!nodeLine) {\n        throw new Error(\"Unexpected end of file after HIERARCHY\");\n    }\n    const root = ReadNode(lines, nodeLine.trim(), null, context);\n    // read motion data\n    const motionLine = lines.shift();\n    if (!motionLine || motionLine.trim().toUpperCase() !== _MotionNode) {\n        throw new Error(\"MOTION expected\");\n    }\n    const framesLine = lines.shift();\n    if (!framesLine) {\n        throw new Error(\"Unexpected end of file before frame count\");\n    }\n    const framesTokens = framesLine.trim().split(/[\\s]+/);\n    if (framesTokens.length < 2) {\n        throw new Error(\"Invalid frame count line\");\n    }\n    // number of frames\n    const numFrames = parseInt(framesTokens[1]);\n    if (isNaN(numFrames)) {\n        throw new Error(\"Failed to read number of frames.\");\n    }\n    context.numFrames = numFrames;\n    // frame time\n    const frameTimeLine = lines.shift();\n    if (!frameTimeLine) {\n        throw new Error(\"Unexpected end of file before frame time\");\n    }\n    const frameTimeTokens = frameTimeLine.trim().split(/[\\s]+/);\n    if (frameTimeTokens.length < 3) {\n        throw new Error(\"Invalid frame time line\");\n    }\n    const frameTime = parseFloat(frameTimeTokens[2]);\n    if (isNaN(frameTime)) {\n        throw new Error(\"Failed to read frame time.\");\n    }\n    context.frameRate = frameTime;\n    // read frame data line by line\n    for (let i = 0; i < numFrames; ++i) {\n        const frameLine = lines.shift();\n        if (!frameLine) {\n            continue;\n        }\n        const tokens = frameLine.trim().split(/[\\s]+/) || [];\n        ReadFrameData(tokens, i, root, { i: 0 });\n    }\n    context.root = root;\n    ConvertNode(context.root, null, context);\n    context.skeleton.returnToRest();\n    return context.skeleton;\n}\n//# sourceMappingURL=bvhLoader.js.map","import { RegisterSceneLoaderPlugin } from \"core/Loading/sceneLoader\";\nimport { AssetContainer } from \"core/assetContainer\";\nimport { Animation } from \"core/Animations/animation\";\nimport { BVHFileLoaderMetadata } from \"./bvhFileLoader.metadata\";\nimport { ReadBvh } from \"./bvhLoader\";\n/**\n * @experimental\n * BVH file type loader.\n * This is a babylon scene loader plugin.\n */\nexport class BVHFileLoader {\n    /**\n     * Creates loader for bvh motion files\n     * @param loadingOptions - Options for the bvh loader\n     */\n    constructor(loadingOptions) {\n        /**\n         * Name of the loader (\"bvh\")\n         */\n        this.name = BVHFileLoaderMetadata.name;\n        /** @internal */\n        this.extensions = BVHFileLoaderMetadata.extensions;\n        this._loadingOptions = { ...BVHFileLoader._DefaultLoadingOptions, ...(loadingOptions ?? {}) };\n    }\n    static get _DefaultLoadingOptions() {\n        return {\n            loopMode: Animation.ANIMATIONLOOPMODE_CYCLE,\n        };\n    }\n    /** @internal */\n    createPlugin(options) {\n        return new BVHFileLoader(options[BVHFileLoaderMetadata.name]);\n    }\n    /**\n     * If the data string can be loaded directly.\n     * @returns if the data can be loaded directly\n     */\n    canDirectLoad() {\n        return true;\n    }\n    /**\n     * Imports  from the loaded gaussian splatting data and adds them to the scene\n     * @param _meshesNames a string or array of strings of the mesh names that should be loaded from the file\n     * @param scene the scene the meshes should be added to\n     * @param data the bvh data to load\n     * @returns a promise containing the loaded skeletons and animations\n     */\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    importMeshAsync(_meshesNames, scene, data) {\n        if (typeof data !== \"string\") {\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            return Promise.reject(\"BVH loader expects string data.\");\n        }\n        try {\n            const skeleton = ReadBvh(data, scene, null, this._loadingOptions);\n            return Promise.resolve({\n                meshes: [],\n                particleSystems: [],\n                skeletons: [skeleton],\n                animationGroups: [],\n                transformNodes: [],\n                geometries: [],\n                lights: [],\n                spriteManagers: [],\n            });\n        }\n        catch (e) {\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            return Promise.reject(e);\n        }\n    }\n    /**\n     * Imports all objects from the loaded bvh data and adds them to the scene\n     * @param scene the scene the objects should be added to\n     * @param data the bvh data to load\n     * @returns a promise which completes when objects have been loaded to the scene\n     */\n    // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/promise-function-async\n    loadAsync(scene, data) {\n        if (typeof data !== \"string\") {\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            return Promise.reject(\"BVH loader expects string data.\");\n        }\n        // eslint-disable-next-line github/no-then\n        return this.importMeshAsync(null, scene, data).then(() => {\n            // return void\n        });\n    }\n    /**\n     * Load into an asset container.\n     * @param scene The scene to load into\n     * @param data The data to import\n     * @returns The loaded asset container\n     */\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    loadAssetContainerAsync(scene, data) {\n        if (typeof data !== \"string\") {\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            return Promise.reject(\"BVH loader expects string data.\");\n        }\n        const assetContainer = new AssetContainer(scene);\n        try {\n            const skeleton = ReadBvh(data, scene, assetContainer, this._loadingOptions);\n            assetContainer.skeletons.push(skeleton);\n            return Promise.resolve(assetContainer);\n        }\n        catch (e) {\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            return Promise.reject(e);\n        }\n    }\n}\nRegisterSceneLoaderPlugin(new BVHFileLoader());\n//# sourceMappingURL=bvhFileLoader.js.map"],"names":["_XPosition","_YPosition","_ZPosition","_XRotation","_YRotation","_ZRotation","LoaderContext","constructor","skeleton","this","loopMode","Animation","ANIMATIONLOOPMODE_CYCLE","list","root","CreateBVHNode","numFrames","frameRate","name","type","offset","Vector3","channels","children","frames","parent","ConvertNode","node","context","matrix","x","y","z","Matrix","Translation","BoneOffset","bone","Bone","animations","length","hasPosition","some","c","hasRotation","posAnim","ANIMATIONTYPE_VECTOR3","rotAnim","ANIMATIONTYPE_QUATERNION","posKeys","rotKeys","i","frame","position","push","value","clone","rotation","setKeys","CreateAnimations","animation","getKeys","child","ReadFrameData","data","frameNumber","tokenIndex","keyframe","Quaternion","combinedRotation","Identity","channel","parsedValue","parseFloat","trim","endsWith","angle","Tools","ToRadians","rotationMatrix","RotationX","RotationY","RotationZ","multiply","FromRotationMatrixToRef","ReadNode","lines","firstLine","tokens","split","toUpperCase","shift","Error","tokensSplit","isNaN","numChannels","parseInt","splice","line","ReadBvh","text","scene","assetContainer","loadingOptions","_blockEntityCollection","Skeleton","_parentContainer","nodeLine","motionLine","framesLine","framesTokens","frameTimeLine","frameTimeTokens","frameTime","frameLine","returnToRest","BVHFileLoader","BVHFileLoaderMetadata","extensions","_loadingOptions","_DefaultLoadingOptions","createPlugin","options","canDirectLoad","importMeshAsync","_meshesNames","Promise","reject","resolve","meshes","particleSystems","skeletons","animationGroups","transformNodes","geometries","lights","spriteManagers","e","loadAsync","then","loadAssetContainerAsync","AssetContainer","RegisterSceneLoaderPlugin"],"mappings":"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"}