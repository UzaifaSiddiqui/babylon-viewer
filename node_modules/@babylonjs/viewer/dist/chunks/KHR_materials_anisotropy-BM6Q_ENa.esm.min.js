import{bM as e,bJ as s,bI as o}from"./index-VvGulz6u.esm.min.js";import{GLTFLoader as t}from"./glTFLoader-X6ZTOkAw.esm.min.js";import"./bone-DPw1oOFK.esm.min.js";import"./skeleton-BDCw4yVL.esm.min.js";import"./rawTexture-B-F8SA5B.esm.min.js";import"./assetContainer-Da0Xx6Do.esm.min.js";import"./objectModelMapping-CghNRpa4.esm.min.js";const r="KHR_materials_anisotropy";class n{constructor(e){this.name=r,this.order=195,this._loader=e,this.enabled=this._loader.isExtensionUsed(r)}dispose(){this._loader=null}loadMaterialPropertiesAsync(e,s,o){return t.LoadExtensionAsync(e,s,this.name,(async(t,r)=>{const n=new Array;n.push(this._loader.loadMaterialPropertiesAsync(e,s,o)),n.push(this._loadIridescencePropertiesAsync(t,r,o)),await Promise.all(n)}))}async _loadIridescencePropertiesAsync(s,o,t){if(!(t instanceof e))throw new Error(`${s}: Material type not supported`);const r=new Array;t.anisotropy.isEnabled=!0,t.anisotropy.intensity=o.anisotropyStrength??0,t.anisotropy.angle=o.anisotropyRotation??0,o.anisotropyTexture&&(o.anisotropyTexture.nonColorData=!0,r.push(this._loader.loadTextureInfoAsync(`${s}/anisotropyTexture`,o.anisotropyTexture,(e=>{e.name=`${t.name} (Anisotropy Intensity)`,t.anisotropy.texture=e})))),await Promise.all(r)}}s(r),o(r,!0,(e=>new n(e)));export{n as KHR_materials_anisotropy};
//# sourceMappingURL=KHR_materials_anisotropy-BM6Q_ENa.esm.min.js.map
