{"version":3,"file":"flowGraphMathBlocks-DSP2WuRX.esm.min.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Data/flowGraphConstantOperationBlock.js","../../../../../dev/core/dist/FlowGraph/Blocks/Data/flowGraphTernaryOperationBlock.js","../../../../../dev/core/dist/FlowGraph/Blocks/Data/Math/flowGraphMathBlocks.js"],"sourcesContent":["import { FlowGraphCachedOperationBlock } from \"./flowGraphCachedOperationBlock\";\n/**\n * Block that outputs a value of type ResultT, resulting of an operation with no inputs.\n * This block is being extended by some math operations and should not be used directly.\n * @internal\n */\nexport class FlowGraphConstantOperationBlock extends FlowGraphCachedOperationBlock {\n    constructor(richType, _operation, _className, config) {\n        super(richType, config);\n        this._operation = _operation;\n        this._className = _className;\n    }\n    /**\n     * the operation performed by this block\n     * @param context the graph context\n     * @returns the result of the operation\n     */\n    _doOperation(context) {\n        return this._operation(context);\n    }\n    /**\n     * Gets the class name of this block\n     * @returns the class name\n     */\n    getClassName() {\n        return this._className;\n    }\n}\n//# sourceMappingURL=flowGraphConstantOperationBlock.js.map","import { FlowGraphCachedOperationBlock } from \"./flowGraphCachedOperationBlock\";\n/**\n * @internal\n * The base block for all ternary operation blocks.\n */\nexport class FlowGraphTernaryOperationBlock extends FlowGraphCachedOperationBlock {\n    constructor(t1Type, t2Type, t3Type, resultRichType, _operation, _className, config) {\n        super(resultRichType, config);\n        this._operation = _operation;\n        this._className = _className;\n        this.a = this.registerDataInput(\"a\", t1Type);\n        this.b = this.registerDataInput(\"b\", t2Type);\n        this.c = this.registerDataInput(\"c\", t3Type);\n    }\n    /**\n     * the operation performed by this block\n     * @param context the graph context\n     * @returns the result of the operation\n     */\n    _doOperation(context) {\n        return this._operation(this.a.getValue(context), this.b.getValue(context), this.c.getValue(context));\n    }\n    /**\n     * Gets the class name of this block\n     * @returns the class name\n     */\n    getClassName() {\n        return this._className;\n    }\n}\n//# sourceMappingURL=flowGraphTernaryOperationBlock.js.map","import { RegisterClass } from \"../../../../Misc/typeStore\";\nimport { getRichTypeByFlowGraphType, RichTypeAny, RichTypeBoolean, RichTypeFlowGraphInteger, RichTypeNumber } from \"../../../flowGraphRichTypes\";\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\nimport { FlowGraphConstantOperationBlock } from \"../flowGraphConstantOperationBlock\";\nimport { Quaternion, Matrix, Vector2, Vector3, Vector4 } from \"../../../../Maths/math.vector\";\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\nimport { FlowGraphTernaryOperationBlock } from \"../flowGraphTernaryOperationBlock\";\nimport { FlowGraphInteger } from \"../../../CustomTypes/flowGraphInteger\";\nimport { FlowGraphMatrix2D, FlowGraphMatrix3D } from \"core/FlowGraph/CustomTypes/flowGraphMatrix\";\nimport { _AreSameIntegerClass, _AreSameMatrixClass, _AreSameVectorOrQuaternionClass, _GetClassNameOf, getNumericValue, isNumeric } from \"core/FlowGraph/utils\";\n/**\n * Polymorphic add block.\n */\nexport class FlowGraphAddBlock extends FlowGraphBinaryOperationBlock {\n    /**\n     * Construct a new add block.\n     * @param config optional configuration\n     */\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.type), getRichTypeByFlowGraphType(config?.type), getRichTypeByFlowGraphType(config?.type), (a, b) => this._polymorphicAdd(a, b), \"FlowGraphAddBlock\" /* FlowGraphBlockNames.Add */, config);\n    }\n    _polymorphicAdd(a, b) {\n        const aClassName = _GetClassNameOf(a);\n        const bClassName = _GetClassNameOf(b);\n        if (_AreSameVectorOrQuaternionClass(aClassName, bClassName) || _AreSameMatrixClass(aClassName, bClassName) || _AreSameIntegerClass(aClassName, bClassName)) {\n            // cast to vector3, but any other cast will be fine\n            return a.add(b);\n        }\n        else if (aClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */ || bClassName === \"Vector4\" /* FlowGraphTypes.Vector4 */) {\n            return new Vector4(a.x, a.y, a.z, a.w).addInPlace(b);\n        }\n        else if (aClassName === \"Vector4\" /* FlowGraphTypes.Vector4 */ || bClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */) {\n            return a.add(b);\n        }\n        else {\n            // at this point at least one of the variables is a number.\n            if (this.config?.preventIntegerFloatArithmetic && typeof a !== typeof b) {\n                throw new Error(\"Cannot add different types of numbers.\");\n            }\n            return getNumericValue(a) + getNumericValue(b);\n        }\n    }\n}\nRegisterClass(\"FlowGraphAddBlock\" /* FlowGraphBlockNames.Add */, FlowGraphAddBlock);\n/**\n * Polymorphic subtract block.\n */\nexport class FlowGraphSubtractBlock extends FlowGraphBinaryOperationBlock {\n    /**\n     * Construct a new subtract block.\n     * @param config optional configuration\n     */\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.type), getRichTypeByFlowGraphType(config?.type), getRichTypeByFlowGraphType(config?.type), (a, b) => this._polymorphicSubtract(a, b), \"FlowGraphSubtractBlock\" /* FlowGraphBlockNames.Subtract */, config);\n    }\n    _polymorphicSubtract(a, b) {\n        const aClassName = _GetClassNameOf(a);\n        const bClassName = _GetClassNameOf(b);\n        if (_AreSameVectorOrQuaternionClass(aClassName, bClassName) || _AreSameIntegerClass(aClassName, bClassName) || _AreSameMatrixClass(aClassName, bClassName)) {\n            // cast to vector3, but it can be casted to any vector type\n            return a.subtract(b);\n        }\n        else if (aClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */ || bClassName === \"Vector4\" /* FlowGraphTypes.Vector4 */) {\n            return new Vector4(a.x, a.y, a.z, a.w).subtractInPlace(b);\n        }\n        else if (aClassName === \"Vector4\" /* FlowGraphTypes.Vector4 */ || bClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */) {\n            return a.subtract(b);\n        }\n        else {\n            // at this point at least one of the variables is a number.\n            if (this.config?.preventIntegerFloatArithmetic && typeof a !== typeof b) {\n                throw new Error(\"Cannot add different types of numbers.\");\n            }\n            return getNumericValue(a) - getNumericValue(b);\n        }\n    }\n}\nRegisterClass(\"FlowGraphSubtractBlock\" /* FlowGraphBlockNames.Subtract */, FlowGraphSubtractBlock);\n/**\n * Polymorphic multiply block.\n * In case of matrix, it is configurable whether the multiplication is done per component.\n */\nexport class FlowGraphMultiplyBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.type), getRichTypeByFlowGraphType(config?.type), getRichTypeByFlowGraphType(config?.type), (a, b) => this._polymorphicMultiply(a, b), \"FlowGraphMultiplyBlock\" /* FlowGraphBlockNames.Multiply */, config);\n    }\n    _polymorphicMultiply(a, b) {\n        const aClassName = _GetClassNameOf(a);\n        const bClassName = _GetClassNameOf(b);\n        if (_AreSameVectorOrQuaternionClass(aClassName, bClassName) || _AreSameIntegerClass(aClassName, bClassName)) {\n            // cast to vector3, but it can be casted to any vector type\n            return a.multiply(b);\n        }\n        else if (aClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */ || bClassName === \"Vector4\" /* FlowGraphTypes.Vector4 */) {\n            return new Vector4(a.x, a.y, a.z, a.w).multiplyInPlace(b);\n        }\n        else if (aClassName === \"Vector4\" /* FlowGraphTypes.Vector4 */ || bClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */) {\n            return a.multiply(b);\n        }\n        else if (_AreSameMatrixClass(aClassName, bClassName)) {\n            if (this.config?.useMatrixPerComponent) {\n                // this is the definition of multiplication of glTF interactivity\n                // get a's m as array, and multiply each component with b's m\n                const aM = a.m;\n                for (let i = 0; i < aM.length; i++) {\n                    aM[i] *= b.m[i];\n                }\n                if (aClassName === \"Matrix2D\" /* FlowGraphTypes.Matrix2D */) {\n                    return new FlowGraphMatrix2D(aM);\n                }\n                else if (aClassName === \"Matrix3D\" /* FlowGraphTypes.Matrix3D */) {\n                    return new FlowGraphMatrix3D(aM);\n                }\n                else {\n                    return Matrix.FromArray(aM);\n                }\n            }\n            else {\n                a = a;\n                b = b;\n                return b.multiply(a);\n            }\n        }\n        else {\n            // at this point at least one of the variables is a number.\n            if (this.config?.preventIntegerFloatArithmetic && typeof a !== typeof b) {\n                throw new Error(\"Cannot add different types of numbers.\");\n            }\n            return getNumericValue(a) * getNumericValue(b);\n        }\n    }\n}\nRegisterClass(\"FlowGraphMultiplyBlock\" /* FlowGraphBlockNames.Multiply */, FlowGraphMultiplyBlock);\n/**\n * Polymorphic division block.\n */\nexport class FlowGraphDivideBlock extends FlowGraphBinaryOperationBlock {\n    /**\n     * Construct a new divide block.\n     * @param config - Optional configuration\n     */\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.type), getRichTypeByFlowGraphType(config?.type), getRichTypeByFlowGraphType(config?.type), (a, b) => this._polymorphicDivide(a, b), \"FlowGraphDivideBlock\" /* FlowGraphBlockNames.Divide */, config);\n    }\n    _polymorphicDivide(a, b) {\n        const aClassName = _GetClassNameOf(a);\n        const bClassName = _GetClassNameOf(b);\n        if (_AreSameVectorOrQuaternionClass(aClassName, bClassName) || _AreSameIntegerClass(aClassName, bClassName)) {\n            // cast to vector3, but it can be casted to any vector type\n            return a.divide(b);\n        }\n        else if (aClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */ || bClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */) {\n            // this is a simple division (per component!), and should be also supported between Quat and Vector4. Therefore -\n            const aClone = a.clone();\n            aClone.x /= b.x;\n            aClone.y /= b.y;\n            aClone.z /= b.z;\n            aClone.w /= b.w;\n            return aClone;\n        }\n        else if (aClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */ || bClassName === \"Vector4\" /* FlowGraphTypes.Vector4 */) {\n            return new Vector4(a.x, a.y, a.z, a.w).divideInPlace(b);\n        }\n        else if (aClassName === \"Vector4\" /* FlowGraphTypes.Vector4 */ || bClassName === \"Quaternion\" /* FlowGraphTypes.Quaternion */) {\n            return a.divide(b);\n        }\n        else if (_AreSameMatrixClass(aClassName, bClassName)) {\n            if (this.config?.useMatrixPerComponent) {\n                // get a's m as array, and divide each component with b's m\n                const aM = a.m;\n                for (let i = 0; i < aM.length; i++) {\n                    aM[i] /= b.m[i];\n                }\n                if (aClassName === \"Matrix2D\" /* FlowGraphTypes.Matrix2D */) {\n                    return new FlowGraphMatrix2D(aM);\n                }\n                else if (aClassName === \"Matrix3D\" /* FlowGraphTypes.Matrix3D */) {\n                    return new FlowGraphMatrix3D(aM);\n                }\n                else {\n                    return Matrix.FromArray(aM);\n                }\n            }\n            else {\n                a = a;\n                b = b;\n                return a.divide(b);\n            }\n        }\n        else {\n            // at this point at least one of the variables is a number.\n            if (this.config?.preventIntegerFloatArithmetic && typeof a !== typeof b) {\n                throw new Error(\"Cannot add different types of numbers.\");\n            }\n            return getNumericValue(a) / getNumericValue(b);\n        }\n    }\n}\nRegisterClass(\"FlowGraphDivideBlock\" /* FlowGraphBlockNames.Divide */, FlowGraphDivideBlock);\n/**\n * Random number between min and max (defaults to 0 to 1)\n *\n * This node will cache the result for he same node reference. i.e., a Math.eq that references the SAME random node will always return true.\n */\nexport class FlowGraphRandomBlock extends FlowGraphConstantOperationBlock {\n    /**\n     * Construct a new random block.\n     * @param config optional configuration\n     */\n    constructor(config) {\n        super(RichTypeNumber, (context) => this._random(context), \"FlowGraphRandomBlock\" /* FlowGraphBlockNames.Random */, config);\n        this.min = this.registerDataInput(\"min\", RichTypeNumber, config?.min ?? 0);\n        this.max = this.registerDataInput(\"max\", RichTypeNumber, config?.max ?? 1);\n        if (config?.seed) {\n            this._seed = config.seed;\n        }\n    }\n    _isSeed(seed = this._seed) {\n        return seed !== undefined;\n    }\n    _getRandomValue() {\n        if (this._isSeed(this._seed)) {\n            // compute seed-based random number, deterministic randomness!\n            const x = Math.sin(this._seed++) * 10000;\n            return x - Math.floor(x);\n        }\n        return Math.random();\n    }\n    _random(context) {\n        const min = this.min.getValue(context);\n        const max = this.max.getValue(context);\n        return this._getRandomValue() * (max - min) + min;\n    }\n}\nRegisterClass(\"FlowGraphRandomBlock\" /* FlowGraphBlockNames.Random */, FlowGraphRandomBlock);\n/**\n * E constant.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class FlowGraphEBlock extends FlowGraphConstantOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, () => Math.E, \"FlowGraphEBlock\" /* FlowGraphBlockNames.E */, config);\n    }\n}\nRegisterClass(\"FlowGraphEBlock\" /* FlowGraphBlockNames.E */, FlowGraphEBlock);\n/**\n * Pi constant.\n */\nexport class FlowGraphPiBlock extends FlowGraphConstantOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, () => Math.PI, \"FlowGraphPIBlock\" /* FlowGraphBlockNames.PI */, config);\n    }\n}\nRegisterClass(\"FlowGraphPIBlock\" /* FlowGraphBlockNames.PI */, FlowGraphPiBlock);\n/**\n * Positive inf constant.\n */\nexport class FlowGraphInfBlock extends FlowGraphConstantOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, () => Number.POSITIVE_INFINITY, \"FlowGraphInfBlock\" /* FlowGraphBlockNames.Inf */, config);\n    }\n}\nRegisterClass(\"FlowGraphInfBlock\" /* FlowGraphBlockNames.Inf */, FlowGraphInfBlock);\n/**\n * NaN constant.\n */\nexport class FlowGraphNaNBlock extends FlowGraphConstantOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, () => Number.NaN, \"FlowGraphNaNBlock\" /* FlowGraphBlockNames.NaN */, config);\n    }\n}\nRegisterClass(\"FlowGraphNaNBlock\" /* FlowGraphBlockNames.NaN */, FlowGraphNaNBlock);\nfunction ComponentWiseUnaryOperation(a, op) {\n    const aClassName = _GetClassNameOf(a);\n    switch (aClassName) {\n        case \"FlowGraphInteger\":\n            a = a;\n            return new FlowGraphInteger(op(a.value));\n        case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n            a = a;\n            return new Vector2(op(a.x), op(a.y));\n        case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n            a = a;\n            return new Vector3(op(a.x), op(a.y), op(a.z));\n        case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n            a = a;\n            return new Vector4(op(a.x), op(a.y), op(a.z), op(a.w));\n        case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n            a = a;\n            return new Quaternion(op(a.x), op(a.y), op(a.z), op(a.w));\n        case \"Matrix\" /* FlowGraphTypes.Matrix */:\n            a = a;\n            return Matrix.FromArray(a.m.map(op));\n        case \"Matrix2D\" /* FlowGraphTypes.Matrix2D */:\n            a = a;\n            // reason for not using .map is performance\n            return new FlowGraphMatrix2D(a.m.map(op));\n        case \"Matrix3D\" /* FlowGraphTypes.Matrix3D */:\n            a = a;\n            return new FlowGraphMatrix3D(a.m.map(op));\n        default:\n            a = a;\n            return op(a);\n    }\n}\n/**\n * Absolute value block.\n */\nexport class FlowGraphAbsBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicAbs(a), \"FlowGraphAbsBlock\" /* FlowGraphBlockNames.Abs */, config);\n    }\n    _polymorphicAbs(a) {\n        return ComponentWiseUnaryOperation(a, Math.abs);\n    }\n}\nRegisterClass(\"FlowGraphAbsBlock\" /* FlowGraphBlockNames.Abs */, FlowGraphAbsBlock);\n/**\n * Sign block.\n */\nexport class FlowGraphSignBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicSign(a), \"FlowGraphSignBlock\" /* FlowGraphBlockNames.Sign */, config);\n    }\n    _polymorphicSign(a) {\n        return ComponentWiseUnaryOperation(a, Math.sign);\n    }\n}\nRegisterClass(\"FlowGraphSignBlock\" /* FlowGraphBlockNames.Sign */, FlowGraphSignBlock);\n/**\n * Truncation block.\n */\nexport class FlowGraphTruncBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicTrunc(a), \"FlowGraphTruncBlock\" /* FlowGraphBlockNames.Trunc */, config);\n    }\n    _polymorphicTrunc(a) {\n        return ComponentWiseUnaryOperation(a, Math.trunc);\n    }\n}\nRegisterClass(\"FlowGraphTruncBlock\" /* FlowGraphBlockNames.Trunc */, FlowGraphTruncBlock);\n/**\n * Floor block.\n */\nexport class FlowGraphFloorBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicFloor(a), \"FlowGraphFloorBlock\" /* FlowGraphBlockNames.Floor */, config);\n    }\n    _polymorphicFloor(a) {\n        return ComponentWiseUnaryOperation(a, Math.floor);\n    }\n}\nRegisterClass(\"FlowGraphFloorBlock\" /* FlowGraphBlockNames.Floor */, FlowGraphFloorBlock);\n/**\n * Ceiling block.\n */\nexport class FlowGraphCeilBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicCeiling(a), \"FlowGraphCeilBlock\" /* FlowGraphBlockNames.Ceil */, config);\n    }\n    _polymorphicCeiling(a) {\n        return ComponentWiseUnaryOperation(a, Math.ceil);\n    }\n}\nRegisterClass(\"FlowGraphCeilBlock\" /* FlowGraphBlockNames.Ceil */, FlowGraphCeilBlock);\n/**\n * Round block.\n */\nexport class FlowGraphRoundBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicRound(a), \"FlowGraphRoundBlock\" /* FlowGraphBlockNames.Round */, config);\n    }\n    _polymorphicRound(a) {\n        return ComponentWiseUnaryOperation(a, (a) => (a < 0 && this.config?.roundHalfAwayFromZero ? -Math.round(-a) : Math.round(a)));\n    }\n}\nRegisterClass(\"FlowGraphRoundBlock\" /* FlowGraphBlockNames.Round */, FlowGraphRoundBlock);\n/**\n * A block that returns the fractional part of a number.\n */\nexport class FlowGraphFractionBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicFraction(a), \"FlowGraphFractBlock\" /* FlowGraphBlockNames.Fraction */, config);\n    }\n    _polymorphicFraction(a) {\n        return ComponentWiseUnaryOperation(a, (a) => a - Math.floor(a));\n    }\n}\nRegisterClass(\"FlowGraphFractBlock\" /* FlowGraphBlockNames.Fraction */, FlowGraphFractionBlock);\n/**\n * Negation block.\n */\nexport class FlowGraphNegationBlock extends FlowGraphUnaryOperationBlock {\n    /**\n     * construct a new negation block.\n     * @param config optional configuration\n     */\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicNeg(a), \"FlowGraphNegationBlock\" /* FlowGraphBlockNames.Negation */, config);\n    }\n    _polymorphicNeg(a) {\n        return ComponentWiseUnaryOperation(a, (a) => -a);\n    }\n}\nRegisterClass(\"FlowGraphNegationBlock\" /* FlowGraphBlockNames.Negation */, FlowGraphNegationBlock);\nfunction ComponentWiseBinaryOperation(a, b, op) {\n    const aClassName = _GetClassNameOf(a);\n    switch (aClassName) {\n        case \"FlowGraphInteger\":\n            a = a;\n            b = b;\n            return new FlowGraphInteger(op(a.value, b.value));\n        case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n            a = a;\n            b = b;\n            return new Vector2(op(a.x, b.x), op(a.y, b.y));\n        case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n            a = a;\n            b = b;\n            return new Vector3(op(a.x, b.x), op(a.y, b.y), op(a.z, b.z));\n        case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n            a = a;\n            b = b;\n            return new Vector4(op(a.x, b.x), op(a.y, b.y), op(a.z, b.z), op(a.w, b.w));\n        case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n            a = a;\n            b = b;\n            return new Quaternion(op(a.x, b.x), op(a.y, b.y), op(a.z, b.z), op(a.w, b.w));\n        case \"Matrix\" /* FlowGraphTypes.Matrix */:\n            a = a;\n            return Matrix.FromArray(a.m.map((v, i) => op(v, b.m[i])));\n        case \"Matrix2D\" /* FlowGraphTypes.Matrix2D */:\n            a = a;\n            return new FlowGraphMatrix2D(a.m.map((v, i) => op(v, b.m[i])));\n        case \"Matrix3D\" /* FlowGraphTypes.Matrix3D */:\n            a = a;\n            return new FlowGraphMatrix3D(a.m.map((v, i) => op(v, b.m[i])));\n        default:\n            return op(getNumericValue(a), getNumericValue(b));\n    }\n}\n/**\n * Remainder block.\n */\nexport class FlowGraphModuloBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicRemainder(a, b), \"FlowGraphModuloBlock\" /* FlowGraphBlockNames.Modulo */, config);\n    }\n    _polymorphicRemainder(a, b) {\n        return ComponentWiseBinaryOperation(a, b, (a, b) => a % b);\n    }\n}\nRegisterClass(\"FlowGraphModuloBlock\" /* FlowGraphBlockNames.Modulo */, FlowGraphModuloBlock);\n/**\n * Min block.\n */\nexport class FlowGraphMinBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicMin(a, b), \"FlowGraphMinBlock\" /* FlowGraphBlockNames.Min */, config);\n    }\n    _polymorphicMin(a, b) {\n        return ComponentWiseBinaryOperation(a, b, Math.min);\n    }\n}\nRegisterClass(\"FlowGraphMinBlock\" /* FlowGraphBlockNames.Min */, FlowGraphMinBlock);\n/**\n * Max block\n */\nexport class FlowGraphMaxBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicMax(a, b), \"FlowGraphMaxBlock\" /* FlowGraphBlockNames.Max */, config);\n    }\n    _polymorphicMax(a, b) {\n        return ComponentWiseBinaryOperation(a, b, Math.max);\n    }\n}\nRegisterClass(\"FlowGraphMaxBlock\" /* FlowGraphBlockNames.Max */, FlowGraphMaxBlock);\nfunction Clamp(a, b, c) {\n    return Math.min(Math.max(a, Math.min(b, c)), Math.max(b, c));\n}\nfunction ComponentWiseTernaryOperation(a, b, c, op) {\n    const aClassName = _GetClassNameOf(a);\n    switch (aClassName) {\n        case \"FlowGraphInteger\":\n            a = a;\n            b = b;\n            c = c;\n            return new FlowGraphInteger(op(a.value, b.value, c.value));\n        case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n            a = a;\n            b = b;\n            c = c;\n            return new Vector2(op(a.x, b.x, c.x), op(a.y, b.y, c.y));\n        case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n            a = a;\n            b = b;\n            c = c;\n            return new Vector3(op(a.x, b.x, c.x), op(a.y, b.y, c.y), op(a.z, b.z, c.z));\n        case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n            a = a;\n            b = b;\n            c = c;\n            return new Vector4(op(a.x, b.x, c.x), op(a.y, b.y, c.y), op(a.z, b.z, c.z), op(a.w, b.w, c.w));\n        case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n            a = a;\n            b = b;\n            c = c;\n            return new Quaternion(op(a.x, b.x, c.x), op(a.y, b.y, c.y), op(a.z, b.z, c.z), op(a.w, b.w, c.w));\n        case \"Matrix\" /* FlowGraphTypes.Matrix */:\n            return Matrix.FromArray(a.m.map((v, i) => op(v, b.m[i], c.m[i])));\n        case \"Matrix2D\" /* FlowGraphTypes.Matrix2D */:\n            return new FlowGraphMatrix2D(a.m.map((v, i) => op(v, b.m[i], c.m[i])));\n        case \"Matrix3D\" /* FlowGraphTypes.Matrix3D */:\n            return new FlowGraphMatrix3D(a.m.map((v, i) => op(v, b.m[i], c.m[i])));\n        default:\n            return op(getNumericValue(a), getNumericValue(b), getNumericValue(c));\n    }\n}\n/**\n * Clamp block.\n */\nexport class FlowGraphClampBlock extends FlowGraphTernaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeAny, RichTypeAny, (a, b, c) => this._polymorphicClamp(a, b, c), \"FlowGraphClampBlock\" /* FlowGraphBlockNames.Clamp */, config);\n    }\n    _polymorphicClamp(a, b, c) {\n        return ComponentWiseTernaryOperation(a, b, c, Clamp);\n    }\n}\nRegisterClass(\"FlowGraphClampBlock\" /* FlowGraphBlockNames.Clamp */, FlowGraphClampBlock);\nfunction Saturate(a) {\n    return Math.min(Math.max(a, 0), 1);\n}\n/**\n * Saturate block.\n */\nexport class FlowGraphSaturateBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicSaturate(a), \"FlowGraphSaturateBlock\" /* FlowGraphBlockNames.Saturate */, config);\n    }\n    _polymorphicSaturate(a) {\n        return ComponentWiseUnaryOperation(a, Saturate);\n    }\n}\nRegisterClass(\"FlowGraphSaturateBlock\" /* FlowGraphBlockNames.Saturate */, FlowGraphSaturateBlock);\nfunction Interpolate(a, b, c) {\n    return (1 - c) * a + c * b;\n}\n/**\n * Interpolate block.\n */\nexport class FlowGraphMathInterpolationBlock extends FlowGraphTernaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeAny, RichTypeAny, (a, b, c) => this._polymorphicInterpolate(a, b, c), \"FlowGraphMathInterpolationBlock\" /* FlowGraphBlockNames.MathInterpolation */, config);\n    }\n    _polymorphicInterpolate(a, b, c) {\n        return ComponentWiseTernaryOperation(a, b, c, Interpolate);\n    }\n}\nRegisterClass(\"FlowGraphMathInterpolationBlock\" /* FlowGraphBlockNames.MathInterpolation */, FlowGraphMathInterpolationBlock);\n/**\n * Equals block.\n */\nexport class FlowGraphEqualityBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicEq(a, b), \"FlowGraphEqualityBlock\" /* FlowGraphBlockNames.Equality */, config);\n    }\n    _polymorphicEq(a, b) {\n        const aClassName = _GetClassNameOf(a);\n        const bClassName = _GetClassNameOf(b);\n        if (typeof a !== typeof b) {\n            return false;\n        }\n        if (_AreSameVectorOrQuaternionClass(aClassName, bClassName) || _AreSameMatrixClass(aClassName, bClassName) || _AreSameIntegerClass(aClassName, bClassName)) {\n            return a.equals(b);\n        }\n        else {\n            return a === b;\n        }\n    }\n}\nRegisterClass(\"FlowGraphEqualityBlock\" /* FlowGraphBlockNames.Equality */, FlowGraphEqualityBlock);\nfunction ComparisonOperators(a, b, op) {\n    if (isNumeric(a) && isNumeric(b)) {\n        return op(getNumericValue(a), getNumericValue(b));\n    }\n    else {\n        throw new Error(`Cannot compare ${a} and ${b}`);\n    }\n}\n/**\n * Less than block.\n */\nexport class FlowGraphLessThanBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicLessThan(a, b), \"FlowGraphLessThanBlock\" /* FlowGraphBlockNames.LessThan */, config);\n    }\n    _polymorphicLessThan(a, b) {\n        return ComparisonOperators(a, b, (a, b) => a < b);\n    }\n}\nRegisterClass(\"FlowGraphLessThanBlock\" /* FlowGraphBlockNames.LessThan */, FlowGraphLessThanBlock);\n/**\n * Less than or equal block.\n */\nexport class FlowGraphLessThanOrEqualBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicLessThanOrEqual(a, b), \"FlowGraphLessThanOrEqualBlock\" /* FlowGraphBlockNames.LessThanOrEqual */, config);\n    }\n    _polymorphicLessThanOrEqual(a, b) {\n        return ComparisonOperators(a, b, (a, b) => a <= b);\n    }\n}\nRegisterClass(\"FlowGraphLessThanOrEqualBlock\" /* FlowGraphBlockNames.LessThanOrEqual */, FlowGraphLessThanOrEqualBlock);\n/**\n * Greater than block.\n */\nexport class FlowGraphGreaterThanBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicGreaterThan(a, b), \"FlowGraphGreaterThanBlock\" /* FlowGraphBlockNames.GreaterThan */, config);\n    }\n    _polymorphicGreaterThan(a, b) {\n        return ComparisonOperators(a, b, (a, b) => a > b);\n    }\n}\nRegisterClass(\"FlowGraphGreaterThanBlock\" /* FlowGraphBlockNames.GreaterThan */, FlowGraphGreaterThanBlock);\n/**\n * Greater than or equal block.\n */\nexport class FlowGraphGreaterThanOrEqualBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicGreaterThanOrEqual(a, b), \"FlowGraphGreaterThanOrEqualBlock\" /* FlowGraphBlockNames.GreaterThanOrEqual */, config);\n    }\n    _polymorphicGreaterThanOrEqual(a, b) {\n        return ComparisonOperators(a, b, (a, b) => a >= b);\n    }\n}\nRegisterClass(\"FlowGraphGreaterThanOrEqualBlock\" /* FlowGraphBlockNames.GreaterThanOrEqual */, FlowGraphGreaterThanOrEqualBlock);\n/**\n * Is NaN block.\n */\nexport class FlowGraphIsNanBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeBoolean, (a) => this._polymorphicIsNan(a), \"FlowGraphIsNaNBlock\" /* FlowGraphBlockNames.IsNaN */, config);\n    }\n    _polymorphicIsNan(a) {\n        if (isNumeric(a, true)) {\n            return isNaN(getNumericValue(a));\n        }\n        else {\n            throw new Error(`Cannot get NaN of ${a}`);\n        }\n    }\n}\nRegisterClass(\"FlowGraphIsNaNBlock\" /* FlowGraphBlockNames.IsNaN */, FlowGraphIsNanBlock);\n/**\n * Is Inf block.\n */\nexport class FlowGraphIsInfinityBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeBoolean, (a) => this._polymorphicIsInf(a), \"FlowGraphIsInfBlock\" /* FlowGraphBlockNames.IsInfinity */, config);\n    }\n    _polymorphicIsInf(a) {\n        if (isNumeric(a)) {\n            return !isFinite(getNumericValue(a));\n        }\n        else {\n            throw new Error(`Cannot get isInf of ${a}`);\n        }\n    }\n}\nRegisterClass(\"FlowGraphIsInfBlock\" /* FlowGraphBlockNames.IsInfinity */, FlowGraphIsInfinityBlock);\n/**\n * Convert degrees to radians block.\n */\nexport class FlowGraphDegToRadBlock extends FlowGraphUnaryOperationBlock {\n    /**\n     * Constructs a new instance of the flow graph math block.\n     * @param config - Optional configuration for the flow graph block.\n     */\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicDegToRad(a), \"FlowGraphDegToRadBlock\" /* FlowGraphBlockNames.DegToRad */, config);\n    }\n    _degToRad(a) {\n        return (a * Math.PI) / 180;\n    }\n    _polymorphicDegToRad(a) {\n        return ComponentWiseUnaryOperation(a, this._degToRad);\n    }\n}\nRegisterClass(\"FlowGraphDegToRadBlock\" /* FlowGraphBlockNames.DegToRad */, FlowGraphDegToRadBlock);\n/**\n * Convert radians to degrees block.\n */\nexport class FlowGraphRadToDegBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicRadToDeg(a), \"FlowGraphRadToDegBlock\" /* FlowGraphBlockNames.RadToDeg */, config);\n    }\n    _radToDeg(a) {\n        return (a * 180) / Math.PI;\n    }\n    _polymorphicRadToDeg(a) {\n        return ComponentWiseUnaryOperation(a, this._radToDeg);\n    }\n}\nRegisterClass(\"FlowGraphRadToDegBlock\" /* FlowGraphBlockNames.RadToDeg */, FlowGraphRadToDegBlock);\n/**\n * Sin block.\n */\nexport class FlowGraphSinBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicSin(a), \"FlowGraphSinBlock\" /* FlowGraphBlockNames.Sin */, config);\n    }\n    _polymorphicSin(a) {\n        return ComponentWiseUnaryOperation(a, Math.sin);\n    }\n}\n/**\n * Cos block.\n */\nexport class FlowGraphCosBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicCos(a), \"FlowGraphCosBlock\" /* FlowGraphBlockNames.Cos */, config);\n    }\n    _polymorphicCos(a) {\n        return ComponentWiseUnaryOperation(a, Math.cos);\n    }\n}\n/**\n * Tan block.\n */\nexport class FlowGraphTanBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicTan(a), \"FlowGraphTanBlock\" /* FlowGraphBlockNames.Tan */, config);\n    }\n    _polymorphicTan(a) {\n        return ComponentWiseUnaryOperation(a, Math.tan);\n    }\n}\n/**\n * Arcsin block.\n */\nexport class FlowGraphAsinBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicAsin(a), \"FlowGraphASinBlock\" /* FlowGraphBlockNames.Asin */, config);\n    }\n    _polymorphicAsin(a) {\n        return ComponentWiseUnaryOperation(a, Math.asin);\n    }\n}\nRegisterClass(\"FlowGraphASinBlock\" /* FlowGraphBlockNames.Asin */, FlowGraphAsinBlock);\n/**\n * Arccos block.\n */\nexport class FlowGraphAcosBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicAcos(a), \"FlowGraphACosBlock\" /* FlowGraphBlockNames.Acos */, config);\n    }\n    _polymorphicAcos(a) {\n        return ComponentWiseUnaryOperation(a, Math.acos);\n    }\n}\nRegisterClass(\"FlowGraphACosBlock\" /* FlowGraphBlockNames.Acos */, FlowGraphAcosBlock);\n/**\n * Arctan block.\n */\nexport class FlowGraphAtanBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicAtan(a), \"FlowGraphATanBlock\" /* FlowGraphBlockNames.Atan */, config);\n    }\n    _polymorphicAtan(a) {\n        return ComponentWiseUnaryOperation(a, Math.atan);\n    }\n}\nRegisterClass(\"FlowGraphATanBlock\" /* FlowGraphBlockNames.Atan */, FlowGraphAtanBlock);\n/**\n * Arctan2 block.\n */\nexport class FlowGraphAtan2Block extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicAtan2(a, b), \"FlowGraphATan2Block\" /* FlowGraphBlockNames.Atan2 */, config);\n    }\n    _polymorphicAtan2(a, b) {\n        return ComponentWiseBinaryOperation(a, b, Math.atan2);\n    }\n}\nRegisterClass(\"FlowGraphATan2Block\" /* FlowGraphBlockNames.Atan2 */, FlowGraphAtan2Block);\n/**\n * Hyperbolic sin block.\n */\nexport class FlowGraphSinhBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicSinh(a), \"FlowGraphSinhBlock\" /* FlowGraphBlockNames.Sinh */, config);\n    }\n    _polymorphicSinh(a) {\n        return ComponentWiseUnaryOperation(a, Math.sinh);\n    }\n}\nRegisterClass(\"FlowGraphSinhBlock\" /* FlowGraphBlockNames.Sinh */, FlowGraphSinhBlock);\n/**\n * Hyperbolic cos block.\n */\nexport class FlowGraphCoshBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicCosh(a), \"FlowGraphCoshBlock\" /* FlowGraphBlockNames.Cosh */, config);\n    }\n    _polymorphicCosh(a) {\n        return ComponentWiseUnaryOperation(a, Math.cosh);\n    }\n}\nRegisterClass(\"FlowGraphCoshBlock\" /* FlowGraphBlockNames.Cosh */, FlowGraphCoshBlock);\n/**\n * Hyperbolic tan block.\n */\nexport class FlowGraphTanhBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicTanh(a), \"FlowGraphTanhBlock\" /* FlowGraphBlockNames.Tanh */, config);\n    }\n    _polymorphicTanh(a) {\n        return ComponentWiseUnaryOperation(a, Math.tanh);\n    }\n}\nRegisterClass(\"FlowGraphTanhBlock\" /* FlowGraphBlockNames.Tanh */, FlowGraphTanhBlock);\n/**\n * Hyperbolic arcsin block.\n */\nexport class FlowGraphAsinhBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicAsinh(a), \"FlowGraphASinhBlock\" /* FlowGraphBlockNames.Asinh */, config);\n    }\n    _polymorphicAsinh(a) {\n        return ComponentWiseUnaryOperation(a, Math.asinh);\n    }\n}\nRegisterClass(\"FlowGraphASinhBlock\" /* FlowGraphBlockNames.Asinh */, FlowGraphAsinhBlock);\n/**\n * Hyperbolic arccos block.\n */\nexport class FlowGraphAcoshBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicAcosh(a), \"FlowGraphACoshBlock\" /* FlowGraphBlockNames.Acosh */, config);\n    }\n    _polymorphicAcosh(a) {\n        return ComponentWiseUnaryOperation(a, Math.acosh);\n    }\n}\nRegisterClass(\"FlowGraphACoshBlock\" /* FlowGraphBlockNames.Acosh */, FlowGraphAcoshBlock);\n/**\n * Hyperbolic arctan block.\n */\nexport class FlowGraphAtanhBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicAtanh(a), \"FlowGraphATanhBlock\" /* FlowGraphBlockNames.Atanh */, config);\n    }\n    _polymorphicAtanh(a) {\n        return ComponentWiseUnaryOperation(a, Math.atanh);\n    }\n}\nRegisterClass(\"FlowGraphATanhBlock\" /* FlowGraphBlockNames.Atanh */, FlowGraphAtanhBlock);\n/**\n * Exponential block.\n */\nexport class FlowGraphExpBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicExp(a), \"FlowGraphExponentialBlock\" /* FlowGraphBlockNames.Exponential */, config);\n    }\n    _polymorphicExp(a) {\n        return ComponentWiseUnaryOperation(a, Math.exp);\n    }\n}\nRegisterClass(\"FlowGraphExponentialBlock\" /* FlowGraphBlockNames.Exponential */, FlowGraphExpBlock);\n/**\n * Logarithm block.\n */\nexport class FlowGraphLogBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicLog(a), \"FlowGraphLogBlock\" /* FlowGraphBlockNames.Log */, config);\n    }\n    _polymorphicLog(a) {\n        return ComponentWiseUnaryOperation(a, Math.log);\n    }\n}\nRegisterClass(\"FlowGraphLogBlock\" /* FlowGraphBlockNames.Log */, FlowGraphLogBlock);\n/**\n * Base 2 logarithm block.\n */\nexport class FlowGraphLog2Block extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicLog2(a), \"FlowGraphLog2Block\" /* FlowGraphBlockNames.Log2 */, config);\n    }\n    _polymorphicLog2(a) {\n        return ComponentWiseUnaryOperation(a, Math.log2);\n    }\n}\nRegisterClass(\"FlowGraphLog2Block\" /* FlowGraphBlockNames.Log2 */, FlowGraphLog2Block);\n/**\n * Base 10 logarithm block.\n */\nexport class FlowGraphLog10Block extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicLog10(a), \"FlowGraphLog10Block\" /* FlowGraphBlockNames.Log10 */, config);\n    }\n    _polymorphicLog10(a) {\n        return ComponentWiseUnaryOperation(a, Math.log10);\n    }\n}\nRegisterClass(\"FlowGraphLog10Block\" /* FlowGraphBlockNames.Log10 */, FlowGraphLog10Block);\n/**\n * Square root block.\n */\nexport class FlowGraphSquareRootBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicSqrt(a), \"FlowGraphSquareRootBlock\" /* FlowGraphBlockNames.SquareRoot */, config);\n    }\n    _polymorphicSqrt(a) {\n        return ComponentWiseUnaryOperation(a, Math.sqrt);\n    }\n}\nRegisterClass(\"FlowGraphSquareRootBlock\" /* FlowGraphBlockNames.SquareRoot */, FlowGraphSquareRootBlock);\n/**\n * Cube root block.\n */\nexport class FlowGraphCubeRootBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicCubeRoot(a), \"FlowGraphCubeRootBlock\" /* FlowGraphBlockNames.CubeRoot */, config);\n    }\n    _polymorphicCubeRoot(a) {\n        return ComponentWiseUnaryOperation(a, Math.cbrt);\n    }\n}\nRegisterClass(\"FlowGraphCubeRootBlock\" /* FlowGraphBlockNames.CubeRoot */, FlowGraphCubeRootBlock);\n/**\n * Power block.\n */\nexport class FlowGraphPowerBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeAny, RichTypeNumber, RichTypeNumber, (a, b) => this._polymorphicPow(a, b), \"FlowGraphPowerBlock\" /* FlowGraphBlockNames.Power */, config);\n    }\n    _polymorphicPow(a, b) {\n        return ComponentWiseBinaryOperation(a, b, Math.pow);\n    }\n}\nRegisterClass(\"FlowGraphPowerBlock\" /* FlowGraphBlockNames.Power */, FlowGraphPowerBlock);\n/**\n * Bitwise NOT operation\n */\nexport class FlowGraphBitwiseNotBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), (a) => {\n            if (typeof a === \"boolean\") {\n                return !a;\n            }\n            else if (typeof a === \"number\") {\n                return ~a;\n            }\n            return new FlowGraphInteger(~a.value);\n        }, \"FlowGraphBitwiseNotBlock\" /* FlowGraphBlockNames.BitwiseNot */, config);\n    }\n}\nRegisterClass(\"FlowGraphBitwiseNotBlock\" /* FlowGraphBlockNames.BitwiseNot */, FlowGraphBitwiseNotBlock);\n/**\n * Bitwise AND operation\n */\nexport class FlowGraphBitwiseAndBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), (a, b) => {\n            if (typeof a === \"boolean\" && typeof b === \"boolean\") {\n                return a && b;\n            }\n            else if (typeof a === \"number\" && typeof b === \"number\") {\n                return a & b;\n            }\n            else if (typeof a === \"object\" && typeof b === \"object\") {\n                return new FlowGraphInteger(a.value & b.value);\n            }\n            else {\n                throw new Error(`Cannot perform bitwise AND on ${a} and ${b}`);\n            }\n        }, \"FlowGraphBitwiseAndBlock\" /* FlowGraphBlockNames.BitwiseAnd */, config);\n    }\n}\nRegisterClass(\"FlowGraphBitwiseAndBlock\" /* FlowGraphBlockNames.BitwiseAnd */, FlowGraphBitwiseAndBlock);\n/**\n * Bitwise OR operation\n */\nexport class FlowGraphBitwiseOrBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), (a, b) => {\n            if (typeof a === \"boolean\" && typeof b === \"boolean\") {\n                return a || b;\n            }\n            else if (typeof a === \"number\" && typeof b === \"number\") {\n                return a | b;\n            }\n            else if (typeof a === \"object\" && typeof b === \"object\") {\n                return new FlowGraphInteger(a.value | b.value);\n            }\n            else {\n                throw new Error(`Cannot perform bitwise OR on ${a} and ${b}`);\n            }\n        }, \"FlowGraphBitwiseOrBlock\" /* FlowGraphBlockNames.BitwiseOr */, config);\n    }\n}\nRegisterClass(\"FlowGraphBitwiseOrBlock\" /* FlowGraphBlockNames.BitwiseOr */, FlowGraphBitwiseOrBlock);\n/**\n * Bitwise XOR operation\n */\nexport class FlowGraphBitwiseXorBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), getRichTypeByFlowGraphType(config?.valueType || \"FlowGraphInteger\" /* FlowGraphTypes.Integer */), (a, b) => {\n            if (typeof a === \"boolean\" && typeof b === \"boolean\") {\n                return a !== b;\n            }\n            else if (typeof a === \"number\" && typeof b === \"number\") {\n                return a ^ b;\n            }\n            else if (typeof a === \"object\" && typeof b === \"object\") {\n                return new FlowGraphInteger(a.value ^ b.value);\n            }\n            else {\n                throw new Error(`Cannot perform bitwise XOR on ${a} and ${b}`);\n            }\n        }, \"FlowGraphBitwiseXorBlock\" /* FlowGraphBlockNames.BitwiseXor */, config);\n    }\n}\nRegisterClass(\"FlowGraphBitwiseXorBlock\" /* FlowGraphBlockNames.BitwiseXor */, FlowGraphBitwiseXorBlock);\n/**\n * Bitwise left shift operation\n */\nexport class FlowGraphBitwiseLeftShiftBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, (a, b) => new FlowGraphInteger(a.value << b.value), \"FlowGraphBitwiseLeftShiftBlock\" /* FlowGraphBlockNames.BitwiseLeftShift */, config);\n    }\n}\nRegisterClass(\"FlowGraphBitwiseLeftShiftBlock\" /* FlowGraphBlockNames.BitwiseLeftShift */, FlowGraphBitwiseLeftShiftBlock);\n/**\n * Bitwise right shift operation\n */\nexport class FlowGraphBitwiseRightShiftBlock extends FlowGraphBinaryOperationBlock {\n    constructor(config) {\n        super(RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, (a, b) => new FlowGraphInteger(a.value >> b.value), \"FlowGraphBitwiseRightShiftBlock\" /* FlowGraphBlockNames.BitwiseRightShift */, config);\n    }\n}\nRegisterClass(\"FlowGraphBitwiseRightShiftBlock\" /* FlowGraphBlockNames.BitwiseRightShift */, FlowGraphBitwiseRightShiftBlock);\n/**\n * Count leading zeros operation\n */\nexport class FlowGraphLeadingZerosBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, (a) => new FlowGraphInteger(Math.clz32(a.value)), \"FlowGraphLeadingZerosBlock\" /* FlowGraphBlockNames.LeadingZeros */, config);\n    }\n}\nRegisterClass(\"FlowGraphLeadingZerosBlock\" /* FlowGraphBlockNames.LeadingZeros */, FlowGraphLeadingZerosBlock);\n/**\n * Count trailing zeros operation\n */\nexport class FlowGraphTrailingZerosBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, (a) => new FlowGraphInteger(a.value ? 31 - Math.clz32(a.value & -a.value) : 32), \"FlowGraphTrailingZerosBlock\" /* FlowGraphBlockNames.TrailingZeros */, config);\n    }\n}\nRegisterClass(\"FlowGraphTrailingZerosBlock\" /* FlowGraphBlockNames.TrailingZeros */, FlowGraphTrailingZerosBlock);\n/**\n * Given a number (which is converted to a 32-bit integer), return the\n * number of bits set to one on that number.\n * @param n the number to run the op on\n * @returns the number of bits set to one on that number\n */\nfunction CountOnes(n) {\n    let result = 0;\n    while (n) {\n        // This zeroes out all bits except for the least significant one.\n        // So if the bit is set, it will be 1, otherwise it will be 0.\n        result += n & 1;\n        // This shifts n's bits to the right by one\n        n >>= 1;\n    }\n    return result;\n}\n/**\n * Count one bits operation\n */\nexport class FlowGraphOneBitsCounterBlock extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, (a) => new FlowGraphInteger(CountOnes(a.value)), \"FlowGraphOneBitsCounterBlock\" /* FlowGraphBlockNames.OneBitsCounter */, config);\n    }\n}\nRegisterClass(\"FlowGraphOneBitsCounterBlock\" /* FlowGraphBlockNames.OneBitsCounter */, FlowGraphOneBitsCounterBlock);\n//# sourceMappingURL=flowGraphMathBlocks.js.map"],"names":["FlowGraphConstantOperationBlock","FlowGraphCachedOperationBlock","constructor","richType","_operation","_className","config","super","this","_doOperation","context","getClassName","FlowGraphTernaryOperationBlock","t1Type","t2Type","t3Type","resultRichType","a","registerDataInput","b","c","getValue","FlowGraphAddBlock","FlowGraphBinaryOperationBlock","getRichTypeByFlowGraphType","type","_polymorphicAdd","aClassName","_GetClassNameOf","bClassName","_AreSameVectorOrQuaternionClass","_AreSameMatrixClass","_AreSameIntegerClass","add","Vector4","x","y","z","w","addInPlace","preventIntegerFloatArithmetic","Error","getNumericValue","RegisterClass","FlowGraphSubtractBlock","_polymorphicSubtract","subtract","subtractInPlace","FlowGraphMultiplyBlock","_polymorphicMultiply","multiply","multiplyInPlace","useMatrixPerComponent","aM","m","i","length","FlowGraphMatrix2D","FlowGraphMatrix3D","Matrix","FromArray","FlowGraphDivideBlock","_polymorphicDivide","divide","aClone","clone","divideInPlace","FlowGraphRandomBlock","RichTypeNumber","_random","min","max","seed","_seed","_isSeed","undefined","_getRandomValue","Math","sin","floor","random","FlowGraphEBlock","E","FlowGraphPiBlock","PI","FlowGraphInfBlock","Number","POSITIVE_INFINITY","FlowGraphNaNBlock","NaN","ComponentWiseUnaryOperation","op","FlowGraphInteger","value","Vector2","Vector3","Quaternion","map","FlowGraphAbsBlock","FlowGraphUnaryOperationBlock","_polymorphicAbs","abs","FlowGraphSignBlock","_polymorphicSign","sign","FlowGraphTruncBlock","_polymorphicTrunc","trunc","FlowGraphFloorBlock","_polymorphicFloor","FlowGraphCeilBlock","RichTypeAny","_polymorphicCeiling","ceil","FlowGraphRoundBlock","_polymorphicRound","roundHalfAwayFromZero","round","FlowGraphFractionBlock","_polymorphicFraction","FlowGraphNegationBlock","_polymorphicNeg","ComponentWiseBinaryOperation","v","FlowGraphModuloBlock","_polymorphicRemainder","FlowGraphMinBlock","_polymorphicMin","FlowGraphMaxBlock","_polymorphicMax","Clamp","ComponentWiseTernaryOperation","FlowGraphClampBlock","_polymorphicClamp","Saturate","FlowGraphSaturateBlock","_polymorphicSaturate","Interpolate","FlowGraphMathInterpolationBlock","_polymorphicInterpolate","FlowGraphEqualityBlock","RichTypeBoolean","_polymorphicEq","equals","ComparisonOperators","isNumeric","FlowGraphLessThanBlock","_polymorphicLessThan","FlowGraphLessThanOrEqualBlock","_polymorphicLessThanOrEqual","FlowGraphGreaterThanBlock","_polymorphicGreaterThan","FlowGraphGreaterThanOrEqualBlock","_polymorphicGreaterThanOrEqual","FlowGraphIsNanBlock","_polymorphicIsNan","isNaN","FlowGraphIsInfinityBlock","_polymorphicIsInf","isFinite","FlowGraphDegToRadBlock","_polymorphicDegToRad","_degToRad","FlowGraphRadToDegBlock","_polymorphicRadToDeg","_radToDeg","FlowGraphSinBlock","_polymorphicSin","FlowGraphCosBlock","_polymorphicCos","cos","FlowGraphTanBlock","_polymorphicTan","tan","FlowGraphAsinBlock","_polymorphicAsin","asin","FlowGraphAcosBlock","_polymorphicAcos","acos","FlowGraphAtanBlock","_polymorphicAtan","atan","FlowGraphAtan2Block","_polymorphicAtan2","atan2","FlowGraphSinhBlock","_polymorphicSinh","sinh","FlowGraphCoshBlock","_polymorphicCosh","cosh","FlowGraphTanhBlock","_polymorphicTanh","tanh","FlowGraphAsinhBlock","_polymorphicAsinh","asinh","FlowGraphAcoshBlock","_polymorphicAcosh","acosh","FlowGraphAtanhBlock","_polymorphicAtanh","atanh","FlowGraphExpBlock","_polymorphicExp","exp","FlowGraphLogBlock","_polymorphicLog","log","FlowGraphLog2Block","_polymorphicLog2","log2","FlowGraphLog10Block","_polymorphicLog10","log10","FlowGraphSquareRootBlock","_polymorphicSqrt","sqrt","FlowGraphCubeRootBlock","_polymorphicCubeRoot","cbrt","FlowGraphPowerBlock","_polymorphicPow","pow","FlowGraphBitwiseNotBlock","valueType","FlowGraphBitwiseAndBlock","FlowGraphBitwiseOrBlock","FlowGraphBitwiseXorBlock","FlowGraphBitwiseLeftShiftBlock","RichTypeFlowGraphInteger","FlowGraphBitwiseRightShiftBlock","FlowGraphLeadingZerosBlock","clz32","FlowGraphTrailingZerosBlock","FlowGraphOneBitsCounterBlock","n","result","CountOnes"],"mappings":"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"}