import{S as e}from"./index-VvGulz6u.esm.min.js";import"./bakedVertexAnimation-ZcUEZG1Y.esm.min.js";import"./instancesDeclaration-C27zs-OM.esm.min.js";import"./morphTargetsVertex-COI8GCU6.esm.min.js";const i="iblVoxelGridVertexShader",n="attribute vec3 position;varying vec3 vNormalizedPosition;\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<instancesDeclaration>\n#include<morphTargetsVertexGlobalDeclaration>\n#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]\nuniform mat4 invWorldScale;uniform mat4 viewMatrix;void main(void) {vec3 positionUpdated=position;\n#include<morphTargetsVertexGlobal>\n#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=finalWorld*vec4(positionUpdated,1.0);gl_Position=viewMatrix*invWorldScale*worldPos;vNormalizedPosition.xyz=gl_Position.xyz*0.5+0.5;\n#ifdef IS_NDC_HALF_ZRANGE\ngl_Position.z=gl_Position.z*0.5+0.5;\n#endif\n}";e.ShadersStore[i]||(e.ShadersStore[i]=n);const o={name:i,shader:n};export{o as iblVoxelGridVertexShader};
//# sourceMappingURL=iblVoxelGrid.vertex-Pod0H7gX.esm.min.js.map
