{"version":3,"file":"tgaTextureLoader-wG2DT50l.esm.js","sources":["../../../../../dev/core/dist/Misc/tga.js","../../../../../dev/core/dist/Materials/Textures/Loaders/tgaTextureLoader.js"],"sourcesContent":["import { Logger } from \"../Misc/logger\";\n//private static _TYPE_NO_DATA = 0;\nconst _TYPE_INDEXED = 1;\nconst _TYPE_RGB = 2;\nconst _TYPE_GREY = 3;\nconst _TYPE_RLE_INDEXED = 9;\nconst _TYPE_RLE_RGB = 10;\nconst _TYPE_RLE_GREY = 11;\nconst _ORIGIN_MASK = 0x30;\nconst _ORIGIN_SHIFT = 0x04;\nconst _ORIGIN_BL = 0x00;\nconst _ORIGIN_BR = 0x01;\nconst _ORIGIN_UL = 0x02;\nconst _ORIGIN_UR = 0x03;\n/**\n * Gets the header of a TGA file\n * @param data defines the TGA data\n * @returns the header\n */\nexport function GetTGAHeader(data) {\n    let offset = 0;\n    const header = {\n        id_length: data[offset++],\n        colormap_type: data[offset++],\n        image_type: data[offset++],\n        colormap_index: data[offset++] | (data[offset++] << 8),\n        colormap_length: data[offset++] | (data[offset++] << 8),\n        colormap_size: data[offset++],\n        origin: [data[offset++] | (data[offset++] << 8), data[offset++] | (data[offset++] << 8)],\n        width: data[offset++] | (data[offset++] << 8),\n        height: data[offset++] | (data[offset++] << 8),\n        pixel_size: data[offset++],\n        flags: data[offset++],\n    };\n    return header;\n}\n/**\n * Uploads TGA content to a Babylon Texture\n * @internal\n */\nexport function UploadContent(texture, data) {\n    // Not enough data to contain header ?\n    if (data.length < 19) {\n        Logger.Error(\"Unable to load TGA file - Not enough data to contain header\");\n        return;\n    }\n    // Read Header\n    let offset = 18;\n    const header = GetTGAHeader(data);\n    // Assume it's a valid Targa file.\n    if (header.id_length + offset > data.length) {\n        Logger.Error(\"Unable to load TGA file - Not enough data\");\n        return;\n    }\n    // Skip not needed data\n    offset += header.id_length;\n    let use_rle = false;\n    let use_pal = false;\n    let use_grey = false;\n    // Get some informations.\n    switch (header.image_type) {\n        case _TYPE_RLE_INDEXED:\n            use_rle = true;\n        // eslint-disable-next-line no-fallthrough\n        case _TYPE_INDEXED:\n            use_pal = true;\n            break;\n        case _TYPE_RLE_RGB:\n            use_rle = true;\n        // eslint-disable-next-line no-fallthrough\n        case _TYPE_RGB:\n            // use_rgb = true;\n            break;\n        case _TYPE_RLE_GREY:\n            use_rle = true;\n        // eslint-disable-next-line no-fallthrough\n        case _TYPE_GREY:\n            use_grey = true;\n            break;\n    }\n    let pixel_data;\n    // var numAlphaBits = header.flags & 0xf;\n    const pixel_size = header.pixel_size >> 3;\n    const pixel_total = header.width * header.height * pixel_size;\n    // Read palettes\n    let palettes;\n    if (use_pal) {\n        palettes = data.subarray(offset, (offset += header.colormap_length * (header.colormap_size >> 3)));\n    }\n    // Read LRE\n    if (use_rle) {\n        pixel_data = new Uint8Array(pixel_total);\n        let c, count, i;\n        let localOffset = 0;\n        const pixels = new Uint8Array(pixel_size);\n        while (offset < pixel_total && localOffset < pixel_total) {\n            c = data[offset++];\n            count = (c & 0x7f) + 1;\n            // RLE pixels\n            if (c & 0x80) {\n                // Bind pixel tmp array\n                for (i = 0; i < pixel_size; ++i) {\n                    pixels[i] = data[offset++];\n                }\n                // Copy pixel array\n                for (i = 0; i < count; ++i) {\n                    pixel_data.set(pixels, localOffset + i * pixel_size);\n                }\n                localOffset += pixel_size * count;\n            }\n            // Raw pixels\n            else {\n                count *= pixel_size;\n                for (i = 0; i < count; ++i) {\n                    pixel_data[localOffset + i] = data[offset++];\n                }\n                localOffset += count;\n            }\n        }\n    }\n    // RAW Pixels\n    else {\n        pixel_data = data.subarray(offset, (offset += use_pal ? header.width * header.height : pixel_total));\n    }\n    // Load to texture\n    let x_start, y_start, x_step, y_step, y_end, x_end;\n    switch ((header.flags & _ORIGIN_MASK) >> _ORIGIN_SHIFT) {\n        default:\n        case _ORIGIN_UL:\n            x_start = 0;\n            x_step = 1;\n            x_end = header.width;\n            y_start = 0;\n            y_step = 1;\n            y_end = header.height;\n            break;\n        case _ORIGIN_BL:\n            x_start = 0;\n            x_step = 1;\n            x_end = header.width;\n            y_start = header.height - 1;\n            y_step = -1;\n            y_end = -1;\n            break;\n        case _ORIGIN_UR:\n            x_start = header.width - 1;\n            x_step = -1;\n            x_end = -1;\n            y_start = 0;\n            y_step = 1;\n            y_end = header.height;\n            break;\n        case _ORIGIN_BR:\n            x_start = header.width - 1;\n            x_step = -1;\n            x_end = -1;\n            y_start = header.height - 1;\n            y_step = -1;\n            y_end = -1;\n            break;\n    }\n    // Load the specify method\n    const func = \"_getImageData\" + (use_grey ? \"Grey\" : \"\") + header.pixel_size + \"bits\";\n    const imageData = TGATools[func](header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end);\n    const engine = texture.getEngine();\n    engine._uploadDataToTextureDirectly(texture, imageData);\n}\n/**\n * @internal\n */\nfunction GetImageData8bits(header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end) {\n    const image = pixel_data, colormap = palettes;\n    const width = header.width, height = header.height;\n    let color, i = 0, x, y;\n    const imageData = new Uint8Array(width * height * 4);\n    for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i++) {\n            color = image[i];\n            imageData[(x + width * y) * 4 + 3] = 255;\n            imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];\n            imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];\n            imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];\n        }\n    }\n    return imageData;\n}\n/**\n * @internal\n */\nfunction GetImageData16bits(header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end) {\n    const image = pixel_data;\n    const width = header.width, height = header.height;\n    let color, i = 0, x, y;\n    const imageData = new Uint8Array(width * height * 4);\n    for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 2) {\n            color = image[i + 0] + (image[i + 1] << 8); // Inversed ?\n            const r = ((((color & 0x7c00) >> 10) * 255) / 0x1f) | 0;\n            const g = ((((color & 0x03e0) >> 5) * 255) / 0x1f) | 0;\n            const b = (((color & 0x001f) * 255) / 0x1f) | 0;\n            imageData[(x + width * y) * 4 + 0] = r;\n            imageData[(x + width * y) * 4 + 1] = g;\n            imageData[(x + width * y) * 4 + 2] = b;\n            imageData[(x + width * y) * 4 + 3] = color & 0x8000 ? 0 : 255;\n        }\n    }\n    return imageData;\n}\n/**\n * @internal\n */\nfunction GetImageData24bits(header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end) {\n    const image = pixel_data;\n    const width = header.width, height = header.height;\n    let i = 0, x, y;\n    const imageData = new Uint8Array(width * height * 4);\n    for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 3) {\n            imageData[(x + width * y) * 4 + 3] = 255;\n            imageData[(x + width * y) * 4 + 2] = image[i + 0];\n            imageData[(x + width * y) * 4 + 1] = image[i + 1];\n            imageData[(x + width * y) * 4 + 0] = image[i + 2];\n        }\n    }\n    return imageData;\n}\n/**\n * @internal\n */\nfunction GetImageData32bits(header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end) {\n    const image = pixel_data;\n    const width = header.width, height = header.height;\n    let i = 0, x, y;\n    const imageData = new Uint8Array(width * height * 4);\n    for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 4) {\n            imageData[(x + width * y) * 4 + 2] = image[i + 0];\n            imageData[(x + width * y) * 4 + 1] = image[i + 1];\n            imageData[(x + width * y) * 4 + 0] = image[i + 2];\n            imageData[(x + width * y) * 4 + 3] = image[i + 3];\n        }\n    }\n    return imageData;\n}\n/**\n * @internal\n */\nfunction GetImageDataGrey8bits(header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end) {\n    const image = pixel_data;\n    const width = header.width, height = header.height;\n    let color, i = 0, x, y;\n    const imageData = new Uint8Array(width * height * 4);\n    for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i++) {\n            color = image[i];\n            imageData[(x + width * y) * 4 + 0] = color;\n            imageData[(x + width * y) * 4 + 1] = color;\n            imageData[(x + width * y) * 4 + 2] = color;\n            imageData[(x + width * y) * 4 + 3] = 255;\n        }\n    }\n    return imageData;\n}\n/**\n * @internal\n */\nfunction GetImageDataGrey16bits(header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end) {\n    const image = pixel_data;\n    const width = header.width, height = header.height;\n    let i = 0, x, y;\n    const imageData = new Uint8Array(width * height * 4);\n    for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 2) {\n            imageData[(x + width * y) * 4 + 0] = image[i + 0];\n            imageData[(x + width * y) * 4 + 1] = image[i + 0];\n            imageData[(x + width * y) * 4 + 2] = image[i + 0];\n            imageData[(x + width * y) * 4 + 3] = image[i + 1];\n        }\n    }\n    return imageData;\n}\n/**\n * Based on jsTGALoader - Javascript loader for TGA file\n * By Vincent Thibault\n * @see http://blog.robrowser.com/javascript-tga-loader.html\n */\nexport const TGATools = {\n    /**\n     * Gets the header of a TGA file\n     * @param data defines the TGA data\n     * @returns the header\n     */\n    GetTGAHeader,\n    /**\n     * Uploads TGA content to a Babylon Texture\n     * @internal\n     */\n    UploadContent,\n    /** @internal */\n    _getImageData8bits: GetImageData8bits,\n    /** @internal */\n    _getImageData16bits: GetImageData16bits,\n    /** @internal */\n    _getImageData24bits: GetImageData24bits,\n    /** @internal */\n    _getImageData32bits: GetImageData32bits,\n    /** @internal */\n    _getImageDataGrey8bits: GetImageDataGrey8bits,\n    /** @internal */\n    _getImageDataGrey16bits: GetImageDataGrey16bits,\n};\n//# sourceMappingURL=tga.js.map","import { GetTGAHeader, UploadContent } from \"../../../Misc/tga\";\n/**\n * Implementation of the TGA Texture Loader.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _TGATextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     */\n    loadCubeData() {\n        // eslint-disable-next-line no-throw-literal\n        throw \".env not supported in Cube.\";\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     */\n    loadData(data, texture, callback) {\n        const bytes = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n        const header = GetTGAHeader(bytes);\n        callback(header.width, header.height, texture.generateMipMaps, false, () => {\n            UploadContent(texture, bytes);\n        });\n    }\n}\n//# sourceMappingURL=tgaTextureLoader.js.map"],"names":[],"mappings":";;AACA;AACA,MAAM,aAAa,GAAG,CAAC;AACvB,MAAM,SAAS,GAAG,CAAC;AACnB,MAAM,UAAU,GAAG,CAAC;AACpB,MAAM,iBAAiB,GAAG,CAAC;AAC3B,MAAM,aAAa,GAAG,EAAE;AACxB,MAAM,cAAc,GAAG,EAAE;AACzB,MAAM,YAAY,GAAG,IAAI;AACzB,MAAM,aAAa,GAAG,IAAI;AAC1B,MAAM,UAAU,GAAG,IAAI;AACvB,MAAM,UAAU,GAAG,IAAI;AACvB,MAAM,UAAU,GAAG,IAAI;AACvB,MAAM,UAAU,GAAG,IAAI;AACvB;AACA;AACA;AACA;AACA;AACO,SAAS,YAAY,CAAC,IAAI,EAAE;AACnC,IAAI,IAAI,MAAM,GAAG,CAAC;AAClB,IAAI,MAAM,MAAM,GAAG;AACnB,QAAQ,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC;AACjC,QAAQ,aAAa,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC;AACrC,QAAQ,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC;AAClC,QAAQ,cAAc,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC;AAC9D,QAAQ,eAAe,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC;AAC/D,QAAQ,aAAa,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC;AACrC,QAAQ,MAAM,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;AAChG,QAAQ,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC;AACrD,QAAQ,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC;AACtD,QAAQ,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC;AAClC,QAAQ,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC;AAC7B,KAAK;AACL,IAAI,OAAO,MAAM;AACjB;AACA;AACA;AACA;AACA;AACO,SAAS,aAAa,CAAC,OAAO,EAAE,IAAI,EAAE;AAC7C;AACA,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,EAAE;AAC1B,QAAQ,MAAM,CAAC,KAAK,CAAC,6DAA6D,CAAC;AACnF,QAAQ;AACR;AACA;AACA,IAAI,IAAI,MAAM,GAAG,EAAE;AACnB,IAAI,MAAM,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC;AACrC;AACA,IAAI,IAAI,MAAM,CAAC,SAAS,GAAG,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE;AACjD,QAAQ,MAAM,CAAC,KAAK,CAAC,2CAA2C,CAAC;AACjE,QAAQ;AACR;AACA;AACA,IAAI,MAAM,IAAI,MAAM,CAAC,SAAS;AAC9B,IAAI,IAAI,OAAO,GAAG,KAAK;AACvB,IAAI,IAAI,OAAO,GAAG,KAAK;AACvB,IAAI,IAAI,QAAQ,GAAG,KAAK;AACxB;AACA,IAAI,QAAQ,MAAM,CAAC,UAAU;AAC7B,QAAQ,KAAK,iBAAiB;AAC9B,YAAY,OAAO,GAAG,IAAI;AAC1B;AACA,QAAQ,KAAK,aAAa;AAC1B,YAAY,OAAO,GAAG,IAAI;AAC1B,YAAY;AACZ,QAAQ,KAAK,aAAa;AAC1B,YAAY,OAAO,GAAG,IAAI;AAC1B;AACA,QAAQ,KAAK,SAAS;AACtB;AACA,YAAY;AACZ,QAAQ,KAAK,cAAc;AAC3B,YAAY,OAAO,GAAG,IAAI;AAC1B;AACA,QAAQ,KAAK,UAAU;AACvB,YAAY,QAAQ,GAAG,IAAI;AAC3B,YAAY;AACZ;AACA,IAAI,IAAI,UAAU;AAClB;AACA,IAAI,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,IAAI,CAAC;AAC7C,IAAI,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,GAAG,UAAU;AACjE;AACA,IAAI,IAAI,QAAQ;AAChB,IAAI,IAAI,OAAO,EAAE;AACjB,QAAQ,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,IAAI,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,aAAa,IAAI,CAAC,CAAC,EAAE;AAC1G;AACA;AACA,IAAI,IAAI,OAAO,EAAE;AACjB,QAAQ,UAAU,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC;AAChD,QAAQ,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC;AACvB,QAAQ,IAAI,WAAW,GAAG,CAAC;AAC3B,QAAQ,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,UAAU,CAAC;AACjD,QAAQ,OAAO,MAAM,GAAG,WAAW,IAAI,WAAW,GAAG,WAAW,EAAE;AAClE,YAAY,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;AAC9B,YAAY,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC;AAClC;AACA,YAAY,IAAI,CAAC,GAAG,IAAI,EAAE;AAC1B;AACA,gBAAgB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,EAAE,CAAC,EAAE;AACjD,oBAAoB,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;AAC9C;AACA;AACA,gBAAgB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,EAAE,CAAC,EAAE;AAC5C,oBAAoB,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,GAAG,CAAC,GAAG,UAAU,CAAC;AACxE;AACA,gBAAgB,WAAW,IAAI,UAAU,GAAG,KAAK;AACjD;AACA;AACA,iBAAiB;AACjB,gBAAgB,KAAK,IAAI,UAAU;AACnC,gBAAgB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,EAAE,CAAC,EAAE;AAC5C,oBAAoB,UAAU,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;AAChE;AACA,gBAAgB,WAAW,IAAI,KAAK;AACpC;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,IAAI,OAAO,GAAG,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,GAAG,WAAW,EAAE;AAC5G;AACA;AACA,IAAI,IAAI,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK;AACtD,IAAI,QAAQ,CAAC,MAAM,CAAC,KAAK,GAAG,YAAY,KAAK,aAAa;AAC1D,QAAQ;AACR,QAAQ,KAAK,UAAU;AACvB,YAAY,OAAO,GAAG,CAAC;AACvB,YAAY,MAAM,GAAG,CAAC;AACtB,YAAY,KAAK,GAAG,MAAM,CAAC,KAAK;AAChC,YAAY,OAAO,GAAG,CAAC;AACvB,YAAY,MAAM,GAAG,CAAC;AACtB,YAAY,KAAK,GAAG,MAAM,CAAC,MAAM;AACjC,YAAY;AACZ,QAAQ,KAAK,UAAU;AACvB,YAAY,OAAO,GAAG,CAAC;AACvB,YAAY,MAAM,GAAG,CAAC;AACtB,YAAY,KAAK,GAAG,MAAM,CAAC,KAAK;AAChC,YAAY,OAAO,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC;AACvC,YAAY,MAAM,GAAG,EAAE;AACvB,YAAY,KAAK,GAAG,EAAE;AACtB,YAAY;AACZ,QAAQ,KAAK,UAAU;AACvB,YAAY,OAAO,GAAG,MAAM,CAAC,KAAK,GAAG,CAAC;AACtC,YAAY,MAAM,GAAG,EAAE;AACvB,YAAY,KAAK,GAAG,EAAE;AACtB,YAAY,OAAO,GAAG,CAAC;AACvB,YAAY,MAAM,GAAG,CAAC;AACtB,YAAY,KAAK,GAAG,MAAM,CAAC,MAAM;AACjC,YAAY;AACZ,QAAQ,KAAK,UAAU;AACvB,YAAY,OAAO,GAAG,MAAM,CAAC,KAAK,GAAG,CAAC;AACtC,YAAY,MAAM,GAAG,EAAE;AACvB,YAAY,KAAK,GAAG,EAAE;AACtB,YAAY,OAAO,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC;AACvC,YAAY,MAAM,GAAG,EAAE;AACvB,YAAY,KAAK,GAAG,EAAE;AACtB,YAAY;AACZ;AACA;AACA,IAAI,MAAM,IAAI,GAAG,eAAe,IAAI,QAAQ,GAAG,MAAM,GAAG,EAAE,CAAC,GAAG,MAAM,CAAC,UAAU,GAAG,MAAM;AACxF,IAAI,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC;AAClH,IAAI,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,EAAE;AACtC,IAAI,MAAM,CAAC,4BAA4B,CAAC,OAAO,EAAE,SAAS,CAAC;AAC3D;AACA;AACA;AACA;AACA,SAAS,iBAAiB,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE;AACzG,IAAI,MAAM,KAAK,GAAG,UAAU,EAAE,QAAQ,GAAG,QAAQ;AACjD,IAAI,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,EAAE,MAAM,GAAG,MAAM,CAAC,MAAM;AACtD,IAAI,IAAI,KAAK,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;AAC1B,IAAI,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,KAAK,GAAG,MAAM,GAAG,CAAC,CAAC;AACxD,IAAI,KAAK,CAAC,GAAG,OAAO,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,IAAI,MAAM,EAAE;AAChD,QAAQ,KAAK,CAAC,GAAG,OAAO,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,IAAI,MAAM,EAAE,CAAC,EAAE,EAAE;AACzD,YAAY,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;AAC5B,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG;AACpD,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;AACxE,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;AACxE,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;AACxE;AACA;AACA,IAAI,OAAO,SAAS;AACpB;AACA;AACA;AACA;AACA,SAAS,kBAAkB,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE;AAC1G,IAAI,MAAM,KAAK,GAAG,UAAU;AAC5B,IAAI,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,EAAE,MAAM,GAAG,MAAM,CAAC,MAAM;AACtD,IAAI,IAAI,KAAK,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;AAC1B,IAAI,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,KAAK,GAAG,MAAM,GAAG,CAAC,CAAC;AACxD,IAAI,KAAK,CAAC,GAAG,OAAO,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,IAAI,MAAM,EAAE;AAChD,QAAQ,KAAK,CAAC,GAAG,OAAO,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,IAAI,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;AAC5D,YAAY,KAAK,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;AACvD,YAAY,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,MAAM,KAAK,EAAE,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC;AACnE,YAAY,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,MAAM,KAAK,CAAC,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC;AAClE,YAAY,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,MAAM,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC;AAC3D,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;AAClD,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;AAClD,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;AAClD,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,MAAM,GAAG,CAAC,GAAG,GAAG;AACzE;AACA;AACA,IAAI,OAAO,SAAS;AACpB;AACA;AACA;AACA;AACA,SAAS,kBAAkB,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE;AAC1G,IAAI,MAAM,KAAK,GAAG,UAAU;AAC5B,IAAI,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,EAAE,MAAM,GAAG,MAAM,CAAC,MAAM;AACtD,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;AACnB,IAAI,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,KAAK,GAAG,MAAM,GAAG,CAAC,CAAC;AACxD,IAAI,KAAK,CAAC,GAAG,OAAO,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,IAAI,MAAM,EAAE;AAChD,QAAQ,KAAK,CAAC,GAAG,OAAO,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,IAAI,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;AAC5D,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG;AACpD,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;AAC7D,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;AAC7D,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;AAC7D;AACA;AACA,IAAI,OAAO,SAAS;AACpB;AACA;AACA;AACA;AACA,SAAS,kBAAkB,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE;AAC1G,IAAI,MAAM,KAAK,GAAG,UAAU;AAC5B,IAAI,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,EAAE,MAAM,GAAG,MAAM,CAAC,MAAM;AACtD,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;AACnB,IAAI,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,KAAK,GAAG,MAAM,GAAG,CAAC,CAAC;AACxD,IAAI,KAAK,CAAC,GAAG,OAAO,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,IAAI,MAAM,EAAE;AAChD,QAAQ,KAAK,CAAC,GAAG,OAAO,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,IAAI,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;AAC5D,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;AAC7D,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;AAC7D,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;AAC7D,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;AAC7D;AACA;AACA,IAAI,OAAO,SAAS;AACpB;AACA;AACA;AACA;AACA,SAAS,qBAAqB,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE;AAC7G,IAAI,MAAM,KAAK,GAAG,UAAU;AAC5B,IAAI,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,EAAE,MAAM,GAAG,MAAM,CAAC,MAAM;AACtD,IAAI,IAAI,KAAK,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;AAC1B,IAAI,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,KAAK,GAAG,MAAM,GAAG,CAAC,CAAC;AACxD,IAAI,KAAK,CAAC,GAAG,OAAO,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,IAAI,MAAM,EAAE;AAChD,QAAQ,KAAK,CAAC,GAAG,OAAO,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,IAAI,MAAM,EAAE,CAAC,EAAE,EAAE;AACzD,YAAY,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;AAC5B,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;AACtD,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;AACtD,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;AACtD,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG;AACpD;AACA;AACA,IAAI,OAAO,SAAS;AACpB;AACA;AACA;AACA;AACA,SAAS,sBAAsB,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE;AAC9G,IAAI,MAAM,KAAK,GAAG,UAAU;AAC5B,IAAI,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,EAAE,MAAM,GAAG,MAAM,CAAC,MAAM;AACtD,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;AACnB,IAAI,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,KAAK,GAAG,MAAM,GAAG,CAAC,CAAC;AACxD,IAAI,KAAK,CAAC,GAAG,OAAO,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,IAAI,MAAM,EAAE;AAChD,QAAQ,KAAK,CAAC,GAAG,OAAO,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,IAAI,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;AAC5D,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;AAC7D,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;AAC7D,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;AAC7D,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;AAC7D;AACA;AACA,IAAI,OAAO,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,QAAQ,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA,IAAI,YAAY;AAChB;AACA;AACA;AACA;AACA,IAAI,aAAa;AACjB;AACA,IAAI,kBAAkB,EAAE,iBAAiB;AACzC;AACA,IAAI,mBAAmB,EAAE,kBAAkB;AAC3C;AACA,IAAI,mBAAmB,EAAE,kBAAkB;AAC3C;AACA,IAAI,mBAAmB,EAAE,kBAAkB;AAC3C;AACA,IAAI,sBAAsB,EAAE,qBAAqB;AACjD;AACA,IAAI,uBAAuB,EAAE,sBAAsB;AACnD,CAAC;;ACrTD;AACA;AACA;AACA;AACA;AACO,MAAM,iBAAiB,CAAC;AAC/B,IAAI,WAAW,GAAG;AAClB;AACA;AACA;AACA,QAAQ,IAAI,CAAC,eAAe,GAAG,KAAK;AACpC;AACA;AACA;AACA;AACA,IAAI,YAAY,GAAG;AACnB;AACA,QAAQ,MAAM,6BAA6B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,QAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE;AACtC,QAAQ,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC;AACnF,QAAQ,MAAM,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC;AAC1C,QAAQ,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,eAAe,EAAE,KAAK,EAAE,MAAM;AACpF,YAAY,aAAa,CAAC,OAAO,EAAE,KAAK,CAAC;AACzC,SAAS,CAAC;AACV;AACA;;;;"}