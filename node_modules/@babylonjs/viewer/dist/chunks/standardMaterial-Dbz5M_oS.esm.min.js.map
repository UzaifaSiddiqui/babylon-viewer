{"version":3,"file":"standardMaterial-Dbz5M_oS.esm.min.js","sources":["../../../../../dev/core/dist/Materials/standardMaterial.js"],"sourcesContent":["import { __decorate } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { serialize, serializeAsColor3, expandToProperty, serializeAsFresnelParameters, serializeAsTexture } from \"../Misc/decorators\";\nimport { SmartArray } from \"../Misc/smartArray\";\nimport { Scene } from \"../scene\";\nimport { Color3 } from \"../Maths/math.color\";\nimport { VertexBuffer } from \"../Buffers/buffer\";\nimport { PrePassConfiguration } from \"./prePassConfiguration\";\nimport { ImageProcessingConfiguration } from \"./imageProcessingConfiguration\";\nimport { Material } from \"../Materials/material\";\nimport { MaterialDefines } from \"../Materials/materialDefines\";\nimport { PushMaterial } from \"./pushMaterial\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { RegisterClass } from \"../Misc/typeStore\";\nimport { MaterialFlags } from \"./materialFlags\";\nimport { Constants } from \"../Engines/constants\";\nimport { EffectFallbacks } from \"./effectFallbacks\";\nimport { DetailMapConfiguration } from \"./material.detailMapConfiguration\";\nimport { AddClipPlaneUniforms, BindClipPlane } from \"./clipPlaneMaterialHelper\";\nimport { BindBonesParameters, BindFogParameters, BindLights, BindLogDepth, BindMorphTargetParameters, BindTextureMatrix, HandleFallbacksForShadows, PrepareAttributesForBakedVertexAnimation, PrepareAttributesForBones, PrepareAttributesForInstances, PrepareAttributesForMorphTargets, PrepareDefinesForAttributes, PrepareDefinesForFrameBoundValues, PrepareDefinesForLights, PrepareDefinesForMergedUV, PrepareDefinesForMisc, PrepareDefinesForMultiview, PrepareDefinesForOIT, PrepareDefinesForPrePass, PrepareUniformsAndSamplersList, } from \"./materialHelper.functions\";\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\nimport { MaterialHelperGeometryRendering } from \"./materialHelper.geometryrendering\";\nconst onCreatedEffectParameters = { effect: null, subMesh: null };\n/** @internal */\nexport class StandardMaterialDefines extends MaterialDefines {\n    /**\n     * Initializes the Standard Material defines.\n     * @param externalProperties The external properties\n     */\n    constructor(externalProperties) {\n        super(externalProperties);\n        this.MAINUV1 = false;\n        this.MAINUV2 = false;\n        this.MAINUV3 = false;\n        this.MAINUV4 = false;\n        this.MAINUV5 = false;\n        this.MAINUV6 = false;\n        this.DIFFUSE = false;\n        this.DIFFUSEDIRECTUV = 0;\n        this.BAKED_VERTEX_ANIMATION_TEXTURE = false;\n        this.AMBIENT = false;\n        this.AMBIENTDIRECTUV = 0;\n        this.OPACITY = false;\n        this.OPACITYDIRECTUV = 0;\n        this.OPACITYRGB = false;\n        this.REFLECTION = false;\n        this.EMISSIVE = false;\n        this.EMISSIVEDIRECTUV = 0;\n        this.SPECULAR = false;\n        this.SPECULARDIRECTUV = 0;\n        this.BUMP = false;\n        this.BUMPDIRECTUV = 0;\n        this.PARALLAX = false;\n        this.PARALLAX_RHS = false;\n        this.PARALLAXOCCLUSION = false;\n        this.SPECULAROVERALPHA = false;\n        this.CLIPPLANE = false;\n        this.CLIPPLANE2 = false;\n        this.CLIPPLANE3 = false;\n        this.CLIPPLANE4 = false;\n        this.CLIPPLANE5 = false;\n        this.CLIPPLANE6 = false;\n        this.ALPHATEST = false;\n        this.DEPTHPREPASS = false;\n        this.ALPHAFROMDIFFUSE = false;\n        this.POINTSIZE = false;\n        this.FOG = false;\n        this.SPECULARTERM = false;\n        this.DIFFUSEFRESNEL = false;\n        this.OPACITYFRESNEL = false;\n        this.REFLECTIONFRESNEL = false;\n        this.REFRACTIONFRESNEL = false;\n        this.EMISSIVEFRESNEL = false;\n        this.FRESNEL = false;\n        this.NORMAL = false;\n        this.TANGENT = false;\n        this.UV1 = false;\n        this.UV2 = false;\n        this.UV3 = false;\n        this.UV4 = false;\n        this.UV5 = false;\n        this.UV6 = false;\n        this.VERTEXCOLOR = false;\n        this.VERTEXALPHA = false;\n        this.NUM_BONE_INFLUENCERS = 0;\n        this.BonesPerMesh = 0;\n        this.BONETEXTURE = false;\n        this.BONES_VELOCITY_ENABLED = false;\n        this.INSTANCES = false;\n        this.THIN_INSTANCES = false;\n        this.INSTANCESCOLOR = false;\n        this.GLOSSINESS = false;\n        this.ROUGHNESS = false;\n        this.EMISSIVEASILLUMINATION = false;\n        this.LINKEMISSIVEWITHDIFFUSE = false;\n        this.REFLECTIONFRESNELFROMSPECULAR = false;\n        this.LIGHTMAP = false;\n        this.LIGHTMAPDIRECTUV = 0;\n        this.OBJECTSPACE_NORMALMAP = false;\n        this.USELIGHTMAPASSHADOWMAP = false;\n        this.REFLECTIONMAP_3D = false;\n        this.REFLECTIONMAP_SPHERICAL = false;\n        this.REFLECTIONMAP_PLANAR = false;\n        this.REFLECTIONMAP_CUBIC = false;\n        this.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\n        this.USE_LOCAL_REFRACTIONMAP_CUBIC = false;\n        this.REFLECTIONMAP_PROJECTION = false;\n        this.REFLECTIONMAP_SKYBOX = false;\n        this.REFLECTIONMAP_EXPLICIT = false;\n        this.REFLECTIONMAP_EQUIRECTANGULAR = false;\n        this.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n        this.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n        this.REFLECTIONMAP_OPPOSITEZ = false;\n        this.INVERTCUBICMAP = false;\n        this.LOGARITHMICDEPTH = false;\n        this.REFRACTION = false;\n        this.REFRACTIONMAP_3D = false;\n        this.REFLECTIONOVERALPHA = false;\n        this.TWOSIDEDLIGHTING = false;\n        this.SHADOWFLOAT = false;\n        this.MORPHTARGETS = false;\n        this.MORPHTARGETS_POSITION = false;\n        this.MORPHTARGETS_NORMAL = false;\n        this.MORPHTARGETS_TANGENT = false;\n        this.MORPHTARGETS_UV = false;\n        this.MORPHTARGETS_UV2 = false;\n        this.MORPHTARGETS_COLOR = false;\n        this.MORPHTARGETTEXTURE_HASPOSITIONS = false;\n        this.MORPHTARGETTEXTURE_HASNORMALS = false;\n        this.MORPHTARGETTEXTURE_HASTANGENTS = false;\n        this.MORPHTARGETTEXTURE_HASUVS = false;\n        this.MORPHTARGETTEXTURE_HASUV2S = false;\n        this.MORPHTARGETTEXTURE_HASCOLORS = false;\n        this.NUM_MORPH_INFLUENCERS = 0;\n        this.MORPHTARGETS_TEXTURE = false;\n        this.NONUNIFORMSCALING = false; // https://playground.babylonjs.com#V6DWIH\n        this.PREMULTIPLYALPHA = false; // https://playground.babylonjs.com#LNVJJ7\n        this.ALPHATEST_AFTERALLALPHACOMPUTATIONS = false;\n        this.ALPHABLEND = true;\n        this.PREPASS = false;\n        this.PREPASS_COLOR = false;\n        this.PREPASS_COLOR_INDEX = -1;\n        this.PREPASS_IRRADIANCE = false;\n        this.PREPASS_IRRADIANCE_INDEX = -1;\n        this.PREPASS_ALBEDO = false;\n        this.PREPASS_ALBEDO_INDEX = -1;\n        this.PREPASS_ALBEDO_SQRT = false;\n        this.PREPASS_ALBEDO_SQRT_INDEX = -1;\n        this.PREPASS_DEPTH = false;\n        this.PREPASS_DEPTH_INDEX = -1;\n        this.PREPASS_SCREENSPACE_DEPTH = false;\n        this.PREPASS_SCREENSPACE_DEPTH_INDEX = -1;\n        this.PREPASS_NORMALIZED_VIEW_DEPTH = false;\n        this.PREPASS_NORMALIZED_VIEW_DEPTH_INDEX = -1;\n        this.PREPASS_NORMAL = false;\n        this.PREPASS_NORMAL_INDEX = -1;\n        this.PREPASS_NORMAL_WORLDSPACE = false;\n        this.PREPASS_WORLD_NORMAL = false;\n        this.PREPASS_WORLD_NORMAL_INDEX = -1;\n        this.PREPASS_POSITION = false;\n        this.PREPASS_POSITION_INDEX = -1;\n        this.PREPASS_LOCAL_POSITION = false;\n        this.PREPASS_LOCAL_POSITION_INDEX = -1;\n        this.PREPASS_VELOCITY = false;\n        this.PREPASS_VELOCITY_INDEX = -1;\n        this.PREPASS_VELOCITY_LINEAR = false;\n        this.PREPASS_VELOCITY_LINEAR_INDEX = -1;\n        this.PREPASS_REFLECTIVITY = false;\n        this.PREPASS_REFLECTIVITY_INDEX = -1;\n        this.SCENE_MRT_COUNT = 0;\n        this.RGBDLIGHTMAP = false;\n        this.RGBDREFLECTION = false;\n        this.RGBDREFRACTION = false;\n        this.IMAGEPROCESSING = false;\n        this.VIGNETTE = false;\n        this.VIGNETTEBLENDMODEMULTIPLY = false;\n        this.VIGNETTEBLENDMODEOPAQUE = false;\n        this.TONEMAPPING = 0;\n        this.CONTRAST = false;\n        this.COLORCURVES = false;\n        this.COLORGRADING = false;\n        this.COLORGRADING3D = false;\n        this.SAMPLER3DGREENDEPTH = false;\n        this.SAMPLER3DBGRMAP = false;\n        this.DITHER = false;\n        this.IMAGEPROCESSINGPOSTPROCESS = false;\n        this.SKIPFINALCOLORCLAMP = false;\n        this.MULTIVIEW = false;\n        this.ORDER_INDEPENDENT_TRANSPARENCY = false;\n        this.ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\n        this.CAMERA_ORTHOGRAPHIC = false;\n        this.CAMERA_PERSPECTIVE = false;\n        this.AREALIGHTSUPPORTED = true;\n        /**\n         * If the reflection texture on this material is in linear color space\n         * @internal\n         */\n        this.IS_REFLECTION_LINEAR = false;\n        /**\n         * If the refraction texture on this material is in linear color space\n         * @internal\n         */\n        this.IS_REFRACTION_LINEAR = false;\n        this.EXPOSURE = false;\n        this.DECAL_AFTER_DETAIL = false;\n        this.rebuild();\n    }\n    setReflectionMode(modeToEnable) {\n        const modes = [\n            \"REFLECTIONMAP_CUBIC\",\n            \"REFLECTIONMAP_EXPLICIT\",\n            \"REFLECTIONMAP_PLANAR\",\n            \"REFLECTIONMAP_PROJECTION\",\n            \"REFLECTIONMAP_PROJECTION\",\n            \"REFLECTIONMAP_SKYBOX\",\n            \"REFLECTIONMAP_SPHERICAL\",\n            \"REFLECTIONMAP_EQUIRECTANGULAR\",\n            \"REFLECTIONMAP_EQUIRECTANGULAR_FIXED\",\n            \"REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\",\n        ];\n        for (const mode of modes) {\n            this[mode] = mode === modeToEnable;\n        }\n    }\n}\n/**\n * This is the default material used in Babylon. It is the best trade off between quality\n * and performances.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\n */\nexport class StandardMaterial extends PushMaterial {\n    /**\n     * Gets the image processing configuration used either in this material.\n     */\n    get imageProcessingConfiguration() {\n        return this._imageProcessingConfiguration;\n    }\n    /**\n     * Sets the Default image processing configuration used either in the this material.\n     *\n     * If sets to null, the scene one is in use.\n     */\n    set imageProcessingConfiguration(value) {\n        this._attachImageProcessingConfiguration(value);\n        // Ensure the effect will be rebuilt.\n        this._markAllSubMeshesAsImageProcessingDirty();\n    }\n    /**\n     * Attaches a new image processing configuration to the Standard Material.\n     * @param configuration\n     */\n    _attachImageProcessingConfiguration(configuration) {\n        if (configuration === this._imageProcessingConfiguration) {\n            return;\n        }\n        // Detaches observer\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        // Pick the scene configuration if needed\n        if (!configuration) {\n            this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\n        }\n        else {\n            this._imageProcessingConfiguration = configuration;\n        }\n        // Attaches observer\n        if (this._imageProcessingConfiguration) {\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\n                this._markAllSubMeshesAsImageProcessingDirty();\n            });\n        }\n    }\n    /**\n     * Can this material render to prepass\n     */\n    get isPrePassCapable() {\n        return !this.disableDepthWrite;\n    }\n    /**\n     * Gets whether the color curves effect is enabled.\n     */\n    get cameraColorCurvesEnabled() {\n        return this.imageProcessingConfiguration.colorCurvesEnabled;\n    }\n    /**\n     * Sets whether the color curves effect is enabled.\n     */\n    set cameraColorCurvesEnabled(value) {\n        this.imageProcessingConfiguration.colorCurvesEnabled = value;\n    }\n    /**\n     * Gets whether the color grading effect is enabled.\n     */\n    get cameraColorGradingEnabled() {\n        return this.imageProcessingConfiguration.colorGradingEnabled;\n    }\n    /**\n     * Gets whether the color grading effect is enabled.\n     */\n    set cameraColorGradingEnabled(value) {\n        this.imageProcessingConfiguration.colorGradingEnabled = value;\n    }\n    /**\n     * Gets whether tonemapping is enabled or not.\n     */\n    get cameraToneMappingEnabled() {\n        return this._imageProcessingConfiguration.toneMappingEnabled;\n    }\n    /**\n     * Sets whether tonemapping is enabled or not\n     */\n    set cameraToneMappingEnabled(value) {\n        this._imageProcessingConfiguration.toneMappingEnabled = value;\n    }\n    /**\n     * The camera exposure used on this material.\n     * This property is here and not in the camera to allow controlling exposure without full screen post process.\n     * This corresponds to a photographic exposure.\n     */\n    get cameraExposure() {\n        return this._imageProcessingConfiguration.exposure;\n    }\n    /**\n     * The camera exposure used on this material.\n     * This property is here and not in the camera to allow controlling exposure without full screen post process.\n     * This corresponds to a photographic exposure.\n     */\n    set cameraExposure(value) {\n        this._imageProcessingConfiguration.exposure = value;\n    }\n    /**\n     * Gets The camera contrast used on this material.\n     */\n    get cameraContrast() {\n        return this._imageProcessingConfiguration.contrast;\n    }\n    /**\n     * Sets The camera contrast used on this material.\n     */\n    set cameraContrast(value) {\n        this._imageProcessingConfiguration.contrast = value;\n    }\n    /**\n     * Gets the Color Grading 2D Lookup Texture.\n     */\n    get cameraColorGradingTexture() {\n        return this._imageProcessingConfiguration.colorGradingTexture;\n    }\n    /**\n     * Sets the Color Grading 2D Lookup Texture.\n     */\n    set cameraColorGradingTexture(value) {\n        this._imageProcessingConfiguration.colorGradingTexture = value;\n    }\n    /**\n     * The color grading curves provide additional color adjustmnent that is applied after any color grading transform (3D LUT).\n     * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\n     * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\n     * corresponding to low luminance, medium luminance, and high luminance areas respectively.\n     */\n    get cameraColorCurves() {\n        return this._imageProcessingConfiguration.colorCurves;\n    }\n    /**\n     * The color grading curves provide additional color adjustment that is applied after any color grading transform (3D LUT).\n     * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\n     * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\n     * corresponding to low luminance, medium luminance, and high luminance areas respectively.\n     */\n    set cameraColorCurves(value) {\n        this._imageProcessingConfiguration.colorCurves = value;\n    }\n    /**\n     * Can this material render to several textures at once\n     */\n    get canRenderToMRT() {\n        return true;\n    }\n    /**\n     * Instantiates a new standard material.\n     * This is the default material used in Babylon. It is the best trade off between quality\n     * and performances.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\n     * @param name Define the name of the material in the scene\n     * @param scene Define the scene the material belong to\n     * @param forceGLSL Use the GLSL code generation for the shader (even on WebGPU). Default is false\n     */\n    constructor(name, scene, forceGLSL = false) {\n        super(name, scene, undefined, forceGLSL || StandardMaterial.ForceGLSL);\n        this._diffuseTexture = null;\n        this._ambientTexture = null;\n        this._opacityTexture = null;\n        this._reflectionTexture = null;\n        this._emissiveTexture = null;\n        this._specularTexture = null;\n        this._bumpTexture = null;\n        this._lightmapTexture = null;\n        this._refractionTexture = null;\n        /**\n         * The color of the material lit by the environmental background lighting.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction#ambient-color-example\n         */\n        this.ambientColor = new Color3(0, 0, 0);\n        /**\n         * The basic color of the material as viewed under a light.\n         */\n        this.diffuseColor = new Color3(1, 1, 1);\n        /**\n         * Define how the color and intensity of the highlight given by the light in the material.\n         */\n        this.specularColor = new Color3(1, 1, 1);\n        /**\n         * Define the color of the material as if self lit.\n         * This will be mixed in the final result even in the absence of light.\n         */\n        this.emissiveColor = new Color3(0, 0, 0);\n        /**\n         * Defines how sharp are the highlights in the material.\n         * The bigger the value the sharper giving a more glossy feeling to the result.\n         * Reversely, the smaller the value the blurrier giving a more rough feeling to the result.\n         */\n        this.specularPower = 64;\n        this._useAlphaFromDiffuseTexture = false;\n        this._useEmissiveAsIllumination = false;\n        this._linkEmissiveWithDiffuse = false;\n        this._useSpecularOverAlpha = false;\n        this._useReflectionOverAlpha = false;\n        this._disableLighting = false;\n        this._useObjectSpaceNormalMap = false;\n        this._useParallax = false;\n        this._useParallaxOcclusion = false;\n        /**\n         * Apply a scaling factor that determine which \"depth\" the height map should reprensent. A value between 0.05 and 0.1 is reasonnable in Parallax, you can reach 0.2 using Parallax Occlusion.\n         */\n        this.parallaxScaleBias = 0.05;\n        this._roughness = 0;\n        /**\n         * In case of refraction, define the value of the index of refraction.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\n         */\n        this.indexOfRefraction = 0.98;\n        /**\n         * Invert the refraction texture alongside the y axis.\n         * It can be useful with procedural textures or probe for instance.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\n         */\n        this.invertRefractionY = true;\n        /**\n         * Defines the alpha limits in alpha test mode.\n         */\n        this.alphaCutOff = 0.4;\n        this._useLightmapAsShadowmap = false;\n        this._useReflectionFresnelFromSpecular = false;\n        this._useGlossinessFromSpecularMapAlpha = false;\n        this._maxSimultaneousLights = 4;\n        this._invertNormalMapX = false;\n        this._invertNormalMapY = false;\n        this._twoSidedLighting = false;\n        this._applyDecalMapAfterDetailMap = false;\n        this._shadersLoaded = false;\n        this._renderTargets = new SmartArray(16);\n        this._globalAmbientColor = new Color3(0, 0, 0);\n        this._cacheHasRenderTargetTextures = false;\n        this.detailMap = new DetailMapConfiguration(this);\n        // Setup the default processing configuration to the scene.\n        this._attachImageProcessingConfiguration(null);\n        this.prePassConfiguration = new PrePassConfiguration();\n        this.getRenderTargetTextures = () => {\n            this._renderTargets.reset();\n            if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n                this._renderTargets.push(this._reflectionTexture);\n            }\n            if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\n                this._renderTargets.push(this._refractionTexture);\n            }\n            this._eventInfo.renderTargets = this._renderTargets;\n            this._callbackPluginEventFillRenderTargetTextures(this._eventInfo);\n            return this._renderTargets;\n        };\n    }\n    /**\n     * Gets a boolean indicating that current material needs to register RTT\n     */\n    get hasRenderTargetTextures() {\n        if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n            return true;\n        }\n        if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\n            return true;\n        }\n        return this._cacheHasRenderTargetTextures;\n    }\n    /**\n     * Gets the current class name of the material e.g. \"StandardMaterial\"\n     * Mainly use in serialization.\n     * @returns the class name\n     */\n    getClassName() {\n        return \"StandardMaterial\";\n    }\n    /**\n     * Specifies if the material will require alpha blending\n     * @returns a boolean specifying if alpha blending is needed\n     */\n    needAlphaBlending() {\n        if (this._hasTransparencyMode) {\n            return this._transparencyModeIsBlend;\n        }\n        if (this._disableAlphaBlending) {\n            return false;\n        }\n        return (this.alpha < 1.0 ||\n            this._opacityTexture != null ||\n            this._shouldUseAlphaFromDiffuseTexture() ||\n            (this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled));\n    }\n    /**\n     * Specifies if this material should be rendered in alpha test mode\n     * @returns a boolean specifying if an alpha test is needed.\n     */\n    needAlphaTesting() {\n        if (this._hasTransparencyMode) {\n            return this._transparencyModeIsTest;\n        }\n        return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === Material.MATERIAL_ALPHATEST);\n    }\n    /**\n     * @returns whether or not the alpha value of the diffuse texture should be used for alpha blending.\n     */\n    _shouldUseAlphaFromDiffuseTexture() {\n        return this._diffuseTexture != null && this._diffuseTexture.hasAlpha && this._useAlphaFromDiffuseTexture && this._transparencyMode !== Material.MATERIAL_OPAQUE;\n    }\n    /**\n     * @returns whether or not there is a usable alpha channel for transparency.\n     */\n    _hasAlphaChannel() {\n        return (this._diffuseTexture != null && this._diffuseTexture.hasAlpha) || this._opacityTexture != null;\n    }\n    /**\n     * Get the texture used for alpha test purpose.\n     * @returns the diffuse texture in case of the standard material.\n     */\n    getAlphaTestTexture() {\n        return this._diffuseTexture;\n    }\n    /**\n     * Get if the submesh is ready to be used and all its information available.\n     * Child classes can use it to update shaders\n     * @param mesh defines the mesh to check\n     * @param subMesh defines which submesh to check\n     * @param useInstances specifies that instances should be used\n     * @returns a boolean indicating that the submesh is ready or not\n     */\n    isReadyForSubMesh(mesh, subMesh, useInstances = false) {\n        if (!this._uniformBufferLayoutBuilt) {\n            this.buildUniformLayout();\n        }\n        const drawWrapper = subMesh._drawWrapper;\n        if (drawWrapper.effect && this.isFrozen) {\n            if (drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            this._callbackPluginEventGeneric(4 /* MaterialPluginEvent.GetDefineNames */, this._eventInfo);\n            subMesh.materialDefines = new StandardMaterialDefines(this._eventInfo.defineNames);\n        }\n        const scene = this.getScene();\n        const defines = subMesh.materialDefines;\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const engine = scene.getEngine();\n        // Lights\n        defines._needNormals = PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\n        // Multiview\n        PrepareDefinesForMultiview(scene, defines);\n        // PrePass\n        const oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\n        PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\n        // Order independant transparency\n        PrepareDefinesForOIT(scene, defines, oit);\n        MaterialHelperGeometryRendering.PrepareDefines(engine.currentRenderPassId, mesh, defines);\n        // Textures\n        if (defines._areTexturesDirty) {\n            this._eventInfo.hasRenderTargetTextures = false;\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\n            this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\n            defines._needUVs = false;\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\n                defines[\"MAINUV\" + i] = false;\n            }\n            if (scene.texturesEnabled) {\n                defines.DIFFUSEDIRECTUV = 0;\n                defines.BUMPDIRECTUV = 0;\n                defines.AMBIENTDIRECTUV = 0;\n                defines.OPACITYDIRECTUV = 0;\n                defines.EMISSIVEDIRECTUV = 0;\n                defines.SPECULARDIRECTUV = 0;\n                defines.LIGHTMAPDIRECTUV = 0;\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                    if (!this._diffuseTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        PrepareDefinesForMergedUV(this._diffuseTexture, defines, \"DIFFUSE\");\n                    }\n                }\n                else {\n                    defines.DIFFUSE = false;\n                }\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\n                    if (!this._ambientTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\n                    }\n                }\n                else {\n                    defines.AMBIENT = false;\n                }\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\n                    if (!this._opacityTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\n                        defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\n                    }\n                }\n                else {\n                    defines.OPACITY = false;\n                }\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\n                    if (!this._reflectionTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        defines._needNormals = true;\n                        defines.REFLECTION = true;\n                        defines.ROUGHNESS = this._roughness > 0;\n                        defines.REFLECTIONOVERALPHA = this._useReflectionOverAlpha;\n                        defines.INVERTCUBICMAP = this._reflectionTexture.coordinatesMode === Texture.INVCUBIC_MODE;\n                        defines.REFLECTIONMAP_3D = this._reflectionTexture.isCube;\n                        defines.REFLECTIONMAP_OPPOSITEZ =\n                            defines.REFLECTIONMAP_3D && this.getScene().useRightHandedSystem ? !this._reflectionTexture.invertZ : this._reflectionTexture.invertZ;\n                        defines.RGBDREFLECTION = this._reflectionTexture.isRGBD;\n                        switch (this._reflectionTexture.coordinatesMode) {\n                            case Texture.EXPLICIT_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_EXPLICIT\");\n                                break;\n                            case Texture.PLANAR_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_PLANAR\");\n                                break;\n                            case Texture.PROJECTION_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_PROJECTION\");\n                                break;\n                            case Texture.SKYBOX_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_SKYBOX\");\n                                break;\n                            case Texture.SPHERICAL_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_SPHERICAL\");\n                                break;\n                            case Texture.EQUIRECTANGULAR_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_EQUIRECTANGULAR\");\n                                break;\n                            case Texture.FIXED_EQUIRECTANGULAR_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_EQUIRECTANGULAR_FIXED\");\n                                break;\n                            case Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\");\n                                break;\n                            case Texture.CUBIC_MODE:\n                            case Texture.INVCUBIC_MODE:\n                            default:\n                                defines.setReflectionMode(\"REFLECTIONMAP_CUBIC\");\n                                break;\n                        }\n                        defines.USE_LOCAL_REFLECTIONMAP_CUBIC = this._reflectionTexture.boundingBoxSize ? true : false;\n                    }\n                }\n                else {\n                    defines.REFLECTION = false;\n                    defines.REFLECTIONMAP_OPPOSITEZ = false;\n                }\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\n                    if (!this._emissiveTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\n                    }\n                }\n                else {\n                    defines.EMISSIVE = false;\n                }\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\n                    if (!this._lightmapTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\n                        defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\n                        defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\n                    }\n                }\n                else {\n                    defines.LIGHTMAP = false;\n                }\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\n                    if (!this._specularTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        PrepareDefinesForMergedUV(this._specularTexture, defines, \"SPECULAR\");\n                        defines.GLOSSINESS = this._useGlossinessFromSpecularMapAlpha;\n                    }\n                }\n                else {\n                    defines.SPECULAR = false;\n                }\n                if (scene.getEngine().getCaps().standardDerivatives && this._bumpTexture && StandardMaterial.BumpTextureEnabled) {\n                    // Bump texture can not be not blocking.\n                    if (!this._bumpTexture.isReady()) {\n                        return false;\n                    }\n                    else {\n                        PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\n                        defines.PARALLAX = this._useParallax;\n                        defines.PARALLAX_RHS = scene.useRightHandedSystem;\n                        defines.PARALLAXOCCLUSION = this._useParallaxOcclusion;\n                    }\n                    defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\n                }\n                else {\n                    defines.BUMP = false;\n                    defines.PARALLAX = false;\n                    defines.PARALLAX_RHS = false;\n                    defines.PARALLAXOCCLUSION = false;\n                }\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\n                    if (!this._refractionTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        defines._needUVs = true;\n                        defines.REFRACTION = true;\n                        defines.REFRACTIONMAP_3D = this._refractionTexture.isCube;\n                        defines.RGBDREFRACTION = this._refractionTexture.isRGBD;\n                        defines.USE_LOCAL_REFRACTIONMAP_CUBIC = this._refractionTexture.boundingBoxSize ? true : false;\n                    }\n                }\n                else {\n                    defines.REFRACTION = false;\n                }\n                defines.TWOSIDEDLIGHTING = !this._backFaceCulling && this._twoSidedLighting;\n            }\n            else {\n                defines.DIFFUSE = false;\n                defines.AMBIENT = false;\n                defines.OPACITY = false;\n                defines.REFLECTION = false;\n                defines.EMISSIVE = false;\n                defines.LIGHTMAP = false;\n                defines.BUMP = false;\n                defines.REFRACTION = false;\n            }\n            defines.ALPHAFROMDIFFUSE = this._shouldUseAlphaFromDiffuseTexture();\n            defines.EMISSIVEASILLUMINATION = this._useEmissiveAsIllumination;\n            defines.LINKEMISSIVEWITHDIFFUSE = this._linkEmissiveWithDiffuse;\n            defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\n            defines.PREMULTIPLYALPHA = this.alphaMode === Constants.ALPHA_PREMULTIPLIED || this.alphaMode === Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\n            defines.ALPHATEST_AFTERALLALPHACOMPUTATIONS = this.transparencyMode !== null;\n            defines.ALPHABLEND = this.transparencyMode === null || this.needAlphaBlendingForMesh(mesh); // check on null for backward compatibility\n        }\n        this._eventInfo.isReadyForSubMesh = true;\n        this._eventInfo.defines = defines;\n        this._eventInfo.subMesh = subMesh;\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\n        if (!this._eventInfo.isReadyForSubMesh) {\n            return false;\n        }\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n            if (!this._imageProcessingConfiguration.isReady()) {\n                return false;\n            }\n            this._imageProcessingConfiguration.prepareDefines(defines);\n            defines.IS_REFLECTION_LINEAR = this.reflectionTexture != null && !this.reflectionTexture.gammaSpace;\n            defines.IS_REFRACTION_LINEAR = this.refractionTexture != null && !this.refractionTexture.gammaSpace;\n        }\n        if (defines._areFresnelDirty) {\n            if (StandardMaterial.FresnelEnabled) {\n                // Fresnel\n                if (this._diffuseFresnelParameters ||\n                    this._opacityFresnelParameters ||\n                    this._emissiveFresnelParameters ||\n                    this._refractionFresnelParameters ||\n                    this._reflectionFresnelParameters) {\n                    defines.DIFFUSEFRESNEL = this._diffuseFresnelParameters && this._diffuseFresnelParameters.isEnabled;\n                    defines.OPACITYFRESNEL = this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled;\n                    defines.REFLECTIONFRESNEL = this._reflectionFresnelParameters && this._reflectionFresnelParameters.isEnabled;\n                    defines.REFLECTIONFRESNELFROMSPECULAR = this._useReflectionFresnelFromSpecular;\n                    defines.REFRACTIONFRESNEL = this._refractionFresnelParameters && this._refractionFresnelParameters.isEnabled;\n                    defines.EMISSIVEFRESNEL = this._emissiveFresnelParameters && this._emissiveFresnelParameters.isEnabled;\n                    defines._needNormals = true;\n                    defines.FRESNEL = true;\n                }\n            }\n            else {\n                defines.FRESNEL = false;\n            }\n        }\n        // Check if Area Lights have LTC texture.\n        if (defines[\"AREALIGHTUSED\"]) {\n            for (let index = 0; index < mesh.lightSources.length; index++) {\n                if (!mesh.lightSources[index]._isReady()) {\n                    return false;\n                }\n            }\n        }\n        // Misc.\n        PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this.needAlphaTestingForMesh(mesh), defines, this._applyDecalMapAfterDetailMap);\n        // Values that need to be evaluated on every frame\n        PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\n        // External config\n        this._eventInfo.defines = defines;\n        this._eventInfo.mesh = mesh;\n        this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo);\n        // Attribs\n        PrepareDefinesForAttributes(mesh, defines, true, true, true);\n        // External config\n        this._callbackPluginEventPrepareDefines(this._eventInfo);\n        // Get correct effect\n        let forceWasNotReadyPreviously = false;\n        if (defines.isDirty) {\n            const lightDisposed = defines._areLightsDisposed;\n            defines.markAsProcessed();\n            // Fallbacks\n            const fallbacks = new EffectFallbacks();\n            if (defines.REFLECTION) {\n                fallbacks.addFallback(0, \"REFLECTION\");\n            }\n            if (defines.SPECULAR) {\n                fallbacks.addFallback(0, \"SPECULAR\");\n            }\n            if (defines.BUMP) {\n                fallbacks.addFallback(0, \"BUMP\");\n            }\n            if (defines.PARALLAX) {\n                fallbacks.addFallback(1, \"PARALLAX\");\n            }\n            if (defines.PARALLAX_RHS) {\n                fallbacks.addFallback(1, \"PARALLAX_RHS\");\n            }\n            if (defines.PARALLAXOCCLUSION) {\n                fallbacks.addFallback(0, \"PARALLAXOCCLUSION\");\n            }\n            if (defines.SPECULAROVERALPHA) {\n                fallbacks.addFallback(0, \"SPECULAROVERALPHA\");\n            }\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n            if (defines.POINTSIZE) {\n                fallbacks.addFallback(0, \"POINTSIZE\");\n            }\n            if (defines.LOGARITHMICDEPTH) {\n                fallbacks.addFallback(0, \"LOGARITHMICDEPTH\");\n            }\n            HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights);\n            if (defines.SPECULARTERM) {\n                fallbacks.addFallback(0, \"SPECULARTERM\");\n            }\n            if (defines.DIFFUSEFRESNEL) {\n                fallbacks.addFallback(1, \"DIFFUSEFRESNEL\");\n            }\n            if (defines.OPACITYFRESNEL) {\n                fallbacks.addFallback(2, \"OPACITYFRESNEL\");\n            }\n            if (defines.REFLECTIONFRESNEL) {\n                fallbacks.addFallback(3, \"REFLECTIONFRESNEL\");\n            }\n            if (defines.EMISSIVEFRESNEL) {\n                fallbacks.addFallback(4, \"EMISSIVEFRESNEL\");\n            }\n            if (defines.FRESNEL) {\n                fallbacks.addFallback(4, \"FRESNEL\");\n            }\n            if (defines.MULTIVIEW) {\n                fallbacks.addFallback(0, \"MULTIVIEW\");\n            }\n            //Attributes\n            const attribs = [VertexBuffer.PositionKind];\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n            if (defines.TANGENT) {\n                attribs.push(VertexBuffer.TangentKind);\n            }\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\n                if (defines[\"UV\" + i]) {\n                    attribs.push(`uv${i === 1 ? \"\" : i}`);\n                }\n            }\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n            PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n            PrepareAttributesForInstances(attribs, defines);\n            PrepareAttributesForMorphTargets(attribs, mesh, defines);\n            PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\n            let shaderName = \"default\";\n            const uniforms = [\n                \"world\",\n                \"view\",\n                \"viewProjection\",\n                \"vEyePosition\",\n                \"vLightsType\",\n                \"vAmbientColor\",\n                \"vDiffuseColor\",\n                \"vSpecularColor\",\n                \"vEmissiveColor\",\n                \"visibility\",\n                \"vFogInfos\",\n                \"vFogColor\",\n                \"pointSize\",\n                \"vDiffuseInfos\",\n                \"vAmbientInfos\",\n                \"vOpacityInfos\",\n                \"vReflectionInfos\",\n                \"vEmissiveInfos\",\n                \"vSpecularInfos\",\n                \"vBumpInfos\",\n                \"vLightmapInfos\",\n                \"vRefractionInfos\",\n                \"mBones\",\n                \"diffuseMatrix\",\n                \"ambientMatrix\",\n                \"opacityMatrix\",\n                \"reflectionMatrix\",\n                \"emissiveMatrix\",\n                \"specularMatrix\",\n                \"bumpMatrix\",\n                \"normalMatrix\",\n                \"lightmapMatrix\",\n                \"refractionMatrix\",\n                \"diffuseLeftColor\",\n                \"diffuseRightColor\",\n                \"opacityParts\",\n                \"reflectionLeftColor\",\n                \"reflectionRightColor\",\n                \"emissiveLeftColor\",\n                \"emissiveRightColor\",\n                \"refractionLeftColor\",\n                \"refractionRightColor\",\n                \"vReflectionPosition\",\n                \"vReflectionSize\",\n                \"vRefractionPosition\",\n                \"vRefractionSize\",\n                \"logarithmicDepthConstant\",\n                \"vTangentSpaceParams\",\n                \"alphaCutOff\",\n                \"boneTextureWidth\",\n                \"morphTargetTextureInfo\",\n                \"morphTargetTextureIndices\",\n                \"cameraInfo\",\n            ];\n            const samplers = [\n                \"diffuseSampler\",\n                \"ambientSampler\",\n                \"opacitySampler\",\n                \"reflectionCubeSampler\",\n                \"reflection2DSampler\",\n                \"emissiveSampler\",\n                \"specularSampler\",\n                \"bumpSampler\",\n                \"lightmapSampler\",\n                \"refractionCubeSampler\",\n                \"refraction2DSampler\",\n                \"boneSampler\",\n                \"morphTargets\",\n                \"oitDepthSampler\",\n                \"oitFrontColorSampler\",\n                \"areaLightsLTC1Sampler\",\n                \"areaLightsLTC2Sampler\",\n            ];\n            const uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\n            const indexParameters = { maxSimultaneousLights: this._maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS };\n            this._eventInfo.fallbacks = fallbacks;\n            this._eventInfo.fallbackRank = 0;\n            this._eventInfo.defines = defines;\n            this._eventInfo.uniforms = uniforms;\n            this._eventInfo.attributes = attribs;\n            this._eventInfo.samplers = samplers;\n            this._eventInfo.uniformBuffersNames = uniformBuffers;\n            this._eventInfo.customCode = undefined;\n            this._eventInfo.mesh = mesh;\n            this._eventInfo.indexParameters = indexParameters;\n            this._callbackPluginEventGeneric(128 /* MaterialPluginEvent.PrepareEffect */, this._eventInfo);\n            MaterialHelperGeometryRendering.AddUniformsAndSamplers(uniforms, samplers);\n            PrePassConfiguration.AddUniforms(uniforms);\n            PrePassConfiguration.AddSamplers(samplers);\n            if (ImageProcessingConfiguration) {\n                ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\n                ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\n            }\n            PrepareUniformsAndSamplersList({\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: this._maxSimultaneousLights,\n            });\n            AddClipPlaneUniforms(uniforms);\n            const csnrOptions = {};\n            if (this.customShaderNameResolve) {\n                shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\n            }\n            const join = defines.toString();\n            const previousEffect = subMesh.effect;\n            let effect = scene.getEngine().createEffect(shaderName, {\n                attributes: attribs,\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: join,\n                fallbacks: fallbacks,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters,\n                processFinalCode: csnrOptions.processFinalCode,\n                processCodeAfterIncludes: this._eventInfo.customCode,\n                multiTarget: defines.PREPASS,\n                shaderLanguage: this._shaderLanguage,\n                extraInitializationsAsync: this._shadersLoaded\n                    ? undefined\n                    : async () => {\n                        if (this._shaderLanguage === 1 /* ShaderLanguage.WGSL */) {\n                            await Promise.all([import(\"../ShadersWGSL/default.vertex\"), import(\"../ShadersWGSL/default.fragment\")]);\n                        }\n                        else {\n                            await Promise.all([import(\"../Shaders/default.vertex\"), import(\"../Shaders/default.fragment\")]);\n                        }\n                        this._shadersLoaded = true;\n                    },\n            }, engine);\n            this._eventInfo.customCode = undefined;\n            if (effect) {\n                if (this._onEffectCreatedObservable) {\n                    onCreatedEffectParameters.effect = effect;\n                    onCreatedEffectParameters.subMesh = subMesh;\n                    this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n                }\n                // Use previous effect while new one is compiling\n                if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\n                    effect = previousEffect;\n                    defines.markAsUnprocessed();\n                    forceWasNotReadyPreviously = this.isFrozen;\n                    if (lightDisposed) {\n                        // re register in case it takes more than one frame.\n                        defines._areLightsDisposed = true;\n                        return false;\n                    }\n                }\n                else {\n                    scene.resetCachedMaterial();\n                    subMesh.setEffect(effect, defines, this._materialContext);\n                }\n            }\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        drawWrapper._wasPreviouslyReady = forceWasNotReadyPreviously ? false : true;\n        drawWrapper._wasPreviouslyUsingInstances = useInstances;\n        this._checkScenePerformancePriority();\n        return true;\n    }\n    /**\n     * Builds the material UBO layouts.\n     * Used internally during the effect preparation.\n     */\n    buildUniformLayout() {\n        // Order is important !\n        const ubo = this._uniformBuffer;\n        ubo.addUniform(\"diffuseLeftColor\", 4);\n        ubo.addUniform(\"diffuseRightColor\", 4);\n        ubo.addUniform(\"opacityParts\", 4);\n        ubo.addUniform(\"reflectionLeftColor\", 4);\n        ubo.addUniform(\"reflectionRightColor\", 4);\n        ubo.addUniform(\"refractionLeftColor\", 4);\n        ubo.addUniform(\"refractionRightColor\", 4);\n        ubo.addUniform(\"emissiveLeftColor\", 4);\n        ubo.addUniform(\"emissiveRightColor\", 4);\n        ubo.addUniform(\"vDiffuseInfos\", 2);\n        ubo.addUniform(\"vAmbientInfos\", 2);\n        ubo.addUniform(\"vOpacityInfos\", 2);\n        ubo.addUniform(\"vReflectionInfos\", 2);\n        ubo.addUniform(\"vReflectionPosition\", 3);\n        ubo.addUniform(\"vReflectionSize\", 3);\n        ubo.addUniform(\"vEmissiveInfos\", 2);\n        ubo.addUniform(\"vLightmapInfos\", 2);\n        ubo.addUniform(\"vSpecularInfos\", 2);\n        ubo.addUniform(\"vBumpInfos\", 3);\n        ubo.addUniform(\"diffuseMatrix\", 16);\n        ubo.addUniform(\"ambientMatrix\", 16);\n        ubo.addUniform(\"opacityMatrix\", 16);\n        ubo.addUniform(\"reflectionMatrix\", 16);\n        ubo.addUniform(\"emissiveMatrix\", 16);\n        ubo.addUniform(\"lightmapMatrix\", 16);\n        ubo.addUniform(\"specularMatrix\", 16);\n        ubo.addUniform(\"bumpMatrix\", 16);\n        ubo.addUniform(\"vTangentSpaceParams\", 2);\n        ubo.addUniform(\"pointSize\", 1);\n        ubo.addUniform(\"alphaCutOff\", 1);\n        ubo.addUniform(\"refractionMatrix\", 16);\n        ubo.addUniform(\"vRefractionInfos\", 4);\n        ubo.addUniform(\"vRefractionPosition\", 3);\n        ubo.addUniform(\"vRefractionSize\", 3);\n        ubo.addUniform(\"vSpecularColor\", 4);\n        ubo.addUniform(\"vEmissiveColor\", 3);\n        ubo.addUniform(\"vDiffuseColor\", 4);\n        ubo.addUniform(\"vAmbientColor\", 3);\n        ubo.addUniform(\"cameraInfo\", 4);\n        super.buildUniformLayout();\n    }\n    /**\n     * Binds the submesh to this material by preparing the effect and shader to draw\n     * @param world defines the world transformation matrix\n     * @param mesh defines the mesh containing the submesh\n     * @param subMesh defines the submesh to bind the material to\n     */\n    bindForSubMesh(world, mesh, subMesh) {\n        const scene = this.getScene();\n        const defines = subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices Mesh.\n        mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n        mesh.transferToEffect(world);\n        // Binding unconditionally\n        this._uniformBuffer.bindToEffect(effect, \"Material\");\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\n        MaterialHelperGeometryRendering.Bind(scene.getEngine().currentRenderPassId, this._activeEffect, mesh, world, this);\n        const camera = scene.activeCamera;\n        if (camera) {\n            this._uniformBuffer.updateFloat4(\"cameraInfo\", camera.minZ, camera.maxZ, 0, 0);\n        }\n        else {\n            this._uniformBuffer.updateFloat4(\"cameraInfo\", 0, 0, 0, 0);\n        }\n        this._eventInfo.subMesh = subMesh;\n        this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\n        // Normal Matrix\n        if (defines.OBJECTSPACE_NORMALMAP) {\n            world.toNormalMatrix(this._normalMatrix);\n            this.bindOnlyNormalMatrix(this._normalMatrix);\n        }\n        const mustRebind = this._mustRebind(scene, effect, subMesh, mesh.visibility);\n        // Bones\n        BindBonesParameters(mesh, effect);\n        const ubo = this._uniformBuffer;\n        if (mustRebind) {\n            this.bindViewProjection(effect);\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync || subMesh._drawWrapper._forceRebindOnNextCall) {\n                if (StandardMaterial.FresnelEnabled && defines.FRESNEL) {\n                    // Fresnel\n                    if (this.diffuseFresnelParameters && this.diffuseFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"diffuseLeftColor\", this.diffuseFresnelParameters.leftColor, this.diffuseFresnelParameters.power);\n                        ubo.updateColor4(\"diffuseRightColor\", this.diffuseFresnelParameters.rightColor, this.diffuseFresnelParameters.bias);\n                    }\n                    if (this.opacityFresnelParameters && this.opacityFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"opacityParts\", new Color3(this.opacityFresnelParameters.leftColor.toLuminance(), this.opacityFresnelParameters.rightColor.toLuminance(), this.opacityFresnelParameters.bias), this.opacityFresnelParameters.power);\n                    }\n                    if (this.reflectionFresnelParameters && this.reflectionFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"reflectionLeftColor\", this.reflectionFresnelParameters.leftColor, this.reflectionFresnelParameters.power);\n                        ubo.updateColor4(\"reflectionRightColor\", this.reflectionFresnelParameters.rightColor, this.reflectionFresnelParameters.bias);\n                    }\n                    if (this.refractionFresnelParameters && this.refractionFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"refractionLeftColor\", this.refractionFresnelParameters.leftColor, this.refractionFresnelParameters.power);\n                        ubo.updateColor4(\"refractionRightColor\", this.refractionFresnelParameters.rightColor, this.refractionFresnelParameters.bias);\n                    }\n                    if (this.emissiveFresnelParameters && this.emissiveFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"emissiveLeftColor\", this.emissiveFresnelParameters.leftColor, this.emissiveFresnelParameters.power);\n                        ubo.updateColor4(\"emissiveRightColor\", this.emissiveFresnelParameters.rightColor, this.emissiveFresnelParameters.bias);\n                    }\n                }\n                // Textures\n                if (scene.texturesEnabled) {\n                    if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                        ubo.updateFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\n                        BindTextureMatrix(this._diffuseTexture, ubo, \"diffuse\");\n                    }\n                    if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\n                        ubo.updateFloat2(\"vAmbientInfos\", this._ambientTexture.coordinatesIndex, this._ambientTexture.level);\n                        BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\n                    }\n                    if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\n                        ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\n                        BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\n                    }\n                    if (this._hasAlphaChannel()) {\n                        ubo.updateFloat(\"alphaCutOff\", this.alphaCutOff);\n                    }\n                    if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\n                        ubo.updateFloat2(\"vReflectionInfos\", this._reflectionTexture.level, this.roughness);\n                        ubo.updateMatrix(\"reflectionMatrix\", this._reflectionTexture.getReflectionTextureMatrix());\n                        if (this._reflectionTexture.boundingBoxSize) {\n                            const cubeTexture = this._reflectionTexture;\n                            ubo.updateVector3(\"vReflectionPosition\", cubeTexture.boundingBoxPosition);\n                            ubo.updateVector3(\"vReflectionSize\", cubeTexture.boundingBoxSize);\n                        }\n                    }\n                    else {\n                        ubo.updateFloat2(\"vReflectionInfos\", 0.0, this.roughness);\n                    }\n                    if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\n                        ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\n                        BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\n                    }\n                    if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\n                        ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\n                        BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\n                    }\n                    if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\n                        ubo.updateFloat2(\"vSpecularInfos\", this._specularTexture.coordinatesIndex, this._specularTexture.level);\n                        BindTextureMatrix(this._specularTexture, ubo, \"specular\");\n                    }\n                    if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\n                        ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, 1.0 / this._bumpTexture.level, this.parallaxScaleBias);\n                        BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\n                        if (scene._mirroredCameraPosition) {\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\n                        }\n                        else {\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\n                        }\n                    }\n                    if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\n                        let depth = 1.0;\n                        if (!this._refractionTexture.isCube) {\n                            ubo.updateMatrix(\"refractionMatrix\", this._refractionTexture.getReflectionTextureMatrix());\n                            if (this._refractionTexture.depth) {\n                                depth = this._refractionTexture.depth;\n                            }\n                        }\n                        ubo.updateFloat4(\"vRefractionInfos\", this._refractionTexture.level, this.indexOfRefraction, depth, this.invertRefractionY ? -1 : 1);\n                        if (this._refractionTexture.boundingBoxSize) {\n                            const cubeTexture = this._refractionTexture;\n                            ubo.updateVector3(\"vRefractionPosition\", cubeTexture.boundingBoxPosition);\n                            ubo.updateVector3(\"vRefractionSize\", cubeTexture.boundingBoxSize);\n                        }\n                    }\n                }\n                // Point size\n                if (this.pointsCloud) {\n                    ubo.updateFloat(\"pointSize\", this.pointSize);\n                }\n                ubo.updateColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\n                ubo.updateColor3(\"vEmissiveColor\", StandardMaterial.EmissiveTextureEnabled ? this.emissiveColor : Color3.BlackReadOnly);\n                ubo.updateColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha);\n                scene.ambientColor.multiplyToRef(this.ambientColor, this._globalAmbientColor);\n                ubo.updateColor3(\"vAmbientColor\", this._globalAmbientColor);\n            }\n            // Textures\n            if (scene.texturesEnabled) {\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                    effect.setTexture(\"diffuseSampler\", this._diffuseTexture);\n                }\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\n                    effect.setTexture(\"ambientSampler\", this._ambientTexture);\n                }\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\n                    effect.setTexture(\"opacitySampler\", this._opacityTexture);\n                }\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\n                    if (this._reflectionTexture.isCube) {\n                        effect.setTexture(\"reflectionCubeSampler\", this._reflectionTexture);\n                    }\n                    else {\n                        effect.setTexture(\"reflection2DSampler\", this._reflectionTexture);\n                    }\n                }\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\n                    effect.setTexture(\"emissiveSampler\", this._emissiveTexture);\n                }\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\n                    effect.setTexture(\"lightmapSampler\", this._lightmapTexture);\n                }\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\n                    effect.setTexture(\"specularSampler\", this._specularTexture);\n                }\n                if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\n                    effect.setTexture(\"bumpSampler\", this._bumpTexture);\n                }\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\n                    if (this._refractionTexture.isCube) {\n                        effect.setTexture(\"refractionCubeSampler\", this._refractionTexture);\n                    }\n                    else {\n                        effect.setTexture(\"refraction2DSampler\", this._refractionTexture);\n                    }\n                }\n            }\n            // OIT with depth peeling\n            if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\n                this.getScene().depthPeelingRenderer.bind(effect);\n            }\n            this._eventInfo.subMesh = subMesh;\n            this._callbackPluginEventBindForSubMesh(this._eventInfo);\n            // Clip plane\n            BindClipPlane(effect, this, scene);\n            // Colors\n            this.bindEyePosition(effect);\n        }\n        else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\n            this._needToBindSceneUbo = true;\n        }\n        if (mustRebind || !this.isFrozen) {\n            // Lights\n            if (scene.lightsEnabled && !this._disableLighting) {\n                BindLights(scene, mesh, effect, defines, this._maxSimultaneousLights);\n            }\n            // View\n            if ((scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) ||\n                this._reflectionTexture ||\n                this._refractionTexture ||\n                mesh.receiveShadows ||\n                defines.PREPASS) {\n                this.bindView(effect);\n            }\n            // Fog\n            BindFogParameters(scene, mesh, effect);\n            // Morph targets\n            if (defines.NUM_MORPH_INFLUENCERS) {\n                BindMorphTargetParameters(mesh, effect);\n            }\n            if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\n                mesh.bakedVertexAnimationManager?.bind(effect, defines.INSTANCES);\n            }\n            // Log. depth\n            if (this.useLogarithmicDepth) {\n                BindLogDepth(defines, effect, scene);\n            }\n            // image processing\n            if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\n                this._imageProcessingConfiguration.bind(this._activeEffect);\n            }\n        }\n        this._afterBind(mesh, this._activeEffect, subMesh);\n        ubo.update();\n    }\n    /**\n     * Get the list of animatables in the material.\n     * @returns the list of animatables object used in the material\n     */\n    getAnimatables() {\n        const results = super.getAnimatables();\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\n            results.push(this._diffuseTexture);\n        }\n        if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\n            results.push(this._ambientTexture);\n        }\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\n            results.push(this._opacityTexture);\n        }\n        if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\n            results.push(this._reflectionTexture);\n        }\n        if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\n            results.push(this._emissiveTexture);\n        }\n        if (this._specularTexture && this._specularTexture.animations && this._specularTexture.animations.length > 0) {\n            results.push(this._specularTexture);\n        }\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\n            results.push(this._bumpTexture);\n        }\n        if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\n            results.push(this._lightmapTexture);\n        }\n        if (this._refractionTexture && this._refractionTexture.animations && this._refractionTexture.animations.length > 0) {\n            results.push(this._refractionTexture);\n        }\n        return results;\n    }\n    /**\n     * Gets the active textures from the material\n     * @returns an array of textures\n     */\n    getActiveTextures() {\n        const activeTextures = super.getActiveTextures();\n        if (this._diffuseTexture) {\n            activeTextures.push(this._diffuseTexture);\n        }\n        if (this._ambientTexture) {\n            activeTextures.push(this._ambientTexture);\n        }\n        if (this._opacityTexture) {\n            activeTextures.push(this._opacityTexture);\n        }\n        if (this._reflectionTexture) {\n            activeTextures.push(this._reflectionTexture);\n        }\n        if (this._emissiveTexture) {\n            activeTextures.push(this._emissiveTexture);\n        }\n        if (this._specularTexture) {\n            activeTextures.push(this._specularTexture);\n        }\n        if (this._bumpTexture) {\n            activeTextures.push(this._bumpTexture);\n        }\n        if (this._lightmapTexture) {\n            activeTextures.push(this._lightmapTexture);\n        }\n        if (this._refractionTexture) {\n            activeTextures.push(this._refractionTexture);\n        }\n        return activeTextures;\n    }\n    /**\n     * Specifies if the material uses a texture\n     * @param texture defines the texture to check against the material\n     * @returns a boolean specifying if the material uses the texture\n     */\n    hasTexture(texture) {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n        if (this._diffuseTexture === texture) {\n            return true;\n        }\n        if (this._ambientTexture === texture) {\n            return true;\n        }\n        if (this._opacityTexture === texture) {\n            return true;\n        }\n        if (this._reflectionTexture === texture) {\n            return true;\n        }\n        if (this._emissiveTexture === texture) {\n            return true;\n        }\n        if (this._specularTexture === texture) {\n            return true;\n        }\n        if (this._bumpTexture === texture) {\n            return true;\n        }\n        if (this._lightmapTexture === texture) {\n            return true;\n        }\n        if (this._refractionTexture === texture) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Disposes the material\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\n     */\n    dispose(forceDisposeEffect, forceDisposeTextures) {\n        if (forceDisposeTextures) {\n            this._diffuseTexture?.dispose();\n            this._ambientTexture?.dispose();\n            this._opacityTexture?.dispose();\n            this._reflectionTexture?.dispose();\n            this._emissiveTexture?.dispose();\n            this._specularTexture?.dispose();\n            this._bumpTexture?.dispose();\n            this._lightmapTexture?.dispose();\n            this._refractionTexture?.dispose();\n        }\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\n    }\n    /**\n     * Makes a duplicate of the material, and gives it a new name\n     * @param name defines the new name for the duplicated material\n     * @param cloneTexturesOnlyOnce - if a texture is used in more than one channel (e.g diffuse and opacity), only clone it once and reuse it on the other channels. Default false.\n     * @param rootUrl defines the root URL to use to load textures\n     * @returns the cloned material\n     */\n    clone(name, cloneTexturesOnlyOnce = true, rootUrl = \"\") {\n        const result = SerializationHelper.Clone(() => new StandardMaterial(name, this.getScene()), this, { cloneTexturesOnlyOnce });\n        result.name = name;\n        result.id = name;\n        this.stencil.copyTo(result.stencil);\n        this._clonePlugins(result, rootUrl);\n        return result;\n    }\n    /**\n     * Creates a standard material from parsed material data\n     * @param source defines the JSON representation of the material\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a new standard material\n     */\n    static Parse(source, scene, rootUrl) {\n        const material = SerializationHelper.Parse(() => new StandardMaterial(source.name, scene), source, scene, rootUrl);\n        if (source.stencil) {\n            material.stencil.parse(source.stencil, scene, rootUrl);\n        }\n        Material._ParsePlugins(source, material, scene, rootUrl);\n        return material;\n    }\n    // Flags used to enable or disable a type of texture for all Standard Materials\n    /**\n     * Are diffuse textures enabled in the application.\n     */\n    static get DiffuseTextureEnabled() {\n        return MaterialFlags.DiffuseTextureEnabled;\n    }\n    static set DiffuseTextureEnabled(value) {\n        MaterialFlags.DiffuseTextureEnabled = value;\n    }\n    /**\n     * Are detail textures enabled in the application.\n     */\n    static get DetailTextureEnabled() {\n        return MaterialFlags.DetailTextureEnabled;\n    }\n    static set DetailTextureEnabled(value) {\n        MaterialFlags.DetailTextureEnabled = value;\n    }\n    /**\n     * Are ambient textures enabled in the application.\n     */\n    static get AmbientTextureEnabled() {\n        return MaterialFlags.AmbientTextureEnabled;\n    }\n    static set AmbientTextureEnabled(value) {\n        MaterialFlags.AmbientTextureEnabled = value;\n    }\n    /**\n     * Are opacity textures enabled in the application.\n     */\n    static get OpacityTextureEnabled() {\n        return MaterialFlags.OpacityTextureEnabled;\n    }\n    static set OpacityTextureEnabled(value) {\n        MaterialFlags.OpacityTextureEnabled = value;\n    }\n    /**\n     * Are reflection textures enabled in the application.\n     */\n    static get ReflectionTextureEnabled() {\n        return MaterialFlags.ReflectionTextureEnabled;\n    }\n    static set ReflectionTextureEnabled(value) {\n        MaterialFlags.ReflectionTextureEnabled = value;\n    }\n    /**\n     * Are emissive textures enabled in the application.\n     */\n    static get EmissiveTextureEnabled() {\n        return MaterialFlags.EmissiveTextureEnabled;\n    }\n    static set EmissiveTextureEnabled(value) {\n        MaterialFlags.EmissiveTextureEnabled = value;\n    }\n    /**\n     * Are specular textures enabled in the application.\n     */\n    static get SpecularTextureEnabled() {\n        return MaterialFlags.SpecularTextureEnabled;\n    }\n    static set SpecularTextureEnabled(value) {\n        MaterialFlags.SpecularTextureEnabled = value;\n    }\n    /**\n     * Are bump textures enabled in the application.\n     */\n    static get BumpTextureEnabled() {\n        return MaterialFlags.BumpTextureEnabled;\n    }\n    static set BumpTextureEnabled(value) {\n        MaterialFlags.BumpTextureEnabled = value;\n    }\n    /**\n     * Are lightmap textures enabled in the application.\n     */\n    static get LightmapTextureEnabled() {\n        return MaterialFlags.LightmapTextureEnabled;\n    }\n    static set LightmapTextureEnabled(value) {\n        MaterialFlags.LightmapTextureEnabled = value;\n    }\n    /**\n     * Are refraction textures enabled in the application.\n     */\n    static get RefractionTextureEnabled() {\n        return MaterialFlags.RefractionTextureEnabled;\n    }\n    static set RefractionTextureEnabled(value) {\n        MaterialFlags.RefractionTextureEnabled = value;\n    }\n    /**\n     * Are color grading textures enabled in the application.\n     */\n    static get ColorGradingTextureEnabled() {\n        return MaterialFlags.ColorGradingTextureEnabled;\n    }\n    static set ColorGradingTextureEnabled(value) {\n        MaterialFlags.ColorGradingTextureEnabled = value;\n    }\n    /**\n     * Are fresnels enabled in the application.\n     */\n    static get FresnelEnabled() {\n        return MaterialFlags.FresnelEnabled;\n    }\n    static set FresnelEnabled(value) {\n        MaterialFlags.FresnelEnabled = value;\n    }\n}\n/**\n * Force all the standard materials to compile to glsl even on WebGPU engines.\n * False by default. This is mostly meant for backward compatibility.\n */\nStandardMaterial.ForceGLSL = false;\n__decorate([\n    serializeAsTexture(\"diffuseTexture\")\n], StandardMaterial.prototype, \"_diffuseTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n], StandardMaterial.prototype, \"diffuseTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"ambientTexture\")\n], StandardMaterial.prototype, \"_ambientTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"ambientTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"opacityTexture\")\n], StandardMaterial.prototype, \"_opacityTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n], StandardMaterial.prototype, \"opacityTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"reflectionTexture\")\n], StandardMaterial.prototype, \"_reflectionTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"reflectionTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"emissiveTexture\")\n], StandardMaterial.prototype, \"_emissiveTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"emissiveTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"specularTexture\")\n], StandardMaterial.prototype, \"_specularTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"specularTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"bumpTexture\")\n], StandardMaterial.prototype, \"_bumpTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"bumpTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"lightmapTexture\")\n], StandardMaterial.prototype, \"_lightmapTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"lightmapTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"refractionTexture\")\n], StandardMaterial.prototype, \"_refractionTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"refractionTexture\", void 0);\n__decorate([\n    serializeAsColor3(\"ambient\")\n], StandardMaterial.prototype, \"ambientColor\", void 0);\n__decorate([\n    serializeAsColor3(\"diffuse\")\n], StandardMaterial.prototype, \"diffuseColor\", void 0);\n__decorate([\n    serializeAsColor3(\"specular\")\n], StandardMaterial.prototype, \"specularColor\", void 0);\n__decorate([\n    serializeAsColor3(\"emissive\")\n], StandardMaterial.prototype, \"emissiveColor\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"specularPower\", void 0);\n__decorate([\n    serialize(\"useAlphaFromDiffuseTexture\")\n], StandardMaterial.prototype, \"_useAlphaFromDiffuseTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n], StandardMaterial.prototype, \"useAlphaFromDiffuseTexture\", void 0);\n__decorate([\n    serialize(\"useEmissiveAsIllumination\")\n], StandardMaterial.prototype, \"_useEmissiveAsIllumination\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useEmissiveAsIllumination\", void 0);\n__decorate([\n    serialize(\"linkEmissiveWithDiffuse\")\n], StandardMaterial.prototype, \"_linkEmissiveWithDiffuse\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"linkEmissiveWithDiffuse\", void 0);\n__decorate([\n    serialize(\"useSpecularOverAlpha\")\n], StandardMaterial.prototype, \"_useSpecularOverAlpha\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useSpecularOverAlpha\", void 0);\n__decorate([\n    serialize(\"useReflectionOverAlpha\")\n], StandardMaterial.prototype, \"_useReflectionOverAlpha\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useReflectionOverAlpha\", void 0);\n__decorate([\n    serialize(\"disableLighting\")\n], StandardMaterial.prototype, \"_disableLighting\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n], StandardMaterial.prototype, \"disableLighting\", void 0);\n__decorate([\n    serialize(\"useObjectSpaceNormalMap\")\n], StandardMaterial.prototype, \"_useObjectSpaceNormalMap\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useObjectSpaceNormalMap\", void 0);\n__decorate([\n    serialize(\"useParallax\")\n], StandardMaterial.prototype, \"_useParallax\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useParallax\", void 0);\n__decorate([\n    serialize(\"useParallaxOcclusion\")\n], StandardMaterial.prototype, \"_useParallaxOcclusion\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useParallaxOcclusion\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"parallaxScaleBias\", void 0);\n__decorate([\n    serialize(\"roughness\")\n], StandardMaterial.prototype, \"_roughness\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"roughness\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"indexOfRefraction\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"invertRefractionY\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"alphaCutOff\", void 0);\n__decorate([\n    serialize(\"useLightmapAsShadowmap\")\n], StandardMaterial.prototype, \"_useLightmapAsShadowmap\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useLightmapAsShadowmap\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"diffuseFresnelParameters\")\n], StandardMaterial.prototype, \"_diffuseFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"diffuseFresnelParameters\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"opacityFresnelParameters\")\n], StandardMaterial.prototype, \"_opacityFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelAndMiscDirty\")\n], StandardMaterial.prototype, \"opacityFresnelParameters\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"reflectionFresnelParameters\")\n], StandardMaterial.prototype, \"_reflectionFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"reflectionFresnelParameters\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"refractionFresnelParameters\")\n], StandardMaterial.prototype, \"_refractionFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"refractionFresnelParameters\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"emissiveFresnelParameters\")\n], StandardMaterial.prototype, \"_emissiveFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"emissiveFresnelParameters\", void 0);\n__decorate([\n    serialize(\"useReflectionFresnelFromSpecular\")\n], StandardMaterial.prototype, \"_useReflectionFresnelFromSpecular\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"useReflectionFresnelFromSpecular\", void 0);\n__decorate([\n    serialize(\"useGlossinessFromSpecularMapAlpha\")\n], StandardMaterial.prototype, \"_useGlossinessFromSpecularMapAlpha\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useGlossinessFromSpecularMapAlpha\", void 0);\n__decorate([\n    serialize(\"maxSimultaneousLights\")\n], StandardMaterial.prototype, \"_maxSimultaneousLights\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n], StandardMaterial.prototype, \"maxSimultaneousLights\", void 0);\n__decorate([\n    serialize(\"invertNormalMapX\")\n], StandardMaterial.prototype, \"_invertNormalMapX\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"invertNormalMapX\", void 0);\n__decorate([\n    serialize(\"invertNormalMapY\")\n], StandardMaterial.prototype, \"_invertNormalMapY\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"invertNormalMapY\", void 0);\n__decorate([\n    serialize(\"twoSidedLighting\")\n], StandardMaterial.prototype, \"_twoSidedLighting\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"twoSidedLighting\", void 0);\n__decorate([\n    serialize(\"applyDecalMapAfterDetailMap\")\n], StandardMaterial.prototype, \"_applyDecalMapAfterDetailMap\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n], StandardMaterial.prototype, \"applyDecalMapAfterDetailMap\", void 0);\nRegisterClass(\"BABYLON.StandardMaterial\", StandardMaterial);\nScene.DefaultMaterialFactory = (scene) => {\n    return new StandardMaterial(\"default material\", scene);\n};\n//# sourceMappingURL=standardMaterial.js.map"],"names":["onCreatedEffectParameters","effect","subMesh","StandardMaterialDefines","MaterialDefines","constructor","externalProperties","super","this","MAINUV1","MAINUV2","MAINUV3","MAINUV4","MAINUV5","MAINUV6","DIFFUSE","DIFFUSEDIRECTUV","BAKED_VERTEX_ANIMATION_TEXTURE","AMBIENT","AMBIENTDIRECTUV","OPACITY","OPACITYDIRECTUV","OPACITYRGB","REFLECTION","EMISSIVE","EMISSIVEDIRECTUV","SPECULAR","SPECULARDIRECTUV","BUMP","BUMPDIRECTUV","PARALLAX","PARALLAX_RHS","PARALLAXOCCLUSION","SPECULAROVERALPHA","CLIPPLANE","CLIPPLANE2","CLIPPLANE3","CLIPPLANE4","CLIPPLANE5","CLIPPLANE6","ALPHATEST","DEPTHPREPASS","ALPHAFROMDIFFUSE","POINTSIZE","FOG","SPECULARTERM","DIFFUSEFRESNEL","OPACITYFRESNEL","REFLECTIONFRESNEL","REFRACTIONFRESNEL","EMISSIVEFRESNEL","FRESNEL","NORMAL","TANGENT","UV1","UV2","UV3","UV4","UV5","UV6","VERTEXCOLOR","VERTEXALPHA","NUM_BONE_INFLUENCERS","BonesPerMesh","BONETEXTURE","BONES_VELOCITY_ENABLED","INSTANCES","THIN_INSTANCES","INSTANCESCOLOR","GLOSSINESS","ROUGHNESS","EMISSIVEASILLUMINATION","LINKEMISSIVEWITHDIFFUSE","REFLECTIONFRESNELFROMSPECULAR","LIGHTMAP","LIGHTMAPDIRECTUV","OBJECTSPACE_NORMALMAP","USELIGHTMAPASSHADOWMAP","REFLECTIONMAP_3D","REFLECTIONMAP_SPHERICAL","REFLECTIONMAP_PLANAR","REFLECTIONMAP_CUBIC","USE_LOCAL_REFLECTIONMAP_CUBIC","USE_LOCAL_REFRACTIONMAP_CUBIC","REFLECTIONMAP_PROJECTION","REFLECTIONMAP_SKYBOX","REFLECTIONMAP_EXPLICIT","REFLECTIONMAP_EQUIRECTANGULAR","REFLECTIONMAP_EQUIRECTANGULAR_FIXED","REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED","REFLECTIONMAP_OPPOSITEZ","INVERTCUBICMAP","LOGARITHMICDEPTH","REFRACTION","REFRACTIONMAP_3D","REFLECTIONOVERALPHA","TWOSIDEDLIGHTING","SHADOWFLOAT","MORPHTARGETS","MORPHTARGETS_POSITION","MORPHTARGETS_NORMAL","MORPHTARGETS_TANGENT","MORPHTARGETS_UV","MORPHTARGETS_UV2","MORPHTARGETS_COLOR","MORPHTARGETTEXTURE_HASPOSITIONS","MORPHTARGETTEXTURE_HASNORMALS","MORPHTARGETTEXTURE_HASTANGENTS","MORPHTARGETTEXTURE_HASUVS","MORPHTARGETTEXTURE_HASUV2S","MORPHTARGETTEXTURE_HASCOLORS","NUM_MORPH_INFLUENCERS","MORPHTARGETS_TEXTURE","NONUNIFORMSCALING","PREMULTIPLYALPHA","ALPHATEST_AFTERALLALPHACOMPUTATIONS","ALPHABLEND","PREPASS","PREPASS_COLOR","PREPASS_COLOR_INDEX","PREPASS_IRRADIANCE","PREPASS_IRRADIANCE_INDEX","PREPASS_ALBEDO","PREPASS_ALBEDO_INDEX","PREPASS_ALBEDO_SQRT","PREPASS_ALBEDO_SQRT_INDEX","PREPASS_DEPTH","PREPASS_DEPTH_INDEX","PREPASS_SCREENSPACE_DEPTH","PREPASS_SCREENSPACE_DEPTH_INDEX","PREPASS_NORMALIZED_VIEW_DEPTH","PREPASS_NORMALIZED_VIEW_DEPTH_INDEX","PREPASS_NORMAL","PREPASS_NORMAL_INDEX","PREPASS_NORMAL_WORLDSPACE","PREPASS_WORLD_NORMAL","PREPASS_WORLD_NORMAL_INDEX","PREPASS_POSITION","PREPASS_POSITION_INDEX","PREPASS_LOCAL_POSITION","PREPASS_LOCAL_POSITION_INDEX","PREPASS_VELOCITY","PREPASS_VELOCITY_INDEX","PREPASS_VELOCITY_LINEAR","PREPASS_VELOCITY_LINEAR_INDEX","PREPASS_REFLECTIVITY","PREPASS_REFLECTIVITY_INDEX","SCENE_MRT_COUNT","RGBDLIGHTMAP","RGBDREFLECTION","RGBDREFRACTION","IMAGEPROCESSING","VIGNETTE","VIGNETTEBLENDMODEMULTIPLY","VIGNETTEBLENDMODEOPAQUE","TONEMAPPING","CONTRAST","COLORCURVES","COLORGRADING","COLORGRADING3D","SAMPLER3DGREENDEPTH","SAMPLER3DBGRMAP","DITHER","IMAGEPROCESSINGPOSTPROCESS","SKIPFINALCOLORCLAMP","MULTIVIEW","ORDER_INDEPENDENT_TRANSPARENCY","ORDER_INDEPENDENT_TRANSPARENCY_16BITS","CAMERA_ORTHOGRAPHIC","CAMERA_PERSPECTIVE","AREALIGHTSUPPORTED","IS_REFLECTION_LINEAR","IS_REFRACTION_LINEAR","EXPOSURE","DECAL_AFTER_DETAIL","rebuild","setReflectionMode","modeToEnable","modes","mode","StandardMaterial","PushMaterial","imageProcessingConfiguration","_imageProcessingConfiguration","value","_attachImageProcessingConfiguration","_markAllSubMeshesAsImageProcessingDirty","configuration","_imageProcessingObserver","onUpdateParameters","remove","getScene","add","isPrePassCapable","disableDepthWrite","cameraColorCurvesEnabled","colorCurvesEnabled","cameraColorGradingEnabled","colorGradingEnabled","cameraToneMappingEnabled","toneMappingEnabled","cameraExposure","exposure","cameraContrast","contrast","cameraColorGradingTexture","colorGradingTexture","cameraColorCurves","colorCurves","canRenderToMRT","name","scene","forceGLSL","undefined","ForceGLSL","_diffuseTexture","_ambientTexture","_opacityTexture","_reflectionTexture","_emissiveTexture","_specularTexture","_bumpTexture","_lightmapTexture","_refractionTexture","ambientColor","Color3","diffuseColor","specularColor","emissiveColor","specularPower","_useAlphaFromDiffuseTexture","_useEmissiveAsIllumination","_linkEmissiveWithDiffuse","_useSpecularOverAlpha","_useReflectionOverAlpha","_disableLighting","_useObjectSpaceNormalMap","_useParallax","_useParallaxOcclusion","parallaxScaleBias","_roughness","indexOfRefraction","invertRefractionY","alphaCutOff","_useLightmapAsShadowmap","_useReflectionFresnelFromSpecular","_useGlossinessFromSpecularMapAlpha","_maxSimultaneousLights","_invertNormalMapX","_invertNormalMapY","_twoSidedLighting","_applyDecalMapAfterDetailMap","_shadersLoaded","_renderTargets","SmartArray","_globalAmbientColor","_cacheHasRenderTargetTextures","detailMap","DetailMapConfiguration","prePassConfiguration","PrePassConfiguration","getRenderTargetTextures","reset","ReflectionTextureEnabled","isRenderTarget","push","RefractionTextureEnabled","_eventInfo","renderTargets","_callbackPluginEventFillRenderTargetTextures","hasRenderTargetTextures","getClassName","needAlphaBlending","_hasTransparencyMode","_transparencyModeIsBlend","_disableAlphaBlending","alpha","_shouldUseAlphaFromDiffuseTexture","_opacityFresnelParameters","isEnabled","needAlphaTesting","_transparencyModeIsTest","_hasAlphaChannel","_transparencyMode","Material","MATERIAL_ALPHATEST","hasAlpha","MATERIAL_OPAQUE","getAlphaTestTexture","isReadyForSubMesh","mesh","useInstances","_uniformBufferLayoutBuilt","buildUniformLayout","drawWrapper","_drawWrapper","isFrozen","_wasPreviouslyReady","_wasPreviouslyUsingInstances","materialDefines","_callbackPluginEventGeneric","defineNames","defines","_isReadyForSubMesh","engine","getEngine","_needNormals","PrepareDefinesForLights","PrepareDefinesForMultiview","oit","needAlphaBlendingForMesh","useOrderIndependentTransparency","PrepareDefinesForPrePass","PrepareDefinesForOIT","MaterialHelperGeometryRendering","PrepareDefines","currentRenderPassId","_areTexturesDirty","_callbackPluginEventHasRenderTargetTextures","_needUVs","i","Constants","MAX_SUPPORTED_UV_SETS","texturesEnabled","DiffuseTextureEnabled","isReadyOrNotBlocking","PrepareDefinesForMergedUV","AmbientTextureEnabled","OpacityTextureEnabled","getAlphaFromRGB","coordinatesMode","Texture","INVCUBIC_MODE","isCube","useRightHandedSystem","invertZ","isRGBD","EXPLICIT_MODE","PLANAR_MODE","PROJECTION_MODE","SKYBOX_MODE","SPHERICAL_MODE","EQUIRECTANGULAR_MODE","FIXED_EQUIRECTANGULAR_MODE","FIXED_EQUIRECTANGULAR_MIRRORED_MODE","CUBIC_MODE","boundingBoxSize","EmissiveTextureEnabled","LightmapTextureEnabled","SpecularTextureEnabled","getCaps","standardDerivatives","BumpTextureEnabled","isReady","_backFaceCulling","alphaMode","ALPHA_PREMULTIPLIED","ALPHA_PREMULTIPLIED_PORTERDUFF","transparencyMode","_callbackPluginEventIsReadyForSubMesh","_areImageProcessingDirty","prepareDefines","reflectionTexture","gammaSpace","refractionTexture","_areFresnelDirty","FresnelEnabled","_diffuseFresnelParameters","_emissiveFresnelParameters","_refractionFresnelParameters","_reflectionFresnelParameters","index","lightSources","length","_isReady","PrepareDefinesForMisc","_useLogarithmicDepth","pointsCloud","fogEnabled","needAlphaTestingForMesh","PrepareDefinesForFrameBoundValues","getRenderingMesh","hasThinInstances","_callbackPluginEventPrepareDefinesBeforeAttributes","PrepareDefinesForAttributes","_callbackPluginEventPrepareDefines","forceWasNotReadyPreviously","isDirty","lightDisposed","_areLightsDisposed","markAsProcessed","fallbacks","EffectFallbacks","addFallback","HandleFallbacksForShadows","attribs","VertexBuffer","PositionKind","NormalKind","TangentKind","ColorKind","PrepareAttributesForBones","PrepareAttributesForInstances","PrepareAttributesForMorphTargets","PrepareAttributesForBakedVertexAnimation","shaderName","uniforms","samplers","uniformBuffers","indexParameters","maxSimultaneousLights","maxSimultaneousMorphTargets","fallbackRank","attributes","uniformBuffersNames","customCode","AddUniformsAndSamplers","AddUniforms","ImageProcessingConfiguration","PrepareUniforms","PrepareSamplers","PrepareUniformsAndSamplersList","uniformsNames","AddClipPlaneUniforms","csnrOptions","customShaderNameResolve","join","toString","previousEffect","createEffect","onCompiled","onError","processFinalCode","processCodeAfterIncludes","multiTarget","shaderLanguage","_shaderLanguage","extraInitializationsAsync","async","Promise","all","import","_onEffectCreatedObservable","notifyObservers","allowShaderHotSwapping","markAsUnprocessed","resetCachedMaterial","setEffect","_materialContext","_renderId","getRenderId","_checkScenePerformancePriority","ubo","_uniformBuffer","addUniform","bindForSubMesh","world","_activeEffect","getMeshUniformBuffer","bindToEffect","transferToEffect","Bind","camera","activeCamera","updateFloat4","minZ","maxZ","_callbackPluginEventHardBindForSubMesh","toNormalMatrix","_normalMatrix","bindOnlyNormalMatrix","mustRebind","_mustRebind","visibility","BindBonesParameters","bindViewProjection","useUbo","isSync","_forceRebindOnNextCall","diffuseFresnelParameters","updateColor4","leftColor","power","rightColor","bias","opacityFresnelParameters","toLuminance","reflectionFresnelParameters","refractionFresnelParameters","emissiveFresnelParameters","updateFloat2","coordinatesIndex","level","BindTextureMatrix","updateFloat","roughness","updateMatrix","getReflectionTextureMatrix","cubeTexture","updateVector3","boundingBoxPosition","updateFloat3","_mirroredCameraPosition","depth","pointSize","updateColor3","BlackReadOnly","multiplyToRef","setTexture","depthPeelingRenderer","bind","_callbackPluginEventBindForSubMesh","BindClipPlane","bindEyePosition","_features","needToAlwaysBindUniformBuffers","_needToBindSceneUbo","lightsEnabled","BindLights","applyFog","fogMode","Scene","FOGMODE_NONE","receiveShadows","bindView","BindFogParameters","BindMorphTargetParameters","bakedVertexAnimationManager","useLogarithmicDepth","BindLogDepth","applyByPostProcess","_afterBind","update","getAnimatables","results","animations","getActiveTextures","activeTextures","hasTexture","texture","dispose","forceDisposeEffect","forceDisposeTextures","clone","cloneTexturesOnlyOnce","rootUrl","result","SerializationHelper","Clone","id","stencil","copyTo","_clonePlugins","Parse","source","material","parse","_ParsePlugins","MaterialFlags","DetailTextureEnabled","ColorGradingTextureEnabled","__decorate","serializeAsTexture","prototype","expandToProperty","serializeAsColor3","serialize","serializeAsFresnelParameters","RegisterClass","DefaultMaterialFactory"],"mappings":"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"}