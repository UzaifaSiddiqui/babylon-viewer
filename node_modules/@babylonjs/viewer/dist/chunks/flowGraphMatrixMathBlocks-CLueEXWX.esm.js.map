{"version":3,"file":"flowGraphMatrixMathBlocks-CLueEXWX.esm.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Data/Math/flowGraphMatrixMathBlocks.js"],"sourcesContent":["import { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport { getRichTypeByFlowGraphType, RichTypeBoolean, RichTypeMatrix, RichTypeNumber, RichTypeQuaternion, RichTypeVector3, } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { Matrix, Quaternion, Vector3 } from \"core/Maths/math.vector\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\n/**\n * Transposes a matrix.\n */\nexport class FlowGraphTransposeBlock extends FlowGraphUnaryOperationBlock {\n    /**\n     * Creates a new instance of the block.\n     * @param config the configuration of the block\n     */\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.matrixType || \"Matrix\" /* FlowGraphTypes.Matrix */), getRichTypeByFlowGraphType(config?.matrixType || \"Matrix\" /* FlowGraphTypes.Matrix */), (a) => (a.transpose ? a.transpose() : Matrix.Transpose(a)), \"FlowGraphTransposeBlock\" /* FlowGraphBlockNames.Transpose */, config);\n    }\n}\nRegisterClass(\"FlowGraphTransposeBlock\" /* FlowGraphBlockNames.Transpose */, FlowGraphTransposeBlock);\n/**\n * Gets the determinant of a matrix.\n */\nexport class FlowGraphDeterminantBlock extends FlowGraphUnaryOperationBlock {\n    /**\n     * Creates a new instance of the block.\n     * @param config the configuration of the block\n     */\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.matrixType || \"Matrix\" /* FlowGraphTypes.Matrix */), RichTypeNumber, (a) => a.determinant(), \"FlowGraphDeterminantBlock\" /* FlowGraphBlockNames.Determinant */, config);\n    }\n}\nRegisterClass(\"FlowGraphDeterminantBlock\" /* FlowGraphBlockNames.Determinant */, FlowGraphDeterminantBlock);\n/**\n * Inverts a matrix.\n */\nexport class FlowGraphInvertMatrixBlock extends FlowGraphUnaryOperationBlock {\n    /**\n     * Creates a new instance of the inverse block.\n     * @param config the configuration of the block\n     */\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.matrixType || \"Matrix\" /* FlowGraphTypes.Matrix */), getRichTypeByFlowGraphType(config?.matrixType || \"Matrix\" /* FlowGraphTypes.Matrix */), (a) => (a.inverse ? a.inverse() : Matrix.Invert(a)), \"FlowGraphInvertMatrixBlock\" /* FlowGraphBlockNames.InvertMatrix */, config);\n    }\n}\nRegisterClass(\"FlowGraphInvertMatrixBlock\" /* FlowGraphBlockNames.InvertMatrix */, FlowGraphInvertMatrixBlock);\n/**\n * Multiplies two matrices.\n */\nexport class FlowGraphMatrixMultiplicationBlock extends FlowGraphBinaryOperationBlock {\n    /**\n     * Creates a new instance of the multiplication block.\n     * Note - this is similar to the math multiplication if not using matrix per-component multiplication.\n     * @param config the configuration of the block\n     */\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.matrixType || \"Matrix\" /* FlowGraphTypes.Matrix */), getRichTypeByFlowGraphType(config?.matrixType || \"Matrix\" /* FlowGraphTypes.Matrix */), getRichTypeByFlowGraphType(config?.matrixType || \"Matrix\" /* FlowGraphTypes.Matrix */), (a, b) => b.multiply(a), \"FlowGraphMatrixMultiplicationBlock\" /* FlowGraphBlockNames.MatrixMultiplication */, config);\n    }\n}\nRegisterClass(\"FlowGraphMatrixMultiplicationBlock\" /* FlowGraphBlockNames.MatrixMultiplication */, FlowGraphMatrixMultiplicationBlock);\n/**\n * Matrix decompose block\n */\nexport class FlowGraphMatrixDecomposeBlock extends FlowGraphBlock {\n    constructor(config) {\n        super(config);\n        this.input = this.registerDataInput(\"input\", RichTypeMatrix);\n        this.position = this.registerDataOutput(\"position\", RichTypeVector3);\n        this.rotationQuaternion = this.registerDataOutput(\"rotationQuaternion\", RichTypeQuaternion);\n        this.scaling = this.registerDataOutput(\"scaling\", RichTypeVector3);\n        this.isValid = this.registerDataOutput(\"isValid\", RichTypeBoolean, false);\n    }\n    _updateOutputs(context) {\n        const cachedExecutionId = context._getExecutionVariable(this, \"executionId\", -1);\n        const cachedPosition = context._getExecutionVariable(this, \"cachedPosition\", null);\n        const cachedRotation = context._getExecutionVariable(this, \"cachedRotation\", null);\n        const cachedScaling = context._getExecutionVariable(this, \"cachedScaling\", null);\n        if (cachedExecutionId === context.executionId && cachedPosition && cachedRotation && cachedScaling) {\n            this.position.setValue(cachedPosition, context);\n            this.rotationQuaternion.setValue(cachedRotation, context);\n            this.scaling.setValue(cachedScaling, context);\n        }\n        else {\n            const matrix = this.input.getValue(context);\n            const position = cachedPosition || new Vector3();\n            const rotation = cachedRotation || new Quaternion();\n            const scaling = cachedScaling || new Vector3();\n            // check matrix last column components should be 0,0,0,1\n            // round them to 4 decimal places\n            const m3 = Math.round(matrix.m[3] * 10000) / 10000;\n            const m7 = Math.round(matrix.m[7] * 10000) / 10000;\n            const m11 = Math.round(matrix.m[11] * 10000) / 10000;\n            const m15 = Math.round(matrix.m[15] * 10000) / 10000;\n            if (m3 !== 0 || m7 !== 0 || m11 !== 0 || m15 !== 1) {\n                this.isValid.setValue(false, context);\n                this.position.setValue(Vector3.Zero(), context);\n                this.rotationQuaternion.setValue(Quaternion.Identity(), context);\n                this.scaling.setValue(Vector3.One(), context);\n                return;\n            }\n            // make the checks for validity\n            const valid = matrix.decompose(scaling, rotation, position);\n            this.isValid.setValue(valid, context);\n            this.position.setValue(position, context);\n            this.rotationQuaternion.setValue(rotation, context);\n            this.scaling.setValue(scaling, context);\n            context._setExecutionVariable(this, \"cachedPosition\", position);\n            context._setExecutionVariable(this, \"cachedRotation\", rotation);\n            context._setExecutionVariable(this, \"cachedScaling\", scaling);\n            context._setExecutionVariable(this, \"executionId\", context.executionId);\n        }\n    }\n    getClassName() {\n        return \"FlowGraphMatrixDecompose\" /* FlowGraphBlockNames.MatrixDecompose */;\n    }\n}\nRegisterClass(\"FlowGraphMatrixDecompose\" /* FlowGraphBlockNames.MatrixDecompose */, FlowGraphMatrixDecomposeBlock);\n/**\n * Matrix compose block\n */\nexport class FlowGraphMatrixComposeBlock extends FlowGraphBlock {\n    constructor(config) {\n        super(config);\n        this.position = this.registerDataInput(\"position\", RichTypeVector3);\n        this.rotationQuaternion = this.registerDataInput(\"rotationQuaternion\", RichTypeQuaternion);\n        this.scaling = this.registerDataInput(\"scaling\", RichTypeVector3);\n        this.value = this.registerDataOutput(\"value\", RichTypeMatrix);\n    }\n    _updateOutputs(context) {\n        const cachedExecutionId = context._getExecutionVariable(this, \"executionId\", -1);\n        const cachedMatrix = context._getExecutionVariable(this, \"cachedMatrix\", null);\n        if (cachedExecutionId === context.executionId && cachedMatrix) {\n            this.value.setValue(cachedMatrix, context);\n        }\n        else {\n            const matrix = Matrix.Compose(this.scaling.getValue(context), this.rotationQuaternion.getValue(context), this.position.getValue(context));\n            this.value.setValue(matrix, context);\n            context._setExecutionVariable(this, \"cachedMatrix\", matrix);\n            context._setExecutionVariable(this, \"executionId\", context.executionId);\n        }\n    }\n    getClassName() {\n        return \"FlowGraphMatrixCompose\" /* FlowGraphBlockNames.MatrixCompose */;\n    }\n}\nRegisterClass(\"FlowGraphMatrixCompose\" /* FlowGraphBlockNames.MatrixCompose */, FlowGraphMatrixComposeBlock);\n//# sourceMappingURL=flowGraphMatrixMathBlocks.js.map"],"names":[],"mappings":"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"}