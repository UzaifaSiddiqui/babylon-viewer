{"version":3,"file":"flowGraphMultiGateBlock-QbWqHa9d.esm.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Execution/ControlFlow/flowGraphMultiGateBlock.js"],"sourcesContent":["import { RegisterClass } from \"../../../../Misc/typeStore\";\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock\";\nimport { RichTypeFlowGraphInteger } from \"../../../flowGraphRichTypes\";\nimport { FlowGraphInteger } from \"core/FlowGraph/CustomTypes/flowGraphInteger\";\n/**\n * A block that has an input flow and routes it to any potential output flows, randomly or sequentially\n */\nexport class FlowGraphMultiGateBlock extends FlowGraphExecutionBlock {\n    constructor(\n    /**\n     * the configuration of the block\n     */\n    config) {\n        super(config);\n        this.config = config;\n        /**\n         * Output connections: The output signals.\n         */\n        this.outputSignals = [];\n        this.reset = this._registerSignalInput(\"reset\");\n        this.lastIndex = this.registerDataOutput(\"lastIndex\", RichTypeFlowGraphInteger, new FlowGraphInteger(-1));\n        this.setNumberOfOutputSignals(config?.outputSignalCount);\n    }\n    _getNextIndex(indexesUsed) {\n        // find the next index available from the indexes used array\n        // if all outputs were used, reset the indexes used array if we are in a loop multi gate\n        if (!indexesUsed.includes(false)) {\n            if (this.config.isLoop) {\n                indexesUsed.fill(false);\n            }\n        }\n        if (!this.config.isRandom) {\n            return indexesUsed.indexOf(false);\n        }\n        else {\n            const unusedIndexes = indexesUsed.map((used, index) => (used ? -1 : index)).filter((index) => index !== -1);\n            return unusedIndexes.length ? unusedIndexes[Math.floor(Math.random() * unusedIndexes.length)] : -1;\n        }\n    }\n    /**\n     * Sets the block's output signals. Would usually be passed from the constructor but can be changed afterwards.\n     * @param numberOutputSignals the number of output flows\n     */\n    setNumberOfOutputSignals(numberOutputSignals = 1) {\n        // check the size of the outFlow Array, see if it is not larger than needed\n        while (this.outputSignals.length > numberOutputSignals) {\n            const flow = this.outputSignals.pop();\n            if (flow) {\n                flow.disconnectFromAll();\n                this._unregisterSignalOutput(flow.name);\n            }\n        }\n        while (this.outputSignals.length < numberOutputSignals) {\n            this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`));\n        }\n    }\n    _execute(context, callingSignal) {\n        // set the state(s) of the block\n        if (!context._hasExecutionVariable(this, \"indexesUsed\")) {\n            context._setExecutionVariable(this, \"indexesUsed\", this.outputSignals.map(() => false));\n        }\n        if (callingSignal === this.reset) {\n            context._deleteExecutionVariable(this, \"indexesUsed\");\n            this.lastIndex.setValue(new FlowGraphInteger(-1), context);\n            return;\n        }\n        const indexesUsed = context._getExecutionVariable(this, \"indexesUsed\", []);\n        const nextIndex = this._getNextIndex(indexesUsed);\n        if (nextIndex > -1) {\n            this.lastIndex.setValue(new FlowGraphInteger(nextIndex), context);\n            indexesUsed[nextIndex] = true;\n            context._setExecutionVariable(this, \"indexesUsed\", indexesUsed);\n            this.outputSignals[nextIndex]._activateSignal(context);\n        }\n    }\n    /**\n     * @returns class name of the block.\n     */\n    getClassName() {\n        return \"FlowGraphMultiGateBlock\" /* FlowGraphBlockNames.MultiGate */;\n    }\n    /**\n     * Serializes the block.\n     * @param serializationObject the object to serialize to.\n     */\n    serialize(serializationObject) {\n        super.serialize(serializationObject);\n        serializationObject.config.outputSignalCount = this.config.outputSignalCount;\n        serializationObject.config.isRandom = this.config.isRandom;\n        serializationObject.config.loop = this.config.isLoop;\n        serializationObject.config.startIndex = this.config.startIndex;\n    }\n}\nRegisterClass(\"FlowGraphMultiGateBlock\" /* FlowGraphBlockNames.MultiGate */, FlowGraphMultiGateBlock);\n//# sourceMappingURL=flowGraphMultiGateBlock.js.map"],"names":[],"mappings":"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"}