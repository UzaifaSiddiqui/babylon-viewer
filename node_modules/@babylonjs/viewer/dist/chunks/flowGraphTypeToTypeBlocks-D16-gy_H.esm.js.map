{"version":3,"file":"flowGraphTypeToTypeBlocks-D16-gy_H.esm.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Data/Transformers/flowGraphTypeToTypeBlocks.js"],"sourcesContent":["import { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\nimport { RichTypeBoolean, RichTypeFlowGraphInteger, RichTypeNumber } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphInteger } from \"core/FlowGraph/CustomTypes/flowGraphInteger\";\n/**\n * A block that converts a boolean to a float.\n */\nexport class FlowGraphBooleanToFloat extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeBoolean, RichTypeNumber, (a) => +a, \"FlowGraphBooleanToFloat\" /* FlowGraphBlockNames.BooleanToFloat */, config);\n    }\n}\nRegisterClass(\"FlowGraphBooleanToFloat\" /* FlowGraphBlockNames.BooleanToFloat */, FlowGraphBooleanToFloat);\n/**\n * A block that converts a boolean to an integer\n */\nexport class FlowGraphBooleanToInt extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeBoolean, RichTypeFlowGraphInteger, (a) => FlowGraphInteger.FromValue(+a), \"FlowGraphBooleanToInt\" /* FlowGraphBlockNames.BooleanToInt */, config);\n    }\n}\nRegisterClass(\"FlowGraphBooleanToInt\" /* FlowGraphBlockNames.BooleanToInt */, FlowGraphBooleanToInt);\n/**\n * A block that converts a float to a boolean.\n */\nexport class FlowGraphFloatToBoolean extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeBoolean, (a) => !!a, \"FlowGraphFloatToBoolean\" /* FlowGraphBlockNames.FloatToBoolean */, config);\n    }\n}\nRegisterClass(\"FlowGraphFloatToBoolean\" /* FlowGraphBlockNames.FloatToBoolean */, FlowGraphFloatToBoolean);\n/**\n * A block that converts an integer to a boolean.\n */\nexport class FlowGraphIntToBoolean extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeFlowGraphInteger, RichTypeBoolean, (a) => !!a.value, \"FlowGraphIntToBoolean\" /* FlowGraphBlockNames.IntToBoolean */, config);\n    }\n}\nRegisterClass(\"FlowGraphIntToBoolean\" /* FlowGraphBlockNames.IntToBoolean */, FlowGraphIntToBoolean);\n/**\n * A block that converts an integer to a float.\n */\nexport class FlowGraphIntToFloat extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeFlowGraphInteger, RichTypeNumber, (a) => a.value, \"FlowGraphIntToFloat\" /* FlowGraphBlockNames.IntToFloat */, config);\n    }\n}\nRegisterClass(\"FlowGraphIntToFloat\" /* FlowGraphBlockNames.IntToFloat */, FlowGraphIntToFloat);\n/**\n * A block that converts a float to an integer.\n */\nexport class FlowGraphFloatToInt extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeFlowGraphInteger, (a) => {\n            const roundingMode = config?.roundingMode;\n            switch (roundingMode) {\n                case \"floor\":\n                    return FlowGraphInteger.FromValue(Math.floor(a));\n                case \"ceil\":\n                    return FlowGraphInteger.FromValue(Math.ceil(a));\n                case \"round\":\n                    return FlowGraphInteger.FromValue(Math.round(a));\n                default:\n                    return FlowGraphInteger.FromValue(a);\n            }\n        }, \"FlowGraphFloatToInt\" /* FlowGraphBlockNames.FloatToInt */, config);\n    }\n}\nRegisterClass(\"FlowGraphFloatToInt\" /* FlowGraphBlockNames.FloatToInt */, FlowGraphFloatToInt);\n//# sourceMappingURL=flowGraphTypeToTypeBlocks.js.map"],"names":[],"mappings":";;;;;;;AAIA;AACA;AACA;AACO,MAAM,uBAAuB,SAAS,4BAA4B,CAAC;AAC1E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,eAAe,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,yBAAyB,2CAA2C,MAAM,CAAC;AACrI;AACA;AACA,aAAa,CAAC,yBAAyB,2CAA2C,uBAAuB,CAAC;AAC1G;AACA;AACA;AACO,MAAM,qBAAqB,SAAS,4BAA4B,CAAC;AACxE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,eAAe,EAAE,wBAAwB,EAAE,CAAC,CAAC,KAAK,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,uBAAuB,yCAAyC,MAAM,CAAC;AACvK;AACA;AACA,aAAa,CAAC,uBAAuB,yCAAyC,qBAAqB,CAAC;AACpG;AACA;AACA;AACO,MAAM,uBAAuB,SAAS,4BAA4B,CAAC;AAC1E,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,cAAc,EAAE,eAAe,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,yBAAyB,2CAA2C,MAAM,CAAC;AACtI;AACA;AACA,aAAa,CAAC,yBAAyB,2CAA2C,uBAAuB,CAAC;AAC1G;AACA;AACA;AACO,MAAM,qBAAqB,SAAS,4BAA4B,CAAC;AACxE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,wBAAwB,EAAE,eAAe,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,uBAAuB,yCAAyC,MAAM,CAAC;AAClJ;AACA;AACA,aAAa,CAAC,uBAAuB,yCAAyC,qBAAqB,CAAC;AACpG;AACA;AACA;AACO,MAAM,mBAAmB,SAAS,4BAA4B,CAAC;AACtE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,wBAAwB,EAAE,cAAc,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,qBAAqB,uCAAuC,MAAM,CAAC;AAC3I;AACA;AACA,aAAa,CAAC,qBAAqB,uCAAuC,mBAAmB,CAAC;AAC9F;AACA;AACA;AACO,MAAM,mBAAmB,SAAS,4BAA4B,CAAC;AACtE,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,KAAK,CAAC,cAAc,EAAE,wBAAwB,EAAE,CAAC,CAAC,KAAK;AAC/D,YAAY,MAAM,YAAY,GAAG,MAAM,EAAE,YAAY;AACrD,YAAY,QAAQ,YAAY;AAChC,gBAAgB,KAAK,OAAO;AAC5B,oBAAoB,OAAO,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACpE,gBAAgB,KAAK,MAAM;AAC3B,oBAAoB,OAAO,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACnE,gBAAgB,KAAK,OAAO;AAC5B,oBAAoB,OAAO,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACpE,gBAAgB;AAChB,oBAAoB,OAAO,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;AACxD;AACA,SAAS,EAAE,qBAAqB,uCAAuC,MAAM,CAAC;AAC9E;AACA;AACA,aAAa,CAAC,qBAAqB,uCAAuC,mBAAmB,CAAC;;;;"}