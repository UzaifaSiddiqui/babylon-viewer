{"version":3,"file":"envShadowGround.fragment-CMuMNExW.esm.js","sources":["../../../../../../tools/viewer/src/ShadersWGSL/envShadowGround.fragment.ts"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"envShadowGroundPixelShader\";\nconst shader = `var shadowTextureSampler: sampler;var shadowTexture : texture_2d<f32>;uniform shadowOpacity : f32;uniform renderTargetSize: vec2<f32>;@fragment\nfn main(input: FragmentInputs)->FragmentOutputs {let uvBasedOpacity=1.0-pow(clamp(length(input.vUV*vec2<f32>(2.0)-vec2<f32>(1.0)),0.0,1.0),2.0);let screenUv=fragmentInputs.position.xy/uniforms.renderTargetSize;let shadowValue=textureSampleLevel(shadowTexture,shadowTextureSampler,screenUv,0.0).rrr;let totalOpacity=uniforms.shadowOpacity*uvBasedOpacity;let finalShadowValue=mix(vec3<f32>(1.0),shadowValue,totalOpacity);let invertedShadowValue=vec3(1.0)-shadowValue;fragmentOutputs.color=vec4f(finalShadowValue,invertedShadowValue.r*totalOpacity);}`;\n// Sideeffect\nif (!ShaderStore.ShadersStoreWGSL[name]) {\n    ShaderStore.ShadersStoreWGSL[name] = shader;\n}\n/** @internal */\nexport const envShadowGroundPixelShaderWGSL = { name, shader };\n"],"names":[],"mappings":";;AAAA;AAGA,MAAM,IAAI,GAAG,4BAA4B;AACzC,MAAM,MAAM,GAAG,CAAA;oiBACqhB;AACpiB;AACA,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE;AACrC,IAAA,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,MAAM;AAC/C;AACA;MACa,8BAA8B,GAAG,EAAE,IAAI,EAAE,MAAM;;;;"}