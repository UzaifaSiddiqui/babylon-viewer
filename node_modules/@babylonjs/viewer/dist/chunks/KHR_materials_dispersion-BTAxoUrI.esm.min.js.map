{"version":3,"file":"KHR_materials_dispersion-BTAxoUrI.esm.min.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/Extensions/KHR_materials_dispersion.js"],"sourcesContent":["import { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\nimport { GLTFLoader } from \"../glTFLoader\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nconst NAME = \"KHR_materials_dispersion\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/87bd64a7f5e23c84b6aef2e6082069583ed0ddb4/extensions/2.0/Khronos/KHR_materials_dispersion/README.md)\n * @experimental\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_dispersion {\n    /**\n     * @internal\n     */\n    constructor(loader) {\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        /**\n         * Defines a number that determines the order the extensions are applied.\n         */\n        this.order = 174;\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n    /** @internal */\n    dispose() {\n        this._loader = null;\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line no-restricted-syntax\n    loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n        return GLTFLoader.LoadExtensionAsync(context, material, this.name, async (extensionContext, extension) => {\n            const promises = new Array();\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n            promises.push(this._loadDispersionPropertiesAsync(extensionContext, material, babylonMaterial, extension));\n            // eslint-disable-next-line github/no-then\n            return await Promise.all(promises).then(() => { });\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    _loadDispersionPropertiesAsync(context, material, babylonMaterial, extension) {\n        if (!(babylonMaterial instanceof PBRMaterial)) {\n            throw new Error(`${context}: Material type not supported`);\n        }\n        // If transparency isn't enabled already, this extension shouldn't do anything.\n        // i.e. it requires either the KHR_materials_transmission or KHR_materials_diffuse_transmission extensions.\n        if (!babylonMaterial.subSurface.isRefractionEnabled || !extension.dispersion) {\n            return Promise.resolve();\n        }\n        babylonMaterial.subSurface.isDispersionEnabled = true;\n        babylonMaterial.subSurface.dispersion = extension.dispersion;\n        return Promise.resolve();\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_dispersion(loader));\n//# sourceMappingURL=KHR_materials_dispersion.js.map"],"names":["NAME","KHR_materials_dispersion","constructor","loader","this","name","order","_loader","enabled","isExtensionUsed","dispose","loadMaterialPropertiesAsync","context","material","babylonMaterial","GLTFLoader","LoadExtensionAsync","async","extensionContext","extension","promises","Array","push","_loadDispersionPropertiesAsync","Promise","all","then","PBRMaterial","Error","subSurface","isRefractionEnabled","dispersion","isDispersionEnabled","resolve","unregisterGLTFExtension","registerGLTFExtension"],"mappings":"gVAGA,MAAMA,EAAO,2BAMN,MAAMC,EAIT,WAAAC,CAAYC,GAIRC,KAAKC,KAAOL,EAIZI,KAAKE,MAAQ,IACbF,KAAKG,QAAUJ,EACfC,KAAKI,QAAUJ,KAAKG,QAAQE,gBAAgBT,EACpD,CAEI,OAAAU,GACIN,KAAKG,QAAU,IACvB,CAKI,2BAAAI,CAA4BC,EAASC,EAAUC,GAC3C,OAAOC,EAAWC,mBAAmBJ,EAASC,EAAUT,KAAKC,MAAMY,MAAOC,EAAkBC,KACxF,MAAMC,EAAW,IAAIC,MAIrB,OAHAD,EAASE,KAAKlB,KAAKG,QAAQI,4BAA4BC,EAASC,EAAUC,IAC1EM,EAASE,KAAKlB,KAAKmB,+BAA+BL,EAAkBL,EAAUC,EAAiBK,UAElFK,QAAQC,IAAIL,GAAUM,MAAK,WAEpD,CAEI,8BAAAH,CAA+BX,EAASC,EAAUC,EAAiBK,GAC/D,KAAML,aAA2Ba,GAC7B,MAAM,IAAIC,MAAM,GAAGhB,kCAIvB,OAAKE,EAAgBe,WAAWC,qBAAwBX,EAAUY,YAGlEjB,EAAgBe,WAAWG,qBAAsB,EACjDlB,EAAgBe,WAAWE,WAAaZ,EAAUY,WAC3CP,QAAQS,WAJJT,QAAQS,SAK3B,EAEAC,EAAwBlC,GACxBmC,EAAsBnC,GAAM,GAAOG,GAAW,IAAIF,EAAyBE"}