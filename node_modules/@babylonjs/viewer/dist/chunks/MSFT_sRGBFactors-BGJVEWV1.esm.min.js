import{bM as e,bJ as o,bI as t}from"./index-VvGulz6u.esm.min.js";import{GLTFLoader as r}from"./glTFLoader-X6ZTOkAw.esm.min.js";import"./bone-DPw1oOFK.esm.min.js";import"./skeleton-BDCw4yVL.esm.min.js";import"./rawTexture-B-F8SA5B.esm.min.js";import"./assetContainer-Da0Xx6Do.esm.min.js";import"./objectModelMapping-CghNRpa4.esm.min.js";const s="MSFT_sRGBFactors";class i{constructor(e){this.name=s,this._loader=e,this.enabled=this._loader.isExtensionUsed(s)}dispose(){this._loader=null}loadMaterialPropertiesAsync(o,t,s){return r.LoadExtraAsync(o,t,this.name,(async(r,i)=>{if(i){if(!(s instanceof e))throw new Error(`${r}: Material type not supported`);const i=this._loader.loadMaterialPropertiesAsync(o,t,s),n=s.getScene().getEngine().useExactSrgbConversions;return s.albedoTexture||s.albedoColor.toLinearSpaceToRef(s.albedoColor,n),s.reflectivityTexture||s.reflectivityColor.toLinearSpaceToRef(s.reflectivityColor,n),await i}}))}}o(s),t(s,!0,(e=>new i(e)));export{i as MSFT_sRGBFactors};
//# sourceMappingURL=MSFT_sRGBFactors-BGJVEWV1.esm.min.js.map
