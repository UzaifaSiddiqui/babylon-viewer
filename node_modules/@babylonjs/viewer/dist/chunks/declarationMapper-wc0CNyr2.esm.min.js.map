{"version":3,"file":"declarationMapper-wc0CNyr2.esm.min.js","sources":["../../../../../dev/core/dist/FlowGraph/CustomTypes/flowGraphInteger.js","../../../../../dev/core/dist/FlowGraph/CustomTypes/flowGraphMatrix.js","../../../../../dev/core/dist/FlowGraph/flowGraphRichTypes.js","../../../../../dev/loaders/dist/glTF/2.0/Extensions/KHR_interactivity/declarationMapper.js"],"sourcesContent":["import { RegisterClass } from \"../../Misc/typeStore\";\n/**\n * Class that represents an integer value.\n */\nexport class FlowGraphInteger {\n    constructor(value) {\n        this.value = this._toInt(value);\n    }\n    /**\n     * Converts a float to an integer.\n     * @param n the float to convert\n     * @returns the result of n | 0 - converting it to a int\n     */\n    _toInt(n) {\n        return n | 0;\n    }\n    /**\n     * Adds two integers together.\n     * @param other the other integer to add\n     * @returns a FlowGraphInteger with the result of the addition\n     */\n    add(other) {\n        return new FlowGraphInteger(this.value + other.value);\n    }\n    /**\n     * Subtracts two integers.\n     * @param other the other integer to subtract\n     * @returns a FlowGraphInteger with the result of the subtraction\n     */\n    subtract(other) {\n        return new FlowGraphInteger(this.value - other.value);\n    }\n    /**\n     * Multiplies two integers.\n     * @param other the other integer to multiply\n     * @returns a FlowGraphInteger with the result of the multiplication\n     */\n    multiply(other) {\n        return new FlowGraphInteger(Math.imul(this.value, other.value));\n    }\n    /**\n     * Divides two integers.\n     * @param other the other integer to divide\n     * @returns a FlowGraphInteger with the result of the division\n     */\n    divide(other) {\n        return new FlowGraphInteger(this.value / other.value);\n    }\n    /**\n     * The class name of this type.\n     * @returns\n     */\n    getClassName() {\n        return FlowGraphInteger.ClassName;\n    }\n    /**\n     * Compares two integers for equality.\n     * @param other the other integer to compare\n     * @returns\n     */\n    equals(other) {\n        return this.value === other.value;\n    }\n    /**\n     * Parses a FlowGraphInteger from a serialization object.\n     * @param value te number to parse\n     * @returns\n     */\n    static FromValue(value) {\n        return new FlowGraphInteger(value);\n    }\n    toString() {\n        return this.value.toString();\n    }\n}\nFlowGraphInteger.ClassName = \"FlowGraphInteger\";\nRegisterClass(\"FlowGraphInteger\", FlowGraphInteger);\n//# sourceMappingURL=flowGraphInteger.js.map","import { Vector3, Vector2 } from \"core/Maths/math.vector\";\n// Note - the matrix classes are basically column-major, and work similarly to Babylon.js' Matrix class.\n/**\n * A 2x2 matrix.\n */\nexport class FlowGraphMatrix2D {\n    constructor(m = [1, 0, 0, 1]) {\n        this._m = m;\n    }\n    get m() {\n        return this._m;\n    }\n    transformVector(v) {\n        return this.transformVectorToRef(v, new Vector2());\n    }\n    transformVectorToRef(v, result) {\n        result.x = v.x * this._m[0] + v.y * this._m[1];\n        result.y = v.x * this._m[2] + v.y * this._m[3];\n        return result;\n    }\n    asArray() {\n        return this.toArray();\n    }\n    toArray(emptyArray = []) {\n        for (let i = 0; i < 4; i++) {\n            emptyArray[i] = this._m[i];\n        }\n        return emptyArray;\n    }\n    fromArray(array) {\n        for (let i = 0; i < 4; i++) {\n            this._m[i] = array[i];\n        }\n        return this;\n    }\n    multiplyToRef(other, result) {\n        const otherMatrix = other._m;\n        const thisMatrix = this._m;\n        const r = result._m;\n        // other * this\n        r[0] = otherMatrix[0] * thisMatrix[0] + otherMatrix[1] * thisMatrix[2];\n        r[1] = otherMatrix[0] * thisMatrix[1] + otherMatrix[1] * thisMatrix[3];\n        r[2] = otherMatrix[2] * thisMatrix[0] + otherMatrix[3] * thisMatrix[2];\n        r[3] = otherMatrix[2] * thisMatrix[1] + otherMatrix[3] * thisMatrix[3];\n        return result;\n    }\n    multiply(other) {\n        return this.multiplyToRef(other, new FlowGraphMatrix2D());\n    }\n    divideToRef(other, result) {\n        const m = this._m;\n        const o = other._m;\n        const r = result._m;\n        r[0] = m[0] / o[0];\n        r[1] = m[1] / o[1];\n        r[2] = m[2] / o[2];\n        r[3] = m[3] / o[3];\n        return result;\n    }\n    divide(other) {\n        return this.divideToRef(other, new FlowGraphMatrix2D());\n    }\n    addToRef(other, result) {\n        const m = this._m;\n        const o = other.m;\n        const r = result.m;\n        r[0] = m[0] + o[0];\n        r[1] = m[1] + o[1];\n        r[2] = m[2] + o[2];\n        r[3] = m[3] + o[3];\n        return result;\n    }\n    add(other) {\n        return this.addToRef(other, new FlowGraphMatrix2D());\n    }\n    subtractToRef(other, result) {\n        const m = this._m;\n        const o = other.m;\n        const r = result.m;\n        r[0] = m[0] - o[0];\n        r[1] = m[1] - o[1];\n        r[2] = m[2] - o[2];\n        r[3] = m[3] - o[3];\n        return result;\n    }\n    subtract(other) {\n        return this.subtractToRef(other, new FlowGraphMatrix2D());\n    }\n    transpose() {\n        const m = this._m;\n        return new FlowGraphMatrix2D([m[0], m[2], m[1], m[3]]);\n    }\n    determinant() {\n        const m = this._m;\n        return m[0] * m[3] - m[1] * m[2];\n    }\n    inverse() {\n        const det = this.determinant();\n        if (det === 0) {\n            throw new Error(\"Matrix is not invertible\");\n        }\n        const m = this._m;\n        const invDet = 1 / det;\n        return new FlowGraphMatrix2D([m[3] * invDet, -m[1] * invDet, -m[2] * invDet, m[0] * invDet]);\n    }\n    equals(other, epsilon = 0) {\n        const m = this._m;\n        const o = other.m;\n        if (epsilon === 0) {\n            return m[0] === o[0] && m[1] === o[1] && m[2] === o[2] && m[3] === o[3];\n        }\n        return Math.abs(m[0] - o[0]) < epsilon && Math.abs(m[1] - o[1]) < epsilon && Math.abs(m[2] - o[2]) < epsilon && Math.abs(m[3] - o[3]) < epsilon;\n    }\n    getClassName() {\n        return \"FlowGraphMatrix2D\";\n    }\n    toString() {\n        return `FlowGraphMatrix2D(${this._m.join(\", \")})`;\n    }\n}\n/**\n * A 3x3 matrix.\n */\nexport class FlowGraphMatrix3D {\n    constructor(array = [1, 0, 0, 0, 1, 0, 0, 0, 1]) {\n        this._m = array;\n    }\n    get m() {\n        return this._m;\n    }\n    transformVector(v) {\n        return this.transformVectorToRef(v, new Vector3());\n    }\n    transformVectorToRef(v, result) {\n        const m = this._m;\n        result.x = v.x * m[0] + v.y * m[1] + v.z * m[2];\n        result.y = v.x * m[3] + v.y * m[4] + v.z * m[5];\n        result.z = v.x * m[6] + v.y * m[7] + v.z * m[8];\n        return result;\n    }\n    multiplyToRef(other, result) {\n        const otherMatrix = other._m;\n        const thisMatrix = this._m;\n        const r = result.m;\n        r[0] = otherMatrix[0] * thisMatrix[0] + otherMatrix[1] * thisMatrix[3] + otherMatrix[2] * thisMatrix[6];\n        r[1] = otherMatrix[0] * thisMatrix[1] + otherMatrix[1] * thisMatrix[4] + otherMatrix[2] * thisMatrix[7];\n        r[2] = otherMatrix[0] * thisMatrix[2] + otherMatrix[1] * thisMatrix[5] + otherMatrix[2] * thisMatrix[8];\n        r[3] = otherMatrix[3] * thisMatrix[0] + otherMatrix[4] * thisMatrix[3] + otherMatrix[5] * thisMatrix[6];\n        r[4] = otherMatrix[3] * thisMatrix[1] + otherMatrix[4] * thisMatrix[4] + otherMatrix[5] * thisMatrix[7];\n        r[5] = otherMatrix[3] * thisMatrix[2] + otherMatrix[4] * thisMatrix[5] + otherMatrix[5] * thisMatrix[8];\n        r[6] = otherMatrix[6] * thisMatrix[0] + otherMatrix[7] * thisMatrix[3] + otherMatrix[8] * thisMatrix[6];\n        r[7] = otherMatrix[6] * thisMatrix[1] + otherMatrix[7] * thisMatrix[4] + otherMatrix[8] * thisMatrix[7];\n        r[8] = otherMatrix[6] * thisMatrix[2] + otherMatrix[7] * thisMatrix[5] + otherMatrix[8] * thisMatrix[8];\n        return result;\n    }\n    multiply(other) {\n        return this.multiplyToRef(other, new FlowGraphMatrix3D());\n    }\n    divideToRef(other, result) {\n        const m = this._m;\n        const o = other.m;\n        const r = result.m;\n        r[0] = m[0] / o[0];\n        r[1] = m[1] / o[1];\n        r[2] = m[2] / o[2];\n        r[3] = m[3] / o[3];\n        r[4] = m[4] / o[4];\n        r[5] = m[5] / o[5];\n        r[6] = m[6] / o[6];\n        r[7] = m[7] / o[7];\n        r[8] = m[8] / o[8];\n        return result;\n    }\n    divide(other) {\n        return this.divideToRef(other, new FlowGraphMatrix3D());\n    }\n    addToRef(other, result) {\n        const m = this._m;\n        const o = other.m;\n        const r = result.m;\n        r[0] = m[0] + o[0];\n        r[1] = m[1] + o[1];\n        r[2] = m[2] + o[2];\n        r[3] = m[3] + o[3];\n        r[4] = m[4] + o[4];\n        r[5] = m[5] + o[5];\n        r[6] = m[6] + o[6];\n        r[7] = m[7] + o[7];\n        r[8] = m[8] + o[8];\n        return result;\n    }\n    add(other) {\n        return this.addToRef(other, new FlowGraphMatrix3D());\n    }\n    subtractToRef(other, result) {\n        const m = this._m;\n        const o = other.m;\n        const r = result.m;\n        r[0] = m[0] - o[0];\n        r[1] = m[1] - o[1];\n        r[2] = m[2] - o[2];\n        r[3] = m[3] - o[3];\n        r[4] = m[4] - o[4];\n        r[5] = m[5] - o[5];\n        r[6] = m[6] - o[6];\n        r[7] = m[7] - o[7];\n        r[8] = m[8] - o[8];\n        return result;\n    }\n    subtract(other) {\n        return this.subtractToRef(other, new FlowGraphMatrix3D());\n    }\n    toArray(emptyArray = []) {\n        for (let i = 0; i < 9; i++) {\n            emptyArray[i] = this._m[i];\n        }\n        return emptyArray;\n    }\n    asArray() {\n        return this.toArray();\n    }\n    fromArray(array) {\n        for (let i = 0; i < 9; i++) {\n            this._m[i] = array[i];\n        }\n        return this;\n    }\n    transpose() {\n        const m = this._m;\n        return new FlowGraphMatrix3D([m[0], m[3], m[6], m[1], m[4], m[7], m[2], m[5], m[8]]);\n    }\n    determinant() {\n        const m = this._m;\n        return m[0] * (m[4] * m[8] - m[5] * m[7]) - m[1] * (m[3] * m[8] - m[5] * m[6]) + m[2] * (m[3] * m[7] - m[4] * m[6]);\n    }\n    inverse() {\n        const det = this.determinant();\n        if (det === 0) {\n            throw new Error(\"Matrix is not invertible\");\n        }\n        const m = this._m;\n        const invDet = 1 / det;\n        return new FlowGraphMatrix3D([\n            (m[4] * m[8] - m[5] * m[7]) * invDet,\n            (m[2] * m[7] - m[1] * m[8]) * invDet,\n            (m[1] * m[5] - m[2] * m[4]) * invDet,\n            (m[5] * m[6] - m[3] * m[8]) * invDet,\n            (m[0] * m[8] - m[2] * m[6]) * invDet,\n            (m[2] * m[3] - m[0] * m[5]) * invDet,\n            (m[3] * m[7] - m[4] * m[6]) * invDet,\n            (m[1] * m[6] - m[0] * m[7]) * invDet,\n            (m[0] * m[4] - m[1] * m[3]) * invDet,\n        ]);\n    }\n    equals(other, epsilon = 0) {\n        const m = this._m;\n        const o = other.m;\n        // performance shortcut\n        if (epsilon === 0) {\n            return m[0] === o[0] && m[1] === o[1] && m[2] === o[2] && m[3] === o[3] && m[4] === o[4] && m[5] === o[5] && m[6] === o[6] && m[7] === o[7] && m[8] === o[8];\n        }\n        return (Math.abs(m[0] - o[0]) < epsilon &&\n            Math.abs(m[1] - o[1]) < epsilon &&\n            Math.abs(m[2] - o[2]) < epsilon &&\n            Math.abs(m[3] - o[3]) < epsilon &&\n            Math.abs(m[4] - o[4]) < epsilon &&\n            Math.abs(m[5] - o[5]) < epsilon &&\n            Math.abs(m[6] - o[6]) < epsilon &&\n            Math.abs(m[7] - o[7]) < epsilon &&\n            Math.abs(m[8] - o[8]) < epsilon);\n    }\n    getClassName() {\n        return \"FlowGraphMatrix3D\";\n    }\n    toString() {\n        return `FlowGraphMatrix3D(${this._m.join(\", \")})`;\n    }\n}\n//# sourceMappingURL=flowGraphMatrix.js.map","import { Vector2, Vector3, Vector4, Matrix, Quaternion } from \"../Maths/math.vector\";\nimport { Color3, Color4 } from \"../Maths/math.color\";\nimport { FlowGraphInteger } from \"./CustomTypes/flowGraphInteger\";\nimport { Constants } from \"core/Engines/constants\";\nimport { FlowGraphMatrix2D, FlowGraphMatrix3D } from \"./CustomTypes/flowGraphMatrix\";\n/**\n * The types supported by the flow graph.\n */\nexport var FlowGraphTypes;\n(function (FlowGraphTypes) {\n    FlowGraphTypes[\"Any\"] = \"any\";\n    FlowGraphTypes[\"String\"] = \"string\";\n    FlowGraphTypes[\"Number\"] = \"number\";\n    FlowGraphTypes[\"Boolean\"] = \"boolean\";\n    FlowGraphTypes[\"Object\"] = \"object\";\n    FlowGraphTypes[\"Integer\"] = \"FlowGraphInteger\";\n    FlowGraphTypes[\"Vector2\"] = \"Vector2\";\n    FlowGraphTypes[\"Vector3\"] = \"Vector3\";\n    FlowGraphTypes[\"Vector4\"] = \"Vector4\";\n    FlowGraphTypes[\"Quaternion\"] = \"Quaternion\";\n    FlowGraphTypes[\"Matrix\"] = \"Matrix\";\n    FlowGraphTypes[\"Matrix2D\"] = \"Matrix2D\";\n    FlowGraphTypes[\"Matrix3D\"] = \"Matrix3D\";\n    FlowGraphTypes[\"Color3\"] = \"Color3\";\n    FlowGraphTypes[\"Color4\"] = \"Color4\";\n})(FlowGraphTypes || (FlowGraphTypes = {}));\n/**\n * A rich type represents extra information about a type,\n * such as its name and a default value constructor.\n */\nexport class RichType {\n    constructor(\n    /**\n     * The name given to the type.\n     */\n    typeName, \n    /**\n     * The default value of the type.\n     */\n    defaultValue, \n    /**\n     * [-1] The ANIMATIONTYPE of the type, if available\n     */\n    animationType = -1) {\n        this.typeName = typeName;\n        this.defaultValue = defaultValue;\n        this.animationType = animationType;\n    }\n    /**\n     * Serializes this rich type into a serialization object.\n     * @param serializationObject the object to serialize to\n     */\n    serialize(serializationObject) {\n        serializationObject.typeName = this.typeName;\n        serializationObject.defaultValue = this.defaultValue;\n    }\n}\nexport const RichTypeAny = new RichType(\"any\" /* FlowGraphTypes.Any */, undefined);\nexport const RichTypeString = new RichType(\"string\" /* FlowGraphTypes.String */, \"\");\nexport const RichTypeNumber = new RichType(\"number\" /* FlowGraphTypes.Number */, 0, Constants.ANIMATIONTYPE_FLOAT);\nexport const RichTypeBoolean = new RichType(\"boolean\" /* FlowGraphTypes.Boolean */, false);\nexport const RichTypeVector2 = new RichType(\"Vector2\" /* FlowGraphTypes.Vector2 */, Vector2.Zero(), Constants.ANIMATIONTYPE_VECTOR2);\nexport const RichTypeVector3 = new RichType(\"Vector3\" /* FlowGraphTypes.Vector3 */, Vector3.Zero(), Constants.ANIMATIONTYPE_VECTOR3);\nexport const RichTypeVector4 = new RichType(\"Vector4\" /* FlowGraphTypes.Vector4 */, Vector4.Zero());\nexport const RichTypeMatrix = new RichType(\"Matrix\" /* FlowGraphTypes.Matrix */, Matrix.Identity(), Constants.ANIMATIONTYPE_MATRIX);\nexport const RichTypeMatrix2D = new RichType(\"Matrix2D\" /* FlowGraphTypes.Matrix2D */, new FlowGraphMatrix2D());\nexport const RichTypeMatrix3D = new RichType(\"Matrix3D\" /* FlowGraphTypes.Matrix3D */, new FlowGraphMatrix3D());\nexport const RichTypeColor3 = new RichType(\"Color3\" /* FlowGraphTypes.Color3 */, Color3.Black(), Constants.ANIMATIONTYPE_COLOR3);\nexport const RichTypeColor4 = new RichType(\"Color4\" /* FlowGraphTypes.Color4 */, new Color4(0, 0, 0, 0), Constants.ANIMATIONTYPE_COLOR4);\nexport const RichTypeQuaternion = new RichType(\"Quaternion\" /* FlowGraphTypes.Quaternion */, Quaternion.Identity(), Constants.ANIMATIONTYPE_QUATERNION);\nRichTypeQuaternion.typeTransformer = (value) => {\n    if (value.getClassName) {\n        if (value.getClassName() === \"Vector4\" /* FlowGraphTypes.Vector4 */) {\n            return Quaternion.FromArray(value.asArray());\n        }\n        else if (value.getClassName() === \"Vector3\" /* FlowGraphTypes.Vector3 */) {\n            return Quaternion.FromEulerVector(value);\n        }\n        else if (value.getClassName() === \"Matrix\" /* FlowGraphTypes.Matrix */) {\n            return Quaternion.FromRotationMatrix(value);\n        }\n    }\n    return value;\n};\nexport const RichTypeFlowGraphInteger = new RichType(\"FlowGraphInteger\" /* FlowGraphTypes.Integer */, new FlowGraphInteger(0), Constants.ANIMATIONTYPE_FLOAT);\n/**\n * Given a value, try to deduce its rich type.\n * @param value the value to deduce the rich type from\n * @returns the value's rich type, or RichTypeAny if the type could not be deduced.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getRichTypeFromValue(value) {\n    const anyValue = value;\n    switch (typeof value) {\n        case \"string\" /* FlowGraphTypes.String */:\n            return RichTypeString;\n        case \"number\" /* FlowGraphTypes.Number */:\n            return RichTypeNumber;\n        case \"boolean\" /* FlowGraphTypes.Boolean */:\n            return RichTypeBoolean;\n        case \"object\" /* FlowGraphTypes.Object */:\n            if (anyValue.getClassName) {\n                switch (anyValue.getClassName()) {\n                    case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n                        return RichTypeVector2;\n                    case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n                        return RichTypeVector3;\n                    case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n                        return RichTypeVector4;\n                    case \"Matrix\" /* FlowGraphTypes.Matrix */:\n                        return RichTypeMatrix;\n                    case \"Color3\" /* FlowGraphTypes.Color3 */:\n                        return RichTypeColor3;\n                    case \"Color4\" /* FlowGraphTypes.Color4 */:\n                        return RichTypeColor4;\n                    case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n                        return RichTypeQuaternion;\n                    case \"FlowGraphInteger\" /* FlowGraphTypes.Integer */:\n                        return RichTypeFlowGraphInteger;\n                    case \"Matrix2D\" /* FlowGraphTypes.Matrix2D */:\n                        return RichTypeMatrix2D;\n                    case \"Matrix3D\" /* FlowGraphTypes.Matrix3D */:\n                        return RichTypeMatrix3D;\n                }\n            }\n            return RichTypeAny;\n        default:\n            return RichTypeAny;\n    }\n}\n/**\n * Given a flow graph type, return the rich type that corresponds to it.\n * @param flowGraphType the flow graph type\n * @returns the rich type that corresponds to the flow graph type\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getRichTypeByFlowGraphType(flowGraphType) {\n    switch (flowGraphType) {\n        case \"string\" /* FlowGraphTypes.String */:\n            return RichTypeString;\n        case \"number\" /* FlowGraphTypes.Number */:\n            return RichTypeNumber;\n        case \"boolean\" /* FlowGraphTypes.Boolean */:\n            return RichTypeBoolean;\n        case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n            return RichTypeVector2;\n        case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n            return RichTypeVector3;\n        case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n            return RichTypeVector4;\n        case \"Matrix\" /* FlowGraphTypes.Matrix */:\n            return RichTypeMatrix;\n        case \"Color3\" /* FlowGraphTypes.Color3 */:\n            return RichTypeColor3;\n        case \"Color4\" /* FlowGraphTypes.Color4 */:\n            return RichTypeColor4;\n        case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n            return RichTypeQuaternion;\n        case \"FlowGraphInteger\" /* FlowGraphTypes.Integer */:\n            return RichTypeFlowGraphInteger;\n        case \"Matrix2D\" /* FlowGraphTypes.Matrix2D */:\n            return RichTypeMatrix2D;\n        case \"Matrix3D\" /* FlowGraphTypes.Matrix3D */:\n            return RichTypeMatrix3D;\n        default:\n            return RichTypeAny;\n    }\n}\n/**\n * get the animation type for a given flow graph type\n * @param flowGraphType the flow graph type\n * @returns the animation type for this flow graph type\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getAnimationTypeByFlowGraphType(flowGraphType) {\n    switch (flowGraphType) {\n        case \"number\" /* FlowGraphTypes.Number */:\n            return Constants.ANIMATIONTYPE_FLOAT;\n        case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n            return Constants.ANIMATIONTYPE_VECTOR2;\n        case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n            return Constants.ANIMATIONTYPE_VECTOR3;\n        case \"Matrix\" /* FlowGraphTypes.Matrix */:\n            return Constants.ANIMATIONTYPE_MATRIX;\n        case \"Color3\" /* FlowGraphTypes.Color3 */:\n            return Constants.ANIMATIONTYPE_COLOR3;\n        case \"Color4\" /* FlowGraphTypes.Color4 */:\n            return Constants.ANIMATIONTYPE_COLOR4;\n        case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n            return Constants.ANIMATIONTYPE_QUATERNION;\n        default:\n            return Constants.ANIMATIONTYPE_FLOAT;\n    }\n}\n/**\n * Given an animation type, return the rich type that corresponds to it.\n * @param animationType the animation type\n * @returns the rich type that corresponds to the animation type\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getRichTypeByAnimationType(animationType) {\n    switch (animationType) {\n        case Constants.ANIMATIONTYPE_FLOAT:\n            return RichTypeNumber;\n        case Constants.ANIMATIONTYPE_VECTOR2:\n            return RichTypeVector2;\n        case Constants.ANIMATIONTYPE_VECTOR3:\n            return RichTypeVector3;\n        case Constants.ANIMATIONTYPE_MATRIX:\n            return RichTypeMatrix;\n        case Constants.ANIMATIONTYPE_COLOR3:\n            return RichTypeColor3;\n        case Constants.ANIMATIONTYPE_COLOR4:\n            return RichTypeColor4;\n        case Constants.ANIMATIONTYPE_QUATERNION:\n            return RichTypeQuaternion;\n        default:\n            return RichTypeAny;\n    }\n}\n//# sourceMappingURL=flowGraphRichTypes.js.map","import { Logger } from \"core/Misc/logger\";\nimport { getAnimationTypeByFlowGraphType } from \"core/FlowGraph/flowGraphRichTypes\";\nexport function getMappingForFullOperationName(fullOperationName) {\n    const [op, extension] = fullOperationName.split(\":\");\n    return getMappingForDeclaration({ op, extension });\n}\nexport function getMappingForDeclaration(declaration, returnNoOpIfNotAvailable = true) {\n    const mapping = declaration.extension ? gltfExtensionsToFlowGraphMapping[declaration.extension]?.[declaration.op] : gltfToFlowGraphMapping[declaration.op];\n    if (!mapping) {\n        Logger.Warn(`No mapping found for operation ${declaration.op} and extension ${declaration.extension || \"KHR_interactivity\"}`);\n        if (returnNoOpIfNotAvailable) {\n            const inputs = {};\n            const outputs = {\n                flows: {},\n            };\n            if (declaration.inputValueSockets) {\n                inputs.values = {};\n                for (const key in declaration.inputValueSockets) {\n                    inputs.values[key] = {\n                        name: key,\n                    };\n                }\n            }\n            if (declaration.outputValueSockets) {\n                outputs.values = {};\n                Object.keys(declaration.outputValueSockets).forEach((key) => {\n                    outputs.values[key] = {\n                        name: key,\n                    };\n                });\n            }\n            return {\n                blocks: [], // no blocks, just mapping\n                inputs,\n                outputs,\n            };\n        }\n    }\n    return mapping;\n}\n/**\n * This function will add new mapping to glTF interactivity.\n * Other extensions can define new types of blocks, this is the way to let interactivity know how to parse them.\n * @param key the type of node, i.e. \"variable/get\"\n * @param extension the extension of the interactivity operation, i.e. \"KHR_selectability\"\n * @param mapping The mapping object. See documentation or examples below.\n */\nexport function addNewInteractivityFlowGraphMapping(key, extension, mapping) {\n    gltfExtensionsToFlowGraphMapping[extension] ||= {};\n    gltfExtensionsToFlowGraphMapping[extension][key] = mapping;\n}\nconst gltfExtensionsToFlowGraphMapping = {\n    /**\n     * This is the BABYLON extension for glTF interactivity.\n     * It defines babylon-specific blocks and operations.\n     */\n    BABYLON: {\n        /**\n         * flow/log is a flow node that logs input to the console.\n         * It has \"in\" and \"out\" flows, and takes a message as input.\n         * The message can be any type of value.\n         * The message is logged to the console when the \"in\" flow is triggered.\n         * The \"out\" flow is triggered when the message is logged.\n         */\n        \"flow/log\": {\n            blocks: [\"FlowGraphConsoleLogBlock\" /* FlowGraphBlockNames.ConsoleLog */],\n            inputs: {\n                values: {\n                    message: { name: \"message\" },\n                },\n            },\n        },\n    },\n};\n// this mapper is just a way to convert the glTF nodes to FlowGraph nodes in terms of input/output connection names and values.\nconst gltfToFlowGraphMapping = {\n    \"event/onStart\": {\n        blocks: [\"FlowGraphSceneReadyEventBlock\" /* FlowGraphBlockNames.SceneReadyEvent */],\n        outputs: {\n            flows: {\n                out: { name: \"done\" },\n            },\n        },\n    },\n    \"event/onTick\": {\n        blocks: [\"FlowGraphSceneTickEventBlock\" /* FlowGraphBlockNames.SceneTickEvent */],\n        inputs: {},\n        outputs: {\n            values: {\n                timeSinceLastTick: { name: \"deltaTime\", gltfType: \"number\" /*, dataTransformer: (time: number) => time / 1000*/ },\n            },\n            flows: {\n                out: { name: \"done\" },\n            },\n        },\n    },\n    \"event/send\": {\n        blocks: [\"FlowGraphSendCustomEventBlock\" /* FlowGraphBlockNames.SendCustomEvent */],\n        extraProcessor(gltfBlock, declaration, _mapping, parser, serializedObjects) {\n            // set eventId and eventData. The configuration object of the glTF should have a single object.\n            // validate that we are running it on the right block.\n            if (declaration.op !== \"event/send\" || !gltfBlock.configuration || Object.keys(gltfBlock.configuration).length !== 1) {\n                throw new Error(\"Receive event should have a single configuration object, the event itself\");\n            }\n            const eventConfiguration = gltfBlock.configuration[\"event\"];\n            const eventId = eventConfiguration.value[0];\n            if (typeof eventId !== \"number\") {\n                throw new Error(\"Event id should be a number\");\n            }\n            const event = parser.arrays.events[eventId];\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.eventId = event.eventId;\n            serializedObject.config.eventData = event.eventData;\n            return serializedObjects;\n        },\n    },\n    \"event/receive\": {\n        blocks: [\"FlowGraphReceiveCustomEventBlock\" /* FlowGraphBlockNames.ReceiveCustomEvent */],\n        outputs: {\n            flows: {\n                out: { name: \"done\" },\n            },\n        },\n        validation(gltfBlock, interactivityGraph) {\n            if (!gltfBlock.configuration) {\n                Logger.Error(\"Receive event should have a configuration object\");\n                return { valid: false, error: \"Receive event should have a configuration object\" };\n            }\n            const eventConfiguration = gltfBlock.configuration[\"event\"];\n            if (!eventConfiguration) {\n                Logger.Error(\"Receive event should have a single configuration object, the event itself\");\n                return { valid: false, error: \"Receive event should have a single configuration object, the event itself\" };\n            }\n            const eventId = eventConfiguration.value[0];\n            if (typeof eventId !== \"number\") {\n                Logger.Error(\"Event id should be a number\");\n                return { valid: false, error: \"Event id should be a number\" };\n            }\n            const event = interactivityGraph.events?.[eventId];\n            if (!event) {\n                Logger.Error(`Event with id ${eventId} not found`);\n                return { valid: false, error: `Event with id ${eventId} not found` };\n            }\n            return { valid: true };\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, parser, serializedObjects) {\n            // set eventId and eventData. The configuration object of the glTF should have a single object.\n            // validate that we are running it on the right block.\n            if (declaration.op !== \"event/receive\" || !gltfBlock.configuration || Object.keys(gltfBlock.configuration).length !== 1) {\n                throw new Error(\"Receive event should have a single configuration object, the event itself\");\n            }\n            const eventConfiguration = gltfBlock.configuration[\"event\"];\n            const eventId = eventConfiguration.value[0];\n            if (typeof eventId !== \"number\") {\n                throw new Error(\"Event id should be a number\");\n            }\n            const event = parser.arrays.events[eventId];\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.eventId = event.eventId;\n            serializedObject.config.eventData = event.eventData;\n            return serializedObjects;\n        },\n    },\n    \"math/e\": getSimpleInputMapping(\"FlowGraphEBlock\" /* FlowGraphBlockNames.E */),\n    \"math/pi\": getSimpleInputMapping(\"FlowGraphPIBlock\" /* FlowGraphBlockNames.PI */),\n    \"math/inf\": getSimpleInputMapping(\"FlowGraphInfBlock\" /* FlowGraphBlockNames.Inf */),\n    \"math/nan\": getSimpleInputMapping(\"FlowGraphNaNBlock\" /* FlowGraphBlockNames.NaN */),\n    \"math/abs\": getSimpleInputMapping(\"FlowGraphAbsBlock\" /* FlowGraphBlockNames.Abs */),\n    \"math/sign\": getSimpleInputMapping(\"FlowGraphSignBlock\" /* FlowGraphBlockNames.Sign */),\n    \"math/trunc\": getSimpleInputMapping(\"FlowGraphTruncBlock\" /* FlowGraphBlockNames.Trunc */),\n    \"math/floor\": getSimpleInputMapping(\"FlowGraphFloorBlock\" /* FlowGraphBlockNames.Floor */),\n    \"math/ceil\": getSimpleInputMapping(\"FlowGraphCeilBlock\" /* FlowGraphBlockNames.Ceil */),\n    \"math/round\": {\n        blocks: [\"FlowGraphRoundBlock\" /* FlowGraphBlockNames.Round */],\n        configuration: {},\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.roundHalfAwayFromZero = true;\n            return serializedObjects;\n        },\n    },\n    \"math/fract\": getSimpleInputMapping(\"FlowGraphFractBlock\" /* FlowGraphBlockNames.Fraction */),\n    \"math/neg\": getSimpleInputMapping(\"FlowGraphNegationBlock\" /* FlowGraphBlockNames.Negation */),\n    \"math/add\": getSimpleInputMapping(\"FlowGraphAddBlock\" /* FlowGraphBlockNames.Add */, [\"a\", \"b\"], true),\n    \"math/sub\": getSimpleInputMapping(\"FlowGraphSubtractBlock\" /* FlowGraphBlockNames.Subtract */, [\"a\", \"b\"], true),\n    \"math/mul\": {\n        blocks: [\"FlowGraphMultiplyBlock\" /* FlowGraphBlockNames.Multiply */],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.useMatrixPerComponent = true;\n            serializedObjects[0].config.preventIntegerFloatArithmetic = true;\n            // try to infer the type or fallback to Integer\n            // check the gltf block for the inputs, see if they have a type\n            let type = -1;\n            Object.keys(_gltfBlock.values || {}).find((value) => {\n                if (_gltfBlock.values?.[value].type !== undefined) {\n                    type = _gltfBlock.values[value].type;\n                    return true;\n                }\n                return false;\n            });\n            if (type !== -1) {\n                serializedObjects[0].config.type = _parser.arrays.types[type].flowGraphType;\n            }\n            return serializedObjects;\n        },\n        validation(gltfBlock) {\n            if (gltfBlock.values) {\n                // make sure types are the same\n                return ValidateTypes(gltfBlock);\n            }\n            return { valid: true };\n        },\n    },\n    \"math/div\": getSimpleInputMapping(\"FlowGraphDivideBlock\" /* FlowGraphBlockNames.Divide */, [\"a\", \"b\"], true),\n    \"math/rem\": getSimpleInputMapping(\"FlowGraphModuloBlock\" /* FlowGraphBlockNames.Modulo */, [\"a\", \"b\"]),\n    \"math/min\": getSimpleInputMapping(\"FlowGraphMinBlock\" /* FlowGraphBlockNames.Min */, [\"a\", \"b\"]),\n    \"math/max\": getSimpleInputMapping(\"FlowGraphMaxBlock\" /* FlowGraphBlockNames.Max */, [\"a\", \"b\"]),\n    \"math/clamp\": getSimpleInputMapping(\"FlowGraphClampBlock\" /* FlowGraphBlockNames.Clamp */, [\"a\", \"b\", \"c\"]),\n    \"math/saturate\": getSimpleInputMapping(\"FlowGraphSaturateBlock\" /* FlowGraphBlockNames.Saturate */),\n    \"math/mix\": getSimpleInputMapping(\"FlowGraphMathInterpolationBlock\" /* FlowGraphBlockNames.MathInterpolation */, [\"a\", \"b\", \"c\"]),\n    \"math/eq\": getSimpleInputMapping(\"FlowGraphEqualityBlock\" /* FlowGraphBlockNames.Equality */, [\"a\", \"b\"]),\n    \"math/lt\": getSimpleInputMapping(\"FlowGraphLessThanBlock\" /* FlowGraphBlockNames.LessThan */, [\"a\", \"b\"]),\n    \"math/le\": getSimpleInputMapping(\"FlowGraphLessThanOrEqualBlock\" /* FlowGraphBlockNames.LessThanOrEqual */, [\"a\", \"b\"]),\n    \"math/gt\": getSimpleInputMapping(\"FlowGraphGreaterThanBlock\" /* FlowGraphBlockNames.GreaterThan */, [\"a\", \"b\"]),\n    \"math/ge\": getSimpleInputMapping(\"FlowGraphGreaterThanOrEqualBlock\" /* FlowGraphBlockNames.GreaterThanOrEqual */, [\"a\", \"b\"]),\n    \"math/isnan\": getSimpleInputMapping(\"FlowGraphIsNaNBlock\" /* FlowGraphBlockNames.IsNaN */),\n    \"math/isinf\": getSimpleInputMapping(\"FlowGraphIsInfBlock\" /* FlowGraphBlockNames.IsInfinity */),\n    \"math/select\": {\n        blocks: [\"FlowGraphConditionalBlock\" /* FlowGraphBlockNames.Conditional */],\n        inputs: {\n            values: {\n                condition: { name: \"condition\" },\n                // Should we validate those have the same type here, or assume it is already validated?\n                a: { name: \"onTrue\" },\n                b: { name: \"onFalse\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"output\" },\n            },\n        },\n    },\n    \"math/random\": {\n        blocks: [\"FlowGraphRandomBlock\" /* FlowGraphBlockNames.Random */],\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/sin\": getSimpleInputMapping(\"FlowGraphSinBlock\" /* FlowGraphBlockNames.Sin */),\n    \"math/cos\": getSimpleInputMapping(\"FlowGraphCosBlock\" /* FlowGraphBlockNames.Cos */),\n    \"math/tan\": getSimpleInputMapping(\"FlowGraphTanBlock\" /* FlowGraphBlockNames.Tan */),\n    \"math/asin\": getSimpleInputMapping(\"FlowGraphASinBlock\" /* FlowGraphBlockNames.Asin */),\n    \"math/acos\": getSimpleInputMapping(\"FlowGraphACosBlock\" /* FlowGraphBlockNames.Acos */),\n    \"math/atan\": getSimpleInputMapping(\"FlowGraphATanBlock\" /* FlowGraphBlockNames.Atan */),\n    \"math/atan2\": getSimpleInputMapping(\"FlowGraphATan2Block\" /* FlowGraphBlockNames.Atan2 */, [\"a\", \"b\"]),\n    \"math/sinh\": getSimpleInputMapping(\"FlowGraphSinhBlock\" /* FlowGraphBlockNames.Sinh */),\n    \"math/cosh\": getSimpleInputMapping(\"FlowGraphCoshBlock\" /* FlowGraphBlockNames.Cosh */),\n    \"math/tanh\": getSimpleInputMapping(\"FlowGraphTanhBlock\" /* FlowGraphBlockNames.Tanh */),\n    \"math/asinh\": getSimpleInputMapping(\"FlowGraphASinhBlock\" /* FlowGraphBlockNames.Asinh */),\n    \"math/acosh\": getSimpleInputMapping(\"FlowGraphACoshBlock\" /* FlowGraphBlockNames.Acosh */),\n    \"math/atanh\": getSimpleInputMapping(\"FlowGraphATanhBlock\" /* FlowGraphBlockNames.Atanh */),\n    \"math/exp\": getSimpleInputMapping(\"FlowGraphExponentialBlock\" /* FlowGraphBlockNames.Exponential */),\n    \"math/log\": getSimpleInputMapping(\"FlowGraphLogBlock\" /* FlowGraphBlockNames.Log */),\n    \"math/log2\": getSimpleInputMapping(\"FlowGraphLog2Block\" /* FlowGraphBlockNames.Log2 */),\n    \"math/log10\": getSimpleInputMapping(\"FlowGraphLog10Block\" /* FlowGraphBlockNames.Log10 */),\n    \"math/sqrt\": getSimpleInputMapping(\"FlowGraphSquareRootBlock\" /* FlowGraphBlockNames.SquareRoot */),\n    \"math/cbrt\": getSimpleInputMapping(\"FlowGraphCubeRootBlock\" /* FlowGraphBlockNames.CubeRoot */),\n    \"math/pow\": getSimpleInputMapping(\"FlowGraphPowerBlock\" /* FlowGraphBlockNames.Power */, [\"a\", \"b\"]),\n    \"math/length\": getSimpleInputMapping(\"FlowGraphLengthBlock\" /* FlowGraphBlockNames.Length */),\n    \"math/normalize\": getSimpleInputMapping(\"FlowGraphNormalizeBlock\" /* FlowGraphBlockNames.Normalize */),\n    \"math/dot\": getSimpleInputMapping(\"FlowGraphDotBlock\" /* FlowGraphBlockNames.Dot */, [\"a\", \"b\"]),\n    \"math/cross\": getSimpleInputMapping(\"FlowGraphCrossBlock\" /* FlowGraphBlockNames.Cross */, [\"a\", \"b\"]),\n    \"math/rotate2D\": getSimpleInputMapping(\"FlowGraphRotate2DBlock\" /* FlowGraphBlockNames.Rotate2D */, [\"a\", \"b\"]),\n    \"math/rotate3D\": getSimpleInputMapping(\"FlowGraphRotate3DBlock\" /* FlowGraphBlockNames.Rotate3D */, [\"a\", \"b\"]),\n    \"math/transform\": {\n        // glTF transform is vectorN with matrixN\n        blocks: [\"FlowGraphTransformVectorBlock\" /* FlowGraphBlockNames.TransformVector */],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/combine2\": {\n        blocks: [\"FlowGraphCombineVector2Block\" /* FlowGraphBlockNames.CombineVector2 */],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/combine3\": {\n        blocks: [\"FlowGraphCombineVector3Block\" /* FlowGraphBlockNames.CombineVector3 */],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/combine4\": {\n        blocks: [\"FlowGraphCombineVector4Block\" /* FlowGraphBlockNames.CombineVector4 */],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    // one input, N outputs! outputs named using numbers.\n    \"math/extract2\": {\n        blocks: [\"FlowGraphExtractVector2Block\" /* FlowGraphBlockNames.ExtractVector2 */],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n            },\n        },\n    },\n    \"math/extract3\": {\n        blocks: [\"FlowGraphExtractVector3Block\" /* FlowGraphBlockNames.ExtractVector3 */],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n            },\n        },\n    },\n    \"math/extract4\": {\n        blocks: [\"FlowGraphExtractVector4Block\" /* FlowGraphBlockNames.ExtractVector4 */],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n            },\n        },\n    },\n    \"math/transpose\": getSimpleInputMapping(\"FlowGraphTransposeBlock\" /* FlowGraphBlockNames.Transpose */),\n    \"math/determinant\": getSimpleInputMapping(\"FlowGraphDeterminantBlock\" /* FlowGraphBlockNames.Determinant */),\n    \"math/inverse\": getSimpleInputMapping(\"FlowGraphInvertMatrixBlock\" /* FlowGraphBlockNames.InvertMatrix */),\n    \"math/matmul\": getSimpleInputMapping(\"FlowGraphMatrixMultiplicationBlock\" /* FlowGraphBlockNames.MatrixMultiplication */, [\"a\", \"b\"]),\n    \"math/matCompose\": {\n        blocks: [\"FlowGraphMatrixCompose\" /* FlowGraphBlockNames.MatrixCompose */],\n        inputs: {\n            values: {\n                translation: { name: \"position\", gltfType: \"float3\" },\n                rotation: { name: \"rotationQuaternion\", gltfType: \"float4\" },\n                scale: { name: \"scaling\", gltfType: \"float3\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            const d = serializedObjects[0].dataInputs.find((input) => input.name === \"rotationQuaternion\");\n            if (!d) {\n                throw new Error(\"Rotation quaternion input not found\");\n            }\n            // if value is defined, set the type to quaternion\n            if (context._connectionValues[d.uniqueId]) {\n                context._connectionValues[d.uniqueId].type = \"Quaternion\" /* FlowGraphTypes.Quaternion */;\n            }\n            return serializedObjects;\n        },\n    },\n    \"math/matDecompose\": {\n        blocks: [\"FlowGraphMatrixDecompose\" /* FlowGraphBlockNames.MatrixDecompose */],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                translation: { name: \"position\" },\n                rotation: { name: \"rotationQuaternion\" },\n                scale: { name: \"scaling\" },\n            },\n        },\n    },\n    \"math/quatConjugate\": getSimpleInputMapping(\"FlowGraphConjugateBlock\" /* FlowGraphBlockNames.Conjugate */, [\"a\"]),\n    \"math/quatMul\": {\n        blocks: [\"FlowGraphMultiplyBlock\" /* FlowGraphBlockNames.Multiply */],\n        inputs: {\n            values: {\n                a: { name: \"a\", gltfType: \"vector4\" },\n                b: { name: \"b\", gltfType: \"vector4\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.type = \"Quaternion\" /* FlowGraphTypes.Quaternion */;\n            return serializedObjects;\n        },\n    },\n    \"math/quatAngleBetween\": getSimpleInputMapping(\"FlowGraphAngleBetweenBlock\" /* FlowGraphBlockNames.AngleBetween */, [\"a\", \"b\"]),\n    \"math/quatFromAxisAngle\": {\n        blocks: [\"FlowGraphQuaternionFromAxisAngleBlock\" /* FlowGraphBlockNames.QuaternionFromAxisAngle */],\n        inputs: {\n            values: {\n                axis: { name: \"a\", gltfType: \"float3\" },\n                angle: { name: \"b\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/quatToAxisAngle\": getSimpleInputMapping(\"FlowGraphAxisAngleFromQuaternionBlock\" /* FlowGraphBlockNames.AxisAngleFromQuaternion */, [\"a\"]),\n    \"math/quatFromDirections\": getSimpleInputMapping(\"FlowGraphQuaternionFromDirectionsBlock\" /* FlowGraphBlockNames.QuaternionFromDirections */, [\"a\", \"b\"]),\n    \"math/combine2x2\": {\n        blocks: [\"FlowGraphCombineMatrix2DBlock\" /* FlowGraphBlockNames.CombineMatrix2D */],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.inputIsColumnMajor = true;\n            return serializedObjects;\n        },\n    },\n    \"math/extract2x2\": {\n        blocks: [\"FlowGraphExtractMatrix2DBlock\" /* FlowGraphBlockNames.ExtractMatrix2D */],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"float2x2\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n            },\n        },\n    },\n    \"math/combine3x3\": {\n        blocks: [\"FlowGraphCombineMatrix3DBlock\" /* FlowGraphBlockNames.CombineMatrix3D */],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n                e: { name: \"input_4\", gltfType: \"number\" },\n                f: { name: \"input_5\", gltfType: \"number\" },\n                g: { name: \"input_6\", gltfType: \"number\" },\n                h: { name: \"input_7\", gltfType: \"number\" },\n                i: { name: \"input_8\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.inputIsColumnMajor = true;\n            return serializedObjects;\n        },\n    },\n    \"math/extract3x3\": {\n        blocks: [\"FlowGraphExtractMatrix3DBlock\" /* FlowGraphBlockNames.ExtractMatrix3D */],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"float3x3\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n                \"4\": { name: \"output_4\" },\n                \"5\": { name: \"output_5\" },\n                \"6\": { name: \"output_6\" },\n                \"7\": { name: \"output_7\" },\n                \"8\": { name: \"output_8\" },\n            },\n        },\n    },\n    \"math/combine4x4\": {\n        blocks: [\"FlowGraphCombineMatrixBlock\" /* FlowGraphBlockNames.CombineMatrix */],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n                e: { name: \"input_4\", gltfType: \"number\" },\n                f: { name: \"input_5\", gltfType: \"number\" },\n                g: { name: \"input_6\", gltfType: \"number\" },\n                h: { name: \"input_7\", gltfType: \"number\" },\n                i: { name: \"input_8\", gltfType: \"number\" },\n                j: { name: \"input_9\", gltfType: \"number\" },\n                k: { name: \"input_10\", gltfType: \"number\" },\n                l: { name: \"input_11\", gltfType: \"number\" },\n                m: { name: \"input_12\", gltfType: \"number\" },\n                n: { name: \"input_13\", gltfType: \"number\" },\n                o: { name: \"input_14\", gltfType: \"number\" },\n                p: { name: \"input_15\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.inputIsColumnMajor = true;\n            return serializedObjects;\n        },\n    },\n    \"math/extract4x4\": {\n        blocks: [\"FlowGraphExtractMatrixBlock\" /* FlowGraphBlockNames.ExtractMatrix */],\n        configuration: {},\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n                \"4\": { name: \"output_4\" },\n                \"5\": { name: \"output_5\" },\n                \"6\": { name: \"output_6\" },\n                \"7\": { name: \"output_7\" },\n                \"8\": { name: \"output_8\" },\n                \"9\": { name: \"output_9\" },\n                \"10\": { name: \"output_10\" },\n                \"11\": { name: \"output_11\" },\n                \"12\": { name: \"output_12\" },\n                \"13\": { name: \"output_13\" },\n                \"14\": { name: \"output_14\" },\n                \"15\": { name: \"output_15\" },\n            },\n        },\n    },\n    \"math/not\": {\n        blocks: [\"FlowGraphBitwiseNotBlock\" /* FlowGraphBlockNames.BitwiseNot */],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            // try to infer the type or fallback to Integer\n            const socketIn = serializedObjects[0].dataInputs[0];\n            serializedObjects[0].config.valueType = context._connectionValues[socketIn.uniqueId]?.type ?? \"FlowGraphInteger\" /* FlowGraphTypes.Integer */;\n            return serializedObjects;\n        },\n    },\n    \"math/and\": {\n        blocks: [\"FlowGraphBitwiseAndBlock\" /* FlowGraphBlockNames.BitwiseAnd */],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            // try to infer the type or fallback to Integer\n            const socketInA = serializedObjects[0].dataInputs[0];\n            const socketInB = serializedObjects[0].dataInputs[1];\n            serializedObjects[0].config.valueType =\n                context._connectionValues[socketInA.uniqueId]?.type ?? context._connectionValues[socketInB.uniqueId]?.type ?? \"FlowGraphInteger\" /* FlowGraphTypes.Integer */;\n            return serializedObjects;\n        },\n    },\n    \"math/or\": {\n        blocks: [\"FlowGraphBitwiseOrBlock\" /* FlowGraphBlockNames.BitwiseOr */],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            // try to infer the type or fallback to Integer\n            const socketInA = serializedObjects[0].dataInputs[0];\n            const socketInB = serializedObjects[0].dataInputs[1];\n            serializedObjects[0].config.valueType =\n                context._connectionValues[socketInA.uniqueId]?.type ?? context._connectionValues[socketInB.uniqueId]?.type ?? \"FlowGraphInteger\" /* FlowGraphTypes.Integer */;\n            return serializedObjects;\n        },\n    },\n    \"math/xor\": {\n        blocks: [\"FlowGraphBitwiseXorBlock\" /* FlowGraphBlockNames.BitwiseXor */],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            // try to infer the type or fallback to Integer\n            const socketInA = serializedObjects[0].dataInputs[0];\n            const socketInB = serializedObjects[0].dataInputs[1];\n            serializedObjects[0].config.valueType =\n                context._connectionValues[socketInA.uniqueId]?.type ?? context._connectionValues[socketInB.uniqueId]?.type ?? \"FlowGraphInteger\" /* FlowGraphTypes.Integer */;\n            return serializedObjects;\n        },\n    },\n    \"math/asr\": getSimpleInputMapping(\"FlowGraphBitwiseRightShiftBlock\" /* FlowGraphBlockNames.BitwiseRightShift */, [\"a\", \"b\"]),\n    \"math/lsl\": getSimpleInputMapping(\"FlowGraphBitwiseLeftShiftBlock\" /* FlowGraphBlockNames.BitwiseLeftShift */, [\"a\", \"b\"]),\n    \"math/clz\": getSimpleInputMapping(\"FlowGraphLeadingZerosBlock\" /* FlowGraphBlockNames.LeadingZeros */),\n    \"math/ctz\": getSimpleInputMapping(\"FlowGraphTrailingZerosBlock\" /* FlowGraphBlockNames.TrailingZeros */),\n    \"math/popcnt\": getSimpleInputMapping(\"FlowGraphOneBitsCounterBlock\" /* FlowGraphBlockNames.OneBitsCounter */),\n    \"math/rad\": getSimpleInputMapping(\"FlowGraphDegToRadBlock\" /* FlowGraphBlockNames.DegToRad */),\n    \"math/deg\": getSimpleInputMapping(\"FlowGraphRadToDegBlock\" /* FlowGraphBlockNames.RadToDeg */),\n    \"type/boolToInt\": getSimpleInputMapping(\"FlowGraphBooleanToInt\" /* FlowGraphBlockNames.BooleanToInt */),\n    \"type/boolToFloat\": getSimpleInputMapping(\"FlowGraphBooleanToFloat\" /* FlowGraphBlockNames.BooleanToFloat */),\n    \"type/intToBool\": getSimpleInputMapping(\"FlowGraphIntToBoolean\" /* FlowGraphBlockNames.IntToBoolean */),\n    \"type/intToFloat\": getSimpleInputMapping(\"FlowGraphIntToFloat\" /* FlowGraphBlockNames.IntToFloat */),\n    \"type/floatToInt\": getSimpleInputMapping(\"FlowGraphFloatToInt\" /* FlowGraphBlockNames.FloatToInt */),\n    \"type/floatToBool\": getSimpleInputMapping(\"FlowGraphFloatToBoolean\" /* FlowGraphBlockNames.FloatToBoolean */),\n    // flows\n    \"flow/sequence\": {\n        blocks: [\"FlowGraphSequenceBlock\" /* FlowGraphBlockNames.Sequence */],\n        extraProcessor(gltfBlock, _declaration, _mapping, _arrays, serializedObjects) {\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.outputSignalCount = Object.keys(gltfBlock.flows || []).length;\n            serializedObject.signalOutputs.forEach((output, index) => {\n                output.name = \"out_\" + index;\n            });\n            return serializedObjects;\n        },\n    },\n    \"flow/branch\": {\n        blocks: [\"FlowGraphBranchBlock\" /* FlowGraphBlockNames.Branch */],\n        outputs: {\n            flows: {\n                true: { name: \"onTrue\" },\n                false: { name: \"onFalse\" },\n            },\n        },\n    },\n    \"flow/switch\": {\n        blocks: [\"FlowGraphSwitchBlock\" /* FlowGraphBlockNames.Switch */],\n        configuration: {\n            cases: { name: \"cases\", inOptions: true, defaultValue: [] },\n        },\n        inputs: {\n            values: {\n                selection: { name: \"case\" },\n                default: { name: \"default\" },\n            },\n        },\n        validation(gltfBlock) {\n            if (gltfBlock.configuration && gltfBlock.configuration.cases) {\n                const cases = gltfBlock.configuration.cases.value;\n                const onlyIntegers = cases.every((caseValue) => {\n                    // case value should be an integer. Since Number.isInteger(1.0) is true, we need to check if toString has only digits.\n                    return typeof caseValue === \"number\" && /^-?\\d+$/.test(caseValue.toString());\n                });\n                if (!onlyIntegers) {\n                    Logger.Warn(\"Switch cases should be integers. Using empty array instead.\");\n                    gltfBlock.configuration.cases.value = [];\n                    return { valid: true };\n                }\n                // check for duplicates\n                const uniqueCases = new Set(cases);\n                gltfBlock.configuration.cases.value = Array.from(uniqueCases);\n            }\n            return { valid: true };\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, _arrays, serializedObjects) {\n            // convert all names of output flow to out_$1 apart from \"default\"\n            if (declaration.op !== \"flow/switch\" || !gltfBlock.flows || Object.keys(gltfBlock.flows).length === 0) {\n                throw new Error(\"Switch should have a single configuration object, the cases array\");\n            }\n            const serializedObject = serializedObjects[0];\n            serializedObject.signalOutputs.forEach((output) => {\n                if (output.name !== \"default\") {\n                    output.name = \"out_\" + output.name;\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"flow/while\": {\n        blocks: [\"FlowGraphWhileLoopBlock\" /* FlowGraphBlockNames.WhileLoop */],\n        outputs: {\n            flows: {\n                loopBody: { name: \"executionFlow\" },\n            },\n        },\n    },\n    \"flow/for\": {\n        blocks: [\"FlowGraphForLoopBlock\" /* FlowGraphBlockNames.ForLoop */],\n        configuration: {\n            initialIndex: { name: \"initialIndex\", gltfType: \"number\", inOptions: true, defaultValue: 0 },\n        },\n        inputs: {\n            values: {\n                startIndex: { name: \"startIndex\", gltfType: \"number\" },\n                endIndex: { name: \"endIndex\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                index: { name: \"index\" },\n            },\n            flows: {\n                loopBody: { name: \"executionFlow\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects) {\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.incrementIndexWhenLoopDone = true;\n            return serializedObjects;\n        },\n    },\n    \"flow/doN\": {\n        blocks: [\"FlowGraphDoNBlock\" /* FlowGraphBlockNames.DoN */],\n        configuration: {},\n        inputs: {\n            values: {\n                n: { name: \"maxExecutions\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                currentCount: { name: \"executionCount\" },\n            },\n        },\n    },\n    \"flow/multiGate\": {\n        blocks: [\"FlowGraphMultiGateBlock\" /* FlowGraphBlockNames.MultiGate */],\n        configuration: {\n            isRandom: { name: \"isRandom\", gltfType: \"boolean\", inOptions: true, defaultValue: false },\n            isLoop: { name: \"isLoop\", gltfType: \"boolean\", inOptions: true, defaultValue: false },\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, _arrays, serializedObjects) {\n            if (declaration.op !== \"flow/multiGate\" || !gltfBlock.flows || Object.keys(gltfBlock.flows).length === 0) {\n                throw new Error(\"MultiGate should have a single configuration object, the number of output flows\");\n            }\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.outputSignalCount = Object.keys(gltfBlock.flows).length;\n            serializedObject.signalOutputs.forEach((output, index) => {\n                output.name = \"out_\" + index;\n            });\n            return serializedObjects;\n        },\n    },\n    \"flow/waitAll\": {\n        blocks: [\"FlowGraphWaitAllBlock\" /* FlowGraphBlockNames.WaitAll */],\n        configuration: {\n            inputFlows: { name: \"inputSignalCount\", gltfType: \"number\", inOptions: true, defaultValue: 0 },\n        },\n        inputs: {\n            flows: {\n                reset: { name: \"reset\" },\n                \"[segment]\": { name: \"in_$1\" },\n            },\n        },\n        validation(gltfBlock) {\n            // check that the configuration value is an integer\n            if (typeof gltfBlock.configuration?.inputFlows?.value[0] !== \"number\") {\n                gltfBlock.configuration = gltfBlock.configuration || {\n                    inputFlows: { value: [0] },\n                };\n                gltfBlock.configuration.inputFlows.value = [0];\n            }\n            return { valid: true };\n        },\n    },\n    \"flow/throttle\": {\n        blocks: [\"FlowGraphThrottleBlock\" /* FlowGraphBlockNames.Throttle */],\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n    },\n    \"flow/setDelay\": {\n        blocks: [\"FlowGraphSetDelayBlock\" /* FlowGraphBlockNames.SetDelay */],\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n    },\n    \"flow/cancelDelay\": {\n        blocks: [\"FlowGraphCancelDelayBlock\" /* FlowGraphBlockNames.CancelDelay */],\n    },\n    \"variable/get\": {\n        blocks: [\"FlowGraphGetVariableBlock\" /* FlowGraphBlockNames.GetVariable */],\n        validation(gltfBlock) {\n            if (!gltfBlock.configuration?.variable?.value) {\n                Logger.Error(\"Variable get block should have a variable configuration\");\n                return { valid: false, error: \"Variable get block should have a variable configuration\" };\n            }\n            return { valid: true };\n        },\n        configuration: {\n            variable: {\n                name: \"variable\",\n                gltfType: \"number\",\n                flowGraphType: \"string\",\n                inOptions: true,\n                isVariable: true,\n                dataTransformer(index, parser) {\n                    return [parser.getVariableName(index[0])];\n                },\n            },\n        },\n    },\n    \"variable/set\": {\n        blocks: [\"FlowGraphSetVariableBlock\" /* FlowGraphBlockNames.SetVariable */],\n        configuration: {\n            variable: {\n                name: \"variable\",\n                gltfType: \"number\",\n                flowGraphType: \"string\",\n                inOptions: true,\n                isVariable: true,\n                dataTransformer(index, parser) {\n                    return [parser.getVariableName(index[0])];\n                },\n            },\n        },\n    },\n    \"variable/setMultiple\": {\n        blocks: [\"FlowGraphSetVariableBlock\" /* FlowGraphBlockNames.SetVariable */],\n        configuration: {\n            variables: {\n                name: \"variables\",\n                gltfType: \"number\",\n                flowGraphType: \"string\",\n                inOptions: true,\n                dataTransformer(index, parser) {\n                    return [index[0].map((i) => parser.getVariableName(i))];\n                },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            // variable/get configuration\n            const serializedGetVariable = serializedObjects[0];\n            serializedGetVariable.dataInputs.forEach((input) => {\n                input.name = parser.getVariableName(+input.name);\n            });\n            return serializedObjects;\n        },\n    },\n    \"variable/interpolate\": {\n        blocks: [\n            \"FlowGraphInterpolationBlock\" /* FlowGraphBlockNames.ValueInterpolation */,\n            \"FlowGraphContextBlock\" /* FlowGraphBlockNames.Context */,\n            \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */,\n            \"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */,\n            \"FlowGraphGetVariableBlock\" /* FlowGraphBlockNames.GetVariable */,\n        ],\n        configuration: {\n            variable: {\n                name: \"propertyName\",\n                inOptions: true,\n                isVariable: true,\n                dataTransformer(index, parser) {\n                    return [parser.getVariableName(index[0])];\n                },\n            },\n            useSlerp: {\n                name: \"animationType\",\n                inOptions: true,\n                defaultValue: false,\n                dataTransformer: (value) => {\n                    if (value[0] === true) {\n                        return [\"Quaternion\" /* FlowGraphTypes.Quaternion */];\n                    }\n                    else {\n                        return [undefined];\n                    }\n                },\n            },\n        },\n        inputs: {\n            values: {\n                value: { name: \"value_1\" },\n                duration: { name: \"duration_1\", gltfType: \"number\" },\n                p1: { name: \"controlPoint1\", toBlock: \"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */ },\n                p2: { name: \"controlPoint2\", toBlock: \"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */ },\n            },\n            flows: {\n                in: { name: \"in\", toBlock: \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */ },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\", toBlock: \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */ },\n                out: { name: \"out\", toBlock: \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */ },\n                done: { name: \"done\", toBlock: \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */ },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"userVariables\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"animation\",\n                output: \"animation\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 0,\n                isVariable: true,\n            },\n            {\n                input: \"easingFunction\",\n                output: \"easingFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 3,\n                isVariable: true,\n            },\n            {\n                input: \"value_0\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 4,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            // is useSlerp is used, animationType should be set to be quaternion!\n            const serializedValueInterpolation = serializedObjects[0];\n            const propertyIndex = gltfBlock.configuration?.variable.value[0];\n            if (typeof propertyIndex !== \"number\") {\n                Logger.Error(\"Variable index is not defined for variable interpolation block\");\n                throw new Error(\"Variable index is not defined for variable interpolation block\");\n            }\n            const variable = parser.arrays.staticVariables[propertyIndex];\n            // if not set by useSlerp\n            if (typeof serializedValueInterpolation.config.animationType.value === \"undefined\") {\n                // get the value type\n                parser.arrays.staticVariables;\n                serializedValueInterpolation.config.animationType.value = getAnimationTypeByFlowGraphType(variable.type);\n            }\n            // variable/get configuration\n            const serializedGetVariable = serializedObjects[4];\n            serializedGetVariable.config ||= {};\n            serializedGetVariable.config.variable ||= {};\n            serializedGetVariable.config.variable.value = parser.getVariableName(propertyIndex);\n            // get the control points from the easing block\n            serializedObjects[3].config ||= {};\n            return serializedObjects;\n        },\n    },\n    \"pointer/get\": {\n        blocks: [\"FlowGraphGetPropertyBlock\" /* FlowGraphBlockNames.GetProperty */, \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */],\n        configuration: {\n            pointer: { name: \"jsonPointer\", toBlock: \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */ },\n        },\n        inputs: {\n            values: {\n                \"[segment]\": { name: \"$1\", toBlock: \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */ },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"object\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"propertyName\",\n                output: \"propertyName\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"customGetFunction\",\n                output: \"getFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            serializedObjects.forEach((serializedObject) => {\n                // check if it is the json pointer block\n                if (serializedObject.className === \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */) {\n                    serializedObject.config ||= {};\n                    serializedObject.config.outputValue = true;\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"pointer/set\": {\n        blocks: [\"FlowGraphSetPropertyBlock\" /* FlowGraphBlockNames.SetProperty */, \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */],\n        configuration: {\n            pointer: { name: \"jsonPointer\", toBlock: \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */ },\n        },\n        inputs: {\n            values: {\n                // must be defined due to the array taking over\n                value: { name: \"value\" },\n                \"[segment]\": { name: \"$1\", toBlock: \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */ },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"object\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"propertyName\",\n                output: \"propertyName\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"customSetFunction\",\n                output: \"setFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            serializedObjects.forEach((serializedObject) => {\n                // check if it is the json pointer block\n                if (serializedObject.className === \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */) {\n                    serializedObject.config ||= {};\n                    serializedObject.config.outputValue = true;\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"pointer/interpolate\": {\n        // interpolate, parse the pointer and play the animation generated. 3 blocks!\n        blocks: [\"FlowGraphInterpolationBlock\" /* FlowGraphBlockNames.ValueInterpolation */, \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */, \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */, \"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */],\n        configuration: {\n            pointer: { name: \"jsonPointer\", toBlock: \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */ },\n        },\n        inputs: {\n            values: {\n                value: { name: \"value_1\" },\n                \"[segment]\": { name: \"$1\", toBlock: \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */ },\n                duration: { name: \"duration_1\", gltfType: \"number\" /*, inOptions: true */ },\n                p1: { name: \"controlPoint1\", toBlock: \"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */ },\n                p2: { name: \"controlPoint2\", toBlock: \"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */ },\n            },\n            flows: {\n                in: { name: \"in\", toBlock: \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */ },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\", toBlock: \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */ },\n                out: { name: \"out\", toBlock: \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */ },\n                done: { name: \"done\", toBlock: \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */ },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"object\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"propertyName\",\n                output: \"propertyName\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"customBuildAnimation\",\n                output: \"generateAnimationsFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"animation\",\n                output: \"animation\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 0,\n                isVariable: true,\n            },\n            {\n                input: \"easingFunction\",\n                output: \"easingFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 3,\n                isVariable: true,\n            },\n            {\n                input: \"value_0\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            serializedObjects.forEach((serializedObject) => {\n                // check if it is the json pointer block\n                if (serializedObject.className === \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */) {\n                    serializedObject.config ||= {};\n                    serializedObject.config.outputValue = true;\n                }\n                else if (serializedObject.className === \"FlowGraphInterpolationBlock\" /* FlowGraphBlockNames.ValueInterpolation */) {\n                    serializedObject.config ||= {};\n                    Object.keys(gltfBlock.values || []).forEach((key) => {\n                        const value = gltfBlock.values?.[key];\n                        if (key === \"value\" && value) {\n                            // get the type of the value\n                            const type = value.type;\n                            if (type !== undefined) {\n                                serializedObject.config.animationType = parser.arrays.types[type].flowGraphType;\n                            }\n                        }\n                    });\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"animation/start\": {\n        blocks: [\"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */, \"FlowGraphArrayIndexBlock\" /* FlowGraphBlockNames.ArrayIndex */, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n        inputs: {\n            values: {\n                animation: { name: \"index\", gltfType: \"number\", toBlock: \"FlowGraphArrayIndexBlock\" /* FlowGraphBlockNames.ArrayIndex */ },\n                speed: { name: \"speed\", gltfType: \"number\" },\n                startTime: { name: \"from\", gltfType: \"number\", dataTransformer: (time, parser) => [time[0] * parser._animationTargetFps] },\n                endTime: { name: \"to\", gltfType: \"number\", dataTransformer: (time, parser) => [time[0] * parser._animationTargetFps] },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"animationGroup\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"array\",\n                output: \"animationGroups\",\n                inputBlockIndex: 1,\n                outputBlockIndex: 2,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects, _context, globalGLTF) {\n            // add the glTF to the configuration of the last serialized object\n            const serializedObject = serializedObjects[serializedObjects.length - 1];\n            serializedObject.config ||= {};\n            serializedObject.config.glTF = globalGLTF;\n            return serializedObjects;\n        },\n    },\n    \"animation/stop\": {\n        blocks: [\"FlowGraphStopAnimationBlock\" /* FlowGraphBlockNames.StopAnimation */, \"FlowGraphArrayIndexBlock\" /* FlowGraphBlockNames.ArrayIndex */, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n        inputs: {\n            values: {\n                animation: { name: \"index\", gltfType: \"number\", toBlock: \"FlowGraphArrayIndexBlock\" /* FlowGraphBlockNames.ArrayIndex */ },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"animationGroup\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"array\",\n                output: \"animationGroups\",\n                inputBlockIndex: 1,\n                outputBlockIndex: 2,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects, _context, globalGLTF) {\n            // add the glTF to the configuration of the last serialized object\n            const serializedObject = serializedObjects[serializedObjects.length - 1];\n            serializedObject.config ||= {};\n            serializedObject.config.glTF = globalGLTF;\n            return serializedObjects;\n        },\n    },\n    \"animation/stopAt\": {\n        blocks: [\"FlowGraphStopAnimationBlock\" /* FlowGraphBlockNames.StopAnimation */, \"FlowGraphArrayIndexBlock\" /* FlowGraphBlockNames.ArrayIndex */, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n        configuration: {},\n        inputs: {\n            values: {\n                animation: { name: \"index\", gltfType: \"number\", toBlock: \"FlowGraphArrayIndexBlock\" /* FlowGraphBlockNames.ArrayIndex */ },\n                stopTime: { name: \"stopAtFrame\", gltfType: \"number\", dataTransformer: (time, parser) => [time[0] * parser._animationTargetFps] },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"animationGroup\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"array\",\n                output: \"animationGroups\",\n                inputBlockIndex: 1,\n                outputBlockIndex: 2,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects, _context, globalGLTF) {\n            // add the glTF to the configuration of the last serialized object\n            const serializedObject = serializedObjects[serializedObjects.length - 1];\n            serializedObject.config ||= {};\n            serializedObject.config.glTF = globalGLTF;\n            return serializedObjects;\n        },\n    },\n    \"math/switch\": {\n        blocks: [\"FlowGraphDataSwitchBlock\" /* FlowGraphBlockNames.DataSwitch */],\n        configuration: {\n            cases: { name: \"cases\", inOptions: true, defaultValue: [] },\n        },\n        inputs: {\n            values: {\n                selection: { name: \"case\" },\n            },\n        },\n        validation(gltfBlock) {\n            if (gltfBlock.configuration && gltfBlock.configuration.cases) {\n                const cases = gltfBlock.configuration.cases.value;\n                const onlyIntegers = cases.every((caseValue) => {\n                    // case value should be an integer. Since Number.isInteger(1.0) is true, we need to check if toString has only digits.\n                    return typeof caseValue === \"number\" && /^-?\\d+$/.test(caseValue.toString());\n                });\n                if (!onlyIntegers) {\n                    Logger.Warn(\"Switch cases should be integers. Using empty array instead.\");\n                    gltfBlock.configuration.cases.value = [];\n                    return { valid: true };\n                }\n                // check for duplicates\n                const uniqueCases = new Set(cases);\n                gltfBlock.configuration.cases.value = Array.from(uniqueCases);\n            }\n            return { valid: true };\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects) {\n            const serializedObject = serializedObjects[0];\n            serializedObject.dataInputs.forEach((input) => {\n                if (input.name !== \"default\" && input.name !== \"case\") {\n                    input.name = \"in_\" + input.name;\n                }\n            });\n            serializedObject.config ||= {};\n            serializedObject.config.treatCasesAsIntegers = true;\n            return serializedObjects;\n        },\n    },\n    \"debug/log\": {\n        blocks: [\"FlowGraphConsoleLogBlock\" /* FlowGraphBlockNames.ConsoleLog */],\n        configuration: {\n            message: { name: \"messageTemplate\", inOptions: true },\n        },\n    },\n};\n// aliases for backwards compatibility\ngltfToFlowGraphMapping[\"math/compose\"] = gltfToFlowGraphMapping[\"math/matCompose\"];\ngltfToFlowGraphMapping[\"math/decompose\"] = gltfToFlowGraphMapping[\"math/matDecompose\"];\nfunction getSimpleInputMapping(type, inputs = [\"a\"], inferType) {\n    return {\n        blocks: [type],\n        inputs: {\n            values: inputs.reduce((acc, input) => {\n                acc[input] = { name: input };\n                return acc;\n            }, {}),\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            if (inferType) {\n                // configure it to work the way glTF specifies\n                serializedObjects[0].config ||= {};\n                serializedObjects[0].config.preventIntegerFloatArithmetic = true;\n                // try to infer the type or fallback to Integer\n                // check the gltf block for the inputs, see if they have a type\n                let type = -1;\n                Object.keys(gltfBlock.values || {}).find((value) => {\n                    if (gltfBlock.values?.[value].type !== undefined) {\n                        type = gltfBlock.values[value].type;\n                        return true;\n                    }\n                    return false;\n                });\n                if (type !== -1) {\n                    serializedObjects[0].config.type = _parser.arrays.types[type].flowGraphType;\n                }\n            }\n            return serializedObjects;\n        },\n        validation(gltfBlock) {\n            if (inferType) {\n                // make sure types are the same\n                return ValidateTypes(gltfBlock);\n            }\n            return { valid: true };\n        },\n    };\n}\nfunction ValidateTypes(gltfBlock) {\n    if (gltfBlock.values) {\n        const types = Object.keys(gltfBlock.values)\n            .map((key) => gltfBlock.values[key].type)\n            .filter((type) => type !== undefined);\n        const allSameType = types.every((type) => type === types[0]);\n        if (!allSameType) {\n            return { valid: false, error: \"All inputs must be of the same type\" };\n        }\n    }\n    return { valid: true };\n}\nexport function getAllSupportedNativeNodeTypes() {\n    return Object.keys(gltfToFlowGraphMapping);\n}\n/**\n *\n * These are the nodes from the specs:\n\n### Math Nodes\n1. **Constants**\n   - E (`math/e`) FlowGraphBlockNames.E\n   - Pi (`math/pi`) FlowGraphBlockNames.PI\n   - Infinity (`math/inf`) FlowGraphBlockNames.Inf\n   - Not a Number (`math/nan`) FlowGraphBlockNames.NaN\n2. **Arithmetic Nodes**\n   - Absolute Value (`math/abs`) FlowGraphBlockNames.Abs\n   - Sign (`math/sign`) FlowGraphBlockNames.Sign\n   - Truncate (`math/trunc`) FlowGraphBlockNames.Trunc\n   - Floor (`math/floor`) FlowGraphBlockNames.Floor\n   - Ceil (`math/ceil`) FlowGraphBlockNames.Ceil\n   - Round (`math/round`)  FlowGraphBlockNames.Round\n   - Fraction (`math/fract`) FlowGraphBlockNames.Fract\n   - Negation (`math/neg`) FlowGraphBlockNames.Negation\n   - Addition (`math/add`) FlowGraphBlockNames.Add\n   - Subtraction (`math/sub`) FlowGraphBlockNames.Subtract\n   - Multiplication (`math/mul`) FlowGraphBlockNames.Multiply\n   - Division (`math/div`) FlowGraphBlockNames.Divide\n   - Remainder (`math/rem`) FlowGraphBlockNames.Modulo\n   - Minimum (`math/min`) FlowGraphBlockNames.Min\n   - Maximum (`math/max`) FlowGraphBlockNames.Max\n   - Clamp (`math/clamp`) FlowGraphBlockNames.Clamp\n   - Saturate (`math/saturate`) FlowGraphBlockNames.Saturate\n   - Interpolate (`math/mix`) FlowGraphBlockNames.MathInterpolation\n3. **Comparison Nodes**\n   - Equality (`math/eq`) FlowGraphBlockNames.Equality\n   - Less Than (`math/lt`) FlowGraphBlockNames.LessThan\n   - Less Than Or Equal To (`math/le`) FlowGraphBlockNames.LessThanOrEqual\n   - Greater Than (`math/gt`) FlowGraphBlockNames.GreaterThan\n   - Greater Than Or Equal To (`math/ge`) FlowGraphBlockNames.GreaterThanOrEqual\n4. **Special Nodes**\n   - Is Not a Number (`math/isnan`) FlowGraphBlockNames.IsNaN\n   - Is Infinity (`math/isinf`) FlowGraphBlockNames.IsInfinity\n   - Select (`math/select`) FlowGraphBlockNames.Conditional\n   - Switch (`math/switch`) FlowGraphBlockNames.DataSwitch\n   - Random (`math/random`) FlowGraphBlockNames.Random\n5. **Angle and Trigonometry Nodes**\n   - Degrees-To-Radians (`math/rad`) FlowGraphBlockNames.DegToRad\n   - Radians-To-Degrees (`math/deg`) FlowGraphBlockNames.RadToDeg\n   - Sine (`math/sin`)  FlowGraphBlockNames.Sin\n   - Cosine (`math/cos`) FlowGraphBlockNames.Cos\n   - Tangent (`math/tan`) FlowGraphBlockNames.Tan\n   - Arcsine (`math/asin`) FlowGraphBlockNames.Asin\n   - Arccosine (`math/acos`) FlowGraphBlockNames.Acos\n   - Arctangent (`math/atan`) FlowGraphBlockNames.Atan\n   - Arctangent 2 (`math/atan2`) FlowGraphBlockNames.Atan2\n6. **Hyperbolic Nodes**\n   - Hyperbolic Sine (`math/sinh`) FlowGraphBlockNames.Sinh\n   - Hyperbolic Cosine (`math/cosh`) FlowGraphBlockNames.Cosh\n   - Hyperbolic Tangent (`math/tanh`) FlowGraphBlockNames.Tanh\n   - Inverse Hyperbolic Sine (`math/asinh`) FlowGraphBlockNames.Asinh\n   - Inverse Hyperbolic Cosine (`math/acosh`) FlowGraphBlockNames.Acosh\n   - Inverse Hyperbolic Tangent (`math/atanh`) FlowGraphBlockNames.Atanh\n7. **Exponential Nodes**\n   - Exponent (`math/exp`) FlowGraphBlockNames.Exponential\n   - Natural Logarithm (`math/log`) FlowGraphBlockNames.Log\n   - Base-2 Logarithm (`math/log2`) FlowGraphBlockNames.Log2\n   - Base-10 Logarithm (`math/log10`) FlowGraphBlockNames.Log10\n   - Square Root (`math/sqrt`) FlowGraphBlockNames.SquareRoot\n   - Cube Root (`math/cbrt`) FlowGraphBlockNames.CubeRoot\n   - Power (`math/pow`) FlowGraphBlockNames.Power\n8. **Vector Nodes**\n   - Length (`math/length`) FlowGraphBlockNames.Length\n   - Normalize (`math/normalize`) FlowGraphBlockNames.Normalize\n   - Dot Product (`math/dot`) FlowGraphBlockNames.Dot\n   - Cross Product (`math/cross`) FlowGraphBlockNames.Cross\n   - Rotate 2D (`math/rotate2D`) FlowGraphBlockNames.Rotate2D\n   - Rotate 3D (`math/rotate3D`) FlowGraphBlockNames.Rotate3D\n   - Transform (`math/transform`) FlowGraphBlockNames.TransformVector\n9. **Matrix Nodes**\n   - Transpose (`math/transpose`) FlowGraphBlockNames.Transpose\n   - Determinant (`math/determinant`) FlowGraphBlockNames.Determinant\n   - Inverse (`math/inverse`) FlowGraphBlockNames.InvertMatrix\n   - Multiplication (`math/matmul`) FlowGraphBlockNames.MatrixMultiplication\n   - Compose (`math/matCompose`) FlowGraphBlockNames.MatrixCompose\n   - Decompose (`math/matDecompose`) FlowGraphBlockNames.MatrixDecompose\n10. **Quaternion Nodes**\n    - Conjugate (`math/quatConjugate`) FlowGraphBlockNames.Conjugate\n    - Multiplication (`math/quatMul`) FlowGraphBlockNames.Multiply\n    - Angle Between Quaternions (`math/quatAngleBetween`) FlowGraphBlockNames.AngleBetween\n    - Quaternion From Axis Angle (`math/quatFromAxisAngle`) FlowGraphBlockNames.QuaternionFromAxisAngle\n    - Quaternion To Axis Angle (`math/quatToAxisAngle`) FlowGraphBlockNames.QuaternionToAxisAngle\n    - Quaternion From Two Directional Vectors (`math/quatFromDirections`) FlowGraphBlockNames.QuaternionFromDirections\n11. **Swizzle Nodes**\n    - Combine (`math/combine2`, `math/combine3`, `math/combine4`, `math/combine2x2`, `math/combine3x3`, `math/combine4x4`)\n        FlowGraphBlockNames.CombineVector2, FlowGraphBlockNames.CombineVector3, FlowGraphBlockNames.CombineVector4\n        FlowGraphBlockNames.CombineMatrix2D, FlowGraphBlockNames.CombineMatrix3D, FlowGraphBlockNames.CombineMatrix\n    - Extract (`math/extract2`, `math/extract3`, `math/extract4`, `math/extract2x2`, `math/extract3x3`, `math/extract4x4`)\n        FlowGraphBlockNames.ExtractVector2, FlowGraphBlockNames.ExtractVector3, FlowGraphBlockNames.ExtractVector4\n        FlowGraphBlockNames.ExtractMatrix2D, FlowGraphBlockNames.ExtractMatrix3D, FlowGraphBlockNames.ExtractMatrix\n12. **Integer Arithmetic Nodes**\n    - Absolute Value (`math/abs`) FlowGraphBlockNames.Abs\n    - Sign (`math/sign`) FlowGraphBlockNames.Sign\n    - Negation (`math/neg`) FlowGraphBlockNames.Negation\n    - Addition (`math/add`) FlowGraphBlockNames.Add\n    - Subtraction (`math/sub`) FlowGraphBlockNames.Subtract\n    - Multiplication (`math/mul`) FlowGraphBlockNames.Multiply\n    - Division (`math/div`) FlowGraphBlockNames.Divide\n    - Remainder (`math/rem`) FlowGraphBlockNames.Modulo\n    - Minimum (`math/min`) FlowGraphBlockNames.Min\n    - Maximum (`math/max`) FlowGraphBlockNames.Max\n    - Clamp (`math/clamp`) FlowGraphBlockNames.Clamp\n13. **Integer Comparison Nodes**\n    - Equality (`math/eq`) FlowGraphBlockNames.Equality\n    - Less Than (`math/lt`) FlowGraphBlockNames.LessThan\n    - Less Than Or Equal To (`math/le`) FlowGraphBlockNames.LessThanOrEqual\n    - Greater Than (`math/gt`) FlowGraphBlockNames.GreaterThan\n    - Greater Than Or Equal To (`math/ge`) FlowGraphBlockNames.GreaterThanOrEqual\n14. **Integer Bitwise Nodes**\n    - Bitwise NOT (`math/not`) FlowGraphBlockNames.BitwiseNot\n    - Bitwise AND (`math/and`) FlowGraphBlockNames.BitwiseAnd\n    - Bitwise OR (`math/or`) FlowGraphBlockNames.BitwiseOr\n    - Bitwise XOR (`math/xor`) FlowGraphBlockNames.BitwiseXor\n    - Right Shift (`math/asr`) FlowGraphBlockNames.BitwiseRightShift\n    - Left Shift (`math/lsl`) FlowGraphBlockNames.BitwiseLeftShift\n    - Count Leading Zeros (`math/clz`) FlowGraphBlockNames.LeadingZeros\n    - Count Trailing Zeros (`math/ctz`) FlowGraphBlockNames.TrailingZeros\n    - Count One Bits (`math/popcnt`) FlowGraphBlockNames.OneBitsCounter\n15. **Boolean Arithmetic Nodes**\n    - Equality (`math/eq`) FlowGraphBlockNames.Equality\n    - Boolean NOT (`math/not`) FlowGraphBlockNames.BitwiseNot\n    - Boolean AND (`math/and`) FlowGraphBlockNames.BitwiseAnd\n    - Boolean OR (`math/or`) FlowGraphBlockNames.BitwiseOr\n    - Boolean XOR (`math/xor`) FlowGraphBlockNames.BitwiseXor\n\n### Type Conversion Nodes\n1. **Boolean Conversion Nodes**\n   - Boolean to Integer (`type/boolToInt`) FlowGraphBlockNames.BooleanToInt\n   - Boolean to Float (`type/boolToFloat`) FlowGraphBlockNames.BooleanToFloat\n2. **Integer Conversion Nodes**\n   - Integer to Boolean (`type/intToBool`) FlowGraphBlockNames.IntToBoolean\n   - Integer to Float (`type/intToFloat`) FlowGraphBlockNames.IntToFloat\n3. **Float Conversion Nodes**\n   - Float to Boolean (`type/floatToBool`) FlowGraphBlockNames.FloatToBoolean\n   - Float to Integer (`type/floatToInt`) FlowGraphBlockNames.FloatToInt\n\n### Control Flow Nodes\n1. **Sync Nodes**\n   - Sequence (`flow/sequence`) FlowGraphBlockNames.Sequence\n   - Branch (`flow/branch`) FlowGraphBlockNames.Branch\n   - Switch (`flow/switch`) FlowGraphBlockNames.Switch\n   - While Loop (`flow/while`) FlowGraphBlockNames.WhileLoop\n   - For Loop (`flow/for`) FlowGraphBlockNames.ForLoop\n   - Do N (`flow/doN`) FlowGraphBlockNames.DoN\n   - Multi Gate (`flow/multiGate`) FlowGraphBlockNames.MultiGate\n   - Wait All (`flow/waitAll`) FlowGraphBlockNames.WaitAll\n   - Throttle (`flow/throttle`) FlowGraphBlockNames.Throttle\n2. **Delay Nodes**\n   - Set Delay (`flow/setDelay`) FlowGraphBlockNames.SetDelay\n   - Cancel Delay (`flow/cancelDelay`) FlowGraphBlockNames.CancelDelay\n\n### State Manipulation Nodes\n1. **Custom Variable Access**\n   - Variable Get (`variable/get`) FlowGraphBlockNames.GetVariable\n   - Variable Set (`variable/set`) FlowGraphBlockNames.SetVariable\n   - Variable Interpolate (`variable/interpolate`)\n2. **Object Model Access** // TODO fully test this!!!\n   - JSON Pointer Template Parsing (`pointer/get`) [FlowGraphBlockNames.GetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Effective JSON Pointer Generation (`pointer/set`) [FlowGraphBlockNames.SetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Pointer Get (`pointer/get`) [FlowGraphBlockNames.GetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Pointer Set (`pointer/set`) [FlowGraphBlockNames.SetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Pointer Interpolate (`pointer/interpolate`) [FlowGraphBlockNames.ValueInterpolation, FlowGraphBlockNames.JsonPointerParser, FlowGraphBlockNames.PlayAnimation, FlowGraphBlockNames.Easing]\n\n### Animation Control Nodes\n1. **Animation Play** (`animation/start`) FlowGraphBlockNames.PlayAnimation\n2. **Animation Stop** (`animation/stop`) FlowGraphBlockNames.StopAnimation\n3. **Animation Stop At** (`animation/stopAt`) FlowGraphBlockNames.StopAnimation\n\n### Event Nodes\n1. **Lifecycle Event Nodes**\n   - On Start (`event/onStart`) FlowGraphBlockNames.SceneReadyEvent\n   - On Tick (`event/onTick`) FlowGraphBlockNames.SceneTickEvent\n2. **Custom Event Nodes**\n   - Receive (`event/receive`) FlowGraphBlockNames.ReceiveCustomEvent\n   - Send (`event/send`) FlowGraphBlockNames.SendCustomEvent\n\n */\n//# sourceMappingURL=declarationMapper.js.map"],"names":["FlowGraphInteger","constructor","value","this","_toInt","n","add","other","subtract","multiply","Math","imul","divide","getClassName","ClassName","equals","FromValue","toString","RegisterClass","FlowGraphMatrix2D","m","_m","transformVector","v","transformVectorToRef","Vector2","result","x","y","asArray","toArray","emptyArray","i","fromArray","array","multiplyToRef","otherMatrix","thisMatrix","r","divideToRef","o","addToRef","subtractToRef","transpose","determinant","inverse","det","Error","invDet","epsilon","abs","join","FlowGraphMatrix3D","Vector3","z","FlowGraphTypes","RichType","typeName","defaultValue","animationType","serialize","serializationObject","RichTypeAny","undefined","RichTypeString","RichTypeNumber","Constants","ANIMATIONTYPE_FLOAT","RichTypeBoolean","RichTypeVector2","Zero","ANIMATIONTYPE_VECTOR2","RichTypeVector3","ANIMATIONTYPE_VECTOR3","RichTypeVector4","Vector4","RichTypeMatrix","Matrix","Identity","ANIMATIONTYPE_MATRIX","RichTypeMatrix2D","RichTypeMatrix3D","RichTypeColor3","Color3","Black","ANIMATIONTYPE_COLOR3","RichTypeColor4","Color4","ANIMATIONTYPE_COLOR4","RichTypeQuaternion","Quaternion","ANIMATIONTYPE_QUATERNION","typeTransformer","FromArray","FromEulerVector","FromRotationMatrix","RichTypeFlowGraphInteger","getRichTypeFromValue","anyValue","getRichTypeByFlowGraphType","flowGraphType","getRichTypeByAnimationType","getMappingForFullOperationName","fullOperationName","op","extension","split","getMappingForDeclaration","declaration","returnNoOpIfNotAvailable","mapping","gltfExtensionsToFlowGraphMapping","gltfToFlowGraphMapping","Logger","Warn","inputs","outputs","flows","inputValueSockets","values","key","name","outputValueSockets","Object","keys","forEach","blocks","addNewInteractivityFlowGraphMapping","BABYLON","message","out","timeSinceLastTick","gltfType","extraProcessor","gltfBlock","_mapping","parser","serializedObjects","configuration","length","eventId","event","arrays","events","serializedObject","config","eventData","validation","interactivityGraph","valid","error","eventConfiguration","getSimpleInputMapping","a","roundHalfAwayFromZero","_gltfBlock","_declaration","_parser","useMatrixPerComponent","preventIntegerFloatArithmetic","type","find","types","ValidateTypes","condition","b","c","d","translation","rotation","scale","context","dataInputs","input","_connectionValues","uniqueId","axis","angle","inputIsColumnMajor","e","f","g","h","j","k","l","p","socketIn","valueType","socketInA","socketInB","_arrays","outputSignalCount","signalOutputs","output","index","true","false","cases","inOptions","selection","default","every","caseValue","test","uniqueCases","Set","Array","from","loopBody","initialIndex","startIndex","endIndex","incrementIndexWhenLoopDone","currentCount","isRandom","isLoop","inputFlows","reset","err","variable","isVariable","dataTransformer","getVariableName","variables","map","useSlerp","duration","p1","toBlock","p2","in","done","interBlockConnectors","inputBlockIndex","outputBlockIndex","serializedValueInterpolation","propertyIndex","staticVariables","getAnimationTypeByFlowGraphType","serializedGetVariable","pointer","className","outputValue","animation","speed","startTime","time","_animationTargetFps","endTime","_context","globalGLTF","glTF","stopTime","treatCasesAsIntegers","inferType","reduce","acc","filter"],"mappings":"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"}