{"version":3,"file":"discBuilder-BYY5e0TV.esm.min.js","sources":["../../../../../dev/core/dist/Meshes/Builders/discBuilder.js"],"sourcesContent":["import { Mesh } from \"../mesh\";\nimport { VertexData } from \"../mesh.vertexData\";\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\n/**\n * Creates the VertexData of the Disc or regular Polygon\n * @param options an object used to set the following optional parameters for the disc, required but can be empty\n * * radius the radius of the disc, optional default 0.5\n * * tessellation the number of polygon sides, optional, default 64\n * * arc a number from 0 to 1, to create an unclosed polygon based on the fraction of the circumference given by the arc value, optional, default 1\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n * @returns the VertexData of the box\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function CreateDiscVertexData(options) {\n    const positions = [];\n    const indices = [];\n    const normals = [];\n    const uvs = [];\n    const radius = options.radius || 0.5;\n    const tessellation = options.tessellation || 64;\n    const arc = options.arc && (options.arc <= 0 || options.arc > 1) ? 1.0 : options.arc || 1.0;\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\n    // positions and uvs\n    positions.push(0, 0, 0); // disc center first\n    uvs.push(0.5, 0.5);\n    const theta = Math.PI * 2 * arc;\n    const step = arc === 1 ? theta / tessellation : theta / (tessellation - 1);\n    let a = 0;\n    for (let t = 0; t < tessellation; t++) {\n        const x = Math.cos(a);\n        const y = Math.sin(a);\n        const u = (x + 1) / 2;\n        const v = (1 - y) / 2;\n        positions.push(radius * x, radius * y, 0);\n        uvs.push(u, useOpenGLOrientationForUV ? 1 - v : v);\n        a += step;\n    }\n    if (arc === 1) {\n        positions.push(positions[3], positions[4], positions[5]); // close the circle\n        uvs.push(uvs[2], useOpenGLOrientationForUV ? 1 - uvs[3] : uvs[3]);\n    }\n    //indices\n    const vertexNb = positions.length / 3;\n    for (let i = 1; i < vertexNb - 1; i++) {\n        indices.push(i + 1, 0, i);\n    }\n    // result\n    VertexData.ComputeNormals(positions, indices, normals);\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\n    const vertexData = new VertexData();\n    vertexData.indices = indices;\n    vertexData.positions = positions;\n    vertexData.normals = normals;\n    vertexData.uvs = uvs;\n    return vertexData;\n}\n/**\n * Creates a plane polygonal mesh.  By default, this is a disc\n * * The parameter `radius` sets the radius size (float) of the polygon (default 0.5)\n * * The parameter `tessellation` sets the number of polygon sides (positive integer, default 64). So a tessellation valued to 3 will build a triangle, to 4 a square, etc\n * * You can create an unclosed polygon with the parameter `arc` (positive float, default 1), valued between 0 and 1, what is the ratio of the circumference : 2 x PI x ratio\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\n * @param name defines the name of the mesh\n * @param options defines the options used to create the mesh\n * @param scene defines the hosting scene\n * @returns the plane polygonal mesh\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#disc-or-regular-polygon\n */\nexport function CreateDisc(name, options = {}, scene = null) {\n    const disc = new Mesh(name, scene);\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n    disc._originalBuilderSideOrientation = options.sideOrientation;\n    const vertexData = CreateDiscVertexData(options);\n    vertexData.applyToMesh(disc, options.updatable);\n    return disc;\n}\n/**\n * Class containing static functions to help procedurally build meshes\n * @deprecated please use CreateDisc directly\n */\nexport const DiscBuilder = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    CreateDisc,\n};\nVertexData.CreateDisc = CreateDiscVertexData;\nMesh.CreateDisc = (name, radius, tessellation, scene = null, updatable, sideOrientation) => {\n    const options = {\n        radius,\n        tessellation,\n        sideOrientation,\n        updatable,\n    };\n    return CreateDisc(name, options, scene);\n};\n//# sourceMappingURL=discBuilder.js.map"],"names":["CreateDiscVertexData","options","positions","indices","normals","uvs","radius","tessellation","arc","sideOrientation","VertexData","DEFAULTSIDE","push","theta","Math","PI","step","a","t","x","cos","y","sin","u","v","vertexNb","length","i","ComputeNormals","_ComputeSides","frontUVs","backUVs","vertexData","CreateDisc","name","scene","disc","Mesh","_GetDefaultSideOrientation","_originalBuilderSideOrientation","applyToMesh","updatable","DiscBuilder"],"mappings":"uDAeO,SAASA,EAAqBC,GACjC,MAAMC,EAAY,GACZC,EAAU,GACVC,EAAU,GACVC,EAAM,GACNC,EAASL,EAAQK,QAAU,GAC3BC,EAAeN,EAAQM,cAAgB,GACvCC,EAAMP,EAAQO,MAAQP,EAAQO,KAAO,GAAKP,EAAQO,IAAM,GAAK,EAAMP,EAAQO,KAAO,EAClFC,EAA8C,IAA5BR,EAAQQ,gBAAwB,EAAIR,EAAQQ,iBAAmBC,EAAWC,YAElGT,EAAUU,KAAK,EAAG,EAAG,GACrBP,EAAIO,KAAK,GAAK,IACd,MAAMC,EAAkB,EAAVC,KAAKC,GAASP,EACtBQ,EAAe,IAARR,EAAYK,EAAQN,EAAeM,GAASN,EAAe,GACxE,IAAIU,EAAI,EACR,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAcW,IAAK,CACnC,MAAMC,EAAIL,KAAKM,IAAIH,GACbI,EAAIP,KAAKQ,IAAIL,GACbM,GAAKJ,EAAI,GAAK,EACdK,GAAK,EAAIH,GAAK,EACpBnB,EAAUU,KAAKN,EAASa,EAAGb,EAASe,EAAG,GACvChB,EAAIO,KAAKW,EAAuCC,GAChDP,GAAKD,CACb,CACgB,IAARR,IACAN,EAAUU,KAAKV,EAAU,GAAIA,EAAU,GAAIA,EAAU,IACrDG,EAAIO,KAAKP,EAAI,GAA6CA,EAAI,KAGlE,MAAMoB,EAAWvB,EAAUwB,OAAS,EACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAW,EAAGE,IAC9BxB,EAAQS,KAAKe,EAAI,EAAG,EAAGA,GAG3BjB,EAAWkB,eAAe1B,EAAWC,EAASC,GAC9CM,EAAWmB,cAAcpB,EAAiBP,EAAWC,EAASC,EAASC,EAAKJ,EAAQ6B,SAAU7B,EAAQ8B,SACtG,MAAMC,EAAa,IAAItB,EAKvB,OAJAsB,EAAW7B,QAAUA,EACrB6B,EAAW9B,UAAYA,EACvB8B,EAAW5B,QAAUA,EACrB4B,EAAW3B,IAAMA,EACV2B,CACX,CAeO,SAASC,EAAWC,EAAMjC,EAAU,CAAA,EAAIkC,EAAQ,MACnD,MAAMC,EAAO,IAAIC,EAAKH,EAAMC,GAC5BlC,EAAQQ,gBAAkB4B,EAAKC,2BAA2BrC,EAAQQ,iBAClE2B,EAAKG,gCAAkCtC,EAAQQ,gBAG/C,OAFmBT,EAAqBC,GAC7BuC,YAAYJ,EAAMnC,EAAQwC,WAC9BL,CACX,CAKY,MAACM,EAAc,CAEvBT,cAEJvB,EAAWuB,WAAajC,EACxBqC,EAAKJ,WAAa,CAACC,EAAM5B,EAAQC,EAAc4B,EAAQ,KAAMM,EAAWhC,IAO7DwB,EAAWC,EANF,CACZ5B,SACAC,eACAE,kBACAgC,aAE6BN"}