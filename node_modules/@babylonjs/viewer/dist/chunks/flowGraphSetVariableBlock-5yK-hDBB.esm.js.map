{"version":3,"file":"flowGraphSetVariableBlock-5yK-hDBB.esm.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Execution/flowGraphSetVariableBlock.js"],"sourcesContent":["import { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../flowGraphExecutionBlockWithOutSignal\";\nimport { RichTypeAny } from \"core/FlowGraph/flowGraphRichTypes\";\n/**\n * This block will set a variable on the context.\n */\nexport class FlowGraphSetVariableBlock extends FlowGraphExecutionBlockWithOutSignal {\n    constructor(config) {\n        super(config);\n        // check if the variable is defined\n        if (!config.variable && !config.variables) {\n            throw new Error(\"FlowGraphSetVariableBlock: variable/variables is not defined\");\n        }\n        // check if the variable is an array\n        if (config.variables && config.variable) {\n            throw new Error(\"FlowGraphSetVariableBlock: variable and variables are both defined\");\n        }\n        // check if we have either a variable or variables. If we have variables, set the inputs correctly\n        if (config.variables) {\n            for (const variable of config.variables) {\n                this.registerDataInput(variable, RichTypeAny);\n            }\n        }\n        else {\n            this.registerDataInput(\"value\", RichTypeAny);\n        }\n    }\n    _execute(context, _callingSignal) {\n        if (this.config?.variables) {\n            for (const variable of this.config.variables) {\n                this._saveVariable(context, variable);\n            }\n        }\n        else {\n            this._saveVariable(context, this.config?.variable, \"value\");\n        }\n        this.out._activateSignal(context);\n    }\n    _saveVariable(context, variableName, inputName) {\n        // check if there is an animation(group) running on this variable. If there is, stop the animation - a value was force-set.\n        const currentlyRunningAnimationGroups = context._getGlobalContextVariable(\"currentlyRunningAnimationGroups\", []);\n        for (const animationUniqueId of currentlyRunningAnimationGroups) {\n            const animationGroup = context.assetsContext.animationGroups.find((animationGroup) => animationGroup.uniqueId == animationUniqueId);\n            if (animationGroup) {\n                // check if there is a target animation that has the target set to be the context\n                for (const targetAnimation of animationGroup.targetedAnimations) {\n                    // check if the target property is the variable we are setting\n                    if (targetAnimation.target === context) {\n                        // check the variable name\n                        if (targetAnimation.animation.targetProperty === variableName) {\n                            // stop the animation\n                            animationGroup.stop();\n                            // remove the animation from the currently running animations\n                            const index = currentlyRunningAnimationGroups.indexOf(animationUniqueId);\n                            if (index > -1) {\n                                currentlyRunningAnimationGroups.splice(index, 1);\n                            }\n                            context._setGlobalContextVariable(\"currentlyRunningAnimationGroups\", currentlyRunningAnimationGroups);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        const value = this.getDataInput(inputName || variableName)?.getValue(context);\n        context.setVariable(variableName, value);\n    }\n    getClassName() {\n        return \"FlowGraphSetVariableBlock\" /* FlowGraphBlockNames.SetVariable */;\n    }\n    serialize(serializationObject) {\n        super.serialize(serializationObject);\n        serializationObject.config.variable = this.config?.variable;\n    }\n}\nRegisterClass(\"FlowGraphSetVariableBlock\" /* FlowGraphBlockNames.SetVariable */, FlowGraphSetVariableBlock);\n//# sourceMappingURL=flowGraphSetVariableBlock.js.map"],"names":[],"mappings":"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"}