import{S as n}from"./index-VvGulz6u.esm.min.js";const o="iblVoxelSlabDebugPixelShader",r="varying vNormalizedPosition: vec3f;uniform nearPlane: f32;uniform farPlane: f32;uniform stepSize: f32;@fragment\nfn main(input: FragmentInputs)->FragmentOutputs {var normPos: vec3f=input.vNormalizedPosition.xyz;var chunkSize: f32=uniforms.stepSize* f32(MAX_DRAW_BUFFERS);var numChunks: f32=1.0/chunkSize;var positionInChunk: f32=fract(normPos.z/chunkSize);var slab: f32=floor(positionInChunk* f32(MAX_DRAW_BUFFERS)) /\nf32(MAX_DRAW_BUFFERS);if (normPos.x<0.0 || normPos.y<0.0 || normPos.z<0.0 ||\nnormPos.x>1.0 || normPos.y>1.0 || normPos.z>1.0) {fragmentOutputs.color= vec4f(0.0,0.0,0.0,0.0);} else {fragmentOutputs.color= vec4f(slab,0.0,0.0,0.75);}}";n.ShadersStoreWGSL[o]||(n.ShadersStoreWGSL[o]=r);const e={name:o,shader:r};export{e as iblVoxelSlabDebugPixelShaderWGSL};
//# sourceMappingURL=iblVoxelSlabDebug.fragment-BwfFnuMa.esm.min.js.map
