import{R as a}from"./index-VvGulz6u.esm.min.js";import{b as e}from"./KHR_interactivity-CxC8fKZd.esm.min.js";import{R as i}from"./declarationMapper-wc0CNyr2.esm.min.js";import"./objectModelMapping-CghNRpa4.esm.min.js";class t extends e{constructor(a){if(super(a),!a.variable&&!a.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(a.variables&&a.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(a.variables)for(const e of a.variables)this.registerDataInput(e,i);else this.registerDataInput("value",i)}_execute(a,e){if(this.config?.variables)for(const e of this.config.variables)this._saveVariable(a,e);else this._saveVariable(a,this.config?.variable,"value");this.out._activateSignal(a)}_saveVariable(a,e,i){const t=a._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const i of t){const r=a.assetsContext.animationGroups.find((a=>a.uniqueId==i));if(r)for(const s of r.targetedAnimations)if(s.target===a&&s.animation.targetProperty===e){r.stop();const e=t.indexOf(i);e>-1&&t.splice(e,1),a._setGlobalContextVariable("currentlyRunningAnimationGroups",t);break}}const r=this.getDataInput(i||e)?.getValue(a);a.setVariable(e,r)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(a){super.serialize(a),a.config.variable=this.config?.variable}}a("FlowGraphSetVariableBlock",t);export{t as FlowGraphSetVariableBlock};
//# sourceMappingURL=flowGraphSetVariableBlock-cexngEGJ.esm.min.js.map
