{"version":3,"file":"shaderMaterial-Cwp1P2Lh.esm.min.js","sources":["../../../../../dev/core/dist/Materials/shaderMaterial.js"],"sourcesContent":["import { SerializationHelper } from \"../Misc/decorators.serialization\";\nimport { Scene } from \"../scene\";\nimport { Matrix, Quaternion } from \"../Maths/math.vector\";\nimport { VertexBuffer } from \"../Buffers/buffer\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { RegisterClass } from \"../Misc/typeStore\";\nimport { EffectFallbacks } from \"./effectFallbacks\";\nimport { WebRequest } from \"../Misc/webRequest\";\nimport { PushMaterial } from \"./pushMaterial\";\nimport { EngineStore } from \"../Engines/engineStore\";\nimport { Constants } from \"../Engines/constants\";\nimport { AddClipPlaneUniforms, BindClipPlane, PrepareStringDefinesForClipPlanes } from \"./clipPlaneMaterialHelper\";\nimport { BindBonesParameters, BindFogParameters, BindLogDepth, BindMorphTargetParameters, BindSceneUniformBuffer, PrepareAttributesForBakedVertexAnimation, PrepareDefinesAndAttributesForMorphTargets, PushAttributesForInstances, } from \"./materialHelper.functions\";\nconst OnCreatedEffectParameters = { effect: null, subMesh: null };\n/**\n * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\n *\n * This returned material effects how the mesh will look based on the code in the shaders.\n *\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/shaders/shaderMaterial\n */\nexport class ShaderMaterial extends PushMaterial {\n    /**\n     * Instantiate a new shader material.\n     * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\n     * This returned material effects how the mesh will look based on the code in the shaders.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/shaders/shaderMaterial\n     * @param name Define the name of the material in the scene\n     * @param scene Define the scene the material belongs to\n     * @param shaderPath Defines  the route to the shader code.\n     * @param options Define the options used to create the shader\n     * @param storeEffectOnSubMeshes true to store effect on submeshes, false to store the effect directly in the material class.\n     */\n    constructor(name, scene, shaderPath, options = {}, storeEffectOnSubMeshes = true) {\n        super(name, scene, storeEffectOnSubMeshes);\n        this._textures = {};\n        this._textureArrays = {};\n        this._externalTextures = {};\n        this._floats = {};\n        this._ints = {};\n        this._uints = {};\n        this._floatsArrays = {};\n        this._colors3 = {};\n        this._colors3Arrays = {};\n        this._colors4 = {};\n        this._colors4Arrays = {};\n        this._vectors2 = {};\n        this._vectors3 = {};\n        this._vectors4 = {};\n        this._quaternions = {};\n        this._quaternionsArrays = {};\n        this._matrices = {};\n        this._matrixArrays = {};\n        this._matrices3x3 = {};\n        this._matrices2x2 = {};\n        this._vectors2Arrays = {};\n        this._vectors3Arrays = {};\n        this._vectors4Arrays = {};\n        this._uniformBuffers = {};\n        this._textureSamplers = {};\n        this._storageBuffers = {};\n        this._cachedWorldViewMatrix = new Matrix();\n        this._cachedWorldViewProjectionMatrix = new Matrix();\n        this._multiview = false;\n        /**\n         * @internal\n         */\n        this._materialHelperNeedsPreviousMatrices = false;\n        this._shaderPath = shaderPath;\n        this._options = {\n            needAlphaBlending: false,\n            needAlphaTesting: false,\n            attributes: [\"position\", \"normal\", \"uv\"],\n            uniforms: [\"worldViewProjection\"],\n            uniformBuffers: [],\n            samplers: [],\n            externalTextures: [],\n            samplerObjects: [],\n            storageBuffers: [],\n            defines: [],\n            useClipPlane: false,\n            ...options,\n        };\n    }\n    /**\n     * Gets the shader path used to define the shader code\n     * It can be modified to trigger a new compilation\n     */\n    get shaderPath() {\n        return this._shaderPath;\n    }\n    /**\n     * Sets the shader path used to define the shader code\n     * It can be modified to trigger a new compilation\n     */\n    set shaderPath(shaderPath) {\n        this._shaderPath = shaderPath;\n    }\n    /**\n     * Gets the options used to compile the shader.\n     * They can be modified to trigger a new compilation\n     */\n    get options() {\n        return this._options;\n    }\n    /**\n     * is multiview set to true?\n     */\n    get isMultiview() {\n        return this._multiview;\n    }\n    /**\n     * Gets the current class name of the material e.g. \"ShaderMaterial\"\n     * Mainly use in serialization.\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ShaderMaterial\";\n    }\n    /**\n     * Specifies if the material will require alpha blending\n     * @returns a boolean specifying if alpha blending is needed\n     */\n    needAlphaBlending() {\n        return this.alpha < 1.0 || this._options.needAlphaBlending;\n    }\n    /**\n     * Specifies if this material should be rendered in alpha test mode\n     * @returns a boolean specifying if an alpha test is needed.\n     */\n    needAlphaTesting() {\n        return this._options.needAlphaTesting;\n    }\n    _checkUniform(uniformName) {\n        if (this._options.uniforms.indexOf(uniformName) === -1) {\n            this._options.uniforms.push(uniformName);\n        }\n    }\n    /**\n     * Set a texture in the shader.\n     * @param name Define the name of the uniform samplers as defined in the shader\n     * @param texture Define the texture to bind to this sampler\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setTexture(name, texture) {\n        if (this._options.samplers.indexOf(name) === -1) {\n            this._options.samplers.push(name);\n        }\n        this._textures[name] = texture;\n        return this;\n    }\n    /**\n     * Remove a texture from the material.\n     * @param name Define the name of the texture to remove\n     */\n    removeTexture(name) {\n        delete this._textures[name];\n    }\n    /**\n     * Set a texture array in the shader.\n     * @param name Define the name of the uniform sampler array as defined in the shader\n     * @param textures Define the list of textures to bind to this sampler\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setTextureArray(name, textures) {\n        if (this._options.samplers.indexOf(name) === -1) {\n            this._options.samplers.push(name);\n        }\n        this._checkUniform(name);\n        this._textureArrays[name] = textures;\n        return this;\n    }\n    /**\n     * Set an internal texture in the shader.\n     * @param name Define the name of the uniform samplers as defined in the shader\n     * @param texture Define the texture to bind to this sampler\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setExternalTexture(name, texture) {\n        if (this._options.externalTextures.indexOf(name) === -1) {\n            this._options.externalTextures.push(name);\n        }\n        this._externalTextures[name] = texture;\n        return this;\n    }\n    /**\n     * Set a float in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setFloat(name, value) {\n        this._checkUniform(name);\n        this._floats[name] = value;\n        return this;\n    }\n    /**\n     * Set a int in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setInt(name, value) {\n        this._checkUniform(name);\n        this._ints[name] = value;\n        return this;\n    }\n    /**\n     * Set a unsigned int in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setUInt(name, value) {\n        this._checkUniform(name);\n        this._uints[name] = value;\n        return this;\n    }\n    /**\n     * Set an array of floats in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setFloats(name, value) {\n        this._checkUniform(name);\n        this._floatsArrays[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec3 in the shader from a Color3.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setColor3(name, value) {\n        this._checkUniform(name);\n        this._colors3[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec3 array in the shader from a IColor3Like array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setColor3Array(name, value) {\n        this._checkUniform(name);\n        this._colors3Arrays[name] = value.reduce((arr, color) => {\n            arr.push(color.r, color.g, color.b);\n            return arr;\n        }, []);\n        return this;\n    }\n    /**\n     * Set a vec4 in the shader from a Color4.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setColor4(name, value) {\n        this._checkUniform(name);\n        this._colors4[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec4 array in the shader from a IColor4Like array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setColor4Array(name, value) {\n        this._checkUniform(name);\n        this._colors4Arrays[name] = value.reduce((arr, color) => {\n            arr.push(color.r, color.g, color.b, color.a);\n            return arr;\n        }, []);\n        return this;\n    }\n    /**\n     * Set a vec2 in the shader from a Vector2.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setVector2(name, value) {\n        this._checkUniform(name);\n        this._vectors2[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec3 in the shader from a Vector3.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setVector3(name, value) {\n        this._checkUniform(name);\n        this._vectors3[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec4 in the shader from a Vector4.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setVector4(name, value) {\n        this._checkUniform(name);\n        this._vectors4[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec4 in the shader from a Quaternion.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setQuaternion(name, value) {\n        this._checkUniform(name);\n        this._quaternions[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec4 array in the shader from a Quaternion array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setQuaternionArray(name, value) {\n        this._checkUniform(name);\n        this._quaternionsArrays[name] = value.reduce((arr, quaternion) => {\n            quaternion.toArray(arr, arr.length);\n            return arr;\n        }, []);\n        return this;\n    }\n    /**\n     * Set a mat4 in the shader from a Matrix.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setMatrix(name, value) {\n        this._checkUniform(name);\n        this._matrices[name] = value;\n        return this;\n    }\n    /**\n     * Set a float32Array in the shader from a matrix array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setMatrices(name, value) {\n        this._checkUniform(name);\n        const float32Array = new Float32Array(value.length * 16);\n        for (let index = 0; index < value.length; index++) {\n            const matrix = value[index];\n            matrix.copyToArray(float32Array, index * 16);\n        }\n        this._matrixArrays[name] = float32Array;\n        return this;\n    }\n    /**\n     * Set a mat3 in the shader from a Float32Array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setMatrix3x3(name, value) {\n        this._checkUniform(name);\n        this._matrices3x3[name] = value;\n        return this;\n    }\n    /**\n     * Set a mat2 in the shader from a Float32Array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setMatrix2x2(name, value) {\n        this._checkUniform(name);\n        this._matrices2x2[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec2 array in the shader from a number array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setArray2(name, value) {\n        this._checkUniform(name);\n        this._vectors2Arrays[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec3 array in the shader from a number array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setArray3(name, value) {\n        this._checkUniform(name);\n        this._vectors3Arrays[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec4 array in the shader from a number array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setArray4(name, value) {\n        this._checkUniform(name);\n        this._vectors4Arrays[name] = value;\n        return this;\n    }\n    /**\n     * Set a uniform buffer in the shader\n     * @param name Define the name of the uniform as defined in the shader\n     * @param buffer Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setUniformBuffer(name, buffer) {\n        if (this._options.uniformBuffers.indexOf(name) === -1) {\n            this._options.uniformBuffers.push(name);\n        }\n        this._uniformBuffers[name] = buffer;\n        return this;\n    }\n    /**\n     * Set a texture sampler in the shader\n     * @param name Define the name of the uniform as defined in the shader\n     * @param sampler Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setTextureSampler(name, sampler) {\n        if (this._options.samplerObjects.indexOf(name) === -1) {\n            this._options.samplerObjects.push(name);\n        }\n        this._textureSamplers[name] = sampler;\n        return this;\n    }\n    /**\n     * Set a storage buffer in the shader\n     * @param name Define the name of the storage buffer as defined in the shader\n     * @param buffer Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setStorageBuffer(name, buffer) {\n        if (this._options.storageBuffers.indexOf(name) === -1) {\n            this._options.storageBuffers.push(name);\n        }\n        this._storageBuffers[name] = buffer;\n        return this;\n    }\n    /**\n     * Adds, removes, or replaces the specified shader define and value.\n     * * setDefine(\"MY_DEFINE\", true); // enables a boolean define\n     * * setDefine(\"MY_DEFINE\", \"0.5\"); // adds \"#define MY_DEFINE 0.5\" to the shader (or sets and replaces the value of any existing define with that name)\n     * * setDefine(\"MY_DEFINE\", false); // disables and removes the define\n     * Note if the active defines do change, the shader will be recompiled and this can be expensive.\n     * @param define the define name e.g., \"OUTPUT_TO_SRGB\" or \"#define OUTPUT_TO_SRGB\". If the define was passed into the constructor already, the version used should match that, and in either case, it should not include any appended value.\n     * @param value either the value of the define (e.g. a numerical value) or for booleans, true if the define should be enabled or false if it should be disabled\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setDefine(define, value) {\n        // First remove any existing define with this name.\n        const defineName = define.trimEnd() + \" \";\n        const existingDefineIdx = this.options.defines.findIndex((x) => x === define || x.startsWith(defineName));\n        if (existingDefineIdx >= 0) {\n            this.options.defines.splice(existingDefineIdx, 1);\n        }\n        // Then add the new define value. (If it's a boolean value and false, don't add it.)\n        if (typeof value !== \"boolean\" || value) {\n            this.options.defines.push(defineName + value);\n        }\n        return this;\n    }\n    /**\n     * Specifies that the submesh is ready to be used\n     * @param mesh defines the mesh to check\n     * @param subMesh defines which submesh to check\n     * @param useInstances specifies that instances should be used\n     * @returns a boolean indicating that the submesh is ready or not\n     */\n    isReadyForSubMesh(mesh, subMesh, useInstances) {\n        return this.isReady(mesh, useInstances, subMesh);\n    }\n    /**\n     * Checks if the material is ready to render the requested mesh\n     * @param mesh Define the mesh to render\n     * @param useInstances Define whether or not the material is used with instances\n     * @param subMesh defines which submesh to render\n     * @returns true if ready, otherwise false\n     */\n    isReady(mesh, useInstances, subMesh) {\n        const storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\n        if (this.isFrozen) {\n            const drawWrapper = storeEffectOnSubMeshes ? subMesh._drawWrapper : this._drawWrapper;\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\n                return true;\n            }\n        }\n        const scene = this.getScene();\n        const engine = scene.getEngine();\n        // Instances\n        const defines = [];\n        const attribs = [];\n        let fallbacks = null;\n        let shaderName = this._shaderPath, uniforms = this._options.uniforms, uniformBuffers = this._options.uniformBuffers, samplers = this._options.samplers;\n        // global multiview\n        if (engine.getCaps().multiview && scene.activeCamera && scene.activeCamera.outputRenderTarget && scene.activeCamera.outputRenderTarget.getViewCount() > 1) {\n            this._multiview = true;\n            defines.push(\"#define MULTIVIEW\");\n            if (uniforms.indexOf(\"viewProjection\") !== -1 && uniforms.indexOf(\"viewProjectionR\") === -1) {\n                uniforms.push(\"viewProjectionR\");\n            }\n        }\n        for (let index = 0; index < this._options.defines.length; index++) {\n            const defineToAdd = this._options.defines[index].indexOf(\"#define\") === 0 ? this._options.defines[index] : `#define ${this._options.defines[index]}`;\n            defines.push(defineToAdd);\n        }\n        for (let index = 0; index < this._options.attributes.length; index++) {\n            attribs.push(this._options.attributes[index]);\n        }\n        if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorKind)) {\n            if (attribs.indexOf(VertexBuffer.ColorKind) === -1) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n            defines.push(\"#define VERTEXCOLOR\");\n        }\n        if (useInstances) {\n            defines.push(\"#define INSTANCES\");\n            PushAttributesForInstances(attribs, this._materialHelperNeedsPreviousMatrices);\n            if (mesh?.hasThinInstances) {\n                defines.push(\"#define THIN_INSTANCES\");\n                if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorInstanceKind)) {\n                    attribs.push(VertexBuffer.ColorInstanceKind);\n                    defines.push(\"#define INSTANCESCOLOR\");\n                }\n            }\n        }\n        // Bones\n        if (mesh && mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\n            attribs.push(VertexBuffer.MatricesIndicesKind);\n            attribs.push(VertexBuffer.MatricesWeightsKind);\n            if (mesh.numBoneInfluencers > 4) {\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\n            }\n            const skeleton = mesh.skeleton;\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\n            fallbacks = new EffectFallbacks();\n            fallbacks.addCPUSkinningFallback(0, mesh);\n            if (skeleton.isUsingTextureForMatrices) {\n                defines.push(\"#define BONETEXTURE\");\n                if (uniforms.indexOf(\"boneTextureWidth\") === -1) {\n                    uniforms.push(\"boneTextureWidth\");\n                }\n                if (this._options.samplers.indexOf(\"boneSampler\") === -1) {\n                    this._options.samplers.push(\"boneSampler\");\n                }\n            }\n            else {\n                defines.push(\"#define BonesPerMesh \" + (skeleton.bones.length + 1));\n                if (uniforms.indexOf(\"mBones\") === -1) {\n                    uniforms.push(\"mBones\");\n                }\n            }\n        }\n        else {\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\n        }\n        // Morph\n        let numInfluencers = 0;\n        const manager = mesh ? mesh.morphTargetManager : null;\n        if (manager) {\n            const uv = defines.indexOf(\"#define UV1\") !== -1;\n            const uv2 = defines.indexOf(\"#define UV2\") !== -1;\n            const tangent = defines.indexOf(\"#define TANGENT\") !== -1;\n            const normal = defines.indexOf(\"#define NORMAL\") !== -1;\n            const color = defines.indexOf(\"#define VERTEXCOLOR\") !== -1;\n            numInfluencers = PrepareDefinesAndAttributesForMorphTargets(manager, defines, attribs, mesh, true, // usePositionMorph\n            normal, // useNormalMorph\n            tangent, // useTangentMorph\n            uv, // useUVMorph\n            uv2, // useUV2Morph\n            color // useColorMorph\n            );\n            if (manager.isUsingTextureForTargets) {\n                if (uniforms.indexOf(\"morphTargetTextureIndices\") === -1) {\n                    uniforms.push(\"morphTargetTextureIndices\");\n                }\n                if (this._options.samplers.indexOf(\"morphTargets\") === -1) {\n                    this._options.samplers.push(\"morphTargets\");\n                }\n            }\n            if (numInfluencers > 0) {\n                uniforms = uniforms.slice();\n                uniforms.push(\"morphTargetInfluences\");\n                uniforms.push(\"morphTargetCount\");\n                uniforms.push(\"morphTargetTextureInfo\");\n                uniforms.push(\"morphTargetTextureIndices\");\n            }\n        }\n        else {\n            defines.push(\"#define NUM_MORPH_INFLUENCERS 0\");\n        }\n        // Baked Vertex Animation\n        if (mesh) {\n            const bvaManager = mesh.bakedVertexAnimationManager;\n            if (bvaManager && bvaManager.isEnabled) {\n                defines.push(\"#define BAKED_VERTEX_ANIMATION_TEXTURE\");\n                if (uniforms.indexOf(\"bakedVertexAnimationSettings\") === -1) {\n                    uniforms.push(\"bakedVertexAnimationSettings\");\n                }\n                if (uniforms.indexOf(\"bakedVertexAnimationTextureSizeInverted\") === -1) {\n                    uniforms.push(\"bakedVertexAnimationTextureSizeInverted\");\n                }\n                if (uniforms.indexOf(\"bakedVertexAnimationTime\") === -1) {\n                    uniforms.push(\"bakedVertexAnimationTime\");\n                }\n                if (this._options.samplers.indexOf(\"bakedVertexAnimationTexture\") === -1) {\n                    this._options.samplers.push(\"bakedVertexAnimationTexture\");\n                }\n            }\n            PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\n        }\n        // Textures\n        for (const name in this._textures) {\n            if (!this._textures[name].isReady()) {\n                return false;\n            }\n        }\n        // Alpha test\n        if (mesh && this.needAlphaTestingForMesh(mesh)) {\n            defines.push(\"#define ALPHATEST\");\n        }\n        // Clip planes\n        if (this._options.useClipPlane !== false) {\n            AddClipPlaneUniforms(uniforms);\n            PrepareStringDefinesForClipPlanes(this, scene, defines);\n        }\n        // Fog\n        if (scene.fogEnabled && mesh?.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\n            defines.push(\"#define FOG\");\n            if (uniforms.indexOf(\"view\") === -1) {\n                uniforms.push(\"view\");\n            }\n            if (uniforms.indexOf(\"vFogInfos\") === -1) {\n                uniforms.push(\"vFogInfos\");\n            }\n            if (uniforms.indexOf(\"vFogColor\") === -1) {\n                uniforms.push(\"vFogColor\");\n            }\n        }\n        // Misc\n        if (this._useLogarithmicDepth) {\n            defines.push(\"#define LOGARITHMICDEPTH\");\n            if (uniforms.indexOf(\"logarithmicDepthConstant\") === -1) {\n                uniforms.push(\"logarithmicDepthConstant\");\n            }\n        }\n        if (this.customShaderNameResolve) {\n            uniforms = uniforms.slice();\n            uniformBuffers = uniformBuffers.slice();\n            samplers = samplers.slice();\n            shaderName = this.customShaderNameResolve(this.name, uniforms, uniformBuffers, samplers, defines, attribs);\n        }\n        const drawWrapper = storeEffectOnSubMeshes ? subMesh._getDrawWrapper(undefined, true) : this._drawWrapper;\n        const previousEffect = drawWrapper?.effect ?? null;\n        const previousDefines = drawWrapper?.defines ?? null;\n        const join = defines.join(\"\\n\");\n        let effect = previousEffect;\n        if (previousDefines !== join) {\n            effect = engine.createEffect(shaderName, {\n                attributes: attribs,\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: join,\n                fallbacks: fallbacks,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters: { maxSimultaneousMorphTargets: numInfluencers },\n                shaderLanguage: this._options.shaderLanguage,\n                extraInitializationsAsync: this._options.extraInitializationsAsync,\n            }, engine);\n            if (storeEffectOnSubMeshes) {\n                subMesh.setEffect(effect, join, this._materialContext);\n            }\n            else if (drawWrapper) {\n                drawWrapper.setEffect(effect, join);\n            }\n            if (this._onEffectCreatedObservable) {\n                OnCreatedEffectParameters.effect = effect;\n                OnCreatedEffectParameters.subMesh = subMesh ?? mesh?.subMeshes[0] ?? null;\n                this._onEffectCreatedObservable.notifyObservers(OnCreatedEffectParameters);\n            }\n        }\n        drawWrapper._wasPreviouslyUsingInstances = !!useInstances;\n        if (!effect?.isReady()) {\n            return false;\n        }\n        if (previousEffect !== effect) {\n            scene.resetCachedMaterial();\n        }\n        drawWrapper._wasPreviouslyReady = true;\n        return true;\n    }\n    /**\n     * Binds the world matrix to the material\n     * @param world defines the world transformation matrix\n     * @param effectOverride - If provided, use this effect instead of internal effect\n     */\n    bindOnlyWorldMatrix(world, effectOverride) {\n        const effect = effectOverride ?? this.getEffect();\n        if (!effect) {\n            return;\n        }\n        const uniforms = this._options.uniforms;\n        if (uniforms.indexOf(\"world\") !== -1) {\n            effect.setMatrix(\"world\", world);\n        }\n        const scene = this.getScene();\n        if (uniforms.indexOf(\"worldView\") !== -1) {\n            world.multiplyToRef(scene.getViewMatrix(), this._cachedWorldViewMatrix);\n            effect.setMatrix(\"worldView\", this._cachedWorldViewMatrix);\n        }\n        if (uniforms.indexOf(\"worldViewProjection\") !== -1) {\n            world.multiplyToRef(scene.getTransformMatrix(), this._cachedWorldViewProjectionMatrix);\n            effect.setMatrix(\"worldViewProjection\", this._cachedWorldViewProjectionMatrix);\n        }\n        if (uniforms.indexOf(\"view\") !== -1) {\n            effect.setMatrix(\"view\", scene.getViewMatrix());\n        }\n    }\n    /**\n     * Binds the submesh to this material by preparing the effect and shader to draw\n     * @param world defines the world transformation matrix\n     * @param mesh defines the mesh containing the submesh\n     * @param subMesh defines the submesh to bind the material to\n     */\n    bindForSubMesh(world, mesh, subMesh) {\n        this.bind(world, mesh, subMesh._drawWrapperOverride?.effect, subMesh);\n    }\n    /**\n     * Binds the material to the mesh\n     * @param world defines the world transformation matrix\n     * @param mesh defines the mesh to bind the material to\n     * @param effectOverride - If provided, use this effect instead of internal effect\n     * @param subMesh defines the submesh to bind the material to\n     */\n    bind(world, mesh, effectOverride, subMesh) {\n        // Std values\n        const storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\n        const effect = effectOverride ?? (storeEffectOnSubMeshes ? subMesh.effect : this.getEffect());\n        if (!effect) {\n            return;\n        }\n        const scene = this.getScene();\n        this._activeEffect = effect;\n        this.bindOnlyWorldMatrix(world, effectOverride);\n        const uniformBuffers = this._options.uniformBuffers;\n        let useSceneUBO = false;\n        if (effect && uniformBuffers && uniformBuffers.length > 0 && scene.getEngine().supportsUniformBuffers) {\n            for (let i = 0; i < uniformBuffers.length; ++i) {\n                const bufferName = uniformBuffers[i];\n                switch (bufferName) {\n                    case \"Mesh\":\n                        if (mesh) {\n                            mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n                            mesh.transferToEffect(world);\n                        }\n                        break;\n                    case \"Scene\":\n                        BindSceneUniformBuffer(effect, scene.getSceneUniformBuffer());\n                        scene.finalizeSceneUbo();\n                        useSceneUBO = true;\n                        break;\n                }\n            }\n        }\n        const mustRebind = mesh && storeEffectOnSubMeshes ? this._mustRebind(scene, effect, subMesh, mesh.visibility) : scene.getCachedMaterial() !== this;\n        if (effect && mustRebind) {\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"view\") !== -1) {\n                effect.setMatrix(\"view\", scene.getViewMatrix());\n            }\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"projection\") !== -1) {\n                effect.setMatrix(\"projection\", scene.getProjectionMatrix());\n            }\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"viewProjection\") !== -1) {\n                effect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n                if (this._multiview) {\n                    effect.setMatrix(\"viewProjectionR\", scene._transformMatrixR);\n                }\n            }\n            if (scene.activeCamera && this._options.uniforms.indexOf(\"cameraPosition\") !== -1) {\n                effect.setVector3(\"cameraPosition\", scene.activeCamera.globalPosition);\n            }\n            // Bones\n            BindBonesParameters(mesh, effect);\n            // Clip plane\n            BindClipPlane(effect, this, scene);\n            // Misc\n            if (this._useLogarithmicDepth) {\n                BindLogDepth(storeEffectOnSubMeshes ? subMesh.materialDefines : effect.defines, effect, scene);\n            }\n            // Fog\n            if (mesh) {\n                BindFogParameters(scene, mesh, effect);\n            }\n            let name;\n            // Texture\n            for (name in this._textures) {\n                effect.setTexture(name, this._textures[name]);\n            }\n            // Texture arrays\n            for (name in this._textureArrays) {\n                effect.setTextureArray(name, this._textureArrays[name]);\n            }\n            // Int\n            for (name in this._ints) {\n                effect.setInt(name, this._ints[name]);\n            }\n            // UInt\n            for (name in this._uints) {\n                effect.setUInt(name, this._uints[name]);\n            }\n            // Float\n            for (name in this._floats) {\n                effect.setFloat(name, this._floats[name]);\n            }\n            // Floats\n            for (name in this._floatsArrays) {\n                effect.setArray(name, this._floatsArrays[name]);\n            }\n            // Color3\n            for (name in this._colors3) {\n                effect.setColor3(name, this._colors3[name]);\n            }\n            // Color3Array\n            for (name in this._colors3Arrays) {\n                effect.setArray3(name, this._colors3Arrays[name]);\n            }\n            // Color4\n            for (name in this._colors4) {\n                const color = this._colors4[name];\n                effect.setFloat4(name, color.r, color.g, color.b, color.a);\n            }\n            // Color4Array\n            for (name in this._colors4Arrays) {\n                effect.setArray4(name, this._colors4Arrays[name]);\n            }\n            // Vector2\n            for (name in this._vectors2) {\n                effect.setVector2(name, this._vectors2[name]);\n            }\n            // Vector3\n            for (name in this._vectors3) {\n                effect.setVector3(name, this._vectors3[name]);\n            }\n            // Vector4\n            for (name in this._vectors4) {\n                effect.setVector4(name, this._vectors4[name]);\n            }\n            // Quaternion\n            for (name in this._quaternions) {\n                effect.setQuaternion(name, this._quaternions[name]);\n            }\n            // Matrix\n            for (name in this._matrices) {\n                effect.setMatrix(name, this._matrices[name]);\n            }\n            // MatrixArray\n            for (name in this._matrixArrays) {\n                effect.setMatrices(name, this._matrixArrays[name]);\n            }\n            // Matrix 3x3\n            for (name in this._matrices3x3) {\n                effect.setMatrix3x3(name, this._matrices3x3[name]);\n            }\n            // Matrix 2x2\n            for (name in this._matrices2x2) {\n                effect.setMatrix2x2(name, this._matrices2x2[name]);\n            }\n            // Vector2Array\n            for (name in this._vectors2Arrays) {\n                effect.setArray2(name, this._vectors2Arrays[name]);\n            }\n            // Vector3Array\n            for (name in this._vectors3Arrays) {\n                effect.setArray3(name, this._vectors3Arrays[name]);\n            }\n            // Vector4Array\n            for (name in this._vectors4Arrays) {\n                effect.setArray4(name, this._vectors4Arrays[name]);\n            }\n            // QuaternionArray\n            for (name in this._quaternionsArrays) {\n                effect.setArray4(name, this._quaternionsArrays[name]);\n            }\n            // Uniform buffers\n            for (name in this._uniformBuffers) {\n                const buffer = this._uniformBuffers[name].getBuffer();\n                if (buffer) {\n                    effect.bindUniformBuffer(buffer, name);\n                }\n            }\n            const engineWebGPU = scene.getEngine();\n            // External texture\n            const setExternalTexture = engineWebGPU.setExternalTexture;\n            if (setExternalTexture) {\n                for (name in this._externalTextures) {\n                    setExternalTexture.call(engineWebGPU, name, this._externalTextures[name]);\n                }\n            }\n            // Samplers\n            const setTextureSampler = engineWebGPU.setTextureSampler;\n            if (setTextureSampler) {\n                for (name in this._textureSamplers) {\n                    setTextureSampler.call(engineWebGPU, name, this._textureSamplers[name]);\n                }\n            }\n            // Storage buffers\n            const setStorageBuffer = engineWebGPU.setStorageBuffer;\n            if (setStorageBuffer) {\n                for (name in this._storageBuffers) {\n                    setStorageBuffer.call(engineWebGPU, name, this._storageBuffers[name]);\n                }\n            }\n        }\n        if (effect && mesh && (mustRebind || !this.isFrozen)) {\n            // Morph targets\n            BindMorphTargetParameters(mesh, effect);\n            if (mesh.morphTargetManager && mesh.morphTargetManager.isUsingTextureForTargets) {\n                mesh.morphTargetManager._bind(effect);\n            }\n            const bvaManager = mesh.bakedVertexAnimationManager;\n            if (bvaManager && bvaManager.isEnabled) {\n                const drawWrapper = storeEffectOnSubMeshes ? subMesh._drawWrapper : this._drawWrapper;\n                mesh.bakedVertexAnimationManager?.bind(effect, !!drawWrapper._wasPreviouslyUsingInstances);\n            }\n        }\n        this._afterBind(mesh, effect, subMesh);\n    }\n    /**\n     * Gets the active textures from the material\n     * @returns an array of textures\n     */\n    getActiveTextures() {\n        const activeTextures = super.getActiveTextures();\n        for (const name in this._textures) {\n            activeTextures.push(this._textures[name]);\n        }\n        for (const name in this._textureArrays) {\n            const array = this._textureArrays[name];\n            for (let index = 0; index < array.length; index++) {\n                activeTextures.push(array[index]);\n            }\n        }\n        return activeTextures;\n    }\n    /**\n     * Specifies if the material uses a texture\n     * @param texture defines the texture to check against the material\n     * @returns a boolean specifying if the material uses the texture\n     */\n    hasTexture(texture) {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n        for (const name in this._textures) {\n            if (this._textures[name] === texture) {\n                return true;\n            }\n        }\n        for (const name in this._textureArrays) {\n            const array = this._textureArrays[name];\n            for (let index = 0; index < array.length; index++) {\n                if (array[index] === texture) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Makes a duplicate of the material, and gives it a new name\n     * @param name defines the new name for the duplicated material\n     * @returns the cloned material\n     */\n    clone(name) {\n        const result = SerializationHelper.Clone(() => new ShaderMaterial(name, this.getScene(), this._shaderPath, this._options, this._storeEffectOnSubMeshes), this);\n        result.name = name;\n        result.id = name;\n        // Shader code path\n        if (typeof result._shaderPath === \"object\") {\n            result._shaderPath = { ...result._shaderPath };\n        }\n        // Options\n        this._options = { ...this._options };\n        const keys = Object.keys(this._options);\n        for (const propName of keys) {\n            const propValue = this._options[propName];\n            if (Array.isArray(propValue)) {\n                this._options[propName] = propValue.slice(0);\n            }\n        }\n        // Stencil\n        this.stencil.copyTo(result.stencil);\n        // Texture\n        for (const key in this._textures) {\n            result.setTexture(key, this._textures[key]);\n        }\n        // TextureArray\n        for (const key in this._textureArrays) {\n            result.setTextureArray(key, this._textureArrays[key]);\n        }\n        // External texture\n        for (const key in this._externalTextures) {\n            result.setExternalTexture(key, this._externalTextures[key]);\n        }\n        // Int\n        for (const key in this._ints) {\n            result.setInt(key, this._ints[key]);\n        }\n        // UInt\n        for (const key in this._uints) {\n            result.setUInt(key, this._uints[key]);\n        }\n        // Float\n        for (const key in this._floats) {\n            result.setFloat(key, this._floats[key]);\n        }\n        // Floats\n        for (const key in this._floatsArrays) {\n            result.setFloats(key, this._floatsArrays[key]);\n        }\n        // Color3\n        for (const key in this._colors3) {\n            result.setColor3(key, this._colors3[key]);\n        }\n        // Color3Array\n        for (const key in this._colors3Arrays) {\n            result._colors3Arrays[key] = this._colors3Arrays[key];\n        }\n        // Color4\n        for (const key in this._colors4) {\n            result.setColor4(key, this._colors4[key]);\n        }\n        // Color4Array\n        for (const key in this._colors4Arrays) {\n            result._colors4Arrays[key] = this._colors4Arrays[key];\n        }\n        // Vector2\n        for (const key in this._vectors2) {\n            result.setVector2(key, this._vectors2[key]);\n        }\n        // Vector3\n        for (const key in this._vectors3) {\n            result.setVector3(key, this._vectors3[key]);\n        }\n        // Vector4\n        for (const key in this._vectors4) {\n            result.setVector4(key, this._vectors4[key]);\n        }\n        // Quaternion\n        for (const key in this._quaternions) {\n            result.setQuaternion(key, this._quaternions[key]);\n        }\n        // QuaternionArray\n        for (const key in this._quaternionsArrays) {\n            result._quaternionsArrays[key] = this._quaternionsArrays[key];\n        }\n        // Matrix\n        for (const key in this._matrices) {\n            result.setMatrix(key, this._matrices[key]);\n        }\n        // MatrixArray\n        for (const key in this._matrixArrays) {\n            result._matrixArrays[key] = this._matrixArrays[key].slice();\n        }\n        // Matrix 3x3\n        for (const key in this._matrices3x3) {\n            result.setMatrix3x3(key, this._matrices3x3[key]);\n        }\n        // Matrix 2x2\n        for (const key in this._matrices2x2) {\n            result.setMatrix2x2(key, this._matrices2x2[key]);\n        }\n        // Vector2Array\n        for (const key in this._vectors2Arrays) {\n            result.setArray2(key, this._vectors2Arrays[key]);\n        }\n        // Vector3Array\n        for (const key in this._vectors3Arrays) {\n            result.setArray3(key, this._vectors3Arrays[key]);\n        }\n        // Vector4Array\n        for (const key in this._vectors4Arrays) {\n            result.setArray4(key, this._vectors4Arrays[key]);\n        }\n        // Uniform buffers\n        for (const key in this._uniformBuffers) {\n            result.setUniformBuffer(key, this._uniformBuffers[key]);\n        }\n        // Samplers\n        for (const key in this._textureSamplers) {\n            result.setTextureSampler(key, this._textureSamplers[key]);\n        }\n        // Storag buffers\n        for (const key in this._storageBuffers) {\n            result.setStorageBuffer(key, this._storageBuffers[key]);\n        }\n        return result;\n    }\n    /**\n     * Disposes the material\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\n     * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\n     */\n    dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh) {\n        if (forceDisposeTextures) {\n            let name;\n            for (name in this._textures) {\n                this._textures[name].dispose();\n            }\n            for (name in this._textureArrays) {\n                const array = this._textureArrays[name];\n                for (let index = 0; index < array.length; index++) {\n                    array[index].dispose();\n                }\n            }\n        }\n        this._textures = {};\n        super.dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh);\n    }\n    /**\n     * Serializes this material in a JSON representation\n     * @returns the serialized material object\n     */\n    serialize() {\n        const serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"BABYLON.ShaderMaterial\";\n        serializationObject.uniqueId = this.uniqueId;\n        serializationObject.options = this._options;\n        serializationObject.shaderPath = this._shaderPath;\n        serializationObject.storeEffectOnSubMeshes = this._storeEffectOnSubMeshes;\n        let name;\n        // Stencil\n        serializationObject.stencil = this.stencil.serialize();\n        // Texture\n        serializationObject.textures = {};\n        for (name in this._textures) {\n            serializationObject.textures[name] = this._textures[name].serialize();\n        }\n        // Texture arrays\n        serializationObject.textureArrays = {};\n        for (name in this._textureArrays) {\n            serializationObject.textureArrays[name] = [];\n            const array = this._textureArrays[name];\n            for (let index = 0; index < array.length; index++) {\n                serializationObject.textureArrays[name].push(array[index].serialize());\n            }\n        }\n        // Int\n        serializationObject.ints = {};\n        for (name in this._ints) {\n            serializationObject.ints[name] = this._ints[name];\n        }\n        // UInt\n        serializationObject.uints = {};\n        for (name in this._uints) {\n            serializationObject.uints[name] = this._uints[name];\n        }\n        // Float\n        serializationObject.floats = {};\n        for (name in this._floats) {\n            serializationObject.floats[name] = this._floats[name];\n        }\n        // Floats\n        serializationObject.floatsArrays = {};\n        for (name in this._floatsArrays) {\n            serializationObject.floatsArrays[name] = this._floatsArrays[name];\n        }\n        // Color3\n        serializationObject.colors3 = {};\n        for (name in this._colors3) {\n            const color3 = this._colors3[name];\n            serializationObject.colors3[name] = [color3.r, color3.g, color3.b];\n        }\n        // Color3 array\n        serializationObject.colors3Arrays = {};\n        for (name in this._colors3Arrays) {\n            serializationObject.colors3Arrays[name] = this._colors3Arrays[name];\n        }\n        // Color4\n        serializationObject.colors4 = {};\n        for (name in this._colors4) {\n            const color4 = this._colors4[name];\n            serializationObject.colors4[name] = [color4.r, color4.g, color4.b, color4.a];\n        }\n        // Color4 array\n        serializationObject.colors4Arrays = {};\n        for (name in this._colors4Arrays) {\n            serializationObject.colors4Arrays[name] = this._colors4Arrays[name];\n        }\n        // Vector2\n        serializationObject.vectors2 = {};\n        for (name in this._vectors2) {\n            const v2 = this._vectors2[name];\n            serializationObject.vectors2[name] = [v2.x, v2.y];\n        }\n        // Vector3\n        serializationObject.vectors3 = {};\n        for (name in this._vectors3) {\n            const v3 = this._vectors3[name];\n            serializationObject.vectors3[name] = [v3.x, v3.y, v3.z];\n        }\n        // Vector4\n        serializationObject.vectors4 = {};\n        for (name in this._vectors4) {\n            const v4 = this._vectors4[name];\n            serializationObject.vectors4[name] = [v4.x, v4.y, v4.z, v4.w];\n        }\n        // Quaternion\n        serializationObject.quaternions = {};\n        for (name in this._quaternions) {\n            serializationObject.quaternions[name] = this._quaternions[name].asArray();\n        }\n        // Matrix\n        serializationObject.matrices = {};\n        for (name in this._matrices) {\n            serializationObject.matrices[name] = this._matrices[name].asArray();\n        }\n        // MatrixArray\n        serializationObject.matrixArray = {};\n        for (name in this._matrixArrays) {\n            serializationObject.matrixArray[name] = this._matrixArrays[name];\n        }\n        // Matrix 3x3\n        serializationObject.matrices3x3 = {};\n        for (name in this._matrices3x3) {\n            serializationObject.matrices3x3[name] = this._matrices3x3[name];\n        }\n        // Matrix 2x2\n        serializationObject.matrices2x2 = {};\n        for (name in this._matrices2x2) {\n            serializationObject.matrices2x2[name] = this._matrices2x2[name];\n        }\n        // Vector2Array\n        serializationObject.vectors2Arrays = {};\n        for (name in this._vectors2Arrays) {\n            serializationObject.vectors2Arrays[name] = this._vectors2Arrays[name];\n        }\n        // Vector3Array\n        serializationObject.vectors3Arrays = {};\n        for (name in this._vectors3Arrays) {\n            serializationObject.vectors3Arrays[name] = this._vectors3Arrays[name];\n        }\n        // Vector4Array\n        serializationObject.vectors4Arrays = {};\n        for (name in this._vectors4Arrays) {\n            serializationObject.vectors4Arrays[name] = this._vectors4Arrays[name];\n        }\n        // QuaternionArray\n        serializationObject.quaternionsArrays = {};\n        for (name in this._quaternionsArrays) {\n            serializationObject.quaternionsArrays[name] = this._quaternionsArrays[name];\n        }\n        return serializationObject;\n    }\n    /**\n     * Creates a shader material from parsed shader material data\n     * @param source defines the JSON representation of the material\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a new material\n     */\n    static Parse(source, scene, rootUrl) {\n        const material = SerializationHelper.Parse(() => new ShaderMaterial(source.name, scene, source.shaderPath, source.options, source.storeEffectOnSubMeshes), source, scene, rootUrl);\n        let name;\n        // Stencil\n        if (source.stencil) {\n            material.stencil.parse(source.stencil, scene, rootUrl);\n        }\n        // Texture\n        for (name in source.textures) {\n            material.setTexture(name, Texture.Parse(source.textures[name], scene, rootUrl));\n        }\n        // Texture arrays\n        for (name in source.textureArrays) {\n            const array = source.textureArrays[name];\n            const textureArray = [];\n            for (let index = 0; index < array.length; index++) {\n                textureArray.push(Texture.Parse(array[index], scene, rootUrl));\n            }\n            material.setTextureArray(name, textureArray);\n        }\n        // Int\n        for (name in source.ints) {\n            material.setInt(name, source.ints[name]);\n        }\n        // UInt\n        for (name in source.uints) {\n            material.setUInt(name, source.uints[name]);\n        }\n        // Float\n        for (name in source.floats) {\n            material.setFloat(name, source.floats[name]);\n        }\n        // Floats\n        for (name in source.floatsArrays) {\n            material.setFloats(name, source.floatsArrays[name]);\n        }\n        // Color3\n        for (name in source.colors3) {\n            const color = source.colors3[name];\n            material.setColor3(name, { r: color[0], g: color[1], b: color[2] });\n        }\n        // Color3 arrays\n        for (name in source.colors3Arrays) {\n            const colors = source.colors3Arrays[name]\n                .reduce((arr, num, i) => {\n                if (i % 3 === 0) {\n                    arr.push([num]);\n                }\n                else {\n                    arr[arr.length - 1].push(num);\n                }\n                return arr;\n            }, [])\n                .map((color) => ({ r: color[0], g: color[1], b: color[2] }));\n            material.setColor3Array(name, colors);\n        }\n        // Color4\n        for (name in source.colors4) {\n            const color = source.colors4[name];\n            material.setColor4(name, { r: color[0], g: color[1], b: color[2], a: color[3] });\n        }\n        // Color4 arrays\n        for (name in source.colors4Arrays) {\n            const colors = source.colors4Arrays[name]\n                .reduce((arr, num, i) => {\n                if (i % 4 === 0) {\n                    arr.push([num]);\n                }\n                else {\n                    arr[arr.length - 1].push(num);\n                }\n                return arr;\n            }, [])\n                .map((color) => ({ r: color[0], g: color[1], b: color[2], a: color[3] }));\n            material.setColor4Array(name, colors);\n        }\n        // Vector2\n        for (name in source.vectors2) {\n            const vector = source.vectors2[name];\n            material.setVector2(name, { x: vector[0], y: vector[1] });\n        }\n        // Vector3\n        for (name in source.vectors3) {\n            const vector = source.vectors3[name];\n            material.setVector3(name, { x: vector[0], y: vector[1], z: vector[2] });\n        }\n        // Vector4\n        for (name in source.vectors4) {\n            const vector = source.vectors4[name];\n            material.setVector4(name, { x: vector[0], y: vector[1], z: vector[2], w: vector[3] });\n        }\n        // Quaternion\n        for (name in source.quaternions) {\n            material.setQuaternion(name, Quaternion.FromArray(source.quaternions[name]));\n        }\n        // Matrix\n        for (name in source.matrices) {\n            material.setMatrix(name, Matrix.FromArray(source.matrices[name]));\n        }\n        // MatrixArray\n        for (name in source.matrixArray) {\n            material._matrixArrays[name] = new Float32Array(source.matrixArray[name]);\n        }\n        // Matrix 3x3\n        for (name in source.matrices3x3) {\n            material.setMatrix3x3(name, source.matrices3x3[name]);\n        }\n        // Matrix 2x2\n        for (name in source.matrices2x2) {\n            material.setMatrix2x2(name, source.matrices2x2[name]);\n        }\n        // Vector2Array\n        for (name in source.vectors2Arrays) {\n            material.setArray2(name, source.vectors2Arrays[name]);\n        }\n        // Vector3Array\n        for (name in source.vectors3Arrays) {\n            material.setArray3(name, source.vectors3Arrays[name]);\n        }\n        // Vector4Array\n        for (name in source.vectors4Arrays) {\n            material.setArray4(name, source.vectors4Arrays[name]);\n        }\n        // QuaternionArray\n        for (name in source.quaternionsArrays) {\n            material.setArray4(name, source.quaternionsArrays[name]);\n        }\n        return material;\n    }\n    /**\n     * Creates a new ShaderMaterial from a snippet saved in a remote file\n     * @param name defines the name of the ShaderMaterial to create (can be null or empty to use the one from the json data)\n     * @param url defines the url to load from\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a promise that will resolve to the new ShaderMaterial\n     */\n    static async ParseFromFileAsync(name, url, scene, rootUrl = \"\") {\n        return await new Promise((resolve, reject) => {\n            const request = new WebRequest();\n            request.addEventListener(\"readystatechange\", () => {\n                if (request.readyState == 4) {\n                    if (request.status == 200) {\n                        const serializationObject = JSON.parse(request.responseText);\n                        const output = this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\n                        if (name) {\n                            output.name = name;\n                        }\n                        resolve(output);\n                    }\n                    else {\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                        reject(\"Unable to load the ShaderMaterial\");\n                    }\n                }\n            });\n            request.open(\"GET\", url);\n            request.send();\n        });\n    }\n    /**\n     * Creates a ShaderMaterial from a snippet saved by the Inspector\n     * @param snippetId defines the snippet to load\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a promise that will resolve to the new ShaderMaterial\n     */\n    static async ParseFromSnippetAsync(snippetId, scene, rootUrl = \"\") {\n        return await new Promise((resolve, reject) => {\n            const request = new WebRequest();\n            request.addEventListener(\"readystatechange\", () => {\n                if (request.readyState == 4) {\n                    if (request.status == 200) {\n                        const snippet = JSON.parse(JSON.parse(request.responseText).jsonPayload);\n                        const serializationObject = JSON.parse(snippet.shaderMaterial);\n                        const output = this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\n                        output.snippetId = snippetId;\n                        resolve(output);\n                    }\n                    else {\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                        reject(\"Unable to load the snippet \" + snippetId);\n                    }\n                }\n            });\n            request.open(\"GET\", this.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"));\n            request.send();\n        });\n    }\n}\n/** Define the Url to load snippets */\nShaderMaterial.SnippetUrl = Constants.SnippetUrl;\n/**\n * Creates a ShaderMaterial from a snippet saved by the Inspector\n * @deprecated Please use ParseFromSnippetAsync instead\n * @param snippetId defines the snippet to load\n * @param scene defines the hosting scene\n * @param rootUrl defines the root URL to use to load textures and relative dependencies\n * @returns a promise that will resolve to the new ShaderMaterial\n */\nShaderMaterial.CreateFromSnippetAsync = ShaderMaterial.ParseFromSnippetAsync;\nRegisterClass(\"BABYLON.ShaderMaterial\", ShaderMaterial);\n//# sourceMappingURL=shaderMaterial.js.map"],"names":["OnCreatedEffectParameters","effect","subMesh","ShaderMaterial","PushMaterial","constructor","name","scene","shaderPath","options","storeEffectOnSubMeshes","super","this","_textures","_textureArrays","_externalTextures","_floats","_ints","_uints","_floatsArrays","_colors3","_colors3Arrays","_colors4","_colors4Arrays","_vectors2","_vectors3","_vectors4","_quaternions","_quaternionsArrays","_matrices","_matrixArrays","_matrices3x3","_matrices2x2","_vectors2Arrays","_vectors3Arrays","_vectors4Arrays","_uniformBuffers","_textureSamplers","_storageBuffers","_cachedWorldViewMatrix","Matrix","_cachedWorldViewProjectionMatrix","_multiview","_materialHelperNeedsPreviousMatrices","_shaderPath","_options","needAlphaBlending","needAlphaTesting","attributes","uniforms","uniformBuffers","samplers","externalTextures","samplerObjects","storageBuffers","defines","useClipPlane","isMultiview","getClassName","alpha","_checkUniform","uniformName","indexOf","push","setTexture","texture","removeTexture","setTextureArray","textures","setExternalTexture","setFloat","value","setInt","setUInt","setFloats","setColor3","setColor3Array","reduce","arr","color","r","g","b","setColor4","setColor4Array","a","setVector2","setVector3","setVector4","setQuaternion","setQuaternionArray","quaternion","toArray","length","setMatrix","setMatrices","float32Array","Float32Array","index","copyToArray","setMatrix3x3","setMatrix2x2","setArray2","setArray3","setArray4","setUniformBuffer","buffer","setTextureSampler","sampler","setStorageBuffer","setDefine","define","defineName","trimEnd","existingDefineIdx","findIndex","x","startsWith","splice","isReadyForSubMesh","mesh","useInstances","isReady","_storeEffectOnSubMeshes","isFrozen","drawWrapper","_drawWrapper","_wasPreviouslyReady","_wasPreviouslyUsingInstances","getScene","engine","getEngine","attribs","fallbacks","shaderName","getCaps","multiview","activeCamera","outputRenderTarget","getViewCount","defineToAdd","isVerticesDataPresent","VertexBuffer","ColorKind","PushAttributesForInstances","hasThinInstances","ColorInstanceKind","useBones","computeBonesUsingShaders","skeleton","MatricesIndicesKind","MatricesWeightsKind","numBoneInfluencers","MatricesIndicesExtraKind","MatricesWeightsExtraKind","EffectFallbacks","addCPUSkinningFallback","isUsingTextureForMatrices","bones","numInfluencers","manager","morphTargetManager","uv","uv2","tangent","normal","PrepareDefinesAndAttributesForMorphTargets","isUsingTextureForTargets","slice","bvaManager","bakedVertexAnimationManager","isEnabled","PrepareAttributesForBakedVertexAnimation","needAlphaTestingForMesh","AddClipPlaneUniforms","PrepareStringDefinesForClipPlanes","fogEnabled","applyFog","fogMode","Scene","FOGMODE_NONE","_useLogarithmicDepth","customShaderNameResolve","_getDrawWrapper","undefined","previousEffect","previousDefines","join","createEffect","uniformsNames","uniformBuffersNames","onCompiled","onError","indexParameters","maxSimultaneousMorphTargets","shaderLanguage","extraInitializationsAsync","setEffect","_materialContext","_onEffectCreatedObservable","subMeshes","notifyObservers","resetCachedMaterial","bindOnlyWorldMatrix","world","effectOverride","getEffect","multiplyToRef","getViewMatrix","getTransformMatrix","bindForSubMesh","bind","_drawWrapperOverride","_activeEffect","useSceneUBO","supportsUniformBuffers","i","getMeshUniformBuffer","bindToEffect","transferToEffect","BindSceneUniformBuffer","getSceneUniformBuffer","finalizeSceneUbo","mustRebind","_mustRebind","visibility","getCachedMaterial","getProjectionMatrix","_transformMatrixR","globalPosition","BindBonesParameters","BindClipPlane","BindLogDepth","materialDefines","BindFogParameters","setArray","setFloat4","getBuffer","bindUniformBuffer","engineWebGPU","call","BindMorphTargetParameters","_bind","_afterBind","getActiveTextures","activeTextures","array","hasTexture","clone","result","SerializationHelper","Clone","id","keys","Object","propName","propValue","Array","isArray","stencil","copyTo","key","dispose","forceDisposeEffect","forceDisposeTextures","notBoundToMesh","serialize","serializationObject","Serialize","customType","uniqueId","textureArrays","ints","uints","floats","floatsArrays","colors3","color3","colors3Arrays","colors4","color4","colors4Arrays","vectors2","v2","y","vectors3","v3","z","vectors4","v4","w","quaternions","asArray","matrices","matrixArray","matrices3x3","matrices2x2","vectors2Arrays","vectors3Arrays","vectors4Arrays","quaternionsArrays","Parse","source","rootUrl","material","parse","Texture","textureArray","colors","num","map","vector","Quaternion","FromArray","ParseFromFileAsync","url","Promise","resolve","reject","request","WebRequest","addEventListener","readyState","status","JSON","responseText","output","EngineStore","LastCreatedScene","open","send","ParseFromSnippetAsync","snippetId","snippet","jsonPayload","shaderMaterial","SnippetUrl","replace","Constants","CreateFromSnippetAsync","RegisterClass"],"mappings":"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"}