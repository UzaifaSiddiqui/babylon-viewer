{"version":3,"file":"iblShadowDebug.fragment-dAVv9ueL.esm.min.js","sources":["../../../../../dev/core/dist/ShadersWGSL/iblShadowDebug.fragment.js"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nconst name = \"iblShadowDebugPixelShader\";\nconst shader = `varying vUV: vec2f;var textureSamplerSampler: sampler;var textureSampler: texture_2d<f32>;var debugSamplerSampler: sampler;var debugSampler: texture_2d<f32>;uniform sizeParams: vec4f;\n#define offsetX uniforms.sizeParams.x\n#define offsetY uniforms.sizeParams.y\n#define widthScale uniforms.sizeParams.z\n#define heightScale uniforms.sizeParams.w\n@fragment\nfn main(input: FragmentInputs)->FragmentOutputs {var uv: vec2f =\nvec2f((offsetX+fragmentInputs.vUV.x)*widthScale,(offsetY+fragmentInputs.vUV.y)*heightScale);var background: vec4f=textureSample(textureSampler,textureSamplerSampler,fragmentInputs.vUV);var debugColour: vec4f=textureSample(debugSampler,debugSamplerSampler,fragmentInputs.vUV);if (uv.x<0.0 || uv.x>1.0 || uv.y<0.0 || uv.y>1.0) {fragmentOutputs.color=background;} else {fragmentOutputs.color=vec4f(mix(debugColour.rgb,background.rgb,0.0),1.0);}}`;\n// Sideeffect\nif (!ShaderStore.ShadersStoreWGSL[name]) {\n    ShaderStore.ShadersStoreWGSL[name] = shader;\n}\n/** @internal */\nexport const iblShadowDebugPixelShaderWGSL = { name, shader };\n//# sourceMappingURL=iblShadowDebug.fragment.js.map"],"names":["name","shader","ShaderStore","ShadersStoreWGSL","iblShadowDebugPixelShaderWGSL"],"mappings":"gDAEA,MAAMA,EAAO,4BACPC,EAAS,s2BASVC,EAAYC,iBAAiBH,KAC9BE,EAAYC,iBAAiBH,GAAQC,GAG7B,MAACG,EAAgC,CAAEJ,OAAMC"}