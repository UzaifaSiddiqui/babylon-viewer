import{S as e}from"./index-VvGulz6u.esm.min.js";import"./helperFunctions-DSBzZxDv.esm.min.js";import"./hdrFilteringFunctions-CVp-eoJE.esm.min.js";import"./pbrBRDFFunctions-CV3HxMWw.esm.min.js";const n="hdrIrradianceFilteringPixelShader",r="#include<helperFunctions>\n#include<importanceSampling>\n#include<pbrBRDFFunctions>\n#include<hdrFilteringFunctions>\nvar inputTextureSampler: sampler;var inputTexture: texture_cube<f32>;\n#ifdef IBL_CDF_FILTERING\nvar icdfTextureSampler: sampler;var icdfTexture: texture_2d<f32>;\n#endif\nuniform vFilteringInfo: vec2f;uniform hdrScale: f32;varying direction: vec3f;@fragment\nfn main(input: FragmentInputs)->FragmentOutputs {var color: vec3f=irradiance(inputTexture,inputTextureSampler,input.direction,uniforms.vFilteringInfo,0.0,vec3f(1.0),input.direction\n#ifdef IBL_CDF_FILTERING\n,icdfTexture,icdfTextureSampler\n#endif\n);fragmentOutputs.color= vec4f(color*uniforms.hdrScale,1.0);}";e.ShadersStoreWGSL[n]||(e.ShadersStoreWGSL[n]=r);const i={name:n,shader:r};export{i as hdrIrradianceFilteringPixelShaderWGSL};
//# sourceMappingURL=hdrIrradianceFiltering.fragment-Nn5gjEIK.esm.min.js.map
