{"version":3,"file":"EXT_meshopt_compression-DLonYpLr.esm.min.js","sources":["../../../../../dev/core/dist/Meshes/Compression/meshoptCompression.js","../../../../../dev/loaders/dist/glTF/2.0/Extensions/EXT_meshopt_compression.js"],"sourcesContent":["import { Tools } from \"../../Misc/tools\";\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet NumberOfWorkers = 0;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet WorkerTimeout = null;\n/**\n * Meshopt compression (https://github.com/zeux/meshoptimizer)\n *\n * This class wraps the meshopt library from https://github.com/zeux/meshoptimizer/tree/master/js.\n *\n * **Encoder**\n *\n * The encoder is not currently implemented.\n *\n * **Decoder**\n *\n * By default, the configuration points to a copy of the meshopt files on the Babylon.js preview CDN (e.g. https://preview.babylonjs.com/meshopt_decoder.js).\n *\n * To update the configuration, use the following code:\n * ```javascript\n *     MeshoptCompression.Configuration = {\n *         decoder: {\n *             url: \"<url to the meshopt decoder library>\"\n *         }\n *     };\n * ```\n */\nexport class MeshoptCompression {\n    /**\n     * Default instance for the meshoptimizer object.\n     */\n    static get Default() {\n        if (!MeshoptCompression._Default) {\n            MeshoptCompression._Default = new MeshoptCompression();\n        }\n        return MeshoptCompression._Default;\n    }\n    /**\n     * Constructor\n     */\n    constructor() {\n        const decoder = MeshoptCompression.Configuration.decoder;\n        // eslint-disable-next-line github/no-then\n        this._decoderModulePromise = Tools.LoadBabylonScriptAsync(decoder.url).then(() => {\n            // Wait for WebAssembly compilation before resolving promise\n            return MeshoptDecoder.ready;\n        });\n    }\n    /**\n     * Stop all async operations and release resources.\n     */\n    dispose() {\n        delete this._decoderModulePromise;\n    }\n    /**\n     * Decode meshopt data.\n     * @see https://github.com/zeux/meshoptimizer/tree/master/js#decoder\n     * @param source The input data.\n     * @param count The number of elements.\n     * @param stride The stride in bytes.\n     * @param mode The compression mode.\n     * @param filter The compression filter.\n     * @returns a Promise<Uint8Array> that resolves to the decoded data\n     */\n    async decodeGltfBufferAsync(source, count, stride, mode, filter) {\n        await this._decoderModulePromise;\n        if (NumberOfWorkers === 0) {\n            MeshoptDecoder.useWorkers(1);\n            NumberOfWorkers = 1;\n        }\n        const result = await MeshoptDecoder.decodeGltfBufferAsync(count, stride, source, mode, filter);\n        // a simple debounce to avoid switching back and forth between workers and no workers while decoding\n        if (WorkerTimeout !== null) {\n            clearTimeout(WorkerTimeout);\n        }\n        WorkerTimeout = setTimeout(() => {\n            MeshoptDecoder.useWorkers(0);\n            NumberOfWorkers = 0;\n            WorkerTimeout = null;\n        }, 1000);\n        return result;\n    }\n}\n/**\n * The configuration. Defaults to the following:\n * ```javascript\n * decoder: {\n *   url: \"https://cdn.babylonjs.com/meshopt_decoder.js\"\n * }\n * ```\n */\nMeshoptCompression.Configuration = {\n    decoder: {\n        url: `${Tools._DefaultCdnUrl}/meshopt_decoder.js`,\n    },\n};\nMeshoptCompression._Default = null;\n//# sourceMappingURL=meshoptCompression.js.map","import { ArrayItem, GLTFLoader } from \"../glTFLoader\";\nimport { MeshoptCompression } from \"core/Meshes/Compression/meshoptCompression\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nconst NAME = \"EXT_meshopt_compression\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_meshopt_compression/README.md)\n *\n * This extension uses a WebAssembly decoder module from https://github.com/zeux/meshoptimizer/tree/master/js\n * @since 5.0.0\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class EXT_meshopt_compression {\n    /**\n     * @internal\n     */\n    constructor(loader) {\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        this.enabled = loader.isExtensionUsed(NAME);\n        this._loader = loader;\n    }\n    /** @internal */\n    dispose() {\n        this._loader = null;\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line no-restricted-syntax\n    loadBufferViewAsync(context, bufferView) {\n        return GLTFLoader.LoadExtensionAsync(context, bufferView, this.name, async (extensionContext, extension) => {\n            const bufferViewMeshopt = bufferView;\n            if (bufferViewMeshopt._meshOptData) {\n                return await bufferViewMeshopt._meshOptData;\n            }\n            const buffer = ArrayItem.Get(`${context}/buffer`, this._loader.gltf.buffers, extension.buffer);\n            bufferViewMeshopt._meshOptData = this._loader\n                .loadBufferAsync(`/buffers/${buffer.index}`, buffer, extension.byteOffset || 0, extension.byteLength)\n                // eslint-disable-next-line github/no-then\n                .then(async (buffer) => {\n                return await MeshoptCompression.Default.decodeGltfBufferAsync(buffer, extension.count, extension.byteStride, extension.mode, extension.filter);\n            });\n            return await bufferViewMeshopt._meshOptData;\n        });\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new EXT_meshopt_compression(loader));\n//# sourceMappingURL=EXT_meshopt_compression.js.map"],"names":["NumberOfWorkers","WorkerTimeout","MeshoptCompression","Default","_Default","constructor","decoder","Configuration","this","_decoderModulePromise","Tools","LoadBabylonScriptAsync","url","then","MeshoptDecoder","ready","dispose","decodeGltfBufferAsync","source","count","stride","mode","filter","useWorkers","result","clearTimeout","setTimeout","_DefaultCdnUrl","NAME","EXT_meshopt_compression","loader","name","enabled","isExtensionUsed","_loader","loadBufferViewAsync","context","bufferView","GLTFLoader","LoadExtensionAsync","async","extensionContext","extension","bufferViewMeshopt","_meshOptData","buffer","ArrayItem","Get","gltf","buffers","loadBufferAsync","index","byteOffset","byteLength","byteStride","unregisterGLTFExtension","registerGLTFExtension"],"mappings":"8VAEA,IAAIA,EAAkB,EAElBC,EAAgB,KAuBb,MAAMC,EAIT,kBAAWC,GAIP,OAHKD,EAAmBE,WACpBF,EAAmBE,SAAW,IAAIF,GAE/BA,EAAmBE,QAClC,CAII,WAAAC,GACI,MAAMC,EAAUJ,EAAmBK,cAAcD,QAEjDE,KAAKC,sBAAwBC,EAAMC,uBAAuBL,EAAQM,KAAKC,MAAK,IAEjEC,eAAeC,OAElC,CAII,OAAAC,UACWR,KAAKC,qBACpB,CAWI,2BAAMQ,CAAsBC,EAAQC,EAAOC,EAAQC,EAAMC,SAC/Cd,KAAKC,sBACa,IAApBT,IACAc,eAAeS,WAAW,GAC1BvB,EAAkB,GAEtB,MAAMwB,QAAeV,eAAeG,sBAAsBE,EAAOC,EAAQF,EAAQG,EAAMC,GAUvF,OARsB,OAAlBrB,GACAwB,aAAaxB,GAEjBA,EAAgByB,YAAW,KACvBZ,eAAeS,WAAW,GAC1BvB,EAAkB,EAClBC,EAAgB,OACjB,KACIuB,CACf,EAUAtB,EAAmBK,cAAgB,CAC/BD,QAAS,CACLM,IAAK,GAAGF,EAAMiB,sCAGtBzB,EAAmBE,SAAW,KC7F9B,MAAMwB,EAAO,0BAQN,MAAMC,EAIT,WAAAxB,CAAYyB,GAIRtB,KAAKuB,KAAOH,EACZpB,KAAKwB,QAAUF,EAAOG,gBAAgBL,GACtCpB,KAAK0B,QAAUJ,CACvB,CAEI,OAAAd,GACIR,KAAK0B,QAAU,IACvB,CAKI,mBAAAC,CAAoBC,EAASC,GACzB,OAAOC,EAAWC,mBAAmBH,EAASC,EAAY7B,KAAKuB,MAAMS,MAAOC,EAAkBC,KAC1F,MAAMC,EAAoBN,EAC1B,GAAIM,EAAkBC,aAClB,aAAaD,EAAkBC,aAEnC,MAAMC,EAASC,EAAUC,IAAI,GAAGX,WAAkB5B,KAAK0B,QAAQc,KAAKC,QAASP,EAAUG,QAOvF,OANAF,EAAkBC,aAAepC,KAAK0B,QACjCgB,gBAAgB,YAAYL,EAAOM,QAASN,EAAQH,EAAUU,YAAc,EAAGV,EAAUW,YAEzFxC,MAAK2B,MAAOK,SACA3C,EAAmBC,QAAQc,sBAAsB4B,EAAQH,EAAUvB,MAAOuB,EAAUY,WAAYZ,EAAUrB,KAAMqB,EAAUpB,gBAE9HqB,EAAkBC,eAE3C,EAEAW,EAAwB3B,GACxB4B,EAAsB5B,GAAM,GAAOE,GAAW,IAAID,EAAwBC"}