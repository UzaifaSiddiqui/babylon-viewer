{"version":3,"file":"hdrIrradianceFiltering.fragment-Crj8QDJ8.esm.js","sources":["../../../../../dev/core/dist/Shaders/hdrIrradianceFiltering.fragment.js"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/helperFunctions\";\nimport \"./ShadersInclude/importanceSampling\";\nimport \"./ShadersInclude/pbrBRDFFunctions\";\nimport \"./ShadersInclude/hdrFilteringFunctions\";\nconst name = \"hdrIrradianceFilteringPixelShader\";\nconst shader = `#include<helperFunctions>\n#include<importanceSampling>\n#include<pbrBRDFFunctions>\n#include<hdrFilteringFunctions>\nuniform samplerCube inputTexture;\n#ifdef IBL_CDF_FILTERING\nuniform sampler2D icdfTexture;\n#endif\nuniform vec2 vFilteringInfo;uniform float hdrScale;varying vec3 direction;void main() {vec3 color=irradiance(inputTexture,direction,vFilteringInfo,0.0,vec3(1.0),direction\n#ifdef IBL_CDF_FILTERING\n,icdfTexture\n#endif\n);gl_FragColor=vec4(color*hdrScale,1.0);}`;\n// Sideeffect\nif (!ShaderStore.ShadersStore[name]) {\n    ShaderStore.ShadersStore[name] = shader;\n}\n/** @internal */\nexport const hdrIrradianceFilteringPixelShader = { name, shader };\n//# sourceMappingURL=hdrIrradianceFiltering.fragment.js.map"],"names":[],"mappings":";;;;;AAAA;AAMA,MAAM,IAAI,GAAG,mCAAmC;AAChD,MAAM,MAAM,GAAG,CAAC;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,CAAC;AAC1C;AACA,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;AACrC,IAAI,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM;AAC3C;AACA;AACY,MAAC,iCAAiC,GAAG,EAAE,IAAI,EAAE,MAAM;;;;"}