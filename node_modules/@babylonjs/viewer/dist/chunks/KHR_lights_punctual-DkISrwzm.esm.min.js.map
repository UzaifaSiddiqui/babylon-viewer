{"version":3,"file":"KHR_lights_punctual-DkISrwzm.esm.min.js","sources":["../../../../../dev/core/dist/Lights/directionalLight.js","../../../../../dev/core/dist/Lights/pointLight.js","../../../../../dev/loaders/dist/glTF/2.0/Extensions/KHR_lights_punctual.js"],"sourcesContent":["import { __decorate } from \"tslib\";\nimport { serialize } from \"../Misc/decorators\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\nimport { Node } from \"../node\";\nimport { Light } from \"./light\";\nimport { ShadowLight } from \"./shadowLight\";\nimport { RegisterClass } from \"../Misc/typeStore\";\nimport { Constants } from \"core/Engines/constants\";\nNode.AddNodeConstructor(\"Light_Type_1\", (name, scene) => {\n    return () => new DirectionalLight(name, Vector3.Zero(), scene);\n});\n/**\n * A directional light is defined by a direction (what a surprise!).\n * The light is emitted from everywhere in the specified direction, and has an infinite range.\n * An example of a directional light is when a distance planet is lit by the apparently parallel lines of light from its sun. Light in a downward direction will light the top of an object.\n * Documentation: https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\n */\nexport class DirectionalLight extends ShadowLight {\n    /**\n     * Fix frustum size for the shadow generation. This is disabled if the value is 0.\n     */\n    get shadowFrustumSize() {\n        return this._shadowFrustumSize;\n    }\n    /**\n     * Specifies a fix frustum size for the shadow generation.\n     */\n    set shadowFrustumSize(value) {\n        this._shadowFrustumSize = value;\n        this.forceProjectionMatrixCompute();\n    }\n    /**\n     * Gets the shadow projection scale against the optimal computed one.\n     * 0.1 by default which means that the projection window is increase by 10% from the optimal size.\n     * This does not impact in fixed frustum size (shadowFrustumSize being set)\n     */\n    get shadowOrthoScale() {\n        return this._shadowOrthoScale;\n    }\n    /**\n     * Sets the shadow projection scale against the optimal computed one.\n     * 0.1 by default which means that the projection window is increase by 10% from the optimal size.\n     * This does not impact in fixed frustum size (shadowFrustumSize being set)\n     */\n    set shadowOrthoScale(value) {\n        this._shadowOrthoScale = value;\n        this.forceProjectionMatrixCompute();\n    }\n    /**\n     * Gets or sets the orthoLeft property used to build the light frustum\n     */\n    get orthoLeft() {\n        return this._orthoLeft;\n    }\n    set orthoLeft(left) {\n        this._orthoLeft = left;\n    }\n    /**\n     * Gets or sets the orthoRight property used to build the light frustum\n     */\n    get orthoRight() {\n        return this._orthoRight;\n    }\n    set orthoRight(right) {\n        this._orthoRight = right;\n    }\n    /**\n     * Gets or sets the orthoTop property used to build the light frustum\n     */\n    get orthoTop() {\n        return this._orthoTop;\n    }\n    set orthoTop(top) {\n        this._orthoTop = top;\n    }\n    /**\n     * Gets or sets the orthoBottom property used to build the light frustum\n     */\n    get orthoBottom() {\n        return this._orthoBottom;\n    }\n    set orthoBottom(bottom) {\n        this._orthoBottom = bottom;\n    }\n    /**\n     * Creates a DirectionalLight object in the scene, oriented towards the passed direction (Vector3).\n     * The directional light is emitted from everywhere in the given direction.\n     * It can cast shadows.\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\n     * @param name The friendly name of the light\n     * @param direction The direction of the light\n     * @param scene The scene the light belongs to\n     */\n    constructor(name, direction, scene) {\n        super(name, scene);\n        this._shadowFrustumSize = 0;\n        this._shadowOrthoScale = 0.1;\n        /**\n         * Automatically compute the projection matrix to best fit (including all the casters)\n         * on each frame.\n         */\n        this.autoUpdateExtends = true;\n        /**\n         * Automatically compute the shadowMinZ and shadowMaxZ for the projection matrix to best fit (including all the casters)\n         * on each frame. autoUpdateExtends must be set to true for this to work\n         */\n        this.autoCalcShadowZBounds = false;\n        // Cache\n        this._orthoLeft = Number.MAX_VALUE;\n        this._orthoRight = Number.MIN_VALUE;\n        this._orthoTop = Number.MIN_VALUE;\n        this._orthoBottom = Number.MAX_VALUE;\n        this.position = direction.scale(-1.0);\n        this.direction = direction;\n    }\n    /**\n     * Returns the string \"DirectionalLight\".\n     * @returns The class name\n     */\n    getClassName() {\n        return \"DirectionalLight\";\n    }\n    /**\n     * Returns the integer 1.\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    getTypeID() {\n        return Light.LIGHTTYPEID_DIRECTIONALLIGHT;\n    }\n    /**\n     * Sets the passed matrix \"matrix\" as projection matrix for the shadows cast by the light according to the passed view matrix.\n     * Returns the DirectionalLight Shadow projection matrix.\n     * @param matrix\n     * @param viewMatrix\n     * @param renderList\n     */\n    _setDefaultShadowProjectionMatrix(matrix, viewMatrix, renderList) {\n        if (this.shadowFrustumSize > 0) {\n            this._setDefaultFixedFrustumShadowProjectionMatrix(matrix);\n        }\n        else {\n            this._setDefaultAutoExtendShadowProjectionMatrix(matrix, viewMatrix, renderList);\n        }\n    }\n    /**\n     * Sets the passed matrix \"matrix\" as fixed frustum projection matrix for the shadows cast by the light according to the passed view matrix.\n     * Returns the DirectionalLight Shadow projection matrix.\n     * @param matrix\n     */\n    _setDefaultFixedFrustumShadowProjectionMatrix(matrix) {\n        const activeCamera = this.getScene().activeCamera;\n        if (!activeCamera) {\n            return;\n        }\n        Matrix.OrthoLHToRef(this.shadowFrustumSize, this.shadowFrustumSize, this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ, this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ, matrix, this.getScene().getEngine().isNDCHalfZRange);\n    }\n    /**\n     * Sets the passed matrix \"matrix\" as auto extend projection matrix for the shadows cast by the light according to the passed view matrix.\n     * Returns the DirectionalLight Shadow projection matrix.\n     * @param matrix\n     * @param viewMatrix\n     * @param renderList\n     */\n    _setDefaultAutoExtendShadowProjectionMatrix(matrix, viewMatrix, renderList) {\n        const activeCamera = this.getScene().activeCamera;\n        // Check extends\n        if (this.autoUpdateExtends || this._orthoLeft === Number.MAX_VALUE) {\n            const tempVector3 = Vector3.Zero();\n            this._orthoLeft = Number.MAX_VALUE;\n            this._orthoRight = -Number.MAX_VALUE;\n            this._orthoTop = -Number.MAX_VALUE;\n            this._orthoBottom = Number.MAX_VALUE;\n            let shadowMinZ = Number.MAX_VALUE;\n            let shadowMaxZ = -Number.MAX_VALUE;\n            for (let meshIndex = 0; meshIndex < renderList.length; meshIndex++) {\n                const mesh = renderList[meshIndex];\n                if (!mesh) {\n                    continue;\n                }\n                const boundingInfo = mesh.getBoundingInfo();\n                const boundingBox = boundingInfo.boundingBox;\n                for (let index = 0; index < boundingBox.vectorsWorld.length; index++) {\n                    Vector3.TransformCoordinatesToRef(boundingBox.vectorsWorld[index], viewMatrix, tempVector3);\n                    if (tempVector3.x < this._orthoLeft) {\n                        this._orthoLeft = tempVector3.x;\n                    }\n                    if (tempVector3.y < this._orthoBottom) {\n                        this._orthoBottom = tempVector3.y;\n                    }\n                    if (tempVector3.x > this._orthoRight) {\n                        this._orthoRight = tempVector3.x;\n                    }\n                    if (tempVector3.y > this._orthoTop) {\n                        this._orthoTop = tempVector3.y;\n                    }\n                    if (this.autoCalcShadowZBounds) {\n                        if (tempVector3.z < shadowMinZ) {\n                            shadowMinZ = tempVector3.z;\n                        }\n                        if (tempVector3.z > shadowMaxZ) {\n                            shadowMaxZ = tempVector3.z;\n                        }\n                    }\n                }\n            }\n            if (this.autoCalcShadowZBounds) {\n                this._shadowMinZ = shadowMinZ;\n                this._shadowMaxZ = shadowMaxZ;\n            }\n        }\n        const xOffset = this._orthoRight - this._orthoLeft;\n        const yOffset = this._orthoTop - this._orthoBottom;\n        const minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera?.minZ || Constants.ShadowMinZ;\n        const maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera?.maxZ || Constants.ShadowMaxZ;\n        const useReverseDepthBuffer = this.getScene().getEngine().useReverseDepthBuffer;\n        Matrix.OrthoOffCenterLHToRef(this._orthoLeft - xOffset * this.shadowOrthoScale, this._orthoRight + xOffset * this.shadowOrthoScale, this._orthoBottom - yOffset * this.shadowOrthoScale, this._orthoTop + yOffset * this.shadowOrthoScale, useReverseDepthBuffer ? maxZ : minZ, useReverseDepthBuffer ? minZ : maxZ, matrix, this.getScene().getEngine().isNDCHalfZRange);\n    }\n    _buildUniformLayout() {\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\n        this._uniformBuffer.create();\n    }\n    /**\n     * Sets the passed Effect object with the DirectionalLight transformed position (or position if not parented) and the passed name.\n     * @param effect The effect to update\n     * @param lightIndex The index of the light in the effect to update\n     * @returns The directional light\n     */\n    transferToEffect(effect, lightIndex) {\n        if (this.computeTransformedInformation()) {\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.transformedDirection.x, this.transformedDirection.y, this.transformedDirection.z, 1, lightIndex);\n            return this;\n        }\n        this._uniformBuffer.updateFloat4(\"vLightData\", this.direction.x, this.direction.y, this.direction.z, 1, lightIndex);\n        return this;\n    }\n    transferToNodeMaterialEffect(effect, lightDataUniformName) {\n        if (this.computeTransformedInformation()) {\n            effect.setFloat3(lightDataUniformName, this.transformedDirection.x, this.transformedDirection.y, this.transformedDirection.z);\n            return this;\n        }\n        effect.setFloat3(lightDataUniformName, this.direction.x, this.direction.y, this.direction.z);\n        return this;\n    }\n    /**\n     * Gets the minZ used for shadow according to both the scene and the light.\n     *\n     * Values are fixed on directional lights as it relies on an ortho projection hence the need to convert being\n     * -1 and 1 to 0 and 1 doing (depth + min) / (min + max) -> (depth + 1) / (1 + 1) -> (depth * 0.5) + 0.5.\n     * (when not using reverse depth buffer / NDC half Z range)\n     * @param _activeCamera The camera we are returning the min for (not used)\n     * @returns the depth min z\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getDepthMinZ(_activeCamera) {\n        const engine = this._scene.getEngine();\n        return !engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : 1;\n    }\n    /**\n     * Gets the maxZ used for shadow according to both the scene and the light.\n     *\n     * Values are fixed on directional lights as it relies on an ortho projection hence the need to convert being\n     * -1 and 1 to 0 and 1 doing (depth + min) / (min + max) -> (depth + 1) / (1 + 1) -> (depth * 0.5) + 0.5.\n     * (when not using reverse depth buffer / NDC half Z range)\n     * @param _activeCamera The camera we are returning the max for\n     * @returns the depth max z\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getDepthMaxZ(_activeCamera) {\n        const engine = this._scene.getEngine();\n        return engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : 1;\n    }\n    /**\n     * Prepares the list of defines specific to the light type.\n     * @param defines the list of defines\n     * @param lightIndex defines the index of the light for the effect\n     */\n    prepareLightSpecificDefines(defines, lightIndex) {\n        defines[\"DIRLIGHT\" + lightIndex] = true;\n    }\n}\n__decorate([\n    serialize()\n], DirectionalLight.prototype, \"shadowFrustumSize\", null);\n__decorate([\n    serialize()\n], DirectionalLight.prototype, \"shadowOrthoScale\", null);\n__decorate([\n    serialize()\n], DirectionalLight.prototype, \"autoUpdateExtends\", void 0);\n__decorate([\n    serialize()\n], DirectionalLight.prototype, \"autoCalcShadowZBounds\", void 0);\n__decorate([\n    serialize(\"orthoLeft\")\n], DirectionalLight.prototype, \"_orthoLeft\", void 0);\n__decorate([\n    serialize(\"orthoRight\")\n], DirectionalLight.prototype, \"_orthoRight\", void 0);\n__decorate([\n    serialize(\"orthoTop\")\n], DirectionalLight.prototype, \"_orthoTop\", void 0);\n__decorate([\n    serialize(\"orthoBottom\")\n], DirectionalLight.prototype, \"_orthoBottom\", void 0);\n// Register Class Name\nRegisterClass(\"BABYLON.DirectionalLight\", DirectionalLight);\n//# sourceMappingURL=directionalLight.js.map","import { __decorate } from \"tslib\";\nimport { serialize } from \"../Misc/decorators\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\nimport { Node } from \"../node\";\nimport { Light } from \"./light\";\nimport { ShadowLight } from \"./shadowLight\";\nimport { RegisterClass } from \"../Misc/typeStore\";\nNode.AddNodeConstructor(\"Light_Type_0\", (name, scene) => {\n    return () => new PointLight(name, Vector3.Zero(), scene);\n});\n/**\n * A point light is a light defined by an unique point in world space.\n * The light is emitted in every direction from this point.\n * A good example of a point light is a standard light bulb.\n * Documentation: https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\n */\nexport class PointLight extends ShadowLight {\n    /**\n     * Getter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\n     * This specifies what angle the shadow will use to be created.\n     *\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\n     */\n    get shadowAngle() {\n        return this._shadowAngle;\n    }\n    /**\n     * Setter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\n     * This specifies what angle the shadow will use to be created.\n     *\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\n     */\n    set shadowAngle(value) {\n        this._shadowAngle = value;\n        this.forceProjectionMatrixCompute();\n    }\n    /**\n     * Gets the direction if it has been set.\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\n     */\n    get direction() {\n        return this._direction;\n    }\n    /**\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\n     */\n    set direction(value) {\n        const previousNeedCube = this.needCube();\n        this._direction = value;\n        if (this.needCube() !== previousNeedCube && this._shadowGenerators) {\n            const iterator = this._shadowGenerators.values();\n            for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\n                const shadowGenerator = key.value;\n                shadowGenerator.recreateShadowMap();\n            }\n        }\n    }\n    /**\n     * Creates a PointLight object from the passed name and position (Vector3) and adds it in the scene.\n     * A PointLight emits the light in every direction.\n     * It can cast shadows.\n     * If the scene camera is already defined and you want to set your PointLight at the camera position, just set it :\n     * ```javascript\n     * var pointLight = new PointLight(\"pl\", camera.position, scene);\n     * ```\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\n     * @param name The light friendly name\n     * @param position The position of the point light in the scene\n     * @param scene The scene the lights belongs to\n     */\n    constructor(name, position, scene) {\n        super(name, scene);\n        this._shadowAngle = Math.PI / 2;\n        this.position = position;\n    }\n    /**\n     * Returns the string \"PointLight\"\n     * @returns the class name\n     */\n    getClassName() {\n        return \"PointLight\";\n    }\n    /**\n     * Returns the integer 0.\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    getTypeID() {\n        return Light.LIGHTTYPEID_POINTLIGHT;\n    }\n    /**\n     * Specifies whether or not the shadowmap should be a cube texture.\n     * @returns true if the shadowmap needs to be a cube texture.\n     */\n    needCube() {\n        return !this.direction;\n    }\n    /**\n     * Returns a new Vector3 aligned with the PointLight cube system according to the passed cube face index (integer).\n     * @param faceIndex The index of the face we are computed the direction to generate shadow\n     * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\n     */\n    getShadowDirection(faceIndex) {\n        if (this.direction) {\n            return super.getShadowDirection(faceIndex);\n        }\n        else {\n            switch (faceIndex) {\n                case 0:\n                    return new Vector3(1.0, 0.0, 0.0);\n                case 1:\n                    return new Vector3(-1.0, 0.0, 0.0);\n                case 2:\n                    return new Vector3(0.0, -1.0, 0.0);\n                case 3:\n                    return new Vector3(0.0, 1.0, 0.0);\n                case 4:\n                    return new Vector3(0.0, 0.0, 1.0);\n                case 5:\n                    return new Vector3(0.0, 0.0, -1.0);\n            }\n        }\n        return Vector3.Zero();\n    }\n    /**\n     * Sets the passed matrix \"matrix\" as a left-handed perspective projection matrix with the following settings :\n     * - fov = PI / 2\n     * - aspect ratio : 1.0\n     * - z-near and far equal to the active camera minZ and maxZ.\n     * Returns the PointLight.\n     * @param matrix\n     * @param viewMatrix\n     * @param renderList\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _setDefaultShadowProjectionMatrix(matrix, viewMatrix, renderList) {\n        const activeCamera = this.getScene().activeCamera;\n        if (!activeCamera) {\n            return;\n        }\n        const minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\n        const maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\n        const useReverseDepthBuffer = this.getScene().getEngine().useReverseDepthBuffer;\n        Matrix.PerspectiveFovLHToRef(this.shadowAngle, 1.0, useReverseDepthBuffer ? maxZ : minZ, useReverseDepthBuffer ? minZ : maxZ, matrix, true, this._scene.getEngine().isNDCHalfZRange, undefined, useReverseDepthBuffer);\n    }\n    _buildUniformLayout() {\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\n        this._uniformBuffer.addUniform(\"vLightFalloff\", 4);\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\n        this._uniformBuffer.create();\n    }\n    /**\n     * Sets the passed Effect \"effect\" with the PointLight transformed position (or position, if none) and passed name (string).\n     * @param effect The effect to update\n     * @param lightIndex The index of the light in the effect to update\n     * @returns The point light\n     */\n    transferToEffect(effect, lightIndex) {\n        if (this.computeTransformedInformation()) {\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z, 0.0, lightIndex);\n        }\n        else {\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.position.x, this.position.y, this.position.z, 0, lightIndex);\n        }\n        this._uniformBuffer.updateFloat4(\"vLightFalloff\", this.range, this._inverseSquaredRange, 0, 0, lightIndex);\n        return this;\n    }\n    transferToNodeMaterialEffect(effect, lightDataUniformName) {\n        if (this.computeTransformedInformation()) {\n            effect.setFloat3(lightDataUniformName, this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z);\n        }\n        else {\n            effect.setFloat3(lightDataUniformName, this.position.x, this.position.y, this.position.z);\n        }\n        return this;\n    }\n    /**\n     * Prepares the list of defines specific to the light type.\n     * @param defines the list of defines\n     * @param lightIndex defines the index of the light for the effect\n     */\n    prepareLightSpecificDefines(defines, lightIndex) {\n        defines[\"POINTLIGHT\" + lightIndex] = true;\n    }\n}\n__decorate([\n    serialize()\n], PointLight.prototype, \"shadowAngle\", null);\n// Register Class Name\nRegisterClass(\"BABYLON.PointLight\", PointLight);\n//# sourceMappingURL=pointLight.js.map","import { Vector3 } from \"core/Maths/math.vector\";\nimport { Color3 } from \"core/Maths/math.color\";\nimport { DirectionalLight } from \"core/Lights/directionalLight\";\nimport { PointLight } from \"core/Lights/pointLight\";\nimport { SpotLight } from \"core/Lights/spotLight\";\nimport { Light } from \"core/Lights/light\";\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nconst NAME = \"KHR_lights_punctual\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_lights_punctual/README.md)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_lights {\n    /**\n     * @internal\n     */\n    constructor(loader) {\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n    /** @internal */\n    dispose() {\n        this._loader = null;\n        delete this._lights;\n    }\n    /** @internal */\n    onLoading() {\n        const extensions = this._loader.gltf.extensions;\n        if (extensions && extensions[this.name]) {\n            const extension = extensions[this.name];\n            this._lights = extension.lights;\n            ArrayItem.Assign(this._lights);\n        }\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line no-restricted-syntax\n    loadNodeAsync(context, node, assign) {\n        return GLTFLoader.LoadExtensionAsync(context, node, this.name, async (extensionContext, extension) => {\n            this._loader._allMaterialsDirtyRequired = true;\n            return await this._loader.loadNodeAsync(context, node, (babylonMesh) => {\n                let babylonLight;\n                const light = ArrayItem.Get(extensionContext, this._lights, extension.light);\n                const name = light.name || babylonMesh.name;\n                this._loader.babylonScene._blockEntityCollection = !!this._loader._assetContainer;\n                switch (light.type) {\n                    case \"directional\" /* KHRLightsPunctual_LightType.DIRECTIONAL */: {\n                        const babylonDirectionalLight = new DirectionalLight(name, Vector3.Backward(), this._loader.babylonScene);\n                        babylonDirectionalLight.position.setAll(0);\n                        babylonLight = babylonDirectionalLight;\n                        break;\n                    }\n                    case \"point\" /* KHRLightsPunctual_LightType.POINT */: {\n                        babylonLight = new PointLight(name, Vector3.Zero(), this._loader.babylonScene);\n                        break;\n                    }\n                    case \"spot\" /* KHRLightsPunctual_LightType.SPOT */: {\n                        const babylonSpotLight = new SpotLight(name, Vector3.Zero(), Vector3.Backward(), 0, 1, this._loader.babylonScene);\n                        babylonSpotLight.angle = ((light.spot && light.spot.outerConeAngle) || Math.PI / 4) * 2;\n                        babylonSpotLight.innerAngle = ((light.spot && light.spot.innerConeAngle) || 0) * 2;\n                        babylonLight = babylonSpotLight;\n                        break;\n                    }\n                    default: {\n                        this._loader.babylonScene._blockEntityCollection = false;\n                        throw new Error(`${extensionContext}: Invalid light type (${light.type})`);\n                    }\n                }\n                babylonLight._parentContainer = this._loader._assetContainer;\n                this._loader.babylonScene._blockEntityCollection = false;\n                light._babylonLight = babylonLight;\n                babylonLight.falloffType = Light.FALLOFF_GLTF;\n                babylonLight.diffuse = light.color ? Color3.FromArray(light.color) : Color3.White();\n                babylonLight.intensity = light.intensity == undefined ? 1 : light.intensity;\n                babylonLight.range = light.range == undefined ? Number.MAX_VALUE : light.range;\n                babylonLight.parent = babylonMesh;\n                this._loader._babylonLights.push(babylonLight);\n                GLTFLoader.AddPointerMetadata(babylonLight, extensionContext);\n                assign(babylonMesh);\n            });\n        });\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_lights(loader));\n//# sourceMappingURL=KHR_lights_punctual.js.map"],"names":["Node","AddNodeConstructor","name","scene","DirectionalLight","Vector3","Zero","ShadowLight","shadowFrustumSize","this","_shadowFrustumSize","value","forceProjectionMatrixCompute","shadowOrthoScale","_shadowOrthoScale","orthoLeft","_orthoLeft","left","orthoRight","_orthoRight","right","orthoTop","_orthoTop","top","orthoBottom","_orthoBottom","bottom","constructor","direction","super","autoUpdateExtends","autoCalcShadowZBounds","Number","MAX_VALUE","MIN_VALUE","position","scale","getClassName","getTypeID","Light","LIGHTTYPEID_DIRECTIONALLIGHT","_setDefaultShadowProjectionMatrix","matrix","viewMatrix","renderList","_setDefaultFixedFrustumShadowProjectionMatrix","_setDefaultAutoExtendShadowProjectionMatrix","activeCamera","getScene","Matrix","OrthoLHToRef","undefined","shadowMinZ","minZ","shadowMaxZ","maxZ","getEngine","isNDCHalfZRange","tempVector3","meshIndex","length","mesh","boundingBox","getBoundingInfo","index","vectorsWorld","TransformCoordinatesToRef","x","y","z","_shadowMinZ","_shadowMaxZ","xOffset","yOffset","Constants","ShadowMinZ","ShadowMaxZ","useReverseDepthBuffer","OrthoOffCenterLHToRef","_buildUniformLayout","_uniformBuffer","addUniform","create","transferToEffect","effect","lightIndex","computeTransformedInformation","updateFloat4","transformedDirection","transferToNodeMaterialEffect","lightDataUniformName","setFloat3","getDepthMinZ","_activeCamera","engine","_scene","getDepthMaxZ","prepareLightSpecificDefines","defines","__decorate","serialize","prototype","RegisterClass","PointLight","shadowAngle","_shadowAngle","_direction","previousNeedCube","needCube","_shadowGenerators","iterator","values","key","next","done","recreateShadowMap","Math","PI","LIGHTTYPEID_POINTLIGHT","getShadowDirection","faceIndex","PerspectiveFovLHToRef","transformedPosition","range","_inverseSquaredRange","NAME","KHR_lights","loader","_loader","enabled","isExtensionUsed","dispose","_lights","onLoading","extensions","gltf","extension","lights","ArrayItem","Assign","loadNodeAsync","context","node","assign","GLTFLoader","LoadExtensionAsync","async","extensionContext","_allMaterialsDirtyRequired","babylonMesh","babylonLight","light","Get","babylonScene","_blockEntityCollection","_assetContainer","type","babylonDirectionalLight","Backward","setAll","babylonSpotLight","SpotLight","angle","spot","outerConeAngle","innerAngle","innerConeAngle","Error","_parentContainer","_babylonLight","falloffType","FALLOFF_GLTF","diffuse","color","Color3","FromArray","White","intensity","parent","_babylonLights","push","AddPointerMetadata","unregisterGLTFExtension","registerGLTFExtension"],"mappings":"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"}