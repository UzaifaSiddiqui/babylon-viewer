{"version":3,"file":"flowGraphInterpolationBlock-BgQZjiKz.esm.min.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Execution/Animation/flowGraphInterpolationBlock.js"],"sourcesContent":["import { Constants } from \"core/Engines/constants\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport { getRichTypeByAnimationType, getRichTypeByFlowGraphType, RichTypeAny, RichTypeNumber } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { Animation } from \"core/Animations/animation\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\n/**\n * This block is responsible for interpolating between two values.\n * The babylon concept used is Animation, and it is the output of this block.\n *\n * Note that values will be parsed when the in connection is triggered. until then changing the value will not trigger a new interpolation.\n *\n * Internally this block uses the Animation class.\n *\n * Note that if the interpolation is already running a signal will be sent to stop the animation group running it.\n */\nexport class FlowGraphInterpolationBlock extends FlowGraphBlock {\n    constructor(config = {}) {\n        super(config);\n        /**\n         * The keyframes to interpolate between.\n         * Each keyframe has a duration input and a value input.\n         */\n        this.keyFrames = [];\n        const type = typeof config?.animationType === \"string\"\n            ? getRichTypeByFlowGraphType(config.animationType)\n            : getRichTypeByAnimationType(config?.animationType ?? Constants.ANIMATIONTYPE_FLOAT);\n        const numberOfKeyFrames = config?.keyFramesCount ?? 1;\n        const duration = this.registerDataInput(`duration_0`, RichTypeNumber, 0);\n        const value = this.registerDataInput(`value_0`, type);\n        this.keyFrames.push({ duration, value });\n        for (let i = 1; i < numberOfKeyFrames + 1; i++) {\n            const duration = this.registerDataInput(`duration_${i}`, RichTypeNumber, i === numberOfKeyFrames ? config.duration : undefined);\n            const value = this.registerDataInput(`value_${i}`, type);\n            this.keyFrames.push({ duration, value });\n        }\n        this.initialValue = this.keyFrames[0].value;\n        this.endValue = this.keyFrames[numberOfKeyFrames].value;\n        this.easingFunction = this.registerDataInput(\"easingFunction\", RichTypeAny);\n        this.animation = this.registerDataOutput(\"animation\", RichTypeAny);\n        this.propertyName = this.registerDataInput(\"propertyName\", RichTypeAny, config?.propertyName);\n        this.customBuildAnimation = this.registerDataInput(\"customBuildAnimation\", RichTypeAny);\n    }\n    _updateOutputs(context) {\n        const interpolationAnimations = context._getGlobalContextVariable(\"interpolationAnimations\", []);\n        const propertyName = this.propertyName.getValue(context);\n        const easingFunction = this.easingFunction.getValue(context);\n        const animation = this._createAnimation(context, propertyName, easingFunction);\n        // If an old animation exists, it will be ignored here.\n        // This is because if the animation is running and they both have the same target, the old will be stopped.\n        // This doesn't happen here, it happens in the play animation block.\n        this.animation.setValue(animation, context);\n        // to make sure no 2 interpolations are running on the same target, we will mark the animation in the context\n        if (Array.isArray(animation)) {\n            for (const anim of animation) {\n                interpolationAnimations.push(anim.uniqueId);\n            }\n        }\n        else {\n            interpolationAnimations.push(animation.uniqueId);\n        }\n        context._setGlobalContextVariable(\"interpolationAnimations\", interpolationAnimations);\n    }\n    _createAnimation(context, propertyName, easingFunction) {\n        const type = this.initialValue.richType;\n        const keys = [];\n        // add initial value\n        const currentValue = this.initialValue.getValue(context) || type.defaultValue;\n        keys.push({ frame: 0, value: currentValue });\n        const numberOfKeyFrames = this.config?.numberOfKeyFrames ?? 1;\n        for (let i = 1; i < numberOfKeyFrames + 1; i++) {\n            const duration = this.keyFrames[i].duration?.getValue(context);\n            let value = this.keyFrames[i].value?.getValue(context);\n            if (i === numberOfKeyFrames - 1) {\n                value = value || type.defaultValue;\n            }\n            if (duration !== undefined && value) {\n                // convert duration to frames, based on 60 fps\n                keys.push({ frame: duration * 60, value });\n            }\n        }\n        const customBuildAnimation = this.customBuildAnimation.getValue(context);\n        if (customBuildAnimation) {\n            return customBuildAnimation(null, null, context)(keys, 60, type.animationType, easingFunction);\n        }\n        if (typeof propertyName === \"string\") {\n            const animation = Animation.CreateAnimation(propertyName, type.animationType, 60, easingFunction);\n            animation.setKeys(keys);\n            return [animation];\n        }\n        else {\n            const animations = propertyName.map((name) => {\n                const animation = Animation.CreateAnimation(name, type.animationType, 60, easingFunction);\n                animation.setKeys(keys);\n                return animation;\n            });\n            return animations;\n        }\n    }\n    getClassName() {\n        return \"FlowGraphInterpolationBlock\" /* FlowGraphBlockNames.ValueInterpolation */;\n    }\n}\nRegisterClass(\"FlowGraphInterpolationBlock\" /* FlowGraphBlockNames.ValueInterpolation */, FlowGraphInterpolationBlock);\n// #L54P2C\n//# sourceMappingURL=flowGraphInterpolationBlock.js.map"],"names":["FlowGraphInterpolationBlock","FlowGraphBlock","constructor","config","super","this","keyFrames","type","animationType","getRichTypeByFlowGraphType","getRichTypeByAnimationType","Constants","ANIMATIONTYPE_FLOAT","numberOfKeyFrames","keyFramesCount","duration","registerDataInput","RichTypeNumber","value","push","i","undefined","initialValue","endValue","easingFunction","RichTypeAny","animation","registerDataOutput","propertyName","customBuildAnimation","_updateOutputs","context","interpolationAnimations","_getGlobalContextVariable","getValue","_createAnimation","setValue","Array","isArray","anim","uniqueId","_setGlobalContextVariable","richType","keys","currentValue","defaultValue","frame","Animation","CreateAnimation","setKeys","map","name","getClassName","RegisterClass"],"mappings":"6PAeO,MAAMA,UAAoCC,EAC7C,WAAAC,CAAYC,EAAS,IACjBC,MAAMD,GAKNE,KAAKC,UAAY,GACjB,MAAMC,EAAwC,iBAA1BJ,GAAQK,cACtBC,EAA2BN,EAAOK,eAClCE,EAA2BP,GAAQK,eAAiBG,EAAUC,qBAC9DC,EAAoBV,GAAQW,gBAAkB,EAC9CC,EAAWV,KAAKW,kBAAkB,aAAcC,EAAgB,GAChEC,EAAQb,KAAKW,kBAAkB,UAAWT,GAChDF,KAAKC,UAAUa,KAAK,CAAEJ,WAAUG,UAChC,IAAK,IAAIE,EAAI,EAAGA,EAAIP,EAAoB,EAAGO,IAAK,CAC5C,MAAML,EAAWV,KAAKW,kBAAkB,YAAYI,IAAKH,EAAgBG,IAAMP,EAAoBV,EAAOY,cAAWM,GAC/GH,EAAQb,KAAKW,kBAAkB,SAASI,IAAKb,GACnDF,KAAKC,UAAUa,KAAK,CAAEJ,WAAUG,SAC5C,CACQb,KAAKiB,aAAejB,KAAKC,UAAU,GAAGY,MACtCb,KAAKkB,SAAWlB,KAAKC,UAAUO,GAAmBK,MAClDb,KAAKmB,eAAiBnB,KAAKW,kBAAkB,iBAAkBS,GAC/DpB,KAAKqB,UAAYrB,KAAKsB,mBAAmB,YAAaF,GACtDpB,KAAKuB,aAAevB,KAAKW,kBAAkB,eAAgBS,EAAatB,GAAQyB,cAChFvB,KAAKwB,qBAAuBxB,KAAKW,kBAAkB,uBAAwBS,EACnF,CACI,cAAAK,CAAeC,GACX,MAAMC,EAA0BD,EAAQE,0BAA0B,0BAA2B,IACvFL,EAAevB,KAAKuB,aAAaM,SAASH,GAC1CP,EAAiBnB,KAAKmB,eAAeU,SAASH,GAC9CL,EAAYrB,KAAK8B,iBAAiBJ,EAASH,EAAcJ,GAM/D,GAFAnB,KAAKqB,UAAUU,SAASV,EAAWK,GAE/BM,MAAMC,QAAQZ,GACd,IAAK,MAAMa,KAAQb,EACfM,EAAwBb,KAAKoB,EAAKC,eAItCR,EAAwBb,KAAKO,EAAUc,UAE3CT,EAAQU,0BAA0B,0BAA2BT,EACrE,CACI,gBAAAG,CAAiBJ,EAASH,EAAcJ,GACpC,MAAMjB,EAAOF,KAAKiB,aAAaoB,SACzBC,EAAO,GAEPC,EAAevC,KAAKiB,aAAaY,SAASH,IAAYxB,EAAKsC,aACjEF,EAAKxB,KAAK,CAAE2B,MAAO,EAAG5B,MAAO0B,IAC7B,MAAM/B,EAAoBR,KAAKF,QAAQU,mBAAqB,EAC5D,IAAK,IAAIO,EAAI,EAAGA,EAAIP,EAAoB,EAAGO,IAAK,CAC5C,MAAML,EAAWV,KAAKC,UAAUc,GAAGL,UAAUmB,SAASH,GACtD,IAAIb,EAAQb,KAAKC,UAAUc,GAAGF,OAAOgB,SAASH,GAC1CX,IAAMP,EAAoB,IAC1BK,EAAQA,GAASX,EAAKsC,mBAETxB,IAAbN,GAA0BG,GAE1ByB,EAAKxB,KAAK,CAAE2B,MAAkB,GAAX/B,EAAeG,SAElD,CACQ,MAAMW,EAAuBxB,KAAKwB,qBAAqBK,SAASH,GAChE,GAAIF,EACA,OAAOA,EAAqB,KAAM,KAAME,EAAjCF,CAA0Cc,EAAM,GAAIpC,EAAKC,cAAegB,GAEnF,GAA4B,iBAAjBI,EAA2B,CAClC,MAAMF,EAAYqB,EAAUC,gBAAgBpB,EAAcrB,EAAKC,cAAe,GAAIgB,GAElF,OADAE,EAAUuB,QAAQN,GACX,CAACjB,EACpB,CAOY,OALmBE,EAAasB,KAAKC,IACjC,MAAMzB,EAAYqB,EAAUC,gBAAgBG,EAAM5C,EAAKC,cAAe,GAAIgB,GAE1E,OADAE,EAAUuB,QAAQN,GACXjB,IAIvB,CACI,YAAA0B,GACI,MAAO,6BACf,EAEAC,EAAc,8BAA4ErD"}