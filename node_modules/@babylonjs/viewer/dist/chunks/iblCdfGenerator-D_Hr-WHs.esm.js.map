{"version":3,"file":"iblCdfGenerator-D_Hr-WHs.esm.js","sources":["../../../../../dev/core/dist/Materials/Textures/Procedurals/proceduralTextureSceneComponent.js","../../../../../dev/core/dist/Materials/Textures/Procedurals/proceduralTexture.js","../../../../../dev/core/dist/Rendering/iblCdfGenerator.js"],"sourcesContent":["import { Tools } from \"../../../Misc/tools\";\nimport { SceneComponentConstants } from \"../../../sceneComponent\";\n/**\n * Defines the Procedural Texture scene component responsible to manage any Procedural Texture\n * in a given scene.\n */\nexport class ProceduralTextureSceneComponent {\n    /**\n     * Creates a new instance of the component for the given scene\n     * @param scene Defines the scene to register the component in\n     */\n    constructor(scene) {\n        /**\n         * The component name helpful to identify the component in the list of scene components.\n         */\n        this.name = SceneComponentConstants.NAME_PROCEDURALTEXTURE;\n        this.scene = scene;\n    }\n    /**\n     * Registers the component in a given scene\n     */\n    register() {\n        this.scene._beforeClearStage.registerStep(SceneComponentConstants.STEP_BEFORECLEAR_PROCEDURALTEXTURE, this, this._beforeClear);\n    }\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    rebuild() {\n        // Nothing to do here.\n    }\n    /**\n     * Disposes the component and the associated resources.\n     */\n    dispose() {\n        // Nothing to do here.\n    }\n    _beforeClear() {\n        if (this.scene.proceduralTexturesEnabled) {\n            Tools.StartPerformanceCounter(\"Procedural textures\", this.scene.proceduralTextures.length > 0);\n            for (let proceduralIndex = 0; proceduralIndex < this.scene.proceduralTextures.length; proceduralIndex++) {\n                const proceduralTexture = this.scene.proceduralTextures[proceduralIndex];\n                if (proceduralTexture._shouldRender()) {\n                    proceduralTexture.render();\n                }\n            }\n            Tools.EndPerformanceCounter(\"Procedural textures\", this.scene.proceduralTextures.length > 0);\n        }\n    }\n}\n//# sourceMappingURL=proceduralTextureSceneComponent.js.map","import { __decorate } from \"tslib\";\nimport { serialize } from \"../../../Misc/decorators\";\nimport { Observable } from \"../../../Misc/observable\";\nimport { VertexBuffer } from \"../../../Buffers/buffer\";\nimport { SceneComponentConstants } from \"../../../sceneComponent\";\nimport { Material } from \"../../../Materials/material\";\nimport { Texture } from \"../../../Materials/Textures/texture\";\nimport { RenderTargetTexture } from \"../../../Materials/Textures/renderTargetTexture\";\nimport { ProceduralTextureSceneComponent } from \"./proceduralTextureSceneComponent\";\nimport { RegisterClass } from \"../../../Misc/typeStore\";\nimport { EngineStore } from \"../../../Engines/engineStore\";\nimport { Constants } from \"../../../Engines/constants\";\nimport { DrawWrapper } from \"../../drawWrapper\";\n/**\n * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes calmpler' images.\n * This is the base class of any Procedural texture and contains most of the shareable code.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/proceduralTextures\n */\nexport class ProceduralTexture extends Texture {\n    /**\n     * Gets the shader language type used to generate vertex and fragment source code.\n     */\n    get shaderLanguage() {\n        return this._shaderLanguage;\n    }\n    /**\n     * Instantiates a new procedural texture.\n     * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images.\n     * This is the base class of any Procedural texture and contains most of the shareable code.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/proceduralTextures\n     * @param name  Define the name of the texture\n     * @param size Define the size of the texture to create\n     * @param fragment Define the fragment shader to use to generate the texture or null if it is defined later:\n     *  * object: \\{ fragmentElement: \"fragmentShaderCode\" \\}, used with shader code in script tags\n     *  * object: \\{ fragmentSource: \"fragment shader code string\" \\}, the string contains the shader code\n     *  * string: the string contains a name \"XXX\" to lookup in Effect.ShadersStore[\"XXXFragmentShader\"]\n     * @param scene Define the scene the texture belongs to\n     * @param fallbackTexture Define a fallback texture in case there were issues to create the custom texture\n     * @param generateMipMaps Define if the texture should creates mip maps or not\n     * @param isCube Define if the texture is a cube texture or not (this will render each faces of the cube)\n     * @param textureType The FBO internal texture type\n     */\n    constructor(name, size, fragment, scene, fallbackTexture = null, generateMipMaps = true, isCube = false, textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE) {\n        super(null, scene, !generateMipMaps);\n        /**\n         * Define if the texture is enabled or not (disabled texture will not render)\n         */\n        this.isEnabled = true;\n        /**\n         * Define if the texture must be cleared before rendering (default is true)\n         */\n        this.autoClear = true;\n        /**\n         * Event raised when the texture is generated\n         */\n        this.onGeneratedObservable = new Observable();\n        /**\n         * Event raised before the texture is generated\n         */\n        this.onBeforeGenerationObservable = new Observable();\n        /**\n         * Gets or sets the node material used to create this texture (null if the texture was manually created)\n         */\n        this.nodeMaterialSource = null;\n        /**\n         * Define the list of custom preprocessor defines used in the shader\n         */\n        this.defines = \"\";\n        /** @internal */\n        this._textures = {};\n        this._currentRefreshId = -1;\n        this._frameId = -1;\n        this._refreshRate = 1;\n        this._vertexBuffers = {};\n        this._uniforms = new Array();\n        this._samplers = new Array();\n        this._floats = {};\n        this._ints = {};\n        this._floatsArrays = {};\n        this._colors3 = {};\n        this._colors4 = {};\n        this._vectors2 = {};\n        this._vectors3 = {};\n        this._vectors4 = {};\n        this._matrices = {};\n        this._fallbackTextureUsed = false;\n        this._cachedDefines = null;\n        this._contentUpdateId = -1;\n        this._rtWrapper = null;\n        if (fallbackTexture !== null && !(fallbackTexture instanceof Texture)) {\n            this._options = fallbackTexture;\n            this._fallbackTexture = fallbackTexture.fallbackTexture ?? null;\n        }\n        else {\n            this._options = {};\n            this._fallbackTexture = fallbackTexture;\n        }\n        this._shaderLanguage = this._options.shaderLanguage ?? 0 /* ShaderLanguage.GLSL */;\n        scene = this.getScene() || EngineStore.LastCreatedScene;\n        let component = scene._getComponent(SceneComponentConstants.NAME_PROCEDURALTEXTURE);\n        if (!component) {\n            component = new ProceduralTextureSceneComponent(scene);\n            scene._addComponent(component);\n        }\n        scene.proceduralTextures.push(this);\n        this._fullEngine = scene.getEngine();\n        this.name = name;\n        this.isRenderTarget = true;\n        this._size = size;\n        this._textureType = textureType;\n        this._generateMipMaps = generateMipMaps;\n        this._drawWrapper = new DrawWrapper(this._fullEngine);\n        this.setFragment(fragment);\n        const rtWrapper = this._createRtWrapper(isCube, size, generateMipMaps, textureType);\n        this._texture = rtWrapper.texture;\n        // VBO\n        const vertices = [];\n        vertices.push(1, 1);\n        vertices.push(-1, 1);\n        vertices.push(-1, -1);\n        vertices.push(1, -1);\n        this._vertexBuffers[VertexBuffer.PositionKind] = new VertexBuffer(this._fullEngine, vertices, VertexBuffer.PositionKind, false, false, 2);\n        this._createIndexBuffer();\n    }\n    _createRtWrapper(isCube, size, generateMipMaps, textureType) {\n        if (isCube) {\n            this._rtWrapper = this._fullEngine.createRenderTargetCubeTexture(size, {\n                generateMipMaps: generateMipMaps,\n                generateDepthBuffer: false,\n                generateStencilBuffer: false,\n                type: textureType,\n                ...this._options,\n            });\n            this.setFloat(\"face\", 0);\n        }\n        else {\n            this._rtWrapper = this._fullEngine.createRenderTargetTexture(size, {\n                generateMipMaps: generateMipMaps,\n                generateDepthBuffer: false,\n                generateStencilBuffer: false,\n                type: textureType,\n                ...this._options,\n            });\n            if (this._rtWrapper.is3D) {\n                this.setFloat(\"layer\", 0);\n                this.setInt(\"layerNum\", 0);\n            }\n        }\n        return this._rtWrapper;\n    }\n    /**\n     * The effect that is created when initializing the post process.\n     * @returns The created effect corresponding the postprocess.\n     */\n    getEffect() {\n        return this._drawWrapper.effect;\n    }\n    /**\n     * @internal\n     */\n    _setEffect(effect) {\n        this._drawWrapper.effect = effect;\n    }\n    /**\n     * Gets texture content (Use this function wisely as reading from a texture can be slow)\n     * @returns an ArrayBufferView promise (Uint8Array or Float32Array)\n     */\n    getContent() {\n        if (this._contentData && this._frameId === this._contentUpdateId) {\n            return this._contentData;\n        }\n        if (this._contentData) {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\n            this._contentData.then((buffer) => {\n                this._contentData = this.readPixels(0, 0, buffer);\n                this._contentUpdateId = this._frameId;\n            });\n        }\n        else {\n            this._contentData = this.readPixels(0, 0);\n            this._contentUpdateId = this._frameId;\n        }\n        return this._contentData;\n    }\n    _createIndexBuffer() {\n        const engine = this._fullEngine;\n        // Indices\n        const indices = [];\n        indices.push(0);\n        indices.push(1);\n        indices.push(2);\n        indices.push(0);\n        indices.push(2);\n        indices.push(3);\n        this._indexBuffer = engine.createIndexBuffer(indices);\n    }\n    /** @internal */\n    _rebuild() {\n        const vb = this._vertexBuffers[VertexBuffer.PositionKind];\n        if (vb) {\n            vb._rebuild();\n        }\n        this._createIndexBuffer();\n        if (this.refreshRate === RenderTargetTexture.REFRESHRATE_RENDER_ONCE) {\n            this.refreshRate = RenderTargetTexture.REFRESHRATE_RENDER_ONCE;\n        }\n    }\n    /**\n     * Resets the texture in order to recreate its associated resources.\n     * This can be called in case of context loss or if you change the shader code and need to regenerate the texture with the new code\n     */\n    reset() {\n        this._drawWrapper.effect?.dispose();\n        this._drawWrapper.effect = null;\n        this._cachedDefines = null;\n    }\n    _getDefines() {\n        return this.defines;\n    }\n    /**\n     * Executes a function when the texture will be ready to be drawn.\n     * @param func The callback to be used.\n     */\n    executeWhenReady(func) {\n        if (this.isReady()) {\n            func(this);\n            return;\n        }\n        const effect = this.getEffect();\n        if (effect) {\n            effect.executeWhenCompiled(() => {\n                func(this);\n            });\n        }\n    }\n    /**\n     * Is the texture ready to be used ? (rendered at least once)\n     * @returns true if ready, otherwise, false.\n     */\n    isReady() {\n        const engine = this._fullEngine;\n        if (this.nodeMaterialSource) {\n            return this._drawWrapper.effect.isReady();\n        }\n        if (!this._fragment) {\n            return false;\n        }\n        if (this._fallbackTextureUsed) {\n            return true;\n        }\n        if (!this._texture) {\n            return false;\n        }\n        const defines = this._getDefines();\n        if (this._drawWrapper.effect && defines === this._cachedDefines && this._drawWrapper.effect.isReady()) {\n            return true;\n        }\n        const shaders = {\n            vertex: \"procedural\",\n            fragmentElement: this._fragment.fragmentElement,\n            fragmentSource: this._fragment.fragmentSource,\n            fragment: typeof this._fragment === \"string\" ? this._fragment : undefined,\n        };\n        if (this._cachedDefines !== defines) {\n            this._cachedDefines = defines;\n            this._drawWrapper.effect = engine.createEffect(shaders, [VertexBuffer.PositionKind], this._uniforms, this._samplers, defines, undefined, undefined, () => {\n                this._rtWrapper?.dispose();\n                this._rtWrapper = this._texture = null;\n                if (this._fallbackTexture) {\n                    this._texture = this._fallbackTexture._texture;\n                    if (this._texture) {\n                        this._texture.incrementReferences();\n                    }\n                }\n                this._fallbackTextureUsed = true;\n            }, undefined, this._shaderLanguage, async () => {\n                if (this._options.extraInitializationsAsync) {\n                    if (this.shaderLanguage === 1 /* ShaderLanguage.WGSL */) {\n                        await Promise.all([import(\"../../../ShadersWGSL/procedural.vertex\"), this._options.extraInitializationsAsync()]);\n                    }\n                    else {\n                        await Promise.all([import(\"../../../Shaders/procedural.vertex\"), this._options.extraInitializationsAsync()]);\n                    }\n                }\n                else {\n                    if (this.shaderLanguage === 1 /* ShaderLanguage.WGSL */) {\n                        await import(\"../../../ShadersWGSL/procedural.vertex\");\n                    }\n                    else {\n                        await import(\"../../../Shaders/procedural.vertex\");\n                    }\n                }\n            });\n        }\n        return this._drawWrapper.effect.isReady();\n    }\n    /**\n     * Resets the refresh counter of the texture and start bak from scratch.\n     * Could be useful to regenerate the texture if it is setup to render only once.\n     */\n    resetRefreshCounter() {\n        this._currentRefreshId = -1;\n    }\n    /**\n     * Set the fragment shader to use in order to render the texture.\n     * @param fragment This can be set to a path (into the shader store) or to a json object containing a fragmentElement property.\n     */\n    setFragment(fragment) {\n        this._fragment = fragment;\n    }\n    /**\n     * Define the refresh rate of the texture or the rendering frequency.\n     * Use 0 to render just once, 1 to render on every frame, 2 to render every two frames and so on...\n     */\n    get refreshRate() {\n        return this._refreshRate;\n    }\n    set refreshRate(value) {\n        this._refreshRate = value;\n        this.resetRefreshCounter();\n    }\n    /** @internal */\n    _shouldRender() {\n        if (!this.isEnabled || !this.isReady() || !this._texture) {\n            if (this._texture) {\n                this._texture.isReady = false;\n            }\n            return false;\n        }\n        if (this._fallbackTextureUsed) {\n            return false;\n        }\n        if (this._currentRefreshId === -1) {\n            // At least render once\n            this._currentRefreshId = 1;\n            this._frameId++;\n            return true;\n        }\n        if (this.refreshRate === this._currentRefreshId) {\n            this._currentRefreshId = 1;\n            this._frameId++;\n            return true;\n        }\n        this._currentRefreshId++;\n        return false;\n    }\n    /**\n     * Get the size the texture is rendering at.\n     * @returns the size (on cube texture it is always squared)\n     */\n    getRenderSize() {\n        return this._size;\n    }\n    /**\n     * Resize the texture to new value.\n     * @param size Define the new size the texture should have\n     * @param generateMipMaps Define whether the new texture should create mip maps\n     */\n    resize(size, generateMipMaps) {\n        if (this._fallbackTextureUsed || !this._rtWrapper || !this._texture) {\n            return;\n        }\n        const isCube = this._texture.isCube;\n        this._rtWrapper.dispose();\n        const rtWrapper = this._createRtWrapper(isCube, size, generateMipMaps, this._textureType);\n        this._texture = rtWrapper.texture;\n        // Update properties\n        this._size = size;\n        this._generateMipMaps = generateMipMaps;\n    }\n    _checkUniform(uniformName) {\n        if (this._uniforms.indexOf(uniformName) === -1) {\n            this._uniforms.push(uniformName);\n        }\n    }\n    /**\n     * Set a texture in the shader program used to render.\n     * @param name Define the name of the uniform samplers as defined in the shader\n     * @param texture Define the texture to bind to this sampler\n     * @returns the texture itself allowing \"fluent\" like uniform updates\n     */\n    setTexture(name, texture) {\n        if (this._samplers.indexOf(name) === -1) {\n            this._samplers.push(name);\n        }\n        this._textures[name] = texture;\n        return this;\n    }\n    /**\n     * Set a float in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the texture itself allowing \"fluent\" like uniform updates\n     */\n    setFloat(name, value) {\n        this._checkUniform(name);\n        this._floats[name] = value;\n        return this;\n    }\n    /**\n     * Set a int in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the texture itself allowing \"fluent\" like uniform updates\n     */\n    setInt(name, value) {\n        this._checkUniform(name);\n        this._ints[name] = value;\n        return this;\n    }\n    /**\n     * Set an array of floats in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the texture itself allowing \"fluent\" like uniform updates\n     */\n    setFloats(name, value) {\n        this._checkUniform(name);\n        this._floatsArrays[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec3 in the shader from a Color3.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the texture itself allowing \"fluent\" like uniform updates\n     */\n    setColor3(name, value) {\n        this._checkUniform(name);\n        this._colors3[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec4 in the shader from a Color4.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the texture itself allowing \"fluent\" like uniform updates\n     */\n    setColor4(name, value) {\n        this._checkUniform(name);\n        this._colors4[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec2 in the shader from a Vector2.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the texture itself allowing \"fluent\" like uniform updates\n     */\n    setVector2(name, value) {\n        this._checkUniform(name);\n        this._vectors2[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec3 in the shader from a Vector3.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the texture itself allowing \"fluent\" like uniform updates\n     */\n    setVector3(name, value) {\n        this._checkUniform(name);\n        this._vectors3[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec4 in the shader from a Vector4.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the texture itself allowing \"fluent\" like uniform updates\n     */\n    setVector4(name, value) {\n        this._checkUniform(name);\n        this._vectors4[name] = value;\n        return this;\n    }\n    /**\n     * Set a mat4 in the shader from a MAtrix.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the texture itself allowing \"fluent\" like uniform updates\n     */\n    setMatrix(name, value) {\n        this._checkUniform(name);\n        this._matrices[name] = value;\n        return this;\n    }\n    /**\n     * Render the texture to its associated render target.\n     * @param useCameraPostProcess Define if camera post process should be applied to the texture\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    render(useCameraPostProcess) {\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        const engine = this._fullEngine;\n        // Render\n        engine.enableEffect(this._drawWrapper);\n        this.onBeforeGenerationObservable.notifyObservers(this);\n        engine.setState(false);\n        if (!this.nodeMaterialSource) {\n            // Texture\n            for (const name in this._textures) {\n                this._drawWrapper.effect.setTexture(name, this._textures[name]);\n            }\n            // Float\n            for (const name in this._ints) {\n                this._drawWrapper.effect.setInt(name, this._ints[name]);\n            }\n            // Float\n            for (const name in this._floats) {\n                this._drawWrapper.effect.setFloat(name, this._floats[name]);\n            }\n            // Floats\n            for (const name in this._floatsArrays) {\n                this._drawWrapper.effect.setArray(name, this._floatsArrays[name]);\n            }\n            // Color3\n            for (const name in this._colors3) {\n                this._drawWrapper.effect.setColor3(name, this._colors3[name]);\n            }\n            // Color4\n            for (const name in this._colors4) {\n                const color = this._colors4[name];\n                this._drawWrapper.effect.setFloat4(name, color.r, color.g, color.b, color.a);\n            }\n            // Vector2\n            for (const name in this._vectors2) {\n                this._drawWrapper.effect.setVector2(name, this._vectors2[name]);\n            }\n            // Vector3\n            for (const name in this._vectors3) {\n                this._drawWrapper.effect.setVector3(name, this._vectors3[name]);\n            }\n            // Vector4\n            for (const name in this._vectors4) {\n                this._drawWrapper.effect.setVector4(name, this._vectors4[name]);\n            }\n            // Matrix\n            for (const name in this._matrices) {\n                this._drawWrapper.effect.setMatrix(name, this._matrices[name]);\n            }\n        }\n        if (!this._texture || !this._rtWrapper) {\n            return;\n        }\n        engine._debugPushGroup?.(`procedural texture generation for ${this.name}`, 1);\n        const viewPort = engine.currentViewport;\n        if (this.isCube) {\n            for (let face = 0; face < 6; face++) {\n                engine.bindFramebuffer(this._rtWrapper, face, undefined, undefined, true);\n                // VBOs\n                engine.bindBuffers(this._vertexBuffers, this._indexBuffer, this._drawWrapper.effect);\n                this._drawWrapper.effect.setFloat(\"face\", face);\n                // Clear\n                if (this.autoClear) {\n                    engine.clear(scene.clearColor, true, false, false);\n                }\n                // Draw order\n                engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n                // Unbind and restore viewport\n                engine.unBindFramebuffer(this._rtWrapper, true);\n            }\n        }\n        else {\n            let numLayers = 1;\n            if (this._rtWrapper.is3D) {\n                numLayers = this._rtWrapper.depth;\n            }\n            else if (this._rtWrapper.is2DArray) {\n                numLayers = this._rtWrapper.layers;\n            }\n            for (let layer = 0; layer < numLayers; layer++) {\n                engine.bindFramebuffer(this._rtWrapper, 0, undefined, undefined, true, 0, layer);\n                // VBOs\n                engine.bindBuffers(this._vertexBuffers, this._indexBuffer, this._drawWrapper.effect);\n                if (this._rtWrapper.is3D || this._rtWrapper.is2DArray) {\n                    this._drawWrapper.effect?.setFloat(\"layer\", numLayers !== 1 ? layer / (numLayers - 1) : 0);\n                    this._drawWrapper.effect?.setInt(\"layerNum\", layer);\n                    for (const name in this._textures) {\n                        this._drawWrapper.effect.setTexture(name, this._textures[name]);\n                    }\n                }\n                // Clear\n                if (this.autoClear) {\n                    engine.clear(scene.clearColor, true, false, false);\n                }\n                // Draw order\n                engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n                // Unbind and restore viewport\n                engine.unBindFramebuffer(this._rtWrapper, !this._generateMipMaps);\n            }\n        }\n        if (viewPort) {\n            engine.setViewport(viewPort);\n        }\n        // Mipmaps\n        if (this.isCube) {\n            engine.generateMipMapsForCubemap(this._texture, true);\n        }\n        engine._debugPopGroup?.(1);\n        if (this.onGenerated) {\n            this.onGenerated();\n        }\n        this.onGeneratedObservable.notifyObservers(this);\n    }\n    /**\n     * Clone the texture.\n     * @returns the cloned texture\n     */\n    clone() {\n        const textureSize = this.getSize();\n        const newTexture = new ProceduralTexture(this.name, textureSize.width, this._fragment, this.getScene(), this._fallbackTexture, this._generateMipMaps);\n        // Base texture\n        newTexture.hasAlpha = this.hasAlpha;\n        newTexture.level = this.level;\n        // RenderTarget Texture\n        newTexture.coordinatesMode = this.coordinatesMode;\n        return newTexture;\n    }\n    /**\n     * Dispose the texture and release its associated resources.\n     */\n    dispose() {\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        const index = scene.proceduralTextures.indexOf(this);\n        if (index >= 0) {\n            scene.proceduralTextures.splice(index, 1);\n        }\n        const vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];\n        if (vertexBuffer) {\n            vertexBuffer.dispose();\n            this._vertexBuffers[VertexBuffer.PositionKind] = null;\n        }\n        if (this._indexBuffer && this._fullEngine._releaseBuffer(this._indexBuffer)) {\n            this._indexBuffer = null;\n        }\n        this.onGeneratedObservable.clear();\n        this.onBeforeGenerationObservable.clear();\n        super.dispose();\n    }\n}\n__decorate([\n    serialize()\n], ProceduralTexture.prototype, \"isEnabled\", void 0);\n__decorate([\n    serialize()\n], ProceduralTexture.prototype, \"autoClear\", void 0);\n__decorate([\n    serialize()\n], ProceduralTexture.prototype, \"_generateMipMaps\", void 0);\n__decorate([\n    serialize()\n], ProceduralTexture.prototype, \"_size\", void 0);\n__decorate([\n    serialize()\n], ProceduralTexture.prototype, \"refreshRate\", null);\nRegisterClass(\"BABYLON.ProceduralTexture\", ProceduralTexture);\n//# sourceMappingURL=proceduralTexture.js.map","import { Constants } from \"../Engines/constants\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { ProceduralTexture } from \"../Materials/Textures/Procedurals/proceduralTexture\";\nimport { PostProcess } from \"../PostProcesses/postProcess\";\nimport { Vector3, Vector4 } from \"../Maths/math.vector\";\nimport { RawTexture } from \"../Materials/Textures/rawTexture\";\nimport { Observable } from \"../Misc/observable\";\nimport { Engine } from \"../Engines/engine\";\nimport { _WarnImport } from \"../Misc/devTools\";\nimport { EngineStore } from \"../Engines/engineStore\";\nimport { Logger } from \"../Misc/logger\";\n/**\n * Build cdf maps to be used for IBL importance sampling.\n */\nexport class IblCdfGenerator {\n    /**\n     * Returns whether the CDF renderer is supported by the current engine\n     */\n    get isSupported() {\n        const engine = EngineStore.LastCreatedEngine;\n        if (!engine) {\n            return false;\n        }\n        return engine.getCaps().texelFetch;\n    }\n    /**\n     * Gets the IBL source texture being used by the CDF renderer\n     */\n    get iblSource() {\n        return this._iblSource;\n    }\n    /**\n     * Sets the IBL source texture to be used by the CDF renderer.\n     * This will trigger recreation of the CDF assets.\n     */\n    set iblSource(source) {\n        if (this._iblSource === source) {\n            return;\n        }\n        this._disposeTextures();\n        this._iblSource = source;\n        if (!source) {\n            return;\n        }\n        if (source.isCube) {\n            if (source.isReadyOrNotBlocking()) {\n                this._recreateAssetsFromNewIbl();\n            }\n            else {\n                source.onLoadObservable.addOnce(this._recreateAssetsFromNewIbl.bind(this, source));\n            }\n        }\n        else {\n            if (source.isReadyOrNotBlocking()) {\n                this._recreateAssetsFromNewIbl();\n            }\n            else {\n                source.onLoadObservable.addOnce(this._recreateAssetsFromNewIbl.bind(this, source));\n            }\n        }\n    }\n    _recreateAssetsFromNewIbl() {\n        if (this._debugPass) {\n            this._debugPass.dispose();\n        }\n        this._createTextures();\n        if (this._debugPass) {\n            // Recreate the debug pass because of the new textures\n            this._createDebugPass();\n        }\n    }\n    /**\n     * Return the cumulative distribution function (CDF) texture\n     * @returns Return the cumulative distribution function (CDF) texture\n     */\n    getIcdfTexture() {\n        return this._icdfPT ? this._icdfPT : this._dummyTexture;\n    }\n    /**\n     * Sets params that control the position and scaling of the debug display on the screen.\n     * @param x Screen X offset of the debug display (0-1)\n     * @param y Screen Y offset of the debug display (0-1)\n     * @param widthScale X scale of the debug display (0-1)\n     * @param heightScale Y scale of the debug display (0-1)\n     */\n    setDebugDisplayParams(x, y, widthScale, heightScale) {\n        this._debugSizeParams.set(x, y, widthScale, heightScale);\n    }\n    /**\n     * The name of the debug pass post process\n     */\n    get debugPassName() {\n        return this._debugPassName;\n    }\n    /**\n     * Gets the debug pass post process\n     * @returns The post process\n     */\n    getDebugPassPP() {\n        if (!this._debugPass) {\n            this._createDebugPass();\n        }\n        return this._debugPass;\n    }\n    /**\n     * Instanciates the CDF renderer\n     * @param sceneOrEngine Scene to attach to\n     * @returns The CDF renderer\n     */\n    constructor(sceneOrEngine) {\n        this._cachedDominantDirection = null;\n        /** Enable the debug view for this pass */\n        this.debugEnabled = false;\n        this._debugSizeParams = new Vector4(0.0, 0.0, 1.0, 1.0);\n        this._debugPassName = \"CDF Debug\";\n        /**\n         * Observable that triggers when the CDF renderer is ready\n         */\n        this.onGeneratedObservable = new Observable();\n        if (sceneOrEngine) {\n            if (IblCdfGenerator._IsScene(sceneOrEngine)) {\n                this._scene = sceneOrEngine;\n            }\n            else {\n                this._engine = sceneOrEngine;\n            }\n        }\n        else {\n            this._scene = EngineStore.LastCreatedScene;\n        }\n        if (this._scene) {\n            this._engine = this._scene.getEngine();\n        }\n        if (!this.isSupported) {\n            Logger.Warn(\"CDF renderer is not supported by the current engine.\");\n            return;\n        }\n        const blackPixels = new Uint16Array([0, 0, 0, 255]);\n        this._dummyTexture = new RawTexture(blackPixels, 1, 1, Engine.TEXTUREFORMAT_RGBA, sceneOrEngine, false, false, undefined, Constants.TEXTURETYPE_HALF_FLOAT);\n        if (this._scene) {\n            IblCdfGenerator._SceneComponentInitialization(this._scene);\n        }\n    }\n    _createTextures() {\n        const size = this._iblSource ? { width: this._iblSource.getSize().width, height: this._iblSource.getSize().height } : { width: 1, height: 1 };\n        if (!this._iblSource) {\n            this._iblSource = RawTexture.CreateRTexture(new Uint8Array([255]), 1, 1, this._engine, false, false, Constants.TEXTURE_NEAREST_SAMPLINGMODE, Constants.TEXTURETYPE_UNSIGNED_BYTE);\n            this._iblSource.name = \"Placeholder IBL Source\";\n        }\n        if (this._iblSource.isCube) {\n            size.width *= 4;\n            size.height *= 2;\n            // Force the resolution to be a power of 2 because we rely on the\n            // auto-mipmap generation for the scaled luminance texture to produce\n            // a 1x1 mip that represents the true average pixel intensity of the IBL.\n            size.width = 1 << Math.floor(Math.log2(size.width));\n            size.height = 1 << Math.floor(Math.log2(size.height));\n        }\n        const isWebGPU = this._engine.isWebGPU;\n        // Create CDF maps (Cumulative Distribution Function) to assist in importance sampling\n        const cdfOptions = {\n            generateDepthBuffer: false,\n            generateMipMaps: false,\n            format: Constants.TEXTUREFORMAT_R,\n            type: Constants.TEXTURETYPE_FLOAT,\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            gammaSpace: false,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await Promise.all([import(\"../ShadersWGSL/iblCdfx.fragment\"), import(\"../ShadersWGSL/iblCdfy.fragment\"), import(\"../ShadersWGSL/iblScaledLuminance.fragment\")]);\n                }\n                else {\n                    await Promise.all([import(\"../Shaders/iblCdfx.fragment\"), import(\"../Shaders/iblCdfy.fragment\"), import(\"../Shaders/iblScaledLuminance.fragment\")]);\n                }\n            },\n        };\n        const icdfOptions = {\n            generateDepthBuffer: false,\n            generateMipMaps: false,\n            format: Constants.TEXTUREFORMAT_RGBA,\n            type: Constants.TEXTURETYPE_HALF_FLOAT,\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            gammaSpace: false,\n            extraInitializationsAsync: async () => {\n                if (isWebGPU) {\n                    await Promise.all([import(\"../ShadersWGSL/iblIcdf.fragment\"), import(\"../ShadersWGSL/iblDominantDirection.fragment\")]);\n                }\n                else {\n                    await Promise.all([import(\"../Shaders/iblIcdf.fragment\"), import(\"../Shaders/iblDominantDirection.fragment\")]);\n                }\n            },\n        };\n        this._cdfyPT = new ProceduralTexture(\"cdfyTexture\", { width: size.width, height: size.height + 1 }, \"iblCdfy\", this._scene, cdfOptions, false, false);\n        this._cdfyPT.autoClear = false;\n        this._cdfyPT.setTexture(\"iblSource\", this._iblSource);\n        this._cdfyPT.setInt(\"iblHeight\", size.height);\n        this._cdfyPT.wrapV = Constants.TEXTURE_CLAMP_ADDRESSMODE;\n        this._cdfyPT.refreshRate = 0;\n        if (this._iblSource.isCube) {\n            this._cdfyPT.defines = \"#define IBL_USE_CUBE_MAP\\n\";\n        }\n        this._cdfxPT = new ProceduralTexture(\"cdfxTexture\", { width: size.width + 1, height: 1 }, \"iblCdfx\", this._scene, cdfOptions, false, false);\n        this._cdfxPT.autoClear = false;\n        this._cdfxPT.setTexture(\"cdfy\", this._cdfyPT);\n        this._cdfxPT.refreshRate = 0;\n        this._cdfxPT.wrapU = Constants.TEXTURE_CLAMP_ADDRESSMODE;\n        this._scaledLuminancePT = new ProceduralTexture(\"iblScaledLuminance\", { width: size.width, height: size.height }, \"iblScaledLuminance\", this._scene, { ...cdfOptions, samplingMode: Constants.TEXTURE_TRILINEAR_SAMPLINGMODE, generateMipMaps: true }, true, false);\n        this._scaledLuminancePT.autoClear = false;\n        this._scaledLuminancePT.setTexture(\"iblSource\", this._iblSource);\n        this._scaledLuminancePT.setInt(\"iblHeight\", size.height);\n        this._scaledLuminancePT.setInt(\"iblWidth\", size.width);\n        this._scaledLuminancePT.refreshRate = 0;\n        if (this._iblSource.isCube) {\n            this._scaledLuminancePT.defines = \"#define IBL_USE_CUBE_MAP\\n\";\n        }\n        this._icdfPT = new ProceduralTexture(\"icdfTexture\", { width: size.width, height: size.height }, \"iblIcdf\", this._scene, icdfOptions, false, false);\n        this._icdfPT.autoClear = false;\n        this._icdfPT.setTexture(\"cdfy\", this._cdfyPT);\n        this._icdfPT.setTexture(\"cdfx\", this._cdfxPT);\n        this._icdfPT.setTexture(\"iblSource\", this._iblSource);\n        this._icdfPT.setTexture(\"scaledLuminanceSampler\", this._scaledLuminancePT);\n        this._icdfPT.refreshRate = 0;\n        this._icdfPT.wrapV = Constants.TEXTURE_CLAMP_ADDRESSMODE;\n        this._icdfPT.wrapU = Constants.TEXTURE_CLAMP_ADDRESSMODE;\n        if (this._iblSource.isCube) {\n            this._icdfPT.defines = \"#define IBL_USE_CUBE_MAP\\n\";\n        }\n        // Once the textures are generated, notify that they are ready to use.\n        this._icdfPT.onGeneratedObservable.addOnce(() => {\n            this.onGeneratedObservable.notifyObservers();\n        });\n        this._dominantDirectionPT = new ProceduralTexture(\"iblDominantDirection\", { width: 1, height: 1 }, \"iblDominantDirection\", this._scene, icdfOptions, false, false);\n        this._dominantDirectionPT.autoClear = false;\n        this._dominantDirectionPT.setTexture(\"icdfSampler\", this._icdfPT);\n        this._dominantDirectionPT.refreshRate = 0;\n        this._dominantDirectionPT.defines = \"#define NUM_SAMPLES 32u\\n\";\n    }\n    _disposeTextures() {\n        this._cdfyPT?.dispose();\n        this._cdfxPT?.dispose();\n        this._icdfPT?.dispose();\n        this._scaledLuminancePT?.dispose();\n        this._dominantDirectionPT?.dispose();\n    }\n    _createDebugPass() {\n        if (this._debugPass) {\n            this._debugPass.dispose();\n        }\n        const isWebGPU = this._engine.isWebGPU;\n        const debugOptions = {\n            width: this._engine.getRenderWidth(),\n            height: this._engine.getRenderHeight(),\n            samplingMode: Texture.BILINEAR_SAMPLINGMODE,\n            engine: this._engine,\n            textureType: Constants.TEXTURETYPE_UNSIGNED_BYTE,\n            uniforms: [\"sizeParams\"],\n            samplers: [\"cdfy\", \"icdf\", \"cdfx\", \"iblSource\"],\n            defines: this._iblSource?.isCube ? \"#define IBL_USE_CUBE_MAP\\n\" : \"\",\n            shaderLanguage: isWebGPU ? 1 /* ShaderLanguage.WGSL */ : 0 /* ShaderLanguage.GLSL */,\n            extraInitializations: (useWebGPU, list) => {\n                if (useWebGPU) {\n                    list.push(import(\"../ShadersWGSL/iblCdfDebug.fragment\"));\n                }\n                else {\n                    list.push(import(\"../Shaders/iblCdfDebug.fragment\"));\n                }\n            },\n        };\n        this._debugPass = new PostProcess(this._debugPassName, \"iblCdfDebug\", debugOptions);\n        const debugEffect = this._debugPass.getEffect();\n        if (debugEffect) {\n            debugEffect.defines = this._iblSource?.isCube ? \"#define IBL_USE_CUBE_MAP\\n\" : \"\";\n        }\n        if (this._iblSource?.isCube) {\n            this._debugPass.updateEffect(\"#define IBL_USE_CUBE_MAP\\n\");\n        }\n        this._debugPass.onApplyObservable.add((effect) => {\n            effect.setTexture(\"cdfy\", this._cdfyPT);\n            effect.setTexture(\"icdf\", this._icdfPT);\n            effect.setTexture(\"cdfx\", this._cdfxPT);\n            effect.setTexture(\"iblSource\", this._iblSource);\n            effect.setFloat4(\"sizeParams\", this._debugSizeParams.x, this._debugSizeParams.y, this._debugSizeParams.z, this._debugSizeParams.w);\n        });\n    }\n    /**\n     * Checks if the CDF renderer is ready\n     * @returns true if the CDF renderer is ready\n     */\n    isReady() {\n        return (this._iblSource &&\n            this._iblSource.name !== \"Placeholder IBL Source\" &&\n            this._iblSource.isReady() &&\n            this._cdfyPT &&\n            this._cdfyPT.isReady() &&\n            this._icdfPT &&\n            this._icdfPT.isReady() &&\n            this._cdfxPT &&\n            this._cdfxPT.isReady() &&\n            this._scaledLuminancePT &&\n            this._scaledLuminancePT.isReady());\n    }\n    /**\n     * Explicitly trigger generation of CDF maps when they are ready to render.\n     * @returns Promise that resolves when the CDF maps are rendered.\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/promise-function-async\n    renderWhenReady() {\n        this._cachedDominantDirection = null;\n        // Once the textures are generated, notify that they are ready to use.\n        this._icdfPT.onGeneratedObservable.addOnce(() => {\n            this.onGeneratedObservable.notifyObservers();\n        });\n        const promises = [];\n        const renderTargets = [this._cdfyPT, this._cdfxPT, this._scaledLuminancePT, this._icdfPT];\n        for (const target of renderTargets) {\n            promises.push(new Promise((resolve) => {\n                if (target.isReady()) {\n                    resolve();\n                }\n                else {\n                    target.getEffect().executeWhenCompiled(() => {\n                        resolve();\n                    });\n                }\n            }));\n        }\n        // eslint-disable-next-line github/no-then\n        return Promise.all(promises).then(() => {\n            for (const target of renderTargets) {\n                target.render();\n            }\n        });\n    }\n    /**\n     * Finds the average direction of the highest intensity areas of the IBL source\n     * @returns Async promise that resolves to the dominant direction of the IBL source\n     */\n    // eslint-disable-next-line @typescript-eslint/promise-function-async\n    findDominantDirection() {\n        if (this._cachedDominantDirection) {\n            return Promise.resolve(this._cachedDominantDirection);\n        }\n        return new Promise((resolve) => {\n            this._dominantDirectionPT.onGeneratedObservable.addOnce(() => {\n                const data = new Float32Array(4);\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\n                this._dominantDirectionPT.readPixels(0, 0, data, true).then(() => {\n                    const dominantDirection = new Vector3(data[0], data[1], data[2]);\n                    this._cachedDominantDirection = dominantDirection;\n                    resolve(dominantDirection);\n                });\n            });\n            if (this.isReady()) {\n                if (this._dominantDirectionPT.isReady()) {\n                    this._dominantDirectionPT.render();\n                }\n                else {\n                    this._dominantDirectionPT.getEffect().executeWhenCompiled(() => {\n                        this._dominantDirectionPT.render();\n                    });\n                }\n            }\n            else {\n                this.onGeneratedObservable.addOnce(() => {\n                    if (this._dominantDirectionPT.isReady()) {\n                        this._dominantDirectionPT.render();\n                    }\n                    else {\n                        this._dominantDirectionPT.getEffect().executeWhenCompiled(() => {\n                            this._dominantDirectionPT.render();\n                        });\n                    }\n                });\n            }\n        });\n    }\n    /**\n     * Disposes the CDF renderer and associated resources\n     */\n    dispose() {\n        this._disposeTextures();\n        this._dummyTexture.dispose();\n        if (this._debugPass) {\n            this._debugPass.dispose();\n        }\n        this.onGeneratedObservable.clear();\n    }\n    static _IsScene(sceneOrEngine) {\n        return sceneOrEngine.getClassName() === \"Scene\";\n    }\n}\n/**\n * @internal\n */\nIblCdfGenerator._SceneComponentInitialization = (_) => {\n    throw _WarnImport(\"IblCdfGeneratorSceneComponentSceneComponent\");\n};\n//# sourceMappingURL=iblCdfGenerator.js.map"],"names":[],"mappings":"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"}