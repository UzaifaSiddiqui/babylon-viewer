{"version":3,"file":"shaderMaterial-DphpxAcG.esm.js","sources":["../../../../../dev/core/dist/Materials/shaderMaterial.js"],"sourcesContent":["import { SerializationHelper } from \"../Misc/decorators.serialization\";\nimport { Scene } from \"../scene\";\nimport { Matrix, Quaternion } from \"../Maths/math.vector\";\nimport { VertexBuffer } from \"../Buffers/buffer\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { RegisterClass } from \"../Misc/typeStore\";\nimport { EffectFallbacks } from \"./effectFallbacks\";\nimport { WebRequest } from \"../Misc/webRequest\";\nimport { PushMaterial } from \"./pushMaterial\";\nimport { EngineStore } from \"../Engines/engineStore\";\nimport { Constants } from \"../Engines/constants\";\nimport { AddClipPlaneUniforms, BindClipPlane, PrepareStringDefinesForClipPlanes } from \"./clipPlaneMaterialHelper\";\nimport { BindBonesParameters, BindFogParameters, BindLogDepth, BindMorphTargetParameters, BindSceneUniformBuffer, PrepareAttributesForBakedVertexAnimation, PrepareDefinesAndAttributesForMorphTargets, PushAttributesForInstances, } from \"./materialHelper.functions\";\nconst OnCreatedEffectParameters = { effect: null, subMesh: null };\n/**\n * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\n *\n * This returned material effects how the mesh will look based on the code in the shaders.\n *\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/shaders/shaderMaterial\n */\nexport class ShaderMaterial extends PushMaterial {\n    /**\n     * Instantiate a new shader material.\n     * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\n     * This returned material effects how the mesh will look based on the code in the shaders.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/shaders/shaderMaterial\n     * @param name Define the name of the material in the scene\n     * @param scene Define the scene the material belongs to\n     * @param shaderPath Defines  the route to the shader code.\n     * @param options Define the options used to create the shader\n     * @param storeEffectOnSubMeshes true to store effect on submeshes, false to store the effect directly in the material class.\n     */\n    constructor(name, scene, shaderPath, options = {}, storeEffectOnSubMeshes = true) {\n        super(name, scene, storeEffectOnSubMeshes);\n        this._textures = {};\n        this._textureArrays = {};\n        this._externalTextures = {};\n        this._floats = {};\n        this._ints = {};\n        this._uints = {};\n        this._floatsArrays = {};\n        this._colors3 = {};\n        this._colors3Arrays = {};\n        this._colors4 = {};\n        this._colors4Arrays = {};\n        this._vectors2 = {};\n        this._vectors3 = {};\n        this._vectors4 = {};\n        this._quaternions = {};\n        this._quaternionsArrays = {};\n        this._matrices = {};\n        this._matrixArrays = {};\n        this._matrices3x3 = {};\n        this._matrices2x2 = {};\n        this._vectors2Arrays = {};\n        this._vectors3Arrays = {};\n        this._vectors4Arrays = {};\n        this._uniformBuffers = {};\n        this._textureSamplers = {};\n        this._storageBuffers = {};\n        this._cachedWorldViewMatrix = new Matrix();\n        this._cachedWorldViewProjectionMatrix = new Matrix();\n        this._multiview = false;\n        /**\n         * @internal\n         */\n        this._materialHelperNeedsPreviousMatrices = false;\n        this._shaderPath = shaderPath;\n        this._options = {\n            needAlphaBlending: false,\n            needAlphaTesting: false,\n            attributes: [\"position\", \"normal\", \"uv\"],\n            uniforms: [\"worldViewProjection\"],\n            uniformBuffers: [],\n            samplers: [],\n            externalTextures: [],\n            samplerObjects: [],\n            storageBuffers: [],\n            defines: [],\n            useClipPlane: false,\n            ...options,\n        };\n    }\n    /**\n     * Gets the shader path used to define the shader code\n     * It can be modified to trigger a new compilation\n     */\n    get shaderPath() {\n        return this._shaderPath;\n    }\n    /**\n     * Sets the shader path used to define the shader code\n     * It can be modified to trigger a new compilation\n     */\n    set shaderPath(shaderPath) {\n        this._shaderPath = shaderPath;\n    }\n    /**\n     * Gets the options used to compile the shader.\n     * They can be modified to trigger a new compilation\n     */\n    get options() {\n        return this._options;\n    }\n    /**\n     * is multiview set to true?\n     */\n    get isMultiview() {\n        return this._multiview;\n    }\n    /**\n     * Gets the current class name of the material e.g. \"ShaderMaterial\"\n     * Mainly use in serialization.\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ShaderMaterial\";\n    }\n    /**\n     * Specifies if the material will require alpha blending\n     * @returns a boolean specifying if alpha blending is needed\n     */\n    needAlphaBlending() {\n        return this.alpha < 1.0 || this._options.needAlphaBlending;\n    }\n    /**\n     * Specifies if this material should be rendered in alpha test mode\n     * @returns a boolean specifying if an alpha test is needed.\n     */\n    needAlphaTesting() {\n        return this._options.needAlphaTesting;\n    }\n    _checkUniform(uniformName) {\n        if (this._options.uniforms.indexOf(uniformName) === -1) {\n            this._options.uniforms.push(uniformName);\n        }\n    }\n    /**\n     * Set a texture in the shader.\n     * @param name Define the name of the uniform samplers as defined in the shader\n     * @param texture Define the texture to bind to this sampler\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setTexture(name, texture) {\n        if (this._options.samplers.indexOf(name) === -1) {\n            this._options.samplers.push(name);\n        }\n        this._textures[name] = texture;\n        return this;\n    }\n    /**\n     * Remove a texture from the material.\n     * @param name Define the name of the texture to remove\n     */\n    removeTexture(name) {\n        delete this._textures[name];\n    }\n    /**\n     * Set a texture array in the shader.\n     * @param name Define the name of the uniform sampler array as defined in the shader\n     * @param textures Define the list of textures to bind to this sampler\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setTextureArray(name, textures) {\n        if (this._options.samplers.indexOf(name) === -1) {\n            this._options.samplers.push(name);\n        }\n        this._checkUniform(name);\n        this._textureArrays[name] = textures;\n        return this;\n    }\n    /**\n     * Set an internal texture in the shader.\n     * @param name Define the name of the uniform samplers as defined in the shader\n     * @param texture Define the texture to bind to this sampler\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setExternalTexture(name, texture) {\n        if (this._options.externalTextures.indexOf(name) === -1) {\n            this._options.externalTextures.push(name);\n        }\n        this._externalTextures[name] = texture;\n        return this;\n    }\n    /**\n     * Set a float in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setFloat(name, value) {\n        this._checkUniform(name);\n        this._floats[name] = value;\n        return this;\n    }\n    /**\n     * Set a int in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setInt(name, value) {\n        this._checkUniform(name);\n        this._ints[name] = value;\n        return this;\n    }\n    /**\n     * Set a unsigned int in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setUInt(name, value) {\n        this._checkUniform(name);\n        this._uints[name] = value;\n        return this;\n    }\n    /**\n     * Set an array of floats in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setFloats(name, value) {\n        this._checkUniform(name);\n        this._floatsArrays[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec3 in the shader from a Color3.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setColor3(name, value) {\n        this._checkUniform(name);\n        this._colors3[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec3 array in the shader from a IColor3Like array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setColor3Array(name, value) {\n        this._checkUniform(name);\n        this._colors3Arrays[name] = value.reduce((arr, color) => {\n            arr.push(color.r, color.g, color.b);\n            return arr;\n        }, []);\n        return this;\n    }\n    /**\n     * Set a vec4 in the shader from a Color4.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setColor4(name, value) {\n        this._checkUniform(name);\n        this._colors4[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec4 array in the shader from a IColor4Like array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setColor4Array(name, value) {\n        this._checkUniform(name);\n        this._colors4Arrays[name] = value.reduce((arr, color) => {\n            arr.push(color.r, color.g, color.b, color.a);\n            return arr;\n        }, []);\n        return this;\n    }\n    /**\n     * Set a vec2 in the shader from a Vector2.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setVector2(name, value) {\n        this._checkUniform(name);\n        this._vectors2[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec3 in the shader from a Vector3.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setVector3(name, value) {\n        this._checkUniform(name);\n        this._vectors3[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec4 in the shader from a Vector4.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setVector4(name, value) {\n        this._checkUniform(name);\n        this._vectors4[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec4 in the shader from a Quaternion.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setQuaternion(name, value) {\n        this._checkUniform(name);\n        this._quaternions[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec4 array in the shader from a Quaternion array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setQuaternionArray(name, value) {\n        this._checkUniform(name);\n        this._quaternionsArrays[name] = value.reduce((arr, quaternion) => {\n            quaternion.toArray(arr, arr.length);\n            return arr;\n        }, []);\n        return this;\n    }\n    /**\n     * Set a mat4 in the shader from a Matrix.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setMatrix(name, value) {\n        this._checkUniform(name);\n        this._matrices[name] = value;\n        return this;\n    }\n    /**\n     * Set a float32Array in the shader from a matrix array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setMatrices(name, value) {\n        this._checkUniform(name);\n        const float32Array = new Float32Array(value.length * 16);\n        for (let index = 0; index < value.length; index++) {\n            const matrix = value[index];\n            matrix.copyToArray(float32Array, index * 16);\n        }\n        this._matrixArrays[name] = float32Array;\n        return this;\n    }\n    /**\n     * Set a mat3 in the shader from a Float32Array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setMatrix3x3(name, value) {\n        this._checkUniform(name);\n        this._matrices3x3[name] = value;\n        return this;\n    }\n    /**\n     * Set a mat2 in the shader from a Float32Array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setMatrix2x2(name, value) {\n        this._checkUniform(name);\n        this._matrices2x2[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec2 array in the shader from a number array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setArray2(name, value) {\n        this._checkUniform(name);\n        this._vectors2Arrays[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec3 array in the shader from a number array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setArray3(name, value) {\n        this._checkUniform(name);\n        this._vectors3Arrays[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec4 array in the shader from a number array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setArray4(name, value) {\n        this._checkUniform(name);\n        this._vectors4Arrays[name] = value;\n        return this;\n    }\n    /**\n     * Set a uniform buffer in the shader\n     * @param name Define the name of the uniform as defined in the shader\n     * @param buffer Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setUniformBuffer(name, buffer) {\n        if (this._options.uniformBuffers.indexOf(name) === -1) {\n            this._options.uniformBuffers.push(name);\n        }\n        this._uniformBuffers[name] = buffer;\n        return this;\n    }\n    /**\n     * Set a texture sampler in the shader\n     * @param name Define the name of the uniform as defined in the shader\n     * @param sampler Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setTextureSampler(name, sampler) {\n        if (this._options.samplerObjects.indexOf(name) === -1) {\n            this._options.samplerObjects.push(name);\n        }\n        this._textureSamplers[name] = sampler;\n        return this;\n    }\n    /**\n     * Set a storage buffer in the shader\n     * @param name Define the name of the storage buffer as defined in the shader\n     * @param buffer Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setStorageBuffer(name, buffer) {\n        if (this._options.storageBuffers.indexOf(name) === -1) {\n            this._options.storageBuffers.push(name);\n        }\n        this._storageBuffers[name] = buffer;\n        return this;\n    }\n    /**\n     * Adds, removes, or replaces the specified shader define and value.\n     * * setDefine(\"MY_DEFINE\", true); // enables a boolean define\n     * * setDefine(\"MY_DEFINE\", \"0.5\"); // adds \"#define MY_DEFINE 0.5\" to the shader (or sets and replaces the value of any existing define with that name)\n     * * setDefine(\"MY_DEFINE\", false); // disables and removes the define\n     * Note if the active defines do change, the shader will be recompiled and this can be expensive.\n     * @param define the define name e.g., \"OUTPUT_TO_SRGB\" or \"#define OUTPUT_TO_SRGB\". If the define was passed into the constructor already, the version used should match that, and in either case, it should not include any appended value.\n     * @param value either the value of the define (e.g. a numerical value) or for booleans, true if the define should be enabled or false if it should be disabled\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setDefine(define, value) {\n        // First remove any existing define with this name.\n        const defineName = define.trimEnd() + \" \";\n        const existingDefineIdx = this.options.defines.findIndex((x) => x === define || x.startsWith(defineName));\n        if (existingDefineIdx >= 0) {\n            this.options.defines.splice(existingDefineIdx, 1);\n        }\n        // Then add the new define value. (If it's a boolean value and false, don't add it.)\n        if (typeof value !== \"boolean\" || value) {\n            this.options.defines.push(defineName + value);\n        }\n        return this;\n    }\n    /**\n     * Specifies that the submesh is ready to be used\n     * @param mesh defines the mesh to check\n     * @param subMesh defines which submesh to check\n     * @param useInstances specifies that instances should be used\n     * @returns a boolean indicating that the submesh is ready or not\n     */\n    isReadyForSubMesh(mesh, subMesh, useInstances) {\n        return this.isReady(mesh, useInstances, subMesh);\n    }\n    /**\n     * Checks if the material is ready to render the requested mesh\n     * @param mesh Define the mesh to render\n     * @param useInstances Define whether or not the material is used with instances\n     * @param subMesh defines which submesh to render\n     * @returns true if ready, otherwise false\n     */\n    isReady(mesh, useInstances, subMesh) {\n        const storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\n        if (this.isFrozen) {\n            const drawWrapper = storeEffectOnSubMeshes ? subMesh._drawWrapper : this._drawWrapper;\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\n                return true;\n            }\n        }\n        const scene = this.getScene();\n        const engine = scene.getEngine();\n        // Instances\n        const defines = [];\n        const attribs = [];\n        let fallbacks = null;\n        let shaderName = this._shaderPath, uniforms = this._options.uniforms, uniformBuffers = this._options.uniformBuffers, samplers = this._options.samplers;\n        // global multiview\n        if (engine.getCaps().multiview && scene.activeCamera && scene.activeCamera.outputRenderTarget && scene.activeCamera.outputRenderTarget.getViewCount() > 1) {\n            this._multiview = true;\n            defines.push(\"#define MULTIVIEW\");\n            if (uniforms.indexOf(\"viewProjection\") !== -1 && uniforms.indexOf(\"viewProjectionR\") === -1) {\n                uniforms.push(\"viewProjectionR\");\n            }\n        }\n        for (let index = 0; index < this._options.defines.length; index++) {\n            const defineToAdd = this._options.defines[index].indexOf(\"#define\") === 0 ? this._options.defines[index] : `#define ${this._options.defines[index]}`;\n            defines.push(defineToAdd);\n        }\n        for (let index = 0; index < this._options.attributes.length; index++) {\n            attribs.push(this._options.attributes[index]);\n        }\n        if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorKind)) {\n            if (attribs.indexOf(VertexBuffer.ColorKind) === -1) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n            defines.push(\"#define VERTEXCOLOR\");\n        }\n        if (useInstances) {\n            defines.push(\"#define INSTANCES\");\n            PushAttributesForInstances(attribs, this._materialHelperNeedsPreviousMatrices);\n            if (mesh?.hasThinInstances) {\n                defines.push(\"#define THIN_INSTANCES\");\n                if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorInstanceKind)) {\n                    attribs.push(VertexBuffer.ColorInstanceKind);\n                    defines.push(\"#define INSTANCESCOLOR\");\n                }\n            }\n        }\n        // Bones\n        if (mesh && mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\n            attribs.push(VertexBuffer.MatricesIndicesKind);\n            attribs.push(VertexBuffer.MatricesWeightsKind);\n            if (mesh.numBoneInfluencers > 4) {\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\n            }\n            const skeleton = mesh.skeleton;\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\n            fallbacks = new EffectFallbacks();\n            fallbacks.addCPUSkinningFallback(0, mesh);\n            if (skeleton.isUsingTextureForMatrices) {\n                defines.push(\"#define BONETEXTURE\");\n                if (uniforms.indexOf(\"boneTextureWidth\") === -1) {\n                    uniforms.push(\"boneTextureWidth\");\n                }\n                if (this._options.samplers.indexOf(\"boneSampler\") === -1) {\n                    this._options.samplers.push(\"boneSampler\");\n                }\n            }\n            else {\n                defines.push(\"#define BonesPerMesh \" + (skeleton.bones.length + 1));\n                if (uniforms.indexOf(\"mBones\") === -1) {\n                    uniforms.push(\"mBones\");\n                }\n            }\n        }\n        else {\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\n        }\n        // Morph\n        let numInfluencers = 0;\n        const manager = mesh ? mesh.morphTargetManager : null;\n        if (manager) {\n            const uv = defines.indexOf(\"#define UV1\") !== -1;\n            const uv2 = defines.indexOf(\"#define UV2\") !== -1;\n            const tangent = defines.indexOf(\"#define TANGENT\") !== -1;\n            const normal = defines.indexOf(\"#define NORMAL\") !== -1;\n            const color = defines.indexOf(\"#define VERTEXCOLOR\") !== -1;\n            numInfluencers = PrepareDefinesAndAttributesForMorphTargets(manager, defines, attribs, mesh, true, // usePositionMorph\n            normal, // useNormalMorph\n            tangent, // useTangentMorph\n            uv, // useUVMorph\n            uv2, // useUV2Morph\n            color // useColorMorph\n            );\n            if (manager.isUsingTextureForTargets) {\n                if (uniforms.indexOf(\"morphTargetTextureIndices\") === -1) {\n                    uniforms.push(\"morphTargetTextureIndices\");\n                }\n                if (this._options.samplers.indexOf(\"morphTargets\") === -1) {\n                    this._options.samplers.push(\"morphTargets\");\n                }\n            }\n            if (numInfluencers > 0) {\n                uniforms = uniforms.slice();\n                uniforms.push(\"morphTargetInfluences\");\n                uniforms.push(\"morphTargetCount\");\n                uniforms.push(\"morphTargetTextureInfo\");\n                uniforms.push(\"morphTargetTextureIndices\");\n            }\n        }\n        else {\n            defines.push(\"#define NUM_MORPH_INFLUENCERS 0\");\n        }\n        // Baked Vertex Animation\n        if (mesh) {\n            const bvaManager = mesh.bakedVertexAnimationManager;\n            if (bvaManager && bvaManager.isEnabled) {\n                defines.push(\"#define BAKED_VERTEX_ANIMATION_TEXTURE\");\n                if (uniforms.indexOf(\"bakedVertexAnimationSettings\") === -1) {\n                    uniforms.push(\"bakedVertexAnimationSettings\");\n                }\n                if (uniforms.indexOf(\"bakedVertexAnimationTextureSizeInverted\") === -1) {\n                    uniforms.push(\"bakedVertexAnimationTextureSizeInverted\");\n                }\n                if (uniforms.indexOf(\"bakedVertexAnimationTime\") === -1) {\n                    uniforms.push(\"bakedVertexAnimationTime\");\n                }\n                if (this._options.samplers.indexOf(\"bakedVertexAnimationTexture\") === -1) {\n                    this._options.samplers.push(\"bakedVertexAnimationTexture\");\n                }\n            }\n            PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\n        }\n        // Textures\n        for (const name in this._textures) {\n            if (!this._textures[name].isReady()) {\n                return false;\n            }\n        }\n        // Alpha test\n        if (mesh && this.needAlphaTestingForMesh(mesh)) {\n            defines.push(\"#define ALPHATEST\");\n        }\n        // Clip planes\n        if (this._options.useClipPlane !== false) {\n            AddClipPlaneUniforms(uniforms);\n            PrepareStringDefinesForClipPlanes(this, scene, defines);\n        }\n        // Fog\n        if (scene.fogEnabled && mesh?.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\n            defines.push(\"#define FOG\");\n            if (uniforms.indexOf(\"view\") === -1) {\n                uniforms.push(\"view\");\n            }\n            if (uniforms.indexOf(\"vFogInfos\") === -1) {\n                uniforms.push(\"vFogInfos\");\n            }\n            if (uniforms.indexOf(\"vFogColor\") === -1) {\n                uniforms.push(\"vFogColor\");\n            }\n        }\n        // Misc\n        if (this._useLogarithmicDepth) {\n            defines.push(\"#define LOGARITHMICDEPTH\");\n            if (uniforms.indexOf(\"logarithmicDepthConstant\") === -1) {\n                uniforms.push(\"logarithmicDepthConstant\");\n            }\n        }\n        if (this.customShaderNameResolve) {\n            uniforms = uniforms.slice();\n            uniformBuffers = uniformBuffers.slice();\n            samplers = samplers.slice();\n            shaderName = this.customShaderNameResolve(this.name, uniforms, uniformBuffers, samplers, defines, attribs);\n        }\n        const drawWrapper = storeEffectOnSubMeshes ? subMesh._getDrawWrapper(undefined, true) : this._drawWrapper;\n        const previousEffect = drawWrapper?.effect ?? null;\n        const previousDefines = drawWrapper?.defines ?? null;\n        const join = defines.join(\"\\n\");\n        let effect = previousEffect;\n        if (previousDefines !== join) {\n            effect = engine.createEffect(shaderName, {\n                attributes: attribs,\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: join,\n                fallbacks: fallbacks,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters: { maxSimultaneousMorphTargets: numInfluencers },\n                shaderLanguage: this._options.shaderLanguage,\n                extraInitializationsAsync: this._options.extraInitializationsAsync,\n            }, engine);\n            if (storeEffectOnSubMeshes) {\n                subMesh.setEffect(effect, join, this._materialContext);\n            }\n            else if (drawWrapper) {\n                drawWrapper.setEffect(effect, join);\n            }\n            if (this._onEffectCreatedObservable) {\n                OnCreatedEffectParameters.effect = effect;\n                OnCreatedEffectParameters.subMesh = subMesh ?? mesh?.subMeshes[0] ?? null;\n                this._onEffectCreatedObservable.notifyObservers(OnCreatedEffectParameters);\n            }\n        }\n        drawWrapper._wasPreviouslyUsingInstances = !!useInstances;\n        if (!effect?.isReady()) {\n            return false;\n        }\n        if (previousEffect !== effect) {\n            scene.resetCachedMaterial();\n        }\n        drawWrapper._wasPreviouslyReady = true;\n        return true;\n    }\n    /**\n     * Binds the world matrix to the material\n     * @param world defines the world transformation matrix\n     * @param effectOverride - If provided, use this effect instead of internal effect\n     */\n    bindOnlyWorldMatrix(world, effectOverride) {\n        const effect = effectOverride ?? this.getEffect();\n        if (!effect) {\n            return;\n        }\n        const uniforms = this._options.uniforms;\n        if (uniforms.indexOf(\"world\") !== -1) {\n            effect.setMatrix(\"world\", world);\n        }\n        const scene = this.getScene();\n        if (uniforms.indexOf(\"worldView\") !== -1) {\n            world.multiplyToRef(scene.getViewMatrix(), this._cachedWorldViewMatrix);\n            effect.setMatrix(\"worldView\", this._cachedWorldViewMatrix);\n        }\n        if (uniforms.indexOf(\"worldViewProjection\") !== -1) {\n            world.multiplyToRef(scene.getTransformMatrix(), this._cachedWorldViewProjectionMatrix);\n            effect.setMatrix(\"worldViewProjection\", this._cachedWorldViewProjectionMatrix);\n        }\n        if (uniforms.indexOf(\"view\") !== -1) {\n            effect.setMatrix(\"view\", scene.getViewMatrix());\n        }\n    }\n    /**\n     * Binds the submesh to this material by preparing the effect and shader to draw\n     * @param world defines the world transformation matrix\n     * @param mesh defines the mesh containing the submesh\n     * @param subMesh defines the submesh to bind the material to\n     */\n    bindForSubMesh(world, mesh, subMesh) {\n        this.bind(world, mesh, subMesh._drawWrapperOverride?.effect, subMesh);\n    }\n    /**\n     * Binds the material to the mesh\n     * @param world defines the world transformation matrix\n     * @param mesh defines the mesh to bind the material to\n     * @param effectOverride - If provided, use this effect instead of internal effect\n     * @param subMesh defines the submesh to bind the material to\n     */\n    bind(world, mesh, effectOverride, subMesh) {\n        // Std values\n        const storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\n        const effect = effectOverride ?? (storeEffectOnSubMeshes ? subMesh.effect : this.getEffect());\n        if (!effect) {\n            return;\n        }\n        const scene = this.getScene();\n        this._activeEffect = effect;\n        this.bindOnlyWorldMatrix(world, effectOverride);\n        const uniformBuffers = this._options.uniformBuffers;\n        let useSceneUBO = false;\n        if (effect && uniformBuffers && uniformBuffers.length > 0 && scene.getEngine().supportsUniformBuffers) {\n            for (let i = 0; i < uniformBuffers.length; ++i) {\n                const bufferName = uniformBuffers[i];\n                switch (bufferName) {\n                    case \"Mesh\":\n                        if (mesh) {\n                            mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n                            mesh.transferToEffect(world);\n                        }\n                        break;\n                    case \"Scene\":\n                        BindSceneUniformBuffer(effect, scene.getSceneUniformBuffer());\n                        scene.finalizeSceneUbo();\n                        useSceneUBO = true;\n                        break;\n                }\n            }\n        }\n        const mustRebind = mesh && storeEffectOnSubMeshes ? this._mustRebind(scene, effect, subMesh, mesh.visibility) : scene.getCachedMaterial() !== this;\n        if (effect && mustRebind) {\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"view\") !== -1) {\n                effect.setMatrix(\"view\", scene.getViewMatrix());\n            }\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"projection\") !== -1) {\n                effect.setMatrix(\"projection\", scene.getProjectionMatrix());\n            }\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"viewProjection\") !== -1) {\n                effect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n                if (this._multiview) {\n                    effect.setMatrix(\"viewProjectionR\", scene._transformMatrixR);\n                }\n            }\n            if (scene.activeCamera && this._options.uniforms.indexOf(\"cameraPosition\") !== -1) {\n                effect.setVector3(\"cameraPosition\", scene.activeCamera.globalPosition);\n            }\n            // Bones\n            BindBonesParameters(mesh, effect);\n            // Clip plane\n            BindClipPlane(effect, this, scene);\n            // Misc\n            if (this._useLogarithmicDepth) {\n                BindLogDepth(storeEffectOnSubMeshes ? subMesh.materialDefines : effect.defines, effect, scene);\n            }\n            // Fog\n            if (mesh) {\n                BindFogParameters(scene, mesh, effect);\n            }\n            let name;\n            // Texture\n            for (name in this._textures) {\n                effect.setTexture(name, this._textures[name]);\n            }\n            // Texture arrays\n            for (name in this._textureArrays) {\n                effect.setTextureArray(name, this._textureArrays[name]);\n            }\n            // Int\n            for (name in this._ints) {\n                effect.setInt(name, this._ints[name]);\n            }\n            // UInt\n            for (name in this._uints) {\n                effect.setUInt(name, this._uints[name]);\n            }\n            // Float\n            for (name in this._floats) {\n                effect.setFloat(name, this._floats[name]);\n            }\n            // Floats\n            for (name in this._floatsArrays) {\n                effect.setArray(name, this._floatsArrays[name]);\n            }\n            // Color3\n            for (name in this._colors3) {\n                effect.setColor3(name, this._colors3[name]);\n            }\n            // Color3Array\n            for (name in this._colors3Arrays) {\n                effect.setArray3(name, this._colors3Arrays[name]);\n            }\n            // Color4\n            for (name in this._colors4) {\n                const color = this._colors4[name];\n                effect.setFloat4(name, color.r, color.g, color.b, color.a);\n            }\n            // Color4Array\n            for (name in this._colors4Arrays) {\n                effect.setArray4(name, this._colors4Arrays[name]);\n            }\n            // Vector2\n            for (name in this._vectors2) {\n                effect.setVector2(name, this._vectors2[name]);\n            }\n            // Vector3\n            for (name in this._vectors3) {\n                effect.setVector3(name, this._vectors3[name]);\n            }\n            // Vector4\n            for (name in this._vectors4) {\n                effect.setVector4(name, this._vectors4[name]);\n            }\n            // Quaternion\n            for (name in this._quaternions) {\n                effect.setQuaternion(name, this._quaternions[name]);\n            }\n            // Matrix\n            for (name in this._matrices) {\n                effect.setMatrix(name, this._matrices[name]);\n            }\n            // MatrixArray\n            for (name in this._matrixArrays) {\n                effect.setMatrices(name, this._matrixArrays[name]);\n            }\n            // Matrix 3x3\n            for (name in this._matrices3x3) {\n                effect.setMatrix3x3(name, this._matrices3x3[name]);\n            }\n            // Matrix 2x2\n            for (name in this._matrices2x2) {\n                effect.setMatrix2x2(name, this._matrices2x2[name]);\n            }\n            // Vector2Array\n            for (name in this._vectors2Arrays) {\n                effect.setArray2(name, this._vectors2Arrays[name]);\n            }\n            // Vector3Array\n            for (name in this._vectors3Arrays) {\n                effect.setArray3(name, this._vectors3Arrays[name]);\n            }\n            // Vector4Array\n            for (name in this._vectors4Arrays) {\n                effect.setArray4(name, this._vectors4Arrays[name]);\n            }\n            // QuaternionArray\n            for (name in this._quaternionsArrays) {\n                effect.setArray4(name, this._quaternionsArrays[name]);\n            }\n            // Uniform buffers\n            for (name in this._uniformBuffers) {\n                const buffer = this._uniformBuffers[name].getBuffer();\n                if (buffer) {\n                    effect.bindUniformBuffer(buffer, name);\n                }\n            }\n            const engineWebGPU = scene.getEngine();\n            // External texture\n            const setExternalTexture = engineWebGPU.setExternalTexture;\n            if (setExternalTexture) {\n                for (name in this._externalTextures) {\n                    setExternalTexture.call(engineWebGPU, name, this._externalTextures[name]);\n                }\n            }\n            // Samplers\n            const setTextureSampler = engineWebGPU.setTextureSampler;\n            if (setTextureSampler) {\n                for (name in this._textureSamplers) {\n                    setTextureSampler.call(engineWebGPU, name, this._textureSamplers[name]);\n                }\n            }\n            // Storage buffers\n            const setStorageBuffer = engineWebGPU.setStorageBuffer;\n            if (setStorageBuffer) {\n                for (name in this._storageBuffers) {\n                    setStorageBuffer.call(engineWebGPU, name, this._storageBuffers[name]);\n                }\n            }\n        }\n        if (effect && mesh && (mustRebind || !this.isFrozen)) {\n            // Morph targets\n            BindMorphTargetParameters(mesh, effect);\n            if (mesh.morphTargetManager && mesh.morphTargetManager.isUsingTextureForTargets) {\n                mesh.morphTargetManager._bind(effect);\n            }\n            const bvaManager = mesh.bakedVertexAnimationManager;\n            if (bvaManager && bvaManager.isEnabled) {\n                const drawWrapper = storeEffectOnSubMeshes ? subMesh._drawWrapper : this._drawWrapper;\n                mesh.bakedVertexAnimationManager?.bind(effect, !!drawWrapper._wasPreviouslyUsingInstances);\n            }\n        }\n        this._afterBind(mesh, effect, subMesh);\n    }\n    /**\n     * Gets the active textures from the material\n     * @returns an array of textures\n     */\n    getActiveTextures() {\n        const activeTextures = super.getActiveTextures();\n        for (const name in this._textures) {\n            activeTextures.push(this._textures[name]);\n        }\n        for (const name in this._textureArrays) {\n            const array = this._textureArrays[name];\n            for (let index = 0; index < array.length; index++) {\n                activeTextures.push(array[index]);\n            }\n        }\n        return activeTextures;\n    }\n    /**\n     * Specifies if the material uses a texture\n     * @param texture defines the texture to check against the material\n     * @returns a boolean specifying if the material uses the texture\n     */\n    hasTexture(texture) {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n        for (const name in this._textures) {\n            if (this._textures[name] === texture) {\n                return true;\n            }\n        }\n        for (const name in this._textureArrays) {\n            const array = this._textureArrays[name];\n            for (let index = 0; index < array.length; index++) {\n                if (array[index] === texture) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Makes a duplicate of the material, and gives it a new name\n     * @param name defines the new name for the duplicated material\n     * @returns the cloned material\n     */\n    clone(name) {\n        const result = SerializationHelper.Clone(() => new ShaderMaterial(name, this.getScene(), this._shaderPath, this._options, this._storeEffectOnSubMeshes), this);\n        result.name = name;\n        result.id = name;\n        // Shader code path\n        if (typeof result._shaderPath === \"object\") {\n            result._shaderPath = { ...result._shaderPath };\n        }\n        // Options\n        this._options = { ...this._options };\n        const keys = Object.keys(this._options);\n        for (const propName of keys) {\n            const propValue = this._options[propName];\n            if (Array.isArray(propValue)) {\n                this._options[propName] = propValue.slice(0);\n            }\n        }\n        // Stencil\n        this.stencil.copyTo(result.stencil);\n        // Texture\n        for (const key in this._textures) {\n            result.setTexture(key, this._textures[key]);\n        }\n        // TextureArray\n        for (const key in this._textureArrays) {\n            result.setTextureArray(key, this._textureArrays[key]);\n        }\n        // External texture\n        for (const key in this._externalTextures) {\n            result.setExternalTexture(key, this._externalTextures[key]);\n        }\n        // Int\n        for (const key in this._ints) {\n            result.setInt(key, this._ints[key]);\n        }\n        // UInt\n        for (const key in this._uints) {\n            result.setUInt(key, this._uints[key]);\n        }\n        // Float\n        for (const key in this._floats) {\n            result.setFloat(key, this._floats[key]);\n        }\n        // Floats\n        for (const key in this._floatsArrays) {\n            result.setFloats(key, this._floatsArrays[key]);\n        }\n        // Color3\n        for (const key in this._colors3) {\n            result.setColor3(key, this._colors3[key]);\n        }\n        // Color3Array\n        for (const key in this._colors3Arrays) {\n            result._colors3Arrays[key] = this._colors3Arrays[key];\n        }\n        // Color4\n        for (const key in this._colors4) {\n            result.setColor4(key, this._colors4[key]);\n        }\n        // Color4Array\n        for (const key in this._colors4Arrays) {\n            result._colors4Arrays[key] = this._colors4Arrays[key];\n        }\n        // Vector2\n        for (const key in this._vectors2) {\n            result.setVector2(key, this._vectors2[key]);\n        }\n        // Vector3\n        for (const key in this._vectors3) {\n            result.setVector3(key, this._vectors3[key]);\n        }\n        // Vector4\n        for (const key in this._vectors4) {\n            result.setVector4(key, this._vectors4[key]);\n        }\n        // Quaternion\n        for (const key in this._quaternions) {\n            result.setQuaternion(key, this._quaternions[key]);\n        }\n        // QuaternionArray\n        for (const key in this._quaternionsArrays) {\n            result._quaternionsArrays[key] = this._quaternionsArrays[key];\n        }\n        // Matrix\n        for (const key in this._matrices) {\n            result.setMatrix(key, this._matrices[key]);\n        }\n        // MatrixArray\n        for (const key in this._matrixArrays) {\n            result._matrixArrays[key] = this._matrixArrays[key].slice();\n        }\n        // Matrix 3x3\n        for (const key in this._matrices3x3) {\n            result.setMatrix3x3(key, this._matrices3x3[key]);\n        }\n        // Matrix 2x2\n        for (const key in this._matrices2x2) {\n            result.setMatrix2x2(key, this._matrices2x2[key]);\n        }\n        // Vector2Array\n        for (const key in this._vectors2Arrays) {\n            result.setArray2(key, this._vectors2Arrays[key]);\n        }\n        // Vector3Array\n        for (const key in this._vectors3Arrays) {\n            result.setArray3(key, this._vectors3Arrays[key]);\n        }\n        // Vector4Array\n        for (const key in this._vectors4Arrays) {\n            result.setArray4(key, this._vectors4Arrays[key]);\n        }\n        // Uniform buffers\n        for (const key in this._uniformBuffers) {\n            result.setUniformBuffer(key, this._uniformBuffers[key]);\n        }\n        // Samplers\n        for (const key in this._textureSamplers) {\n            result.setTextureSampler(key, this._textureSamplers[key]);\n        }\n        // Storag buffers\n        for (const key in this._storageBuffers) {\n            result.setStorageBuffer(key, this._storageBuffers[key]);\n        }\n        return result;\n    }\n    /**\n     * Disposes the material\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\n     * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\n     */\n    dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh) {\n        if (forceDisposeTextures) {\n            let name;\n            for (name in this._textures) {\n                this._textures[name].dispose();\n            }\n            for (name in this._textureArrays) {\n                const array = this._textureArrays[name];\n                for (let index = 0; index < array.length; index++) {\n                    array[index].dispose();\n                }\n            }\n        }\n        this._textures = {};\n        super.dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh);\n    }\n    /**\n     * Serializes this material in a JSON representation\n     * @returns the serialized material object\n     */\n    serialize() {\n        const serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"BABYLON.ShaderMaterial\";\n        serializationObject.uniqueId = this.uniqueId;\n        serializationObject.options = this._options;\n        serializationObject.shaderPath = this._shaderPath;\n        serializationObject.storeEffectOnSubMeshes = this._storeEffectOnSubMeshes;\n        let name;\n        // Stencil\n        serializationObject.stencil = this.stencil.serialize();\n        // Texture\n        serializationObject.textures = {};\n        for (name in this._textures) {\n            serializationObject.textures[name] = this._textures[name].serialize();\n        }\n        // Texture arrays\n        serializationObject.textureArrays = {};\n        for (name in this._textureArrays) {\n            serializationObject.textureArrays[name] = [];\n            const array = this._textureArrays[name];\n            for (let index = 0; index < array.length; index++) {\n                serializationObject.textureArrays[name].push(array[index].serialize());\n            }\n        }\n        // Int\n        serializationObject.ints = {};\n        for (name in this._ints) {\n            serializationObject.ints[name] = this._ints[name];\n        }\n        // UInt\n        serializationObject.uints = {};\n        for (name in this._uints) {\n            serializationObject.uints[name] = this._uints[name];\n        }\n        // Float\n        serializationObject.floats = {};\n        for (name in this._floats) {\n            serializationObject.floats[name] = this._floats[name];\n        }\n        // Floats\n        serializationObject.floatsArrays = {};\n        for (name in this._floatsArrays) {\n            serializationObject.floatsArrays[name] = this._floatsArrays[name];\n        }\n        // Color3\n        serializationObject.colors3 = {};\n        for (name in this._colors3) {\n            const color3 = this._colors3[name];\n            serializationObject.colors3[name] = [color3.r, color3.g, color3.b];\n        }\n        // Color3 array\n        serializationObject.colors3Arrays = {};\n        for (name in this._colors3Arrays) {\n            serializationObject.colors3Arrays[name] = this._colors3Arrays[name];\n        }\n        // Color4\n        serializationObject.colors4 = {};\n        for (name in this._colors4) {\n            const color4 = this._colors4[name];\n            serializationObject.colors4[name] = [color4.r, color4.g, color4.b, color4.a];\n        }\n        // Color4 array\n        serializationObject.colors4Arrays = {};\n        for (name in this._colors4Arrays) {\n            serializationObject.colors4Arrays[name] = this._colors4Arrays[name];\n        }\n        // Vector2\n        serializationObject.vectors2 = {};\n        for (name in this._vectors2) {\n            const v2 = this._vectors2[name];\n            serializationObject.vectors2[name] = [v2.x, v2.y];\n        }\n        // Vector3\n        serializationObject.vectors3 = {};\n        for (name in this._vectors3) {\n            const v3 = this._vectors3[name];\n            serializationObject.vectors3[name] = [v3.x, v3.y, v3.z];\n        }\n        // Vector4\n        serializationObject.vectors4 = {};\n        for (name in this._vectors4) {\n            const v4 = this._vectors4[name];\n            serializationObject.vectors4[name] = [v4.x, v4.y, v4.z, v4.w];\n        }\n        // Quaternion\n        serializationObject.quaternions = {};\n        for (name in this._quaternions) {\n            serializationObject.quaternions[name] = this._quaternions[name].asArray();\n        }\n        // Matrix\n        serializationObject.matrices = {};\n        for (name in this._matrices) {\n            serializationObject.matrices[name] = this._matrices[name].asArray();\n        }\n        // MatrixArray\n        serializationObject.matrixArray = {};\n        for (name in this._matrixArrays) {\n            serializationObject.matrixArray[name] = this._matrixArrays[name];\n        }\n        // Matrix 3x3\n        serializationObject.matrices3x3 = {};\n        for (name in this._matrices3x3) {\n            serializationObject.matrices3x3[name] = this._matrices3x3[name];\n        }\n        // Matrix 2x2\n        serializationObject.matrices2x2 = {};\n        for (name in this._matrices2x2) {\n            serializationObject.matrices2x2[name] = this._matrices2x2[name];\n        }\n        // Vector2Array\n        serializationObject.vectors2Arrays = {};\n        for (name in this._vectors2Arrays) {\n            serializationObject.vectors2Arrays[name] = this._vectors2Arrays[name];\n        }\n        // Vector3Array\n        serializationObject.vectors3Arrays = {};\n        for (name in this._vectors3Arrays) {\n            serializationObject.vectors3Arrays[name] = this._vectors3Arrays[name];\n        }\n        // Vector4Array\n        serializationObject.vectors4Arrays = {};\n        for (name in this._vectors4Arrays) {\n            serializationObject.vectors4Arrays[name] = this._vectors4Arrays[name];\n        }\n        // QuaternionArray\n        serializationObject.quaternionsArrays = {};\n        for (name in this._quaternionsArrays) {\n            serializationObject.quaternionsArrays[name] = this._quaternionsArrays[name];\n        }\n        return serializationObject;\n    }\n    /**\n     * Creates a shader material from parsed shader material data\n     * @param source defines the JSON representation of the material\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a new material\n     */\n    static Parse(source, scene, rootUrl) {\n        const material = SerializationHelper.Parse(() => new ShaderMaterial(source.name, scene, source.shaderPath, source.options, source.storeEffectOnSubMeshes), source, scene, rootUrl);\n        let name;\n        // Stencil\n        if (source.stencil) {\n            material.stencil.parse(source.stencil, scene, rootUrl);\n        }\n        // Texture\n        for (name in source.textures) {\n            material.setTexture(name, Texture.Parse(source.textures[name], scene, rootUrl));\n        }\n        // Texture arrays\n        for (name in source.textureArrays) {\n            const array = source.textureArrays[name];\n            const textureArray = [];\n            for (let index = 0; index < array.length; index++) {\n                textureArray.push(Texture.Parse(array[index], scene, rootUrl));\n            }\n            material.setTextureArray(name, textureArray);\n        }\n        // Int\n        for (name in source.ints) {\n            material.setInt(name, source.ints[name]);\n        }\n        // UInt\n        for (name in source.uints) {\n            material.setUInt(name, source.uints[name]);\n        }\n        // Float\n        for (name in source.floats) {\n            material.setFloat(name, source.floats[name]);\n        }\n        // Floats\n        for (name in source.floatsArrays) {\n            material.setFloats(name, source.floatsArrays[name]);\n        }\n        // Color3\n        for (name in source.colors3) {\n            const color = source.colors3[name];\n            material.setColor3(name, { r: color[0], g: color[1], b: color[2] });\n        }\n        // Color3 arrays\n        for (name in source.colors3Arrays) {\n            const colors = source.colors3Arrays[name]\n                .reduce((arr, num, i) => {\n                if (i % 3 === 0) {\n                    arr.push([num]);\n                }\n                else {\n                    arr[arr.length - 1].push(num);\n                }\n                return arr;\n            }, [])\n                .map((color) => ({ r: color[0], g: color[1], b: color[2] }));\n            material.setColor3Array(name, colors);\n        }\n        // Color4\n        for (name in source.colors4) {\n            const color = source.colors4[name];\n            material.setColor4(name, { r: color[0], g: color[1], b: color[2], a: color[3] });\n        }\n        // Color4 arrays\n        for (name in source.colors4Arrays) {\n            const colors = source.colors4Arrays[name]\n                .reduce((arr, num, i) => {\n                if (i % 4 === 0) {\n                    arr.push([num]);\n                }\n                else {\n                    arr[arr.length - 1].push(num);\n                }\n                return arr;\n            }, [])\n                .map((color) => ({ r: color[0], g: color[1], b: color[2], a: color[3] }));\n            material.setColor4Array(name, colors);\n        }\n        // Vector2\n        for (name in source.vectors2) {\n            const vector = source.vectors2[name];\n            material.setVector2(name, { x: vector[0], y: vector[1] });\n        }\n        // Vector3\n        for (name in source.vectors3) {\n            const vector = source.vectors3[name];\n            material.setVector3(name, { x: vector[0], y: vector[1], z: vector[2] });\n        }\n        // Vector4\n        for (name in source.vectors4) {\n            const vector = source.vectors4[name];\n            material.setVector4(name, { x: vector[0], y: vector[1], z: vector[2], w: vector[3] });\n        }\n        // Quaternion\n        for (name in source.quaternions) {\n            material.setQuaternion(name, Quaternion.FromArray(source.quaternions[name]));\n        }\n        // Matrix\n        for (name in source.matrices) {\n            material.setMatrix(name, Matrix.FromArray(source.matrices[name]));\n        }\n        // MatrixArray\n        for (name in source.matrixArray) {\n            material._matrixArrays[name] = new Float32Array(source.matrixArray[name]);\n        }\n        // Matrix 3x3\n        for (name in source.matrices3x3) {\n            material.setMatrix3x3(name, source.matrices3x3[name]);\n        }\n        // Matrix 2x2\n        for (name in source.matrices2x2) {\n            material.setMatrix2x2(name, source.matrices2x2[name]);\n        }\n        // Vector2Array\n        for (name in source.vectors2Arrays) {\n            material.setArray2(name, source.vectors2Arrays[name]);\n        }\n        // Vector3Array\n        for (name in source.vectors3Arrays) {\n            material.setArray3(name, source.vectors3Arrays[name]);\n        }\n        // Vector4Array\n        for (name in source.vectors4Arrays) {\n            material.setArray4(name, source.vectors4Arrays[name]);\n        }\n        // QuaternionArray\n        for (name in source.quaternionsArrays) {\n            material.setArray4(name, source.quaternionsArrays[name]);\n        }\n        return material;\n    }\n    /**\n     * Creates a new ShaderMaterial from a snippet saved in a remote file\n     * @param name defines the name of the ShaderMaterial to create (can be null or empty to use the one from the json data)\n     * @param url defines the url to load from\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a promise that will resolve to the new ShaderMaterial\n     */\n    static async ParseFromFileAsync(name, url, scene, rootUrl = \"\") {\n        return await new Promise((resolve, reject) => {\n            const request = new WebRequest();\n            request.addEventListener(\"readystatechange\", () => {\n                if (request.readyState == 4) {\n                    if (request.status == 200) {\n                        const serializationObject = JSON.parse(request.responseText);\n                        const output = this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\n                        if (name) {\n                            output.name = name;\n                        }\n                        resolve(output);\n                    }\n                    else {\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                        reject(\"Unable to load the ShaderMaterial\");\n                    }\n                }\n            });\n            request.open(\"GET\", url);\n            request.send();\n        });\n    }\n    /**\n     * Creates a ShaderMaterial from a snippet saved by the Inspector\n     * @param snippetId defines the snippet to load\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a promise that will resolve to the new ShaderMaterial\n     */\n    static async ParseFromSnippetAsync(snippetId, scene, rootUrl = \"\") {\n        return await new Promise((resolve, reject) => {\n            const request = new WebRequest();\n            request.addEventListener(\"readystatechange\", () => {\n                if (request.readyState == 4) {\n                    if (request.status == 200) {\n                        const snippet = JSON.parse(JSON.parse(request.responseText).jsonPayload);\n                        const serializationObject = JSON.parse(snippet.shaderMaterial);\n                        const output = this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\n                        output.snippetId = snippetId;\n                        resolve(output);\n                    }\n                    else {\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                        reject(\"Unable to load the snippet \" + snippetId);\n                    }\n                }\n            });\n            request.open(\"GET\", this.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"));\n            request.send();\n        });\n    }\n}\n/** Define the Url to load snippets */\nShaderMaterial.SnippetUrl = Constants.SnippetUrl;\n/**\n * Creates a ShaderMaterial from a snippet saved by the Inspector\n * @deprecated Please use ParseFromSnippetAsync instead\n * @param snippetId defines the snippet to load\n * @param scene defines the hosting scene\n * @param rootUrl defines the root URL to use to load textures and relative dependencies\n * @returns a promise that will resolve to the new ShaderMaterial\n */\nShaderMaterial.CreateFromSnippetAsync = ShaderMaterial.ParseFromSnippetAsync;\nRegisterClass(\"BABYLON.ShaderMaterial\", ShaderMaterial);\n//# sourceMappingURL=shaderMaterial.js.map"],"names":[],"mappings":"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"}