import{S as e}from"./index-VvGulz6u.esm.min.js";import"./helperFunctions-DSBzZxDv.esm.min.js";const r="iblScaledLuminancePixelShader",n="#include<helperFunctions>\n#ifdef IBL_USE_CUBE_MAP\nvar iblSourceSampler: sampler;var iblSource: texture_cube<f32>;\n#else\nvar iblSourceSampler: sampler;var iblSource: texture_2d<f32>;\n#endif\nuniform iblHeight: i32;uniform iblWidth: i32;fn fetchLuminance(coords: vec2f)->f32 {\n#ifdef IBL_USE_CUBE_MAP\nvar direction: vec3f=equirectangularToCubemapDirection(coords);var color: vec3f=textureSampleLevel(iblSource,iblSourceSampler,direction,0.0).rgb;\n#else\nvar color: vec3f=textureSampleLevel(iblSource,iblSourceSampler,coords,0.0).rgb;\n#endif\nreturn dot(color,LuminanceEncodeApprox);}\n@fragment\nfn main(input: FragmentInputs)->FragmentOutputs {var deform: f32=sin(input.vUV.y*PI);var luminance: f32=fetchLuminance(input.vUV);fragmentOutputs.color=vec4f(vec3f(deform*luminance),1.0);}";e.ShadersStoreWGSL[r]||(e.ShadersStoreWGSL[r]=n);const i={name:r,shader:n};export{i as iblScaledLuminancePixelShaderWGSL};
//# sourceMappingURL=iblScaledLuminance.fragment-L26cnxwX.esm.min.js.map
