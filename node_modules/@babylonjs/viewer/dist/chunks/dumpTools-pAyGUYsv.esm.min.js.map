{"version":3,"file":"dumpTools-pAyGUYsv.esm.min.js","sources":["../../../../../dev/core/dist/Misc/dumpTools.js"],"sourcesContent":["import { Constants } from \"../Engines/constants\";\nimport { EffectRenderer, EffectWrapper } from \"../Materials/effectRenderer\";\nimport { Tools } from \"./tools\";\nimport { Clamp } from \"../Maths/math.scalar.functions\";\nimport { EngineStore } from \"../Engines/engineStore\";\nlet DumpToolsEngine;\nlet EnginePromise = null;\nasync function _CreateDumpRendererAsync() {\n    if (!EnginePromise) {\n        EnginePromise = new Promise((resolve, reject) => {\n            let canvas;\n            let engine = null;\n            const options = {\n                preserveDrawingBuffer: true,\n                depth: false,\n                stencil: false,\n                alpha: true,\n                premultipliedAlpha: false,\n                antialias: false,\n                failIfMajorPerformanceCaveat: false,\n            };\n            import(\"../Engines/thinEngine\")\n                // eslint-disable-next-line github/no-then\n                .then(({ ThinEngine: thinEngineClass }) => {\n                const engineInstanceCount = EngineStore.Instances.length;\n                try {\n                    canvas = new OffscreenCanvas(100, 100); // will be resized later\n                    engine = new thinEngineClass(canvas, false, options);\n                }\n                catch (e) {\n                    if (engineInstanceCount < EngineStore.Instances.length) {\n                        // The engine was created by another instance, let's use it\n                        EngineStore.Instances.pop()?.dispose();\n                    }\n                    // The browser either does not support OffscreenCanvas or WebGL context in OffscreenCanvas, fallback on a regular canvas\n                    canvas = document.createElement(\"canvas\");\n                    engine = new thinEngineClass(canvas, false, options);\n                }\n                // remove this engine from the list of instances to avoid using it for other purposes\n                EngineStore.Instances.pop();\n                // However, make sure to dispose it when no other engines are left\n                EngineStore.OnEnginesDisposedObservable.add((e) => {\n                    // guaranteed to run when no other instances are left\n                    // only dispose if it's not the current engine\n                    if (engine && e !== engine && !engine.isDisposed && EngineStore.Instances.length === 0) {\n                        // Dump the engine and the associated resources\n                        Dispose();\n                    }\n                });\n                engine.getCaps().parallelShaderCompile = undefined;\n                const renderer = new EffectRenderer(engine);\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\n                import(\"../Shaders/pass.fragment\").then(({ passPixelShader }) => {\n                    if (!engine) {\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                        reject(\"Engine is not defined\");\n                        return;\n                    }\n                    const wrapper = new EffectWrapper({\n                        engine,\n                        name: passPixelShader.name,\n                        fragmentShader: passPixelShader.shader,\n                        samplerNames: [\"textureSampler\"],\n                    });\n                    DumpToolsEngine = {\n                        canvas,\n                        engine,\n                        renderer,\n                        wrapper,\n                    };\n                    resolve(DumpToolsEngine);\n                });\n            })\n                // eslint-disable-next-line github/no-then\n                .catch(reject);\n        });\n    }\n    return await EnginePromise;\n}\n/**\n * Dumps the current bound framebuffer\n * @param width defines the rendering width\n * @param height defines the rendering height\n * @param engine defines the hosting engine\n * @param successCallback defines the callback triggered once the data are available\n * @param mimeType defines the mime type of the result\n * @param fileName defines the filename to download. If present, the result will automatically be downloaded\n * @param quality The quality of the image if lossy mimeType is used (e.g. image/jpeg, image/webp). See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob | HTMLCanvasElement.toBlob()}'s `quality` parameter.\n * @returns a void promise\n */\n// Should have \"Async\" in the name but this is a public API and we can't break it now\n// eslint-disable-next-line no-restricted-syntax\nexport async function DumpFramebuffer(width, height, engine, successCallback, mimeType = \"image/png\", fileName, quality) {\n    // Read the contents of the framebuffer\n    const bufferView = await engine.readPixels(0, 0, width, height);\n    const data = new Uint8Array(bufferView.buffer);\n    DumpData(width, height, data, successCallback, mimeType, fileName, true, undefined, quality);\n}\n/**\n * Dumps an array buffer\n * @param width defines the rendering width\n * @param height defines the rendering height\n * @param data the data array\n * @param mimeType defines the mime type of the result\n * @param fileName defines the filename to download. If present, the result will automatically be downloaded\n * @param invertY true to invert the picture in the Y dimension\n * @param toArrayBuffer true to convert the data to an ArrayBuffer (encoded as `mimeType`) instead of a base64 string\n * @param quality The quality of the image if lossy mimeType is used (e.g. image/jpeg, image/webp). See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob | HTMLCanvasElement.toBlob()}'s `quality` parameter.\n * @returns a promise that resolve to the final data\n */\nexport async function DumpDataAsync(width, height, data, mimeType = \"image/png\", fileName, invertY = false, toArrayBuffer = false, quality) {\n    return await new Promise((resolve) => {\n        DumpData(width, height, data, (result) => resolve(result), mimeType, fileName, invertY, toArrayBuffer, quality);\n    });\n}\n/**\n * Dumps an array buffer\n * @param width defines the rendering width\n * @param height defines the rendering height\n * @param data the data array\n * @param successCallback defines the callback triggered once the data are available\n * @param mimeType defines the mime type of the result\n * @param fileName defines the filename to download. If present, the result will automatically be downloaded\n * @param invertY true to invert the picture in the Y dimension\n * @param toArrayBuffer true to convert the data to an ArrayBuffer (encoded as `mimeType`) instead of a base64 string\n * @param quality The quality of the image if lossy mimeType is used (e.g. image/jpeg, image/webp). See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob | HTMLCanvasElement.toBlob()}'s `quality` parameter.\n */\nexport function DumpData(width, height, data, successCallback, mimeType = \"image/png\", fileName, invertY = false, toArrayBuffer = false, quality) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\n    _CreateDumpRendererAsync().then((renderer) => {\n        renderer.engine.setSize(width, height, true);\n        // Convert if data are float32\n        if (data instanceof Float32Array) {\n            const data2 = new Uint8Array(data.length);\n            let n = data.length;\n            while (n--) {\n                const v = data[n];\n                data2[n] = Math.round(Clamp(v) * 255);\n            }\n            data = data2;\n        }\n        // Create the image\n        const texture = renderer.engine.createRawTexture(data, width, height, Constants.TEXTUREFORMAT_RGBA, false, !invertY, Constants.TEXTURE_NEAREST_NEAREST);\n        renderer.renderer.setViewport();\n        renderer.renderer.applyEffectWrapper(renderer.wrapper);\n        renderer.wrapper.effect._bindTexture(\"textureSampler\", texture);\n        renderer.renderer.draw();\n        if (toArrayBuffer) {\n            Tools.ToBlob(renderer.canvas, (blob) => {\n                const fileReader = new FileReader();\n                fileReader.onload = (event) => {\n                    const arrayBuffer = event.target.result;\n                    if (successCallback) {\n                        successCallback(arrayBuffer);\n                    }\n                };\n                fileReader.readAsArrayBuffer(blob);\n            }, mimeType, quality);\n        }\n        else {\n            Tools.EncodeScreenshotCanvasData(renderer.canvas, successCallback, mimeType, fileName, quality);\n        }\n        texture.dispose();\n    });\n}\n/**\n * Dispose the dump tools associated resources\n */\nexport function Dispose() {\n    if (DumpToolsEngine) {\n        DumpToolsEngine.wrapper.dispose();\n        DumpToolsEngine.renderer.dispose();\n        DumpToolsEngine.engine.dispose();\n    }\n    else {\n        // in cases where the engine is not yet created, we need to wait for it to dispose it\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\n        EnginePromise?.then((dumpToolsEngine) => {\n            dumpToolsEngine.wrapper.dispose();\n            dumpToolsEngine.renderer.dispose();\n            dumpToolsEngine.engine.dispose();\n        });\n    }\n    EnginePromise = null;\n    DumpToolsEngine = null;\n}\n/**\n * Object containing a set of static utilities functions to dump data from a canvas\n * @deprecated use functions\n */\nexport const DumpTools = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    DumpData,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    DumpDataAsync,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    DumpFramebuffer,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Dispose,\n};\n/**\n * This will be executed automatically for UMD and es5.\n * If esm dev wants the side effects to execute they will have to run it manually\n * Once we build native modules those need to be exported.\n * @internal\n */\nconst InitSideEffects = () => {\n    // References the dependencies.\n    Tools.DumpData = DumpData;\n    Tools.DumpDataAsync = DumpDataAsync;\n    Tools.DumpFramebuffer = DumpFramebuffer;\n};\nInitSideEffects();\n//# sourceMappingURL=dumpTools.js.map"],"names":["DumpToolsEngine","EnginePromise","async","DumpFramebuffer","width","height","engine","successCallback","mimeType","fileName","quality","bufferView","readPixels","DumpData","Uint8Array","buffer","undefined","DumpDataAsync","data","invertY","toArrayBuffer","Promise","resolve","result","reject","canvas","options","preserveDrawingBuffer","depth","stencil","alpha","premultipliedAlpha","antialias","failIfMajorPerformanceCaveat","import","then","n","cj","ThinEngine","thinEngineClass","engineInstanceCount","EngineStore","Instances","length","OffscreenCanvas","e","pop","dispose","document","createElement","OnEnginesDisposedObservable","add","isDisposed","Dispose","getCaps","parallelShaderCompile","renderer","EffectRenderer","passPixelShader","wrapper","EffectWrapper","name","fragmentShader","shader","samplerNames","catch","_CreateDumpRendererAsync","setSize","Float32Array","data2","v","Math","round","Clamp","texture","createRawTexture","Constants","TEXTUREFORMAT_RGBA","TEXTURE_NEAREST_NEAREST","setViewport","applyEffectWrapper","effect","_bindTexture","draw","Tools","ToBlob","blob","fileReader","FileReader","onload","event","arrayBuffer","target","readAsArrayBuffer","EncodeScreenshotCanvasData","dumpToolsEngine","DumpTools"],"mappings":"oFAKA,IAAIA,EACAC,EAAgB,KAsFbC,eAAeC,EAAgBC,EAAOC,EAAQC,EAAQC,EAAiBC,EAAW,YAAaC,EAAUC,GAE5G,MAAMC,QAAmBL,EAAOM,WAAW,EAAG,EAAGR,EAAOC,GAExDQ,EAAST,EAAOC,EADH,IAAIS,WAAWH,EAAWI,QACTR,EAAiBC,EAAUC,GAAU,OAAMO,EAAWN,EACxF,CAaOR,eAAee,EAAcb,EAAOC,EAAQa,EAAMV,EAAW,YAAaC,EAAUU,GAAU,EAAOC,GAAgB,EAAOV,GAC/H,aAAa,IAAIW,SAASC,IACtBT,EAAST,EAAOC,EAAQa,GAAOK,GAAWD,EAAQC,IAASf,EAAUC,EAAUU,EAASC,EAAeV,KAE/G,CAaO,SAASG,EAAST,EAAOC,EAAQa,EAAMX,EAAiBC,EAAW,YAAaC,EAAUU,GAAU,EAAOC,GAAgB,EAAOV,IAxHzIR,iBAsEI,OArEKD,IACDA,EAAgB,IAAIoB,SAAQ,CAACC,EAASE,KAClC,IAAIC,EACAnB,EAAS,KACb,MAAMoB,EAAU,CACZC,uBAAuB,EACvBC,OAAO,EACPC,SAAS,EACTC,OAAO,EACPC,oBAAoB,EACpBC,WAAW,EACXC,8BAA8B,GAElCC,OAAO,+BAAuBC,MAAA,SAAAC,GAAA,OAAAA,EAAAC,EAAA,IAEzBF,MAAK,EAAGG,WAAYC,MACrB,MAAMC,EAAsBC,EAAYC,UAAUC,OAClD,IACIlB,EAAS,IAAImB,gBAAgB,IAAK,KAClCtC,EAAS,IAAIiC,EAAgBd,GAAQ,EAAOC,EAChE,CACgB,MAAOmB,GACCL,EAAsBC,EAAYC,UAAUC,QAE5CF,EAAYC,UAAUI,OAAOC,UAGjCtB,EAASuB,SAASC,cAAc,UAChC3C,EAAS,IAAIiC,EAAgBd,GAAQ,EAAOC,EAChE,CAEgBe,EAAYC,UAAUI,MAEtBL,EAAYS,4BAA4BC,KAAKN,IAGrCvC,GAAUuC,IAAMvC,IAAWA,EAAO8C,YAA+C,IAAjCX,EAAYC,UAAUC,QAEtEU,OAGR/C,EAAOgD,UAAUC,2BAAwBvC,EACzC,MAAMwC,EAAW,IAAIC,EAAenD,GAEpC4B,OAAO,uCAA4BC,MAAK,EAAGuB,sBACvC,IAAKpD,EAGD,YADAkB,EAAO,yBAGX,MAAMmC,EAAU,IAAIC,EAAc,CAC9BtD,SACAuD,KAAMH,EAAgBG,KACtBC,eAAgBJ,EAAgBK,OAChCC,aAAc,CAAC,oBAEnBhE,EAAkB,CACdyB,SACAnB,SACAkD,WACAG,WAEJrC,EAAQtB,SAIXiE,MAAMzC,aAGNvB,CACjB,EAmDIiE,GAA2B/B,MAAMqB,IAG7B,GAFAA,EAASlD,OAAO6D,QAAQ/D,EAAOC,GAAQ,GAEnCa,aAAgBkD,aAAc,CAC9B,MAAMC,EAAQ,IAAIvD,WAAWI,EAAKyB,QAClC,IAAIP,EAAIlB,EAAKyB,OACb,KAAOP,KAAK,CACR,MAAMkC,EAAIpD,EAAKkB,GACfiC,EAAMjC,GAAKmC,KAAKC,MAAiB,IAAXC,EAAMH,GAC5C,CACYpD,EAAOmD,CACnB,CAEQ,MAAMK,EAAUlB,EAASlD,OAAOqE,iBAAiBzD,EAAMd,EAAOC,EAAQuE,EAAUC,oBAAoB,GAAQ1D,EAASyD,EAAUE,yBAC/HtB,EAASA,SAASuB,cAClBvB,EAASA,SAASwB,mBAAmBxB,EAASG,SAC9CH,EAASG,QAAQsB,OAAOC,aAAa,iBAAkBR,GACvDlB,EAASA,SAAS2B,OACd/D,EACAgE,EAAMC,OAAO7B,EAAS/B,QAAS6D,IAC3B,MAAMC,EAAa,IAAIC,WACvBD,EAAWE,OAAUC,IACjB,MAAMC,EAAcD,EAAME,OAAOrE,OAC7BhB,GACAA,EAAgBoF,IAGxBJ,EAAWM,kBAAkBP,KAC9B9E,EAAUE,GAGb0E,EAAMU,2BAA2BtC,EAAS/B,OAAQlB,EAAiBC,EAAUC,EAAUC,GAE3FgE,EAAQ3B,YAEhB,CAIO,SAASM,IACRrD,GACAA,EAAgB2D,QAAQZ,UACxB/C,EAAgBwD,SAAST,UACzB/C,EAAgBM,OAAOyC,WAKvB9C,GAAekC,MAAM4D,IACjBA,EAAgBpC,QAAQZ,UACxBgD,EAAgBvC,SAAST,UACzBgD,EAAgBzF,OAAOyC,aAG/B9C,EAAgB,KAChBD,EAAkB,IACtB,CAKY,MAACgG,EAAY,CAErBnF,WAEAI,gBAEAd,kBAEAkD,WAUA+B,EAAMvE,SAAWA,EACjBuE,EAAMnE,cAAgBA,EACtBmE,EAAMjF,gBAAkBA"}