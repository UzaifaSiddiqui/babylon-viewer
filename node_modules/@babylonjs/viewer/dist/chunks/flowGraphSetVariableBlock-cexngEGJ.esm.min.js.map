{"version":3,"file":"flowGraphSetVariableBlock-cexngEGJ.esm.min.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Execution/flowGraphSetVariableBlock.js"],"sourcesContent":["import { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../flowGraphExecutionBlockWithOutSignal\";\nimport { RichTypeAny } from \"core/FlowGraph/flowGraphRichTypes\";\n/**\n * This block will set a variable on the context.\n */\nexport class FlowGraphSetVariableBlock extends FlowGraphExecutionBlockWithOutSignal {\n    constructor(config) {\n        super(config);\n        // check if the variable is defined\n        if (!config.variable && !config.variables) {\n            throw new Error(\"FlowGraphSetVariableBlock: variable/variables is not defined\");\n        }\n        // check if the variable is an array\n        if (config.variables && config.variable) {\n            throw new Error(\"FlowGraphSetVariableBlock: variable and variables are both defined\");\n        }\n        // check if we have either a variable or variables. If we have variables, set the inputs correctly\n        if (config.variables) {\n            for (const variable of config.variables) {\n                this.registerDataInput(variable, RichTypeAny);\n            }\n        }\n        else {\n            this.registerDataInput(\"value\", RichTypeAny);\n        }\n    }\n    _execute(context, _callingSignal) {\n        if (this.config?.variables) {\n            for (const variable of this.config.variables) {\n                this._saveVariable(context, variable);\n            }\n        }\n        else {\n            this._saveVariable(context, this.config?.variable, \"value\");\n        }\n        this.out._activateSignal(context);\n    }\n    _saveVariable(context, variableName, inputName) {\n        // check if there is an animation(group) running on this variable. If there is, stop the animation - a value was force-set.\n        const currentlyRunningAnimationGroups = context._getGlobalContextVariable(\"currentlyRunningAnimationGroups\", []);\n        for (const animationUniqueId of currentlyRunningAnimationGroups) {\n            const animationGroup = context.assetsContext.animationGroups.find((animationGroup) => animationGroup.uniqueId == animationUniqueId);\n            if (animationGroup) {\n                // check if there is a target animation that has the target set to be the context\n                for (const targetAnimation of animationGroup.targetedAnimations) {\n                    // check if the target property is the variable we are setting\n                    if (targetAnimation.target === context) {\n                        // check the variable name\n                        if (targetAnimation.animation.targetProperty === variableName) {\n                            // stop the animation\n                            animationGroup.stop();\n                            // remove the animation from the currently running animations\n                            const index = currentlyRunningAnimationGroups.indexOf(animationUniqueId);\n                            if (index > -1) {\n                                currentlyRunningAnimationGroups.splice(index, 1);\n                            }\n                            context._setGlobalContextVariable(\"currentlyRunningAnimationGroups\", currentlyRunningAnimationGroups);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        const value = this.getDataInput(inputName || variableName)?.getValue(context);\n        context.setVariable(variableName, value);\n    }\n    getClassName() {\n        return \"FlowGraphSetVariableBlock\" /* FlowGraphBlockNames.SetVariable */;\n    }\n    serialize(serializationObject) {\n        super.serialize(serializationObject);\n        serializationObject.config.variable = this.config?.variable;\n    }\n}\nRegisterClass(\"FlowGraphSetVariableBlock\" /* FlowGraphBlockNames.SetVariable */, FlowGraphSetVariableBlock);\n//# sourceMappingURL=flowGraphSetVariableBlock.js.map"],"names":["FlowGraphSetVariableBlock","FlowGraphExecutionBlockWithOutSignal","constructor","config","super","variable","variables","Error","this","registerDataInput","RichTypeAny","_execute","context","_callingSignal","_saveVariable","out","_activateSignal","variableName","inputName","currentlyRunningAnimationGroups","_getGlobalContextVariable","animationUniqueId","animationGroup","assetsContext","animationGroups","find","uniqueId","targetAnimation","targetedAnimations","target","animation","targetProperty","stop","index","indexOf","splice","_setGlobalContextVariable","value","getDataInput","getValue","setVariable","getClassName","serialize","serializationObject","RegisterClass"],"mappings":"yNAMO,MAAMA,UAAkCC,EAC3C,WAAAC,CAAYC,GAGR,GAFAC,MAAMD,IAEDA,EAAOE,WAAaF,EAAOG,UAC5B,MAAM,IAAIC,MAAM,gEAGpB,GAAIJ,EAAOG,WAAaH,EAAOE,SAC3B,MAAM,IAAIE,MAAM,sEAGpB,GAAIJ,EAAOG,UACP,IAAK,MAAMD,KAAYF,EAAOG,UAC1BE,KAAKC,kBAAkBJ,EAAUK,QAIrCF,KAAKC,kBAAkB,QAASC,EAE5C,CACI,QAAAC,CAASC,EAASC,GACd,GAAIL,KAAKL,QAAQG,UACb,IAAK,MAAMD,KAAYG,KAAKL,OAAOG,UAC/BE,KAAKM,cAAcF,EAASP,QAIhCG,KAAKM,cAAcF,EAASJ,KAAKL,QAAQE,SAAU,SAEvDG,KAAKO,IAAIC,gBAAgBJ,EACjC,CACI,aAAAE,CAAcF,EAASK,EAAcC,GAEjC,MAAMC,EAAkCP,EAAQQ,0BAA0B,kCAAmC,IAC7G,IAAK,MAAMC,KAAqBF,EAAiC,CAC7D,MAAMG,EAAiBV,EAAQW,cAAcC,gBAAgBC,MAAMH,GAAmBA,EAAeI,UAAYL,IACjH,GAAIC,EAEA,IAAK,MAAMK,KAAmBL,EAAeM,mBAEzC,GAAID,EAAgBE,SAAWjB,GAEvBe,EAAgBG,UAAUC,iBAAmBd,EAAc,CAE3DK,EAAeU,OAEf,MAAMC,EAAQd,EAAgCe,QAAQb,GAClDY,GAAQ,GACRd,EAAgCgB,OAAOF,EAAO,GAElDrB,EAAQwB,0BAA0B,kCAAmCjB,GACrE,KAC5B,CAIA,CACQ,MAAMkB,EAAQ7B,KAAK8B,aAAapB,GAAaD,IAAesB,SAAS3B,GACrEA,EAAQ4B,YAAYvB,EAAcoB,EAC1C,CACI,YAAAI,GACI,MAAO,2BACf,CACI,SAAAC,CAAUC,GACNvC,MAAMsC,UAAUC,GAChBA,EAAoBxC,OAAOE,SAAWG,KAAKL,QAAQE,QAC3D,EAEAuC,EAAc,4BAAmE5C"}