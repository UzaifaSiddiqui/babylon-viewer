{"version":3,"file":"engine.multiRender-DoxvbxFg.esm.js","sources":["../../../../../dev/core/dist/Engines/Extensions/engine.multiRender.js"],"sourcesContent":["import { InternalTexture } from \"../../Materials/Textures/internalTexture\";\nimport { Logger } from \"../../Misc/logger\";\nimport { Constants } from \"../constants\";\nimport { ThinEngine } from \"../thinEngine\";\nThinEngine.prototype.restoreSingleAttachment = function () {\n    const gl = this._gl;\n    this.bindAttachments([gl.BACK]);\n};\nThinEngine.prototype.restoreSingleAttachmentForRenderTarget = function () {\n    const gl = this._gl;\n    this.bindAttachments([gl.COLOR_ATTACHMENT0]);\n};\nThinEngine.prototype.buildTextureLayout = function (textureStatus) {\n    const gl = this._gl;\n    const result = [];\n    for (let i = 0; i < textureStatus.length; i++) {\n        if (textureStatus[i]) {\n            result.push(gl[\"COLOR_ATTACHMENT\" + i]);\n        }\n        else {\n            result.push(gl.NONE);\n        }\n    }\n    return result;\n};\nThinEngine.prototype.bindAttachments = function (attachments) {\n    const gl = this._gl;\n    gl.drawBuffers(attachments);\n};\nThinEngine.prototype.unBindMultiColorAttachmentFramebuffer = function (rtWrapper, disableGenerateMipMaps = false, onBeforeUnbind) {\n    this._currentRenderTarget = null;\n    if (!rtWrapper.disableAutomaticMSAAResolve) {\n        this.resolveMultiFramebuffer(rtWrapper);\n    }\n    if (!disableGenerateMipMaps) {\n        this.generateMipMapsMultiFramebuffer(rtWrapper);\n    }\n    if (onBeforeUnbind) {\n        if (rtWrapper._MSAAFramebuffer) {\n            // Bind the correct framebuffer\n            this._bindUnboundFramebuffer(rtWrapper._framebuffer);\n        }\n        onBeforeUnbind();\n    }\n    this._bindUnboundFramebuffer(null);\n};\nThinEngine.prototype.createMultipleRenderTarget = function (size, options, initializeBuffers = true) {\n    let generateMipMaps = false;\n    let generateDepthBuffer = true;\n    let generateStencilBuffer = false;\n    let generateDepthTexture = false;\n    let depthTextureFormat = undefined;\n    let textureCount = 1;\n    let samples = 1;\n    const defaultType = Constants.TEXTURETYPE_UNSIGNED_BYTE;\n    const defaultSamplingMode = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE;\n    const defaultUseSRGBBuffer = false;\n    const defaultFormat = Constants.TEXTUREFORMAT_RGBA;\n    const defaultTarget = Constants.TEXTURE_2D;\n    let types = [];\n    let samplingModes = [];\n    let useSRGBBuffers = [];\n    let formats = [];\n    let targets = [];\n    let faceIndex = [];\n    let layerIndex = [];\n    let layers = [];\n    let labels = [];\n    let dontCreateTextures = false;\n    const rtWrapper = this._createHardwareRenderTargetWrapper(true, false, size);\n    if (options !== undefined) {\n        generateMipMaps = options.generateMipMaps === undefined ? false : options.generateMipMaps;\n        generateDepthBuffer = options.generateDepthBuffer === undefined ? true : options.generateDepthBuffer;\n        generateStencilBuffer = options.generateStencilBuffer === undefined ? false : options.generateStencilBuffer;\n        generateDepthTexture = options.generateDepthTexture === undefined ? false : options.generateDepthTexture;\n        textureCount = options.textureCount ?? 1;\n        samples = options.samples ?? samples;\n        types = options.types || types;\n        samplingModes = options.samplingModes || samplingModes;\n        useSRGBBuffers = options.useSRGBBuffers || useSRGBBuffers;\n        formats = options.formats || formats;\n        targets = options.targetTypes || targets;\n        faceIndex = options.faceIndex || faceIndex;\n        layerIndex = options.layerIndex || layerIndex;\n        layers = options.layerCounts || layers;\n        labels = options.labels || labels;\n        dontCreateTextures = options.dontCreateTextures ?? false;\n        if (this.webGLVersion > 1 &&\n            (options.depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 ||\n                options.depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH24UNORM_STENCIL8 ||\n                options.depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH24 ||\n                options.depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH32_FLOAT ||\n                options.depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8)) {\n            depthTextureFormat = options.depthTextureFormat;\n        }\n    }\n    if (depthTextureFormat === undefined) {\n        depthTextureFormat = generateStencilBuffer ? Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 : Constants.TEXTUREFORMAT_DEPTH32_FLOAT;\n    }\n    const gl = this._gl;\n    // Create the framebuffer\n    const currentFramebuffer = this._currentFramebuffer;\n    const framebuffer = gl.createFramebuffer();\n    this._bindUnboundFramebuffer(framebuffer);\n    const width = size.width ?? size;\n    const height = size.height ?? size;\n    const textures = [];\n    const attachments = [];\n    const useStencilTexture = this.webGLVersion > 1 &&\n        (depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 ||\n            depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH24UNORM_STENCIL8 ||\n            depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8);\n    rtWrapper.label = options?.label ?? \"MultiRenderTargetWrapper\";\n    rtWrapper._framebuffer = framebuffer;\n    rtWrapper._generateDepthBuffer = generateDepthTexture || generateDepthBuffer;\n    rtWrapper._generateStencilBuffer = generateDepthTexture ? useStencilTexture : generateStencilBuffer;\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(rtWrapper._generateStencilBuffer, rtWrapper._generateDepthBuffer, width, height, 1, depthTextureFormat);\n    rtWrapper._attachments = attachments;\n    for (let i = 0; i < textureCount; i++) {\n        let samplingMode = samplingModes[i] || defaultSamplingMode;\n        let type = types[i] || defaultType;\n        let useSRGBBuffer = useSRGBBuffers[i] || defaultUseSRGBBuffer;\n        const format = formats[i] || defaultFormat;\n        const target = targets[i] || defaultTarget;\n        const layerCount = layers[i] ?? 1;\n        if (type === Constants.TEXTURETYPE_FLOAT && !this._caps.textureFloatLinearFiltering) {\n            // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\n            samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\n        }\n        else if (type === Constants.TEXTURETYPE_HALF_FLOAT && !this._caps.textureHalfFloatLinearFiltering) {\n            // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\n            samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\n        }\n        const filters = this._getSamplingParameters(samplingMode, generateMipMaps);\n        if (type === Constants.TEXTURETYPE_FLOAT && !this._caps.textureFloat) {\n            type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\n            Logger.Warn(\"Float textures are not supported. Render target forced to TEXTURETYPE_UNSIGNED_BYTE type\");\n        }\n        useSRGBBuffer = useSRGBBuffer && this._caps.supportSRGBBuffers && (this.webGLVersion > 1 || this.isWebGPU);\n        const isWebGL2 = this.webGLVersion > 1;\n        const attachment = gl[isWebGL2 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\n        attachments.push(attachment);\n        if (target === -1 || dontCreateTextures) {\n            continue;\n        }\n        const texture = new InternalTexture(this, 6 /* InternalTextureSource.MultiRenderTarget */);\n        textures[i] = texture;\n        gl.activeTexture(gl[\"TEXTURE\" + i]);\n        gl.bindTexture(target, texture._hardwareTexture.underlyingResource);\n        gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, filters.mag);\n        gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, filters.min);\n        gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        const internalSizedFormat = this._getRGBABufferInternalSizedFormat(type, format, useSRGBBuffer);\n        const internalFormat = this._getInternalFormat(format);\n        const webGLTextureType = this._getWebGLTextureType(type);\n        if (isWebGL2 && (target === Constants.TEXTURE_2D_ARRAY || target === Constants.TEXTURE_3D)) {\n            if (target === Constants.TEXTURE_2D_ARRAY) {\n                texture.is2DArray = true;\n            }\n            else {\n                texture.is3D = true;\n            }\n            texture.baseDepth = texture.depth = layerCount;\n            gl.texImage3D(target, 0, internalSizedFormat, width, height, layerCount, 0, internalFormat, webGLTextureType, null);\n        }\n        else if (target === Constants.TEXTURE_CUBE_MAP) {\n            // We have to generate all faces to complete the framebuffer\n            for (let i = 0; i < 6; i++) {\n                gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, internalSizedFormat, width, height, 0, internalFormat, webGLTextureType, null);\n            }\n            texture.isCube = true;\n        }\n        else {\n            gl.texImage2D(gl.TEXTURE_2D, 0, internalSizedFormat, width, height, 0, internalFormat, webGLTextureType, null);\n        }\n        if (generateMipMaps) {\n            gl.generateMipmap(target);\n        }\n        // Unbind\n        this._bindTextureDirectly(target, null);\n        texture.baseWidth = width;\n        texture.baseHeight = height;\n        texture.width = width;\n        texture.height = height;\n        texture.isReady = true;\n        texture.samples = 1;\n        texture.generateMipMaps = generateMipMaps;\n        texture.samplingMode = samplingMode;\n        texture.type = type;\n        texture._useSRGBBuffer = useSRGBBuffer;\n        texture.format = format;\n        texture.label = labels[i] ?? rtWrapper.label + \"-Texture\" + i;\n        this._internalTexturesCache.push(texture);\n    }\n    if (generateDepthTexture && this._caps.depthTextureExtension && !dontCreateTextures) {\n        // Depth texture\n        const depthTexture = new InternalTexture(this, 14 /* InternalTextureSource.Depth */);\n        let depthTextureType = Constants.TEXTURETYPE_UNSIGNED_SHORT;\n        let glDepthTextureInternalFormat = gl.DEPTH_COMPONENT16;\n        let glDepthTextureFormat = gl.DEPTH_COMPONENT;\n        let glDepthTextureType = gl.UNSIGNED_SHORT;\n        let glDepthTextureAttachment = gl.DEPTH_ATTACHMENT;\n        if (this.webGLVersion < 2) {\n            glDepthTextureInternalFormat = gl.DEPTH_COMPONENT;\n        }\n        else {\n            if (depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH32_FLOAT) {\n                depthTextureType = Constants.TEXTURETYPE_FLOAT;\n                glDepthTextureType = gl.FLOAT;\n                glDepthTextureInternalFormat = gl.DEPTH_COMPONENT32F;\n            }\n            else if (depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8) {\n                depthTextureType = Constants.TEXTURETYPE_UNSIGNED_BYTE;\n                glDepthTextureType = gl.FLOAT_32_UNSIGNED_INT_24_8_REV;\n                glDepthTextureInternalFormat = gl.DEPTH32F_STENCIL8;\n                glDepthTextureFormat = gl.DEPTH_STENCIL;\n                glDepthTextureAttachment = gl.DEPTH_STENCIL_ATTACHMENT;\n            }\n            else if (depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH24) {\n                depthTextureType = Constants.TEXTURETYPE_UNSIGNED_BYTE;\n                glDepthTextureType = gl.UNSIGNED_INT;\n                glDepthTextureInternalFormat = gl.DEPTH_COMPONENT24;\n                glDepthTextureAttachment = gl.DEPTH_ATTACHMENT;\n            }\n            else if (depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 || depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH24UNORM_STENCIL8) {\n                depthTextureType = Constants.TEXTURETYPE_UNSIGNED_INT_24_8;\n                glDepthTextureType = gl.UNSIGNED_INT_24_8;\n                glDepthTextureInternalFormat = gl.DEPTH24_STENCIL8;\n                glDepthTextureFormat = gl.DEPTH_STENCIL;\n                glDepthTextureAttachment = gl.DEPTH_STENCIL_ATTACHMENT;\n            }\n        }\n        this._bindTextureDirectly(gl.TEXTURE_2D, depthTexture, true);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texImage2D(gl.TEXTURE_2D, 0, glDepthTextureInternalFormat, width, height, 0, glDepthTextureFormat, glDepthTextureType, null);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, glDepthTextureAttachment, gl.TEXTURE_2D, depthTexture._hardwareTexture.underlyingResource, 0);\n        this._bindTextureDirectly(gl.TEXTURE_2D, null);\n        rtWrapper._depthStencilTexture = depthTexture;\n        rtWrapper._depthStencilTextureWithStencil = useStencilTexture;\n        depthTexture.baseWidth = width;\n        depthTexture.baseHeight = height;\n        depthTexture.width = width;\n        depthTexture.height = height;\n        depthTexture.isReady = true;\n        depthTexture.samples = 1;\n        depthTexture.generateMipMaps = generateMipMaps;\n        depthTexture.samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\n        depthTexture.format = depthTextureFormat;\n        depthTexture.type = depthTextureType;\n        depthTexture.label = rtWrapper.label + \"-DepthStencil\";\n        textures[textureCount] = depthTexture;\n        this._internalTexturesCache.push(depthTexture);\n    }\n    rtWrapper.setTextures(textures);\n    if (initializeBuffers) {\n        gl.drawBuffers(attachments);\n    }\n    this._bindUnboundFramebuffer(currentFramebuffer);\n    rtWrapper.setLayerAndFaceIndices(layerIndex, faceIndex);\n    this.resetTextureCache();\n    if (!dontCreateTextures) {\n        this.updateMultipleRenderTargetTextureSampleCount(rtWrapper, samples, initializeBuffers);\n    }\n    else if (samples > 1) {\n        const framebuffer = gl.createFramebuffer();\n        if (!framebuffer) {\n            throw new Error(\"Unable to create multi sampled framebuffer\");\n        }\n        rtWrapper._samples = samples;\n        rtWrapper._MSAAFramebuffer = framebuffer;\n        if (textureCount > 0 && initializeBuffers) {\n            this._bindUnboundFramebuffer(framebuffer);\n            gl.drawBuffers(attachments);\n            this._bindUnboundFramebuffer(currentFramebuffer);\n        }\n    }\n    return rtWrapper;\n};\nThinEngine.prototype.updateMultipleRenderTargetTextureSampleCount = function (rtWrapper, samples, initializeBuffers = true) {\n    if (this.webGLVersion < 2 || !rtWrapper) {\n        return 1;\n    }\n    if (rtWrapper.samples === samples) {\n        return samples;\n    }\n    const gl = this._gl;\n    samples = Math.min(samples, this.getCaps().maxMSAASamples);\n    // Dispose previous render buffers\n    if (rtWrapper._depthStencilBuffer) {\n        gl.deleteRenderbuffer(rtWrapper._depthStencilBuffer);\n        rtWrapper._depthStencilBuffer = null;\n    }\n    if (rtWrapper._MSAAFramebuffer) {\n        gl.deleteFramebuffer(rtWrapper._MSAAFramebuffer);\n        rtWrapper._MSAAFramebuffer = null;\n    }\n    const count = rtWrapper._attachments.length; // We do it this way instead of rtWrapper.textures.length to avoid taking into account the depth/stencil texture, in case it has been created\n    for (let i = 0; i < count; i++) {\n        const texture = rtWrapper.textures[i];\n        const hardwareTexture = texture._hardwareTexture;\n        hardwareTexture?.releaseMSAARenderBuffers();\n    }\n    if (samples > 1 && typeof gl.renderbufferStorageMultisample === \"function\") {\n        const framebuffer = gl.createFramebuffer();\n        if (!framebuffer) {\n            throw new Error(\"Unable to create multi sampled framebuffer\");\n        }\n        rtWrapper._MSAAFramebuffer = framebuffer;\n        this._bindUnboundFramebuffer(framebuffer);\n        const attachments = [];\n        for (let i = 0; i < count; i++) {\n            const texture = rtWrapper.textures[i];\n            const hardwareTexture = texture._hardwareTexture;\n            const attachment = gl[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\n            const colorRenderbuffer = this._createRenderBuffer(texture.width, texture.height, samples, -1 /* not used */, this._getRGBABufferInternalSizedFormat(texture.type, texture.format, texture._useSRGBBuffer), attachment);\n            if (!colorRenderbuffer) {\n                throw new Error(\"Unable to create multi sampled framebuffer\");\n            }\n            hardwareTexture.addMSAARenderBuffer(colorRenderbuffer);\n            texture.samples = samples;\n            attachments.push(attachment);\n        }\n        if (initializeBuffers) {\n            gl.drawBuffers(attachments);\n        }\n    }\n    else {\n        this._bindUnboundFramebuffer(rtWrapper._framebuffer);\n    }\n    const depthFormat = rtWrapper._depthStencilTexture ? rtWrapper._depthStencilTexture.format : undefined;\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(rtWrapper._generateStencilBuffer, rtWrapper._generateDepthBuffer, rtWrapper.width, rtWrapper.height, samples, depthFormat);\n    this._bindUnboundFramebuffer(null);\n    rtWrapper._samples = samples;\n    return samples;\n};\nThinEngine.prototype.generateMipMapsMultiFramebuffer = function (texture) {\n    const rtWrapper = texture;\n    const gl = this._gl;\n    if (!rtWrapper.isMulti) {\n        return;\n    }\n    for (let i = 0; i < rtWrapper._attachments.length; i++) {\n        const texture = rtWrapper.textures[i];\n        if (texture?.generateMipMaps && !texture?.isCube && !texture?.is3D) {\n            this._bindTextureDirectly(gl.TEXTURE_2D, texture, true);\n            gl.generateMipmap(gl.TEXTURE_2D);\n            this._bindTextureDirectly(gl.TEXTURE_2D, null);\n        }\n    }\n};\nThinEngine.prototype.resolveMultiFramebuffer = function (texture) {\n    const rtWrapper = texture;\n    const gl = this._gl;\n    if (!rtWrapper._MSAAFramebuffer || !rtWrapper.isMulti) {\n        return;\n    }\n    let bufferBits = rtWrapper.resolveMSAAColors ? gl.COLOR_BUFFER_BIT : 0;\n    bufferBits |= rtWrapper._generateDepthBuffer && rtWrapper.resolveMSAADepth ? gl.DEPTH_BUFFER_BIT : 0;\n    bufferBits |= rtWrapper._generateStencilBuffer && rtWrapper.resolveMSAAStencil ? gl.STENCIL_BUFFER_BIT : 0;\n    const attachments = rtWrapper._attachments;\n    const count = attachments.length;\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, rtWrapper._MSAAFramebuffer);\n    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, rtWrapper._framebuffer);\n    for (let i = 0; i < count; i++) {\n        const texture = rtWrapper.textures[i];\n        for (let j = 0; j < count; j++) {\n            attachments[j] = gl.NONE;\n        }\n        attachments[i] = gl[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\n        gl.readBuffer(attachments[i]);\n        gl.drawBuffers(attachments);\n        gl.blitFramebuffer(0, 0, texture.width, texture.height, 0, 0, texture.width, texture.height, bufferBits, gl.NEAREST);\n    }\n    for (let i = 0; i < count; i++) {\n        attachments[i] = gl[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\n    }\n    gl.drawBuffers(attachments);\n    gl.bindFramebuffer(this._gl.FRAMEBUFFER, rtWrapper._MSAAFramebuffer);\n};\n//# sourceMappingURL=engine.multiRender.js.map"],"names":[],"mappings":"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"}