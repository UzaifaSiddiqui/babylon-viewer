import{F as e,D as s}from"./index-VvGulz6u.esm.min.js";class i{constructor(){this._renderPipelines={}}get supportedPipelines(){const e=[];for(const s in this._renderPipelines)if(Object.prototype.hasOwnProperty.call(this._renderPipelines,s)){const i=this._renderPipelines[s];i.isSupported&&e.push(i)}return e}addPipeline(e){this._renderPipelines[e._name]=e}removePipeline(e){delete this._renderPipelines[e]}attachCamerasToRenderPipeline(e,s,i=!1){const n=this._renderPipelines[e];n&&n._attachCameras(s,i)}detachCamerasFromRenderPipeline(e,s){const i=this._renderPipelines[e];i&&i._detachCameras(s)}enableEffectInPipeline(e,s,i){const n=this._renderPipelines[e];n&&n._enableEffect(s,i)}disableEffectInPipeline(e,s,i){const n=this._renderPipelines[e];n&&n._disableEffect(s,i)}update(){for(const e in this._renderPipelines)if(Object.prototype.hasOwnProperty.call(this._renderPipelines,e)){const s=this._renderPipelines[e];s.isSupported?s._update():(s.dispose(),delete this._renderPipelines[e])}}_rebuild(){for(const e in this._renderPipelines)if(Object.prototype.hasOwnProperty.call(this._renderPipelines,e)){this._renderPipelines[e]._rebuild()}}dispose(){for(const e in this._renderPipelines)if(Object.prototype.hasOwnProperty.call(this._renderPipelines,e)){this._renderPipelines[e].dispose()}}}Object.defineProperty(s.prototype,"postProcessRenderPipelineManager",{get:function(){if(!this._postProcessRenderPipelineManager){let s=this._getComponent(e.NAME_POSTPROCESSRENDERPIPELINEMANAGER);s||(s=new n(this),this._addComponent(s)),this._postProcessRenderPipelineManager=new i}return this._postProcessRenderPipelineManager},enumerable:!0,configurable:!0});class n{constructor(s){this.name=e.NAME_POSTPROCESSRENDERPIPELINEMANAGER,this.scene=s}register(){this.scene._gatherRenderTargetsStage.registerStep(e.STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER,this,this._gatherRenderTargets)}rebuild(){this.scene._postProcessRenderPipelineManager&&this.scene._postProcessRenderPipelineManager._rebuild()}dispose(){this.scene._postProcessRenderPipelineManager&&this.scene._postProcessRenderPipelineManager.dispose()}_gatherRenderTargets(){this.scene._postProcessRenderPipelineManager&&this.scene._postProcessRenderPipelineManager.update()}}export{n as PostProcessRenderPipelineManagerSceneComponent};
//# sourceMappingURL=postProcessRenderPipelineManagerSceneComponent-Bnzrm4xz.esm.min.js.map
