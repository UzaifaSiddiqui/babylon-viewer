{"version":3,"file":"KHR_node_selectability-CDj3jQOx.esm.min.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/Extensions/KHR_node_selectability.js"],"sourcesContent":["import { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nimport { addNewInteractivityFlowGraphMapping } from \"./KHR_interactivity/declarationMapper\";\nimport { AddObjectAccessorToKey } from \"./objectModelMapping\";\nconst NAME = \"KHR_node_selectability\";\n// add the interactivity mapping for the onSelect event\naddNewInteractivityFlowGraphMapping(\"event/onSelect\", NAME, {\n    // using GetVariable as the nodeIndex is a configuration and not a value (i.e. it's not mutable)\n    blocks: [\"FlowGraphMeshPickEventBlock\" /* FlowGraphBlockNames.MeshPickEvent */, \"FlowGraphGetVariableBlock\" /* FlowGraphBlockNames.GetVariable */, \"FlowGraphIndexOfBlock\" /* FlowGraphBlockNames.IndexOf */, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n    configuration: {\n        stopPropagation: { name: \"stopPropagation\" },\n        nodeIndex: {\n            name: \"variable\",\n            toBlock: \"FlowGraphGetVariableBlock\" /* FlowGraphBlockNames.GetVariable */,\n            dataTransformer(data) {\n                return [\"pickedMesh_\" + data[0]];\n            },\n        },\n    },\n    outputs: {\n        values: {\n            selectedNodeIndex: { name: \"index\", toBlock: \"FlowGraphIndexOfBlock\" /* FlowGraphBlockNames.IndexOf */ },\n            controllerIndex: { name: \"pointerId\" },\n            selectionPoint: { name: \"pickedPoint\" },\n            selectionRayOrigin: { name: \"pickOrigin\" },\n        },\n        flows: {\n            out: { name: \"done\" },\n        },\n    },\n    interBlockConnectors: [\n        {\n            input: \"asset\",\n            output: \"value\",\n            inputBlockIndex: 0,\n            outputBlockIndex: 1,\n            isVariable: true,\n        },\n        {\n            input: \"array\",\n            output: \"nodes\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 3,\n            isVariable: true,\n        },\n        {\n            input: \"object\",\n            output: \"pickedMesh\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 0,\n            isVariable: true,\n        },\n    ],\n    extraProcessor(gltfBlock, _declaration, _mapping, _arrays, serializedObjects, context, globalGLTF) {\n        // add the glTF to the configuration of the last serialized object\n        const serializedObject = serializedObjects[serializedObjects.length - 1];\n        serializedObject.config = serializedObject.config || {};\n        serializedObject.config.glTF = globalGLTF;\n        // find the listener nodeIndex value\n        const nodeIndex = gltfBlock.configuration?.[\"nodeIndex\"]?.value[0];\n        if (nodeIndex === undefined || typeof nodeIndex !== \"number\") {\n            throw new Error(\"nodeIndex not found in configuration\");\n        }\n        const variableName = \"pickedMesh_\" + nodeIndex;\n        // find the nodeIndex value\n        serializedObjects[1].config.variable = variableName;\n        context._userVariables[variableName] = {\n            className: \"Mesh\",\n            id: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.id,\n            uniqueId: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.uniqueId,\n        };\n        return serializedObjects;\n    },\n});\n// object model extension for selectable\nAddObjectAccessorToKey(\"/nodes/{}/extensions/KHR_node_selectability/selectable\", {\n    get: (node) => {\n        const tn = node._babylonTransformNode;\n        if (tn && tn.isPickable !== undefined) {\n            return tn.isPickable;\n        }\n        return true;\n    },\n    set: (value, node) => {\n        node._primitiveBabylonMeshes?.forEach((mesh) => {\n            mesh.isPickable = value;\n        });\n    },\n    getTarget: (node) => node._babylonTransformNode,\n    getPropertyName: [() => \"isPickable\"],\n    type: \"boolean\",\n});\n/**\n * Loader extension for KHR_selectability\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_node_selectability {\n    /**\n     * @internal\n     */\n    constructor(loader) {\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        this._loader = loader;\n        this.enabled = loader.isExtensionUsed(NAME);\n    }\n    // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-misused-promises\n    async onReady() {\n        this._loader.gltf.nodes?.forEach((node) => {\n            if (node.extensions?.KHR_node_selectability && node.extensions?.KHR_node_selectability.selectable === false) {\n                node._babylonTransformNode?.getChildMeshes().forEach((mesh) => {\n                    mesh.isPickable = false;\n                });\n            }\n        });\n    }\n    dispose() {\n        this._loader = null;\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_node_selectability(loader));\n//# sourceMappingURL=KHR_node_selectability.js.map"],"names":["NAME","addNewInteractivityFlowGraphMapping","blocks","configuration","stopPropagation","name","nodeIndex","toBlock","dataTransformer","data","outputs","values","selectedNodeIndex","controllerIndex","selectionPoint","selectionRayOrigin","flows","out","interBlockConnectors","input","output","inputBlockIndex","outputBlockIndex","isVariable","extraProcessor","gltfBlock","_declaration","_mapping","_arrays","serializedObjects","context","globalGLTF","serializedObject","length","config","glTF","value","undefined","Error","variableName","variable","_userVariables","className","id","nodes","_babylonTransformNode","uniqueId","AddObjectAccessorToKey","get","node","tn","isPickable","set","_primitiveBabylonMeshes","forEach","mesh","getTarget","getPropertyName","type","KHR_node_selectability","constructor","loader","this","_loader","enabled","isExtensionUsed","onReady","gltf","extensions","selectable","getChildMeshes","dispose","unregisterGLTFExtension","registerGLTFExtension"],"mappings":"kLAGA,MAAMA,EAAO,yBAEbC,EAAoC,iBAAkBD,EAAM,CAExDE,OAAQ,CAAC,8BAAuE,4BAAmE,wBAA2D,+CAC9MC,cAAe,CACXC,gBAAiB,CAAEC,KAAM,mBACzBC,UAAW,CACPD,KAAM,WACNE,QAAS,4BACTC,gBAAgBC,GACL,CAAC,cAAgBA,EAAK,MAIzCC,QAAS,CACLC,OAAQ,CACJC,kBAAmB,CAAEP,KAAM,QAASE,QAAS,yBAC7CM,gBAAiB,CAAER,KAAM,aACzBS,eAAgB,CAAET,KAAM,eACxBU,mBAAoB,CAAEV,KAAM,eAEhCW,MAAO,CACHC,IAAK,CAAEZ,KAAM,UAGrBa,qBAAsB,CAClB,CACIC,MAAO,QACPC,OAAQ,QACRC,gBAAiB,EACjBC,iBAAkB,EAClBC,YAAY,GAEhB,CACIJ,MAAO,QACPC,OAAQ,QACRC,gBAAiB,EACjBC,iBAAkB,EAClBC,YAAY,GAEhB,CACIJ,MAAO,SACPC,OAAQ,aACRC,gBAAiB,EACjBC,iBAAkB,EAClBC,YAAY,IAGpB,cAAAC,CAAeC,EAAWC,EAAcC,EAAUC,EAASC,EAAmBC,EAASC,GAEnF,MAAMC,EAAmBH,EAAkBA,EAAkBI,OAAS,GACtED,EAAiBE,OAASF,EAAiBE,QAAU,CAAE,EACvDF,EAAiBE,OAAOC,KAAOJ,EAE/B,MAAMzB,EAAYmB,EAAUtB,eAA2B,WAAGiC,MAAM,GAChE,QAAkBC,IAAd/B,GAAgD,iBAAdA,EAClC,MAAM,IAAIgC,MAAM,wCAEpB,MAAMC,EAAe,cAAgBjC,EAQrC,OANAuB,EAAkB,GAAGK,OAAOM,SAAWD,EACvCT,EAAQW,eAAeF,GAAgB,CACnCG,UAAW,OACXC,GAAIZ,GAAYa,QAAQtC,GAAWuC,uBAAuBF,GAC1DG,SAAUf,GAAYa,QAAQtC,GAAWuC,uBAAuBC,UAE7DjB,CACV,IAGLkB,EAAuB,yDAA0D,CAC7EC,IAAMC,IACF,MAAMC,EAAKD,EAAKJ,sBAChB,OAAIK,QAAwBb,IAAlBa,EAAGC,YACFD,EAAGC,YAIlBC,IAAK,CAAChB,EAAOa,KACTA,EAAKI,yBAAyBC,SAASC,IACnCA,EAAKJ,WAAaf,MAG1BoB,UAAYP,GAASA,EAAKJ,sBAC1BY,gBAAiB,CAAC,IAAM,cACxBC,KAAM,YAMH,MAAMC,EAIT,WAAAC,CAAYC,GAIRC,KAAKzD,KAAOL,EACZ8D,KAAKC,QAAUF,EACfC,KAAKE,QAAUH,EAAOI,gBAAgBjE,EAC9C,CAEI,aAAMkE,GACFJ,KAAKC,QAAQI,KAAKvB,OAAOU,SAASL,IAC1BA,EAAKmB,YAAYT,yBAAiF,IAAvDV,EAAKmB,YAAYT,uBAAuBU,YACnFpB,EAAKJ,uBAAuByB,iBAAiBhB,SAASC,IAClDA,EAAKJ,YAAa,OAItC,CACI,OAAAoB,GACIT,KAAKC,QAAU,IACvB,EAEAS,EAAwBxE,GACxByE,EAAsBzE,GAAM,GAAO6D,GAAW,IAAIF,EAAuBE"}