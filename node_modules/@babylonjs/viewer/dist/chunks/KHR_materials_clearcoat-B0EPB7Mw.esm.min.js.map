{"version":3,"file":"KHR_materials_clearcoat-B0EPB7Mw.esm.min.js","sources":["../../../../../dev/loaders/dist/glTF/2.0/Extensions/KHR_materials_clearcoat.js"],"sourcesContent":["import { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\nimport { GLTFLoader } from \"../glTFLoader\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nconst NAME = \"KHR_materials_clearcoat\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_clearcoat/README.md)\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#7F7PN6#8)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_clearcoat {\n    /**\n     * @internal\n     */\n    constructor(loader) {\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        /**\n         * Defines a number that determines the order the extensions are applied.\n         */\n        this.order = 190;\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n    /** @internal */\n    dispose() {\n        this._loader = null;\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line no-restricted-syntax\n    loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n        return GLTFLoader.LoadExtensionAsync(context, material, this.name, async (extensionContext, extension) => {\n            const promises = new Array();\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n            promises.push(this._loadClearCoatPropertiesAsync(extensionContext, extension, babylonMaterial));\n            await Promise.all(promises);\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    _loadClearCoatPropertiesAsync(context, properties, babylonMaterial) {\n        if (!(babylonMaterial instanceof PBRMaterial)) {\n            throw new Error(`${context}: Material type not supported`);\n        }\n        const promises = new Array();\n        babylonMaterial.clearCoat.isEnabled = true;\n        babylonMaterial.clearCoat.useRoughnessFromMainTexture = false;\n        babylonMaterial.clearCoat.remapF0OnInterfaceChange = false;\n        if (properties.clearcoatFactor != undefined) {\n            babylonMaterial.clearCoat.intensity = properties.clearcoatFactor;\n        }\n        else {\n            babylonMaterial.clearCoat.intensity = 0;\n        }\n        if (properties.clearcoatTexture) {\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/clearcoatTexture`, properties.clearcoatTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (ClearCoat)`;\n                babylonMaterial.clearCoat.texture = texture;\n            }));\n        }\n        if (properties.clearcoatRoughnessFactor != undefined) {\n            babylonMaterial.clearCoat.roughness = properties.clearcoatRoughnessFactor;\n        }\n        else {\n            babylonMaterial.clearCoat.roughness = 0;\n        }\n        if (properties.clearcoatRoughnessTexture) {\n            properties.clearcoatRoughnessTexture.nonColorData = true;\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/clearcoatRoughnessTexture`, properties.clearcoatRoughnessTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (ClearCoat Roughness)`;\n                babylonMaterial.clearCoat.textureRoughness = texture;\n            }));\n        }\n        if (properties.clearcoatNormalTexture) {\n            properties.clearcoatNormalTexture.nonColorData = true;\n            promises.push(this._loader.loadTextureInfoAsync(`${context}/clearcoatNormalTexture`, properties.clearcoatNormalTexture, (texture) => {\n                texture.name = `${babylonMaterial.name} (ClearCoat Normal)`;\n                babylonMaterial.clearCoat.bumpTexture = texture;\n            }));\n            babylonMaterial.invertNormalMapX = !babylonMaterial.getScene().useRightHandedSystem;\n            babylonMaterial.invertNormalMapY = babylonMaterial.getScene().useRightHandedSystem;\n            if (properties.clearcoatNormalTexture.scale != undefined) {\n                babylonMaterial.clearCoat.bumpTexture.level = properties.clearcoatNormalTexture.scale;\n            }\n        }\n        // eslint-disable-next-line github/no-then\n        return Promise.all(promises).then(() => { });\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_clearcoat(loader));\n//# sourceMappingURL=KHR_materials_clearcoat.js.map"],"names":["NAME","KHR_materials_clearcoat","constructor","loader","this","name","order","_loader","enabled","isExtensionUsed","dispose","loadMaterialPropertiesAsync","context","material","babylonMaterial","GLTFLoader","LoadExtensionAsync","async","extensionContext","extension","promises","Array","push","_loadClearCoatPropertiesAsync","Promise","all","properties","PBRMaterial","Error","clearCoat","isEnabled","useRoughnessFromMainTexture","remapF0OnInterfaceChange","undefined","clearcoatFactor","intensity","clearcoatTexture","loadTextureInfoAsync","texture","clearcoatRoughnessFactor","roughness","clearcoatRoughnessTexture","nonColorData","textureRoughness","clearcoatNormalTexture","bumpTexture","invertNormalMapX","getScene","useRightHandedSystem","invertNormalMapY","scale","level","then","unregisterGLTFExtension","registerGLTFExtension"],"mappings":"gVAGA,MAAMA,EAAO,0BAMN,MAAMC,EAIT,WAAAC,CAAYC,GAIRC,KAAKC,KAAOL,EAIZI,KAAKE,MAAQ,IACbF,KAAKG,QAAUJ,EACfC,KAAKI,QAAUJ,KAAKG,QAAQE,gBAAgBT,EACpD,CAEI,OAAAU,GACIN,KAAKG,QAAU,IACvB,CAKI,2BAAAI,CAA4BC,EAASC,EAAUC,GAC3C,OAAOC,EAAWC,mBAAmBJ,EAASC,EAAUT,KAAKC,MAAMY,MAAOC,EAAkBC,KACxF,MAAMC,EAAW,IAAIC,MACrBD,EAASE,KAAKlB,KAAKG,QAAQI,4BAA4BC,EAASC,EAAUC,IAC1EM,EAASE,KAAKlB,KAAKmB,8BAA8BL,EAAkBC,EAAWL,UACxEU,QAAQC,IAAIL,KAE9B,CAEI,6BAAAG,CAA8BX,EAASc,EAAYZ,GAC/C,KAAMA,aAA2Ba,GAC7B,MAAM,IAAIC,MAAM,GAAGhB,kCAEvB,MAAMQ,EAAW,IAAIC,MA0CrB,OAzCAP,EAAgBe,UAAUC,WAAY,EACtChB,EAAgBe,UAAUE,6BAA8B,EACxDjB,EAAgBe,UAAUG,0BAA2B,EACnBC,MAA9BP,EAAWQ,gBACXpB,EAAgBe,UAAUM,UAAYT,EAAWQ,gBAGjDpB,EAAgBe,UAAUM,UAAY,EAEtCT,EAAWU,kBACXhB,EAASE,KAAKlB,KAAKG,QAAQ8B,qBAAqB,GAAGzB,qBAA4Bc,EAAWU,kBAAmBE,IACzGA,EAAQjC,KAAO,GAAGS,EAAgBT,mBAClCS,EAAgBe,UAAUS,QAAUA,MAGDL,MAAvCP,EAAWa,yBACXzB,EAAgBe,UAAUW,UAAYd,EAAWa,yBAGjDzB,EAAgBe,UAAUW,UAAY,EAEtCd,EAAWe,4BACXf,EAAWe,0BAA0BC,cAAe,EACpDtB,EAASE,KAAKlB,KAAKG,QAAQ8B,qBAAqB,GAAGzB,8BAAqCc,EAAWe,2BAA4BH,IAC3HA,EAAQjC,KAAO,GAAGS,EAAgBT,6BAClCS,EAAgBe,UAAUc,iBAAmBL,OAGjDZ,EAAWkB,yBACXlB,EAAWkB,uBAAuBF,cAAe,EACjDtB,EAASE,KAAKlB,KAAKG,QAAQ8B,qBAAqB,GAAGzB,2BAAkCc,EAAWkB,wBAAyBN,IACrHA,EAAQjC,KAAO,GAAGS,EAAgBT,0BAClCS,EAAgBe,UAAUgB,YAAcP,MAE5CxB,EAAgBgC,kBAAoBhC,EAAgBiC,WAAWC,qBAC/DlC,EAAgBmC,iBAAmBnC,EAAgBiC,WAAWC,qBACff,MAA3CP,EAAWkB,uBAAuBM,QAClCpC,EAAgBe,UAAUgB,YAAYM,MAAQzB,EAAWkB,uBAAuBM,QAIjF1B,QAAQC,IAAIL,GAAUgC,MAAK,QAC1C,EAEAC,EAAwBrD,GACxBsD,EAAsBtD,GAAM,GAAOG,GAAW,IAAIF,EAAwBE"}