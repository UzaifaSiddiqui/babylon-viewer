{"version":3,"file":"flowGraphDoNBlock-1Lu-XECC.esm.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Execution/ControlFlow/flowGraphDoNBlock.js"],"sourcesContent":["import { RichTypeFlowGraphInteger } from \"../../../flowGraphRichTypes\";\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../../flowGraphExecutionBlockWithOutSignal\";\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\nimport { FlowGraphInteger } from \"../../../CustomTypes/flowGraphInteger\";\n/**\n * A block that executes a branch a set number of times.\n */\nexport class FlowGraphDoNBlock extends FlowGraphExecutionBlockWithOutSignal {\n    constructor(\n    /**\n     * [Object] the configuration of the block\n     */\n    config = {}) {\n        super(config);\n        this.config = config;\n        this.config.startIndex = config.startIndex ?? new FlowGraphInteger(0);\n        this.reset = this._registerSignalInput(\"reset\");\n        this.maxExecutions = this.registerDataInput(\"maxExecutions\", RichTypeFlowGraphInteger);\n        this.executionCount = this.registerDataOutput(\"executionCount\", RichTypeFlowGraphInteger, new FlowGraphInteger(0));\n    }\n    _execute(context, callingSignal) {\n        if (callingSignal === this.reset) {\n            this.executionCount.setValue(this.config.startIndex, context);\n        }\n        else {\n            const currentCountValue = this.executionCount.getValue(context);\n            if (currentCountValue.value < this.maxExecutions.getValue(context).value) {\n                this.executionCount.setValue(new FlowGraphInteger(currentCountValue.value + 1), context);\n                this.out._activateSignal(context);\n            }\n        }\n    }\n    /**\n     * @returns class name of the block.\n     */\n    getClassName() {\n        return \"FlowGraphDoNBlock\" /* FlowGraphBlockNames.DoN */;\n    }\n}\nRegisterClass(\"FlowGraphDoNBlock\" /* FlowGraphBlockNames.DoN */, FlowGraphDoNBlock);\n//# sourceMappingURL=flowGraphDoNBlock.js.map"],"names":[],"mappings":";;;;;AAIA;AACA;AACA;AACO,MAAM,iBAAiB,SAAS,oCAAoC,CAAC;AAC5E,IAAI,WAAW;AACf;AACA;AACA;AACA,IAAI,MAAM,GAAG,EAAE,EAAE;AACjB,QAAQ,KAAK,CAAC,MAAM,CAAC;AACrB,QAAQ,IAAI,CAAC,MAAM,GAAG,MAAM;AAC5B,QAAQ,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,IAAI,IAAI,gBAAgB,CAAC,CAAC,CAAC;AAC7E,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;AACvD,QAAQ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAE,wBAAwB,CAAC;AAC9F,QAAQ,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,wBAAwB,EAAE,IAAI,gBAAgB,CAAC,CAAC,CAAC,CAAC;AAC1H;AACA,IAAI,QAAQ,CAAC,OAAO,EAAE,aAAa,EAAE;AACrC,QAAQ,IAAI,aAAa,KAAK,IAAI,CAAC,KAAK,EAAE;AAC1C,YAAY,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,OAAO,CAAC;AACzE;AACA,aAAa;AACb,YAAY,MAAM,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC;AAC3E,YAAY,IAAI,iBAAiB,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE;AACtF,gBAAgB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,gBAAgB,CAAC,iBAAiB,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC;AACxG,gBAAgB,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,YAAY,GAAG;AACnB,QAAQ,OAAO,mBAAmB;AAClC;AACA;AACA,aAAa,CAAC,mBAAmB,gCAAgC,iBAAiB,CAAC;;;;"}