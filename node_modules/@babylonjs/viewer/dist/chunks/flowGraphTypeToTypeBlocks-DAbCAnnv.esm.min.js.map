{"version":3,"file":"flowGraphTypeToTypeBlocks-DAbCAnnv.esm.min.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Data/Transformers/flowGraphTypeToTypeBlocks.js"],"sourcesContent":["import { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\nimport { RichTypeBoolean, RichTypeFlowGraphInteger, RichTypeNumber } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphInteger } from \"core/FlowGraph/CustomTypes/flowGraphInteger\";\n/**\n * A block that converts a boolean to a float.\n */\nexport class FlowGraphBooleanToFloat extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeBoolean, RichTypeNumber, (a) => +a, \"FlowGraphBooleanToFloat\" /* FlowGraphBlockNames.BooleanToFloat */, config);\n    }\n}\nRegisterClass(\"FlowGraphBooleanToFloat\" /* FlowGraphBlockNames.BooleanToFloat */, FlowGraphBooleanToFloat);\n/**\n * A block that converts a boolean to an integer\n */\nexport class FlowGraphBooleanToInt extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeBoolean, RichTypeFlowGraphInteger, (a) => FlowGraphInteger.FromValue(+a), \"FlowGraphBooleanToInt\" /* FlowGraphBlockNames.BooleanToInt */, config);\n    }\n}\nRegisterClass(\"FlowGraphBooleanToInt\" /* FlowGraphBlockNames.BooleanToInt */, FlowGraphBooleanToInt);\n/**\n * A block that converts a float to a boolean.\n */\nexport class FlowGraphFloatToBoolean extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeBoolean, (a) => !!a, \"FlowGraphFloatToBoolean\" /* FlowGraphBlockNames.FloatToBoolean */, config);\n    }\n}\nRegisterClass(\"FlowGraphFloatToBoolean\" /* FlowGraphBlockNames.FloatToBoolean */, FlowGraphFloatToBoolean);\n/**\n * A block that converts an integer to a boolean.\n */\nexport class FlowGraphIntToBoolean extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeFlowGraphInteger, RichTypeBoolean, (a) => !!a.value, \"FlowGraphIntToBoolean\" /* FlowGraphBlockNames.IntToBoolean */, config);\n    }\n}\nRegisterClass(\"FlowGraphIntToBoolean\" /* FlowGraphBlockNames.IntToBoolean */, FlowGraphIntToBoolean);\n/**\n * A block that converts an integer to a float.\n */\nexport class FlowGraphIntToFloat extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeFlowGraphInteger, RichTypeNumber, (a) => a.value, \"FlowGraphIntToFloat\" /* FlowGraphBlockNames.IntToFloat */, config);\n    }\n}\nRegisterClass(\"FlowGraphIntToFloat\" /* FlowGraphBlockNames.IntToFloat */, FlowGraphIntToFloat);\n/**\n * A block that converts a float to an integer.\n */\nexport class FlowGraphFloatToInt extends FlowGraphUnaryOperationBlock {\n    constructor(config) {\n        super(RichTypeNumber, RichTypeFlowGraphInteger, (a) => {\n            const roundingMode = config?.roundingMode;\n            switch (roundingMode) {\n                case \"floor\":\n                    return FlowGraphInteger.FromValue(Math.floor(a));\n                case \"ceil\":\n                    return FlowGraphInteger.FromValue(Math.ceil(a));\n                case \"round\":\n                    return FlowGraphInteger.FromValue(Math.round(a));\n                default:\n                    return FlowGraphInteger.FromValue(a);\n            }\n        }, \"FlowGraphFloatToInt\" /* FlowGraphBlockNames.FloatToInt */, config);\n    }\n}\nRegisterClass(\"FlowGraphFloatToInt\" /* FlowGraphBlockNames.FloatToInt */, FlowGraphFloatToInt);\n//# sourceMappingURL=flowGraphTypeToTypeBlocks.js.map"],"names":["FlowGraphBooleanToFloat","FlowGraphUnaryOperationBlock","constructor","config","super","RichTypeBoolean","RichTypeNumber","a","RegisterClass","FlowGraphBooleanToInt","RichTypeFlowGraphInteger","FlowGraphInteger","FromValue","FlowGraphFloatToBoolean","FlowGraphIntToBoolean","value","FlowGraphIntToFloat","FlowGraphFloatToInt","roundingMode","Math","floor","ceil","round"],"mappings":"qWAOO,MAAMA,UAAgCC,EACzC,WAAAC,CAAYC,GACRC,MAAMC,EAAiBC,GAAiBC,IAAOA,GAAG,0BAAoEJ,EAC9H,EAEAK,EAAc,0BAAoER,GAI3E,MAAMS,UAA8BR,EACvC,WAAAC,CAAYC,GACRC,MAAMC,EAAiBK,GAA2BH,GAAMI,EAAiBC,WAAWL,IAAI,wBAAgEJ,EAChK,EAEAK,EAAc,wBAAgEC,GAIvE,MAAMI,UAAgCZ,EACzC,WAAAC,CAAYC,GACRC,MAAME,EAAgBD,GAAkBE,KAAQA,GAAG,0BAAoEJ,EAC/H,EAEAK,EAAc,0BAAoEK,GAI3E,MAAMC,UAA8Bb,EACvC,WAAAC,CAAYC,GACRC,MAAMM,EAA0BL,GAAkBE,KAAQA,EAAEQ,OAAO,wBAAgEZ,EAC3I,EAEAK,EAAc,wBAAgEM,GAIvE,MAAME,UAA4Bf,EACrC,WAAAC,CAAYC,GACRC,MAAMM,EAA0BJ,GAAiBC,GAAMA,EAAEQ,OAAO,sBAA4DZ,EACpI,EAEAK,EAAc,sBAA4DQ,GAInE,MAAMC,UAA4BhB,EACrC,WAAAC,CAAYC,GACRC,MAAME,EAAgBI,GAA2BH,IAC7C,MAAMW,EAAef,GAAQe,aAC7B,OAAQA,GACJ,IAAK,QACD,OAAOP,EAAiBC,UAAUO,KAAKC,MAAMb,IACjD,IAAK,OACD,OAAOI,EAAiBC,UAAUO,KAAKE,KAAKd,IAChD,IAAK,QACD,OAAOI,EAAiBC,UAAUO,KAAKG,MAAMf,IACjD,QACI,OAAOI,EAAiBC,UAAUL,MAE3C,sBAA4DJ,EACvE,EAEAK,EAAc,sBAA4DS"}