{"version":3,"file":"shadowGenerator-C6b4ZqcE.esm.min.js","sources":["../../../../../dev/core/dist/PostProcesses/thinBlurPostProcess.js","../../../../../dev/core/dist/PostProcesses/blurPostProcess.js","../../../../../dev/core/dist/Lights/Shadows/shadowGenerator.js"],"sourcesContent":["import { EffectWrapper } from \"../Materials/effectRenderer\";\nimport { Engine } from \"../Engines/engine\";\n/**\n * Post process used to apply a blur effect\n */\nexport class ThinBlurPostProcess extends EffectWrapper {\n    _gatherImports(useWebGPU, list) {\n        if (useWebGPU) {\n            this._webGPUReady = true;\n            list.push(Promise.all([import(\"../ShadersWGSL/kernelBlur.fragment\"), import(\"../ShadersWGSL/kernelBlur.vertex\")]));\n        }\n        else {\n            list.push(Promise.all([import(\"../Shaders/kernelBlur.fragment\"), import(\"../Shaders/kernelBlur.vertex\")]));\n        }\n    }\n    /**\n     * Constructs a new blur post process\n     * @param name Name of the effect\n     * @param engine Engine to use to render the effect. If not provided, the last created engine will be used\n     * @param direction Direction in which to apply the blur\n     * @param kernel Kernel size of the blur\n     * @param options Options to configure the effect\n     */\n    constructor(name, engine = null, direction, kernel, options) {\n        const blockCompilationFinal = !!options?.blockCompilation;\n        super({\n            ...options,\n            name,\n            engine: engine || Engine.LastCreatedEngine,\n            useShaderStore: true,\n            useAsPostProcess: true,\n            fragmentShader: ThinBlurPostProcess.FragmentUrl,\n            uniforms: ThinBlurPostProcess.Uniforms,\n            samplers: ThinBlurPostProcess.Samplers,\n            vertexUrl: ThinBlurPostProcess.VertexUrl,\n            blockCompilation: true,\n        });\n        this._packedFloat = false;\n        this._staticDefines = \"\";\n        /**\n         * Width of the texture to apply the blur on\n         */\n        this.textureWidth = 0;\n        /**\n         * Height of the texture to apply the blur on\n         */\n        this.textureHeight = 0;\n        this._staticDefines = options ? (Array.isArray(options.defines) ? options.defines.join(\"\\n\") : options.defines || \"\") : \"\";\n        this.options.blockCompilation = blockCompilationFinal;\n        if (direction !== undefined) {\n            this.direction = direction;\n        }\n        if (kernel !== undefined) {\n            this.kernel = kernel;\n        }\n    }\n    /**\n     * Sets the length in pixels of the blur sample region\n     */\n    set kernel(v) {\n        if (this._idealKernel === v) {\n            return;\n        }\n        v = Math.max(v, 1);\n        this._idealKernel = v;\n        this._kernel = this._nearestBestKernel(v);\n        if (!this.options.blockCompilation) {\n            this._updateParameters();\n        }\n    }\n    /**\n     * Gets the length in pixels of the blur sample region\n     */\n    get kernel() {\n        return this._idealKernel;\n    }\n    /**\n     * Sets whether or not the blur needs to unpack/repack floats\n     */\n    set packedFloat(v) {\n        if (this._packedFloat === v) {\n            return;\n        }\n        this._packedFloat = v;\n        if (!this.options.blockCompilation) {\n            this._updateParameters();\n        }\n    }\n    /**\n     * Gets whether or not the blur is unpacking/repacking floats\n     */\n    get packedFloat() {\n        return this._packedFloat;\n    }\n    bind(noDefaultBindings = false) {\n        super.bind(noDefaultBindings);\n        this._drawWrapper.effect.setFloat2(\"delta\", (1 / this.textureWidth) * this.direction.x, (1 / this.textureHeight) * this.direction.y);\n    }\n    /** @internal */\n    _updateParameters(onCompiled, onError) {\n        // Generate sampling offsets and weights\n        const n = this._kernel;\n        const centerIndex = (n - 1) / 2;\n        // Generate Gaussian sampling weights over kernel\n        let offsets = [];\n        let weights = [];\n        let totalWeight = 0;\n        for (let i = 0; i < n; i++) {\n            const u = i / (n - 1);\n            const w = this._gaussianWeight(u * 2.0 - 1);\n            offsets[i] = i - centerIndex;\n            weights[i] = w;\n            totalWeight += w;\n        }\n        // Normalize weights\n        for (let i = 0; i < weights.length; i++) {\n            weights[i] /= totalWeight;\n        }\n        // Optimize: combine samples to take advantage of hardware linear sampling\n        // Walk from left to center, combining pairs (symmetrically)\n        const linearSamplingWeights = [];\n        const linearSamplingOffsets = [];\n        const linearSamplingMap = [];\n        for (let i = 0; i <= centerIndex; i += 2) {\n            const j = Math.min(i + 1, Math.floor(centerIndex));\n            const singleCenterSample = i === j;\n            if (singleCenterSample) {\n                linearSamplingMap.push({ o: offsets[i], w: weights[i] });\n            }\n            else {\n                const sharedCell = j === centerIndex;\n                const weightLinear = weights[i] + weights[j] * (sharedCell ? 0.5 : 1);\n                const offsetLinear = offsets[i] + 1 / (1 + weights[i] / weights[j]);\n                if (offsetLinear === 0) {\n                    linearSamplingMap.push({ o: offsets[i], w: weights[i] });\n                    linearSamplingMap.push({ o: offsets[i + 1], w: weights[i + 1] });\n                }\n                else {\n                    linearSamplingMap.push({ o: offsetLinear, w: weightLinear });\n                    linearSamplingMap.push({ o: -offsetLinear, w: weightLinear });\n                }\n            }\n        }\n        for (let i = 0; i < linearSamplingMap.length; i++) {\n            linearSamplingOffsets[i] = linearSamplingMap[i].o;\n            linearSamplingWeights[i] = linearSamplingMap[i].w;\n        }\n        // Replace with optimized\n        offsets = linearSamplingOffsets;\n        weights = linearSamplingWeights;\n        // Generate shaders\n        const maxVaryingRows = this.options.engine.getCaps().maxVaryingVectors - (this.options.shaderLanguage === 1 /* ShaderLanguage.WGSL */ ? 1 : 0); // Because of the additional builtins\n        const freeVaryingVec2 = Math.max(maxVaryingRows, 0) - 1; // Because of sampleCenter\n        let varyingCount = Math.min(offsets.length, freeVaryingVec2);\n        let defines = \"\";\n        defines += this._staticDefines;\n        // The DOF fragment should ignore the center pixel when looping as it is handled manually in the fragment shader.\n        if (this._staticDefines.indexOf(\"DOF\") != -1) {\n            defines += `#define CENTER_WEIGHT ${this._glslFloat(weights[varyingCount - 1])}\\n`;\n            varyingCount--;\n        }\n        for (let i = 0; i < varyingCount; i++) {\n            defines += `#define KERNEL_OFFSET${i} ${this._glslFloat(offsets[i])}\\n`;\n            defines += `#define KERNEL_WEIGHT${i} ${this._glslFloat(weights[i])}\\n`;\n        }\n        let depCount = 0;\n        for (let i = freeVaryingVec2; i < offsets.length; i++) {\n            defines += `#define KERNEL_DEP_OFFSET${depCount} ${this._glslFloat(offsets[i])}\\n`;\n            defines += `#define KERNEL_DEP_WEIGHT${depCount} ${this._glslFloat(weights[i])}\\n`;\n            depCount++;\n        }\n        if (this.packedFloat) {\n            defines += `#define PACKEDFLOAT 1`;\n        }\n        this.options.blockCompilation = false;\n        this.updateEffect(defines, null, null, {\n            varyingCount: varyingCount,\n            depCount: depCount,\n        }, onCompiled, onError);\n    }\n    /**\n     * Best kernels are odd numbers that when divided by 2, their integer part is even, so 5, 9 or 13.\n     * Other odd kernels optimize correctly but require proportionally more samples, even kernels are\n     * possible but will produce minor visual artifacts. Since each new kernel requires a new shader we\n     * want to minimize kernel changes, having gaps between physical kernels is helpful in that regard.\n     * The gaps between physical kernels are compensated for in the weighting of the samples\n     * @param idealKernel Ideal blur kernel.\n     * @returns Nearest best kernel.\n     */\n    _nearestBestKernel(idealKernel) {\n        const v = Math.round(idealKernel);\n        for (const k of [v, v - 1, v + 1, v - 2, v + 2]) {\n            if (k % 2 !== 0 && Math.floor(k / 2) % 2 === 0 && k > 0) {\n                return Math.max(k, 3);\n            }\n        }\n        return Math.max(v, 3);\n    }\n    /**\n     * Calculates the value of a Gaussian distribution with sigma 3 at a given point.\n     * @param x The point on the Gaussian distribution to sample.\n     * @returns the value of the Gaussian function at x.\n     */\n    _gaussianWeight(x) {\n        //reference: Engines/ImageProcessingBlur.cpp #dcc760\n        // We are evaluating the Gaussian (normal) distribution over a kernel parameter space of [-1,1],\n        // so we truncate at three standard deviations by setting stddev (sigma) to 1/3.\n        // The choice of 3-sigma truncation is common but arbitrary, and means that the signal is\n        // truncated at around 1.3% of peak strength.\n        //the distribution is scaled to account for the difference between the actual kernel size and the requested kernel size\n        const sigma = 1 / 3;\n        const denominator = Math.sqrt(2.0 * Math.PI) * sigma;\n        const exponent = -((x * x) / (2.0 * sigma * sigma));\n        const weight = (1.0 / denominator) * Math.exp(exponent);\n        return weight;\n    }\n    /**\n     * Generates a string that can be used as a floating point number in GLSL.\n     * @param x Value to print.\n     * @param decimalFigures Number of decimal places to print the number to (excluding trailing 0s).\n     * @returns GLSL float string.\n     */\n    _glslFloat(x, decimalFigures = 8) {\n        return x.toFixed(decimalFigures).replace(/0+$/, \"\");\n    }\n}\n/**\n * The vertex shader url\n */\nThinBlurPostProcess.VertexUrl = \"kernelBlur\";\n/**\n * The fragment shader url\n */\nThinBlurPostProcess.FragmentUrl = \"kernelBlur\";\n/**\n * The list of uniforms used by the effect\n */\nThinBlurPostProcess.Uniforms = [\"delta\", \"direction\"];\n/**\n * The list of samplers used by the effect\n */\nThinBlurPostProcess.Samplers = [\"circleOfConfusionSampler\"];\n//# sourceMappingURL=thinBlurPostProcess.js.map","import { __decorate } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { Constants } from \"../Engines/constants\";\nimport { RegisterClass } from \"../Misc/typeStore\";\nimport { serialize, serializeAsVector2 } from \"../Misc/decorators\";\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\nimport { ThinBlurPostProcess } from \"./thinBlurPostProcess\";\n/**\n * The Blur Post Process which blurs an image based on a kernel and direction.\n * Can be used twice in x and y directions to perform a gaussian blur in two passes.\n */\nexport class BlurPostProcess extends PostProcess {\n    /** The direction in which to blur the image. */\n    get direction() {\n        return this._effectWrapper.direction;\n    }\n    set direction(value) {\n        this._effectWrapper.direction = value;\n    }\n    /**\n     * Sets the length in pixels of the blur sample region\n     */\n    set kernel(v) {\n        this._effectWrapper.kernel = v;\n    }\n    /**\n     * Gets the length in pixels of the blur sample region\n     */\n    get kernel() {\n        return this._effectWrapper.kernel;\n    }\n    /**\n     * Sets whether or not the blur needs to unpack/repack floats\n     */\n    set packedFloat(v) {\n        this._effectWrapper.packedFloat = v;\n    }\n    /**\n     * Gets whether or not the blur is unpacking/repacking floats\n     */\n    get packedFloat() {\n        return this._effectWrapper.packedFloat;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"BlurPostProcess\" string\n     */\n    getClassName() {\n        return \"BlurPostProcess\";\n    }\n    /**\n     * Creates a new instance BlurPostProcess\n     * @param name The name of the effect.\n     * @param direction The direction in which to blur the image.\n     * @param kernel The size of the kernel to be used when computing the blur. eg. Size of 3 will blur the center pixel by 2 pixels surrounding it.\n     * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param defines\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     * @param textureFormat Format of textures used when performing the post process. (default: TEXTUREFORMAT_RGBA)\n     */\n    constructor(name, direction, kernel, options, camera = null, samplingMode = Texture.BILINEAR_SAMPLINGMODE, engine, reusable, textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE, defines = \"\", blockCompilation = false, textureFormat = Constants.TEXTUREFORMAT_RGBA) {\n        const blockCompilationFinal = typeof options === \"number\" ? blockCompilation : !!options.blockCompilation;\n        const localOptions = {\n            uniforms: ThinBlurPostProcess.Uniforms,\n            samplers: ThinBlurPostProcess.Samplers,\n            size: typeof options === \"number\" ? options : undefined,\n            camera,\n            samplingMode,\n            engine,\n            reusable,\n            textureType,\n            vertexUrl: ThinBlurPostProcess.VertexUrl,\n            indexParameters: { varyingCount: 0, depCount: 0 },\n            textureFormat,\n            defines,\n            ...options,\n            blockCompilation: true,\n        };\n        super(name, ThinBlurPostProcess.FragmentUrl, {\n            effectWrapper: typeof options === \"number\" || !options.effectWrapper ? new ThinBlurPostProcess(name, engine, undefined, undefined, localOptions) : undefined,\n            ...localOptions,\n        });\n        this._effectWrapper.options.blockCompilation = blockCompilationFinal;\n        this.direction = direction;\n        this.onApplyObservable.add(() => {\n            this._effectWrapper.textureWidth = this._outputTexture ? this._outputTexture.width : this.width;\n            this._effectWrapper.textureHeight = this._outputTexture ? this._outputTexture.height : this.height;\n        });\n        this.kernel = kernel;\n    }\n    updateEffect(_defines = null, _uniforms = null, _samplers = null, _indexParameters, onCompiled, onError) {\n        this._effectWrapper._updateParameters(onCompiled, onError);\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new BlurPostProcess(parsedPostProcess.name, parsedPostProcess.direction, parsedPostProcess.kernel, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType, undefined, false);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\n__decorate([\n    serializeAsVector2()\n], BlurPostProcess.prototype, \"direction\", null);\n__decorate([\n    serialize()\n], BlurPostProcess.prototype, \"kernel\", null);\n__decorate([\n    serialize()\n], BlurPostProcess.prototype, \"packedFloat\", null);\nRegisterClass(\"BABYLON.BlurPostProcess\", BlurPostProcess);\n//# sourceMappingURL=blurPostProcess.js.map","import { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector\";\nimport { Color4 } from \"../../Maths/math.color\";\nimport { VertexBuffer } from \"../../Buffers/buffer\";\nimport { Light } from \"../../Lights/light\";\nimport { Texture } from \"../../Materials/Textures/texture\";\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\nimport { PostProcess } from \"../../PostProcesses/postProcess\";\nimport { BlurPostProcess } from \"../../PostProcesses/blurPostProcess\";\nimport { Constants } from \"../../Engines/constants\";\nimport { Observable } from \"../../Misc/observable\";\nimport { _WarnImport } from \"../../Misc/devTools\";\nimport { EffectFallbacks } from \"../../Materials/effectFallbacks\";\nimport { RenderingManager } from \"../../Rendering/renderingManager\";\nimport { DrawWrapper } from \"../../Materials/drawWrapper\";\nimport { AddClipPlaneUniforms, BindClipPlane, PrepareStringDefinesForClipPlanes } from \"../../Materials/clipPlaneMaterialHelper\";\nimport { BindMorphTargetParameters, BindSceneUniformBuffer, PrepareDefinesAndAttributesForMorphTargets, PushAttributesForInstances, } from \"../../Materials/materialHelper.functions\";\n/**\n * Default implementation IShadowGenerator.\n * This is the main object responsible of generating shadows in the framework.\n * Documentation: https://doc.babylonjs.com/features/featuresDeepDive/lights/shadows\n * @see [WebGL](https://playground.babylonjs.com/#IFYDRS#0)\n * @see [WebGPU](https://playground.babylonjs.com/#IFYDRS#835)\n */\nexport class ShadowGenerator {\n    /**\n     * Gets the bias: offset applied on the depth preventing acnea (in light direction).\n     */\n    get bias() {\n        return this._bias;\n    }\n    /**\n     * Sets the bias: offset applied on the depth preventing acnea (in light direction).\n     */\n    set bias(bias) {\n        this._bias = bias;\n    }\n    /**\n     * Gets the normalBias: offset applied on the depth preventing acnea (along side the normal direction and proportional to the light/normal angle).\n     */\n    get normalBias() {\n        return this._normalBias;\n    }\n    /**\n     * Sets the normalBias: offset applied on the depth preventing acnea (along side the normal direction and proportional to the light/normal angle).\n     */\n    set normalBias(normalBias) {\n        this._normalBias = normalBias;\n    }\n    /**\n     * Gets the blur box offset: offset applied during the blur pass.\n     * Only useful if useKernelBlur = false\n     */\n    get blurBoxOffset() {\n        return this._blurBoxOffset;\n    }\n    /**\n     * Sets the blur box offset: offset applied during the blur pass.\n     * Only useful if useKernelBlur = false\n     */\n    set blurBoxOffset(value) {\n        if (this._blurBoxOffset === value) {\n            return;\n        }\n        this._blurBoxOffset = value;\n        this._disposeBlurPostProcesses();\n    }\n    /**\n     * Gets the blur scale: scale of the blurred texture compared to the main shadow map.\n     * 2 means half of the size.\n     */\n    get blurScale() {\n        return this._blurScale;\n    }\n    /**\n     * Sets the blur scale: scale of the blurred texture compared to the main shadow map.\n     * 2 means half of the size.\n     */\n    set blurScale(value) {\n        if (this._blurScale === value) {\n            return;\n        }\n        this._blurScale = value;\n        this._disposeBlurPostProcesses();\n    }\n    /**\n     * Gets the blur kernel: kernel size of the blur pass.\n     * Only useful if useKernelBlur = true\n     */\n    get blurKernel() {\n        return this._blurKernel;\n    }\n    /**\n     * Sets the blur kernel: kernel size of the blur pass.\n     * Only useful if useKernelBlur = true\n     */\n    set blurKernel(value) {\n        if (this._blurKernel === value) {\n            return;\n        }\n        this._blurKernel = value;\n        this._disposeBlurPostProcesses();\n    }\n    /**\n     * Gets whether the blur pass is a kernel blur (if true) or box blur.\n     * Only useful in filtered mode (useBlurExponentialShadowMap...)\n     */\n    get useKernelBlur() {\n        return this._useKernelBlur;\n    }\n    /**\n     * Sets whether the blur pass is a kernel blur (if true) or box blur.\n     * Only useful in filtered mode (useBlurExponentialShadowMap...)\n     */\n    set useKernelBlur(value) {\n        if (this._useKernelBlur === value) {\n            return;\n        }\n        this._useKernelBlur = value;\n        this._disposeBlurPostProcesses();\n    }\n    /**\n     * Gets the depth scale used in ESM mode.\n     */\n    get depthScale() {\n        return this._depthScale !== undefined ? this._depthScale : this._light.getDepthScale();\n    }\n    /**\n     * Sets the depth scale used in ESM mode.\n     * This can override the scale stored on the light.\n     */\n    set depthScale(value) {\n        this._depthScale = value;\n    }\n    _validateFilter(filter) {\n        return filter;\n    }\n    /**\n     * Gets the current mode of the shadow generator (normal, PCF, ESM...).\n     * The returned value is a number equal to one of the available mode defined in ShadowMap.FILTER_x like _FILTER_NONE\n     */\n    get filter() {\n        return this._filter;\n    }\n    /**\n     * Sets the current mode of the shadow generator (normal, PCF, ESM...).\n     * The returned value is a number equal to one of the available mode defined in ShadowMap.FILTER_x like _FILTER_NONE\n     */\n    set filter(value) {\n        value = this._validateFilter(value);\n        // Blurring the cubemap is going to be too expensive. Reverting to unblurred version\n        if (this._light.needCube()) {\n            if (value === ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP) {\n                this.useExponentialShadowMap = true;\n                return;\n            }\n            else if (value === ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP) {\n                this.useCloseExponentialShadowMap = true;\n                return;\n            }\n            // PCF on cubemap would also be expensive\n            else if (value === ShadowGenerator.FILTER_PCF || value === ShadowGenerator.FILTER_PCSS) {\n                this.usePoissonSampling = true;\n                return;\n            }\n        }\n        // Weblg1 fallback for PCF.\n        if (value === ShadowGenerator.FILTER_PCF || value === ShadowGenerator.FILTER_PCSS) {\n            if (!this._scene.getEngine()._features.supportShadowSamplers) {\n                this.usePoissonSampling = true;\n                return;\n            }\n        }\n        if (this._filter === value) {\n            return;\n        }\n        this._filter = value;\n        this._disposeBlurPostProcesses();\n        this._applyFilterValues();\n        this._light._markMeshesAsLightDirty();\n    }\n    /**\n     * Gets if the current filter is set to Poisson Sampling.\n     */\n    get usePoissonSampling() {\n        return this.filter === ShadowGenerator.FILTER_POISSONSAMPLING;\n    }\n    /**\n     * Sets the current filter to Poisson Sampling.\n     */\n    set usePoissonSampling(value) {\n        const filter = this._validateFilter(ShadowGenerator.FILTER_POISSONSAMPLING);\n        if (!value && this.filter !== ShadowGenerator.FILTER_POISSONSAMPLING) {\n            return;\n        }\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\n    }\n    /**\n     * Gets if the current filter is set to ESM.\n     */\n    get useExponentialShadowMap() {\n        return this.filter === ShadowGenerator.FILTER_EXPONENTIALSHADOWMAP;\n    }\n    /**\n     * Sets the current filter is to ESM.\n     */\n    set useExponentialShadowMap(value) {\n        const filter = this._validateFilter(ShadowGenerator.FILTER_EXPONENTIALSHADOWMAP);\n        if (!value && this.filter !== ShadowGenerator.FILTER_EXPONENTIALSHADOWMAP) {\n            return;\n        }\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\n    }\n    /**\n     * Gets if the current filter is set to filtered ESM.\n     */\n    get useBlurExponentialShadowMap() {\n        return this.filter === ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP;\n    }\n    /**\n     * Gets if the current filter is set to filtered  ESM.\n     */\n    set useBlurExponentialShadowMap(value) {\n        const filter = this._validateFilter(ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP);\n        if (!value && this.filter !== ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP) {\n            return;\n        }\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\n    }\n    /**\n     * Gets if the current filter is set to \"close ESM\" (using the inverse of the\n     * exponential to prevent steep falloff artifacts).\n     */\n    get useCloseExponentialShadowMap() {\n        return this.filter === ShadowGenerator.FILTER_CLOSEEXPONENTIALSHADOWMAP;\n    }\n    /**\n     * Sets the current filter to \"close ESM\" (using the inverse of the\n     * exponential to prevent steep falloff artifacts).\n     */\n    set useCloseExponentialShadowMap(value) {\n        const filter = this._validateFilter(ShadowGenerator.FILTER_CLOSEEXPONENTIALSHADOWMAP);\n        if (!value && this.filter !== ShadowGenerator.FILTER_CLOSEEXPONENTIALSHADOWMAP) {\n            return;\n        }\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\n    }\n    /**\n     * Gets if the current filter is set to filtered \"close ESM\" (using the inverse of the\n     * exponential to prevent steep falloff artifacts).\n     */\n    get useBlurCloseExponentialShadowMap() {\n        return this.filter === ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP;\n    }\n    /**\n     * Sets the current filter to filtered \"close ESM\" (using the inverse of the\n     * exponential to prevent steep falloff artifacts).\n     */\n    set useBlurCloseExponentialShadowMap(value) {\n        const filter = this._validateFilter(ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP);\n        if (!value && this.filter !== ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP) {\n            return;\n        }\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\n    }\n    /**\n     * Gets if the current filter is set to \"PCF\" (percentage closer filtering).\n     */\n    get usePercentageCloserFiltering() {\n        return this.filter === ShadowGenerator.FILTER_PCF;\n    }\n    /**\n     * Sets the current filter to \"PCF\" (percentage closer filtering).\n     */\n    set usePercentageCloserFiltering(value) {\n        const filter = this._validateFilter(ShadowGenerator.FILTER_PCF);\n        if (!value && this.filter !== ShadowGenerator.FILTER_PCF) {\n            return;\n        }\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\n    }\n    /**\n     * Gets the PCF or PCSS Quality.\n     * Only valid if usePercentageCloserFiltering or usePercentageCloserFiltering is true.\n     */\n    get filteringQuality() {\n        return this._filteringQuality;\n    }\n    /**\n     * Sets the PCF or PCSS Quality.\n     * Only valid if usePercentageCloserFiltering or usePercentageCloserFiltering is true.\n     */\n    set filteringQuality(filteringQuality) {\n        if (this._filteringQuality === filteringQuality) {\n            return;\n        }\n        this._filteringQuality = filteringQuality;\n        this._disposeBlurPostProcesses();\n        this._applyFilterValues();\n        this._light._markMeshesAsLightDirty();\n    }\n    /**\n     * Gets if the current filter is set to \"PCSS\" (contact hardening).\n     */\n    get useContactHardeningShadow() {\n        return this.filter === ShadowGenerator.FILTER_PCSS;\n    }\n    /**\n     * Sets the current filter to \"PCSS\" (contact hardening).\n     */\n    set useContactHardeningShadow(value) {\n        const filter = this._validateFilter(ShadowGenerator.FILTER_PCSS);\n        if (!value && this.filter !== ShadowGenerator.FILTER_PCSS) {\n            return;\n        }\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\n    }\n    /**\n     * Gets the Light Size (in shadow map uv unit) used in PCSS to determine the blocker search area and the penumbra size.\n     * Using a ratio helps keeping shape stability independently of the map size.\n     *\n     * It does not account for the light projection as it was having too much\n     * instability during the light setup or during light position changes.\n     *\n     * Only valid if useContactHardeningShadow is true.\n     */\n    get contactHardeningLightSizeUVRatio() {\n        return this._contactHardeningLightSizeUVRatio;\n    }\n    /**\n     * Sets the Light Size (in shadow map uv unit) used in PCSS to determine the blocker search area and the penumbra size.\n     * Using a ratio helps keeping shape stability independently of the map size.\n     *\n     * It does not account for the light projection as it was having too much\n     * instability during the light setup or during light position changes.\n     *\n     * Only valid if useContactHardeningShadow is true.\n     */\n    set contactHardeningLightSizeUVRatio(contactHardeningLightSizeUVRatio) {\n        this._contactHardeningLightSizeUVRatio = contactHardeningLightSizeUVRatio;\n    }\n    /** Gets or sets the actual darkness of a shadow */\n    get darkness() {\n        return this._darkness;\n    }\n    set darkness(value) {\n        this.setDarkness(value);\n    }\n    /**\n     * Returns the darkness value (float). This can only decrease the actual darkness of a shadow.\n     * 0 means strongest and 1 would means no shadow.\n     * @returns the darkness.\n     */\n    getDarkness() {\n        return this._darkness;\n    }\n    /**\n     * Sets the darkness value (float). This can only decrease the actual darkness of a shadow.\n     * @param darkness The darkness value 0 means strongest and 1 would means no shadow.\n     * @returns the shadow generator allowing fluent coding.\n     */\n    setDarkness(darkness) {\n        if (darkness >= 1.0) {\n            this._darkness = 1.0;\n        }\n        else if (darkness <= 0.0) {\n            this._darkness = 0.0;\n        }\n        else {\n            this._darkness = darkness;\n        }\n        return this;\n    }\n    /** Gets or sets the ability to have transparent shadow */\n    get transparencyShadow() {\n        return this._transparencyShadow;\n    }\n    set transparencyShadow(value) {\n        this.setTransparencyShadow(value);\n    }\n    /**\n     * Sets the ability to have transparent shadow (boolean).\n     * @param transparent True if transparent else False\n     * @returns the shadow generator allowing fluent coding\n     */\n    setTransparencyShadow(transparent) {\n        this._transparencyShadow = transparent;\n        return this;\n    }\n    /**\n     * Gets the main RTT containing the shadow map (usually storing depth from the light point of view).\n     * @returns The render target texture if present otherwise, null\n     */\n    getShadowMap() {\n        return this._shadowMap;\n    }\n    /**\n     * Gets the RTT used during rendering (can be a blurred version of the shadow map or the shadow map itself).\n     * @returns The render target texture if the shadow map is present otherwise, null\n     */\n    getShadowMapForRendering() {\n        if (this._shadowMap2) {\n            return this._shadowMap2;\n        }\n        return this._shadowMap;\n    }\n    /**\n     * Gets the class name of that object\n     * @returns \"ShadowGenerator\"\n     */\n    getClassName() {\n        return ShadowGenerator.CLASSNAME;\n    }\n    /**\n     * Helper function to add a mesh and its descendants to the list of shadow casters.\n     * @param mesh Mesh to add\n     * @param includeDescendants boolean indicating if the descendants should be added. Default to true\n     * @returns the Shadow Generator itself\n     */\n    addShadowCaster(mesh, includeDescendants = true) {\n        if (!this._shadowMap) {\n            return this;\n        }\n        if (!this._shadowMap.renderList) {\n            this._shadowMap.renderList = [];\n        }\n        if (this._shadowMap.renderList.indexOf(mesh) === -1) {\n            this._shadowMap.renderList.push(mesh);\n        }\n        if (includeDescendants) {\n            for (const childMesh of mesh.getChildMeshes()) {\n                if (this._shadowMap.renderList.indexOf(childMesh) === -1) {\n                    this._shadowMap.renderList.push(childMesh);\n                }\n            }\n        }\n        return this;\n    }\n    /**\n     * Helper function to remove a mesh and its descendants from the list of shadow casters\n     * @param mesh Mesh to remove\n     * @param includeDescendants boolean indicating if the descendants should be removed. Default to true\n     * @returns the Shadow Generator itself\n     */\n    removeShadowCaster(mesh, includeDescendants = true) {\n        if (!this._shadowMap || !this._shadowMap.renderList) {\n            return this;\n        }\n        const index = this._shadowMap.renderList.indexOf(mesh);\n        if (index !== -1) {\n            this._shadowMap.renderList.splice(index, 1);\n        }\n        if (includeDescendants) {\n            for (const child of mesh.getChildren()) {\n                this.removeShadowCaster(child);\n            }\n        }\n        return this;\n    }\n    /**\n     * Returns the associated light object.\n     * @returns the light generating the shadow\n     */\n    getLight() {\n        return this._light;\n    }\n    /**\n     * Gets the shader language used in this generator.\n     */\n    get shaderLanguage() {\n        return this._shaderLanguage;\n    }\n    _getCamera() {\n        return this._camera ?? this._scene.activeCamera;\n    }\n    /**\n     * Gets or sets the size of the texture what stores the shadows\n     */\n    get mapSize() {\n        return this._mapSize;\n    }\n    set mapSize(size) {\n        this._mapSize = size;\n        this._light._markMeshesAsLightDirty();\n        this.recreateShadowMap();\n    }\n    /**\n     * Creates a ShadowGenerator object.\n     * A ShadowGenerator is the required tool to use the shadows.\n     * Each light casting shadows needs to use its own ShadowGenerator.\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/shadows\n     * @param mapSize The size of the texture what stores the shadows. Example : 1024.\n     * @param light The light object generating the shadows.\n     * @param usefullFloatFirst By default the generator will try to use half float textures but if you need precision (for self shadowing for instance), you can use this option to enforce full float texture.\n     * @param camera Camera associated with this shadow generator (default: null). If null, takes the scene active camera at the time we need to access it\n     * @param useRedTextureType Forces the generator to use a Red instead of a RGBA type for the shadow map texture format (default: false)\n     * @param forceGLSL defines a boolean indicating if the shader must be compiled in GLSL even if we are using WebGPU\n     */\n    constructor(mapSize, light, usefullFloatFirst, camera, useRedTextureType, forceGLSL = false) {\n        /**\n         * Observable triggered before the shadow is rendered. Can be used to update internal effect state\n         */\n        this.onBeforeShadowMapRenderObservable = new Observable();\n        /**\n         * Observable triggered after the shadow is rendered. Can be used to restore internal effect state\n         */\n        this.onAfterShadowMapRenderObservable = new Observable();\n        /**\n         * Observable triggered before a mesh is rendered in the shadow map.\n         * Can be used to update internal effect state (that you can get from the onBeforeShadowMapRenderObservable)\n         */\n        this.onBeforeShadowMapRenderMeshObservable = new Observable();\n        /**\n         * Observable triggered after a mesh is rendered in the shadow map.\n         * Can be used to update internal effect state (that you can get from the onAfterShadowMapRenderObservable)\n         */\n        this.onAfterShadowMapRenderMeshObservable = new Observable();\n        /**\n         * Specifies if the `ShadowGenerator` should be serialized, `true` to skip serialization.\n         * Note a `ShadowGenerator` will not be serialized if its light has `doNotSerialize=true`\n         */\n        this.doNotSerialize = false;\n        this._bias = 0.00005;\n        this._normalBias = 0;\n        this._blurBoxOffset = 1;\n        this._blurScale = 2;\n        this._blurKernel = 1;\n        this._useKernelBlur = false;\n        this._filter = ShadowGenerator.FILTER_NONE;\n        this._filteringQuality = ShadowGenerator.QUALITY_HIGH;\n        this._contactHardeningLightSizeUVRatio = 0.1;\n        this._darkness = 0;\n        this._transparencyShadow = false;\n        /**\n         * Enables or disables shadows with varying strength based on the transparency\n         * When it is enabled, the strength of the shadow is taken equal to mesh.visibility\n         * If you enabled an alpha texture on your material, the alpha value red from the texture is also combined to compute the strength:\n         *          mesh.visibility * alphaTexture.a\n         * The texture used is the diffuse by default, but it can be set to the opacity by setting useOpacityTextureForTransparentShadow\n         * Note that by definition transparencyShadow must be set to true for enableSoftTransparentShadow to work!\n         */\n        this.enableSoftTransparentShadow = false;\n        /**\n         * If this is true, use the opacity texture's alpha channel for transparent shadows instead of the diffuse one\n         */\n        this.useOpacityTextureForTransparentShadow = false;\n        /**\n         * Controls the extent to which the shadows fade out at the edge of the frustum\n         */\n        this.frustumEdgeFalloff = 0;\n        /** Shader language used by the generator */\n        this._shaderLanguage = 0 /* ShaderLanguage.GLSL */;\n        /**\n         * If true the shadow map is generated by rendering the back face of the mesh instead of the front face.\n         * This can help with self-shadowing as the geometry making up the back of objects is slightly offset.\n         * It might on the other hand introduce peter panning.\n         */\n        this.forceBackFacesOnly = false;\n        this._lightDirection = Vector3.Zero();\n        this._viewMatrix = Matrix.Zero();\n        this._projectionMatrix = Matrix.Zero();\n        this._transformMatrix = Matrix.Zero();\n        this._cachedPosition = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this._cachedDirection = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this._currentFaceIndex = 0;\n        this._currentFaceIndexCache = 0;\n        this._defaultTextureMatrix = Matrix.Identity();\n        this._shadersLoaded = false;\n        this._mapSize = mapSize;\n        this._light = light;\n        this._scene = light.getScene();\n        this._camera = camera ?? null;\n        this._useRedTextureType = !!useRedTextureType;\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this._initShaderSourceAsync(forceGLSL);\n        let shadowGenerators = light._shadowGenerators;\n        if (!shadowGenerators) {\n            shadowGenerators = light._shadowGenerators = new Map();\n        }\n        shadowGenerators.set(this._camera, this);\n        this.id = light.id;\n        this._useUBO = this._scene.getEngine().supportsUniformBuffers;\n        if (this._useUBO) {\n            this._sceneUBOs = [];\n            this._sceneUBOs.push(this._scene.createSceneUniformBuffer(`Scene for Shadow Generator (light \"${this._light.name}\")`));\n        }\n        ShadowGenerator._SceneComponentInitialization(this._scene);\n        // Texture type fallback from float to int if not supported.\n        const caps = this._scene.getEngine().getCaps();\n        if (!usefullFloatFirst) {\n            if (caps.textureHalfFloatRender && caps.textureHalfFloatLinearFiltering) {\n                this._textureType = Constants.TEXTURETYPE_HALF_FLOAT;\n            }\n            else if (caps.textureFloatRender && caps.textureFloatLinearFiltering) {\n                this._textureType = Constants.TEXTURETYPE_FLOAT;\n            }\n            else {\n                this._textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE;\n            }\n        }\n        else {\n            if (caps.textureFloatRender && caps.textureFloatLinearFiltering) {\n                this._textureType = Constants.TEXTURETYPE_FLOAT;\n            }\n            else if (caps.textureHalfFloatRender && caps.textureHalfFloatLinearFiltering) {\n                this._textureType = Constants.TEXTURETYPE_HALF_FLOAT;\n            }\n            else {\n                this._textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE;\n            }\n        }\n        this._initializeGenerator();\n        this._applyFilterValues();\n    }\n    _initializeGenerator() {\n        this._light._markMeshesAsLightDirty();\n        this._initializeShadowMap();\n    }\n    _createTargetRenderTexture() {\n        const engine = this._scene.getEngine();\n        if (engine._features.supportDepthStencilTexture) {\n            this._shadowMap = new RenderTargetTexture(this._light.name + \"_shadowMap\", this._mapSize, this._scene, false, true, this._textureType, this._light.needCube(), undefined, false, false, undefined, this._useRedTextureType ? Constants.TEXTUREFORMAT_RED : Constants.TEXTUREFORMAT_RGBA);\n            this._shadowMap.createDepthStencilTexture(engine.useReverseDepthBuffer ? Constants.GREATER : Constants.LESS, true, undefined, undefined, undefined, `DepthStencilForShadowGenerator-${this._light.name}`);\n        }\n        else {\n            this._shadowMap = new RenderTargetTexture(this._light.name + \"_shadowMap\", this._mapSize, this._scene, false, true, this._textureType, this._light.needCube());\n        }\n        this._shadowMap.noPrePassRenderer = true;\n    }\n    _initializeShadowMap() {\n        this._createTargetRenderTexture();\n        if (this._shadowMap === null) {\n            return;\n        }\n        this._shadowMap.wrapU = Texture.CLAMP_ADDRESSMODE;\n        this._shadowMap.wrapV = Texture.CLAMP_ADDRESSMODE;\n        this._shadowMap.anisotropicFilteringLevel = 1;\n        this._shadowMap.updateSamplingMode(Texture.BILINEAR_SAMPLINGMODE);\n        this._shadowMap.renderParticles = false;\n        this._shadowMap.ignoreCameraViewport = true;\n        if (this._storedUniqueId) {\n            this._shadowMap.uniqueId = this._storedUniqueId;\n        }\n        // Custom render function.\n        this._shadowMap.customRenderFunction = (opaqueSubMeshes, alphaTestSubMeshes, transparentSubMeshes, depthOnlySubMeshes) => this._renderForShadowMap(opaqueSubMeshes, alphaTestSubMeshes, transparentSubMeshes, depthOnlySubMeshes);\n        // When preWarm is false, forces the mesh is ready function to true as we are double checking it\n        // in the custom render function. Also it prevents side effects and useless\n        // shader variations in DEPTHPREPASS mode.\n        this._shadowMap.customIsReadyFunction = (mesh, _refreshRate, preWarm) => {\n            if (!preWarm || !mesh.subMeshes) {\n                return true;\n            }\n            let isReady = true;\n            for (const subMesh of mesh.subMeshes) {\n                const renderingMesh = subMesh.getRenderingMesh();\n                const scene = this._scene;\n                const engine = scene.getEngine();\n                const material = subMesh.getMaterial();\n                if (!material || subMesh.verticesCount === 0 || (this.customAllowRendering && !this.customAllowRendering(subMesh))) {\n                    continue;\n                }\n                const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\n                if (batch.mustReturn) {\n                    continue;\n                }\n                const hardwareInstancedRendering = engine.getCaps().instancedArrays &&\n                    ((batch.visibleInstances[subMesh._id] !== null && batch.visibleInstances[subMesh._id] !== undefined) || renderingMesh.hasThinInstances);\n                const isTransparent = material.needAlphaBlendingForMesh(renderingMesh);\n                isReady = this.isReady(subMesh, hardwareInstancedRendering, isTransparent) && isReady;\n            }\n            return isReady;\n        };\n        const engine = this._scene.getEngine();\n        this._shadowMap.onBeforeBindObservable.add(() => {\n            this._currentSceneUBO = this._scene.getSceneUniformBuffer();\n            engine._debugPushGroup?.(`shadow map generation for pass id ${engine.currentRenderPassId}`, 1);\n        });\n        // Record Face Index before render.\n        this._shadowMap.onBeforeRenderObservable.add((faceIndex) => {\n            if (this._sceneUBOs) {\n                this._scene.setSceneUniformBuffer(this._sceneUBOs[0]);\n            }\n            this._currentFaceIndex = faceIndex;\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\n                engine.setColorWrite(false);\n            }\n            this.getTransformMatrix(); // generate the view/projection matrix\n            this._scene.setTransformMatrix(this._viewMatrix, this._projectionMatrix);\n            if (this._useUBO) {\n                this._scene.getSceneUniformBuffer().unbindEffect();\n                this._scene.finalizeSceneUbo();\n            }\n        });\n        // Blur if required after render.\n        this._shadowMap.onAfterUnbindObservable.add(() => {\n            if (this._sceneUBOs) {\n                this._scene.setSceneUniformBuffer(this._currentSceneUBO);\n            }\n            this._scene.updateTransformMatrix(); // restore the view/projection matrices of the active camera\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\n                engine.setColorWrite(true);\n            }\n            if (!this.useBlurExponentialShadowMap && !this.useBlurCloseExponentialShadowMap) {\n                engine._debugPopGroup?.(1);\n                return;\n            }\n            const shadowMap = this.getShadowMapForRendering();\n            if (shadowMap) {\n                this._scene.postProcessManager.directRender(this._blurPostProcesses, shadowMap.renderTarget, true);\n                engine.unBindFramebuffer(shadowMap.renderTarget, true);\n            }\n            engine._debugPopGroup?.(1);\n        });\n        // Clear according to the chosen filter.\n        const clearZero = new Color4(0, 0, 0, 0);\n        const clearOne = new Color4(1.0, 1.0, 1.0, 1.0);\n        this._shadowMap.onClearObservable.add((engine) => {\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\n                engine.clear(clearOne, false, true, false);\n            }\n            else if (this.useExponentialShadowMap || this.useBlurExponentialShadowMap) {\n                engine.clear(clearZero, true, true, false);\n            }\n            else {\n                engine.clear(clearOne, true, true, false);\n            }\n        });\n        // Recreate on resize.\n        this._shadowMap.onResizeObservable.add((rtt) => {\n            this._storedUniqueId = this._shadowMap.uniqueId;\n            this._mapSize = rtt.getRenderSize();\n            this._light._markMeshesAsLightDirty();\n            this.recreateShadowMap();\n        });\n        // Ensures rendering groupids do not erase the depth buffer\n        // or we would lose the shadows information.\n        for (let i = RenderingManager.MIN_RENDERINGGROUPS; i < RenderingManager.MAX_RENDERINGGROUPS; i++) {\n            this._shadowMap.setRenderingAutoClearDepthStencil(i, false);\n        }\n    }\n    async _initShaderSourceAsync(forceGLSL = false) {\n        const engine = this._scene.getEngine();\n        if (engine.isWebGPU && !forceGLSL && !ShadowGenerator.ForceGLSL) {\n            this._shaderLanguage = 1 /* ShaderLanguage.WGSL */;\n            await Promise.all([\n                import(\"../../ShadersWGSL/shadowMap.fragment\"),\n                import(\"../../ShadersWGSL/shadowMap.vertex\"),\n                import(\"../../ShadersWGSL/depthBoxBlur.fragment\"),\n                import(\"../../ShadersWGSL/ShadersInclude/shadowMapFragmentSoftTransparentShadow\"),\n            ]);\n        }\n        else {\n            await Promise.all([\n                import(\"../../Shaders/shadowMap.fragment\"),\n                import(\"../../Shaders/shadowMap.vertex\"),\n                import(\"../../Shaders/depthBoxBlur.fragment\"),\n                import(\"../../Shaders/ShadersInclude/shadowMapFragmentSoftTransparentShadow\"),\n            ]);\n        }\n        this._shadersLoaded = true;\n    }\n    _initializeBlurRTTAndPostProcesses() {\n        const engine = this._scene.getEngine();\n        const targetSize = this._mapSize / this.blurScale;\n        if (!this.useKernelBlur || this.blurScale !== 1.0) {\n            this._shadowMap2 = new RenderTargetTexture(this._light.name + \"_shadowMap2\", targetSize, this._scene, false, true, this._textureType, undefined, undefined, false);\n            this._shadowMap2.wrapU = Texture.CLAMP_ADDRESSMODE;\n            this._shadowMap2.wrapV = Texture.CLAMP_ADDRESSMODE;\n            this._shadowMap2.updateSamplingMode(Texture.BILINEAR_SAMPLINGMODE);\n        }\n        if (this.useKernelBlur) {\n            this._kernelBlurXPostprocess = new BlurPostProcess(this._light.name + \"KernelBlurX\", new Vector2(1, 0), this.blurKernel, 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, this._textureType);\n            this._kernelBlurXPostprocess.width = targetSize;\n            this._kernelBlurXPostprocess.height = targetSize;\n            this._kernelBlurXPostprocess.externalTextureSamplerBinding = true;\n            this._kernelBlurXPostprocess.onApplyObservable.add((effect) => {\n                effect.setTexture(\"textureSampler\", this._shadowMap);\n            });\n            this._kernelBlurYPostprocess = new BlurPostProcess(this._light.name + \"KernelBlurY\", new Vector2(0, 1), this.blurKernel, 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, this._textureType);\n            this._kernelBlurXPostprocess.autoClear = false;\n            this._kernelBlurYPostprocess.autoClear = false;\n            if (this._textureType === Constants.TEXTURETYPE_UNSIGNED_BYTE) {\n                this._kernelBlurXPostprocess.packedFloat = true;\n                this._kernelBlurYPostprocess.packedFloat = true;\n            }\n            this._blurPostProcesses = [this._kernelBlurXPostprocess, this._kernelBlurYPostprocess];\n        }\n        else {\n            this._boxBlurPostprocess = new PostProcess(this._light.name + \"DepthBoxBlur\", \"depthBoxBlur\", [\"screenSize\", \"boxOffset\"], [], 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, \"#define OFFSET \" + this._blurBoxOffset, this._textureType, undefined, undefined, undefined, undefined, this._shaderLanguage);\n            this._boxBlurPostprocess.externalTextureSamplerBinding = true;\n            this._boxBlurPostprocess.onApplyObservable.add((effect) => {\n                effect.setFloat2(\"screenSize\", targetSize, targetSize);\n                effect.setTexture(\"textureSampler\", this._shadowMap);\n            });\n            this._boxBlurPostprocess.autoClear = false;\n            this._blurPostProcesses = [this._boxBlurPostprocess];\n        }\n    }\n    _renderForShadowMap(opaqueSubMeshes, alphaTestSubMeshes, transparentSubMeshes, depthOnlySubMeshes) {\n        let index;\n        if (depthOnlySubMeshes.length) {\n            for (index = 0; index < depthOnlySubMeshes.length; index++) {\n                this._renderSubMeshForShadowMap(depthOnlySubMeshes.data[index]);\n            }\n        }\n        for (index = 0; index < opaqueSubMeshes.length; index++) {\n            this._renderSubMeshForShadowMap(opaqueSubMeshes.data[index]);\n        }\n        for (index = 0; index < alphaTestSubMeshes.length; index++) {\n            this._renderSubMeshForShadowMap(alphaTestSubMeshes.data[index]);\n        }\n        if (this._transparencyShadow) {\n            for (index = 0; index < transparentSubMeshes.length; index++) {\n                this._renderSubMeshForShadowMap(transparentSubMeshes.data[index], true);\n            }\n        }\n        else {\n            for (index = 0; index < transparentSubMeshes.length; index++) {\n                transparentSubMeshes.data[index].getEffectiveMesh()._internalAbstractMeshDataInfo._isActiveIntermediate = false;\n            }\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _bindCustomEffectForRenderSubMeshForShadowMap(subMesh, effect, mesh) {\n        effect.setMatrix(\"viewProjection\", this.getTransformMatrix());\n    }\n    _renderSubMeshForShadowMap(subMesh, isTransparent = false) {\n        const renderingMesh = subMesh.getRenderingMesh();\n        const effectiveMesh = subMesh.getEffectiveMesh();\n        const scene = this._scene;\n        const engine = scene.getEngine();\n        const material = subMesh.getMaterial();\n        effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false;\n        if (!material || subMesh.verticesCount === 0 || subMesh._renderId === scene.getRenderId()) {\n            return;\n        }\n        // Culling\n        // Note:\n        // In rhs mode, we assume that meshes will be rendered in right-handed space (i.e. with an RHS camera), so the default value of material.sideOrientation is updated accordingly (see material constructor).\n        // However, when generating a shadow map, we render from the point of view of the light, whose view/projection matrices are always in lhs mode.\n        // We therefore need to \"undo\" the sideOrientation inversion that was previously performed when constructing the material.\n        const useRHS = scene.useRightHandedSystem;\n        const detNeg = effectiveMesh._getWorldMatrixDeterminant() < 0;\n        let sideOrientation = material._getEffectiveOrientation(renderingMesh);\n        if ((detNeg && !useRHS) || (!detNeg && useRHS)) {\n            sideOrientation =\n                sideOrientation === Constants.MATERIAL_ClockWiseSideOrientation ? Constants.MATERIAL_CounterClockWiseSideOrientation : Constants.MATERIAL_ClockWiseSideOrientation;\n        }\n        const reverseSideOrientation = sideOrientation === Constants.MATERIAL_ClockWiseSideOrientation;\n        engine.setState(material.backFaceCulling, undefined, undefined, reverseSideOrientation, material.cullBackFaces);\n        // Managing instances\n        const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\n        if (batch.mustReturn) {\n            return;\n        }\n        const hardwareInstancedRendering = engine.getCaps().instancedArrays &&\n            ((batch.visibleInstances[subMesh._id] !== null && batch.visibleInstances[subMesh._id] !== undefined) || renderingMesh.hasThinInstances);\n        if (this.customAllowRendering && !this.customAllowRendering(subMesh)) {\n            return;\n        }\n        if (this.isReady(subMesh, hardwareInstancedRendering, isTransparent)) {\n            subMesh._renderId = scene.getRenderId();\n            const shadowDepthWrapper = material.shadowDepthWrapper;\n            const drawWrapper = shadowDepthWrapper?.getEffect(subMesh, this, engine.currentRenderPassId) ?? subMesh._getDrawWrapper();\n            const effect = DrawWrapper.GetEffect(drawWrapper);\n            engine.enableEffect(drawWrapper);\n            if (!hardwareInstancedRendering) {\n                renderingMesh._bind(subMesh, effect, material.fillMode);\n            }\n            this.getTransformMatrix(); // make sure _cachedDirection et _cachedPosition are up to date\n            effect.setFloat3(\"biasAndScaleSM\", this.bias, this.normalBias, this.depthScale);\n            if (this.getLight().getTypeID() === Light.LIGHTTYPEID_DIRECTIONALLIGHT) {\n                effect.setVector3(\"lightDataSM\", this._cachedDirection);\n            }\n            else {\n                effect.setVector3(\"lightDataSM\", this._cachedPosition);\n            }\n            const camera = this._getCamera();\n            effect.setFloat2(\"depthValuesSM\", this.getLight().getDepthMinZ(camera), this.getLight().getDepthMinZ(camera) + this.getLight().getDepthMaxZ(camera));\n            if (isTransparent && this.enableSoftTransparentShadow) {\n                effect.setFloat2(\"softTransparentShadowSM\", effectiveMesh.visibility * material.alpha, this._opacityTexture?.getAlphaFromRGB ? 1 : 0);\n            }\n            if (shadowDepthWrapper) {\n                subMesh._setMainDrawWrapperOverride(drawWrapper);\n                if (shadowDepthWrapper.standalone) {\n                    shadowDepthWrapper.baseMaterial.bindForSubMesh(effectiveMesh.getWorldMatrix(), renderingMesh, subMesh);\n                }\n                else {\n                    material.bindForSubMesh(effectiveMesh.getWorldMatrix(), renderingMesh, subMesh);\n                }\n                subMesh._setMainDrawWrapperOverride(null);\n            }\n            else {\n                // Alpha test\n                if (this._opacityTexture) {\n                    effect.setTexture(\"diffuseSampler\", this._opacityTexture);\n                    effect.setMatrix(\"diffuseMatrix\", this._opacityTexture.getTextureMatrix() || this._defaultTextureMatrix);\n                }\n                // Bones\n                if (renderingMesh.useBones && renderingMesh.computeBonesUsingShaders && renderingMesh.skeleton) {\n                    const skeleton = renderingMesh.skeleton;\n                    if (skeleton.isUsingTextureForMatrices) {\n                        const boneTexture = skeleton.getTransformMatrixTexture(renderingMesh);\n                        if (!boneTexture) {\n                            return;\n                        }\n                        effect.setTexture(\"boneSampler\", boneTexture);\n                        effect.setFloat(\"boneTextureWidth\", 4.0 * (skeleton.bones.length + 1));\n                    }\n                    else {\n                        effect.setMatrices(\"mBones\", skeleton.getTransformMatrices(renderingMesh));\n                    }\n                }\n                // Morph targets\n                BindMorphTargetParameters(renderingMesh, effect);\n                if (renderingMesh.morphTargetManager && renderingMesh.morphTargetManager.isUsingTextureForTargets) {\n                    renderingMesh.morphTargetManager._bind(effect);\n                }\n                // Baked vertex animations\n                const bvaManager = subMesh.getMesh().bakedVertexAnimationManager;\n                if (bvaManager && bvaManager.isEnabled) {\n                    bvaManager.bind(effect, hardwareInstancedRendering);\n                }\n                // Clip planes\n                BindClipPlane(effect, material, scene);\n            }\n            if (!this._useUBO && !shadowDepthWrapper) {\n                this._bindCustomEffectForRenderSubMeshForShadowMap(subMesh, effect, effectiveMesh);\n            }\n            BindSceneUniformBuffer(effect, this._scene.getSceneUniformBuffer());\n            this._scene.getSceneUniformBuffer().bindUniformBuffer();\n            const world = effectiveMesh.getWorldMatrix();\n            // In the non hardware instanced mode, the Mesh ubo update is done by the callback passed to renderingMesh._processRendering (see below)\n            if (hardwareInstancedRendering) {\n                effectiveMesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n                effectiveMesh.transferToEffect(world);\n            }\n            if (this.forceBackFacesOnly) {\n                engine.setState(true, 0, false, true, material.cullBackFaces);\n            }\n            // Observables\n            this.onBeforeShadowMapRenderMeshObservable.notifyObservers(renderingMesh);\n            this.onBeforeShadowMapRenderObservable.notifyObservers(effect);\n            // Draw\n            renderingMesh._processRendering(effectiveMesh, subMesh, effect, material.fillMode, batch, hardwareInstancedRendering, (isInstance, worldOverride) => {\n                if (effectiveMesh !== renderingMesh && !isInstance) {\n                    renderingMesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n                    renderingMesh.transferToEffect(worldOverride);\n                }\n                else {\n                    effectiveMesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n                    effectiveMesh.transferToEffect(isInstance ? worldOverride : world);\n                }\n            });\n            if (this.forceBackFacesOnly) {\n                engine.setState(true, 0, false, false, material.cullBackFaces);\n            }\n            // Observables\n            this.onAfterShadowMapRenderObservable.notifyObservers(effect);\n            this.onAfterShadowMapRenderMeshObservable.notifyObservers(renderingMesh);\n        }\n        else {\n            // Need to reset refresh rate of the shadowMap\n            if (this._shadowMap) {\n                this._shadowMap.resetRefreshCounter();\n            }\n        }\n    }\n    _applyFilterValues() {\n        if (!this._shadowMap) {\n            return;\n        }\n        if (this.filter === ShadowGenerator.FILTER_NONE || this.filter === ShadowGenerator.FILTER_PCSS) {\n            this._shadowMap.updateSamplingMode(Texture.NEAREST_SAMPLINGMODE);\n        }\n        else {\n            this._shadowMap.updateSamplingMode(Texture.BILINEAR_SAMPLINGMODE);\n        }\n    }\n    /**\n     * Forces all the attached effect to compile to enable rendering only once ready vs. lazily compiling effects.\n     * @param onCompiled Callback triggered at the and of the effects compilation\n     * @param options Sets of optional options forcing the compilation with different modes\n     */\n    forceCompilation(onCompiled, options) {\n        const localOptions = {\n            useInstances: false,\n            ...options,\n        };\n        const shadowMap = this.getShadowMap();\n        if (!shadowMap) {\n            if (onCompiled) {\n                onCompiled(this);\n            }\n            return;\n        }\n        const renderList = shadowMap.renderList;\n        if (!renderList) {\n            if (onCompiled) {\n                onCompiled(this);\n            }\n            return;\n        }\n        const subMeshes = [];\n        for (const mesh of renderList) {\n            subMeshes.push(...mesh.subMeshes);\n        }\n        if (subMeshes.length === 0) {\n            if (onCompiled) {\n                onCompiled(this);\n            }\n            return;\n        }\n        let currentIndex = 0;\n        const checkReady = () => {\n            if (!this._scene || !this._scene.getEngine()) {\n                return;\n            }\n            while (this.isReady(subMeshes[currentIndex], localOptions.useInstances, subMeshes[currentIndex].getMaterial()?.needAlphaBlendingForMesh(subMeshes[currentIndex].getMesh()) ?? false)) {\n                currentIndex++;\n                if (currentIndex >= subMeshes.length) {\n                    if (onCompiled) {\n                        onCompiled(this);\n                    }\n                    return;\n                }\n            }\n            setTimeout(checkReady, 16);\n        };\n        checkReady();\n    }\n    /**\n     * Forces all the attached effect to compile to enable rendering only once ready vs. lazily compiling effects.\n     * @param options Sets of optional options forcing the compilation with different modes\n     * @returns A promise that resolves when the compilation completes\n     */\n    async forceCompilationAsync(options) {\n        return await new Promise((resolve) => {\n            this.forceCompilation(() => {\n                resolve();\n            }, options);\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _isReadyCustomDefines(defines, subMesh, useInstances) { }\n    _prepareShadowDefines(subMesh, useInstances, defines, isTransparent) {\n        defines.push(\"#define SM_LIGHTTYPE_\" + this._light.getClassName().toUpperCase());\n        defines.push(\"#define SM_FLOAT \" + (this._textureType !== Constants.TEXTURETYPE_UNSIGNED_BYTE ? \"1\" : \"0\"));\n        defines.push(\"#define SM_ESM \" + (this.useExponentialShadowMap || this.useBlurExponentialShadowMap ? \"1\" : \"0\"));\n        defines.push(\"#define SM_DEPTHTEXTURE \" + (this.usePercentageCloserFiltering || this.useContactHardeningShadow ? \"1\" : \"0\"));\n        const mesh = subMesh.getMesh();\n        // Normal bias.\n        defines.push(\"#define SM_NORMALBIAS \" + (this.normalBias && mesh.isVerticesDataPresent(VertexBuffer.NormalKind) ? \"1\" : \"0\"));\n        defines.push(\"#define SM_DIRECTIONINLIGHTDATA \" + (this.getLight().getTypeID() === Light.LIGHTTYPEID_DIRECTIONALLIGHT ? \"1\" : \"0\"));\n        // Point light\n        defines.push(\"#define SM_USEDISTANCE \" + (this._light.needCube() ? \"1\" : \"0\"));\n        // Soft transparent shadows\n        defines.push(\"#define SM_SOFTTRANSPARENTSHADOW \" + (this.enableSoftTransparentShadow && isTransparent ? \"1\" : \"0\"));\n        this._isReadyCustomDefines(defines, subMesh, useInstances);\n        return defines;\n    }\n    /**\n     * Determine whether the shadow generator is ready or not (mainly all effects and related post processes needs to be ready).\n     * @param subMesh The submesh we want to render in the shadow map\n     * @param useInstances Defines whether will draw in the map using instances\n     * @param isTransparent Indicates that isReady is called for a transparent subMesh\n     * @returns true if ready otherwise, false\n     */\n    isReady(subMesh, useInstances, isTransparent) {\n        if (!this._shadersLoaded) {\n            return false;\n        }\n        const material = subMesh.getMaterial(), shadowDepthWrapper = material?.shadowDepthWrapper;\n        this._opacityTexture = null;\n        if (!material) {\n            return false;\n        }\n        const defines = [];\n        this._prepareShadowDefines(subMesh, useInstances, defines, isTransparent);\n        if (shadowDepthWrapper) {\n            if (!shadowDepthWrapper.isReadyForSubMesh(subMesh, defines, this, useInstances, this._scene.getEngine().currentRenderPassId)) {\n                return false;\n            }\n        }\n        else {\n            const subMeshEffect = subMesh._getDrawWrapper(undefined, true);\n            let effect = subMeshEffect.effect;\n            let cachedDefines = subMeshEffect.defines;\n            const attribs = [VertexBuffer.PositionKind];\n            const mesh = subMesh.getMesh();\n            let useNormal = false;\n            let uv1 = false;\n            let uv2 = false;\n            const color = false;\n            // Normal bias.\n            if (this.normalBias && mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n                attribs.push(VertexBuffer.NormalKind);\n                defines.push(\"#define NORMAL\");\n                useNormal = true;\n                if (mesh.nonUniformScaling) {\n                    defines.push(\"#define NONUNIFORMSCALING\");\n                }\n            }\n            // Alpha test\n            const needAlphaTesting = material.needAlphaTestingForMesh(mesh);\n            if (needAlphaTesting || material.needAlphaBlendingForMesh(mesh)) {\n                if (this.useOpacityTextureForTransparentShadow) {\n                    this._opacityTexture = material.opacityTexture;\n                }\n                else {\n                    this._opacityTexture = material.getAlphaTestTexture();\n                }\n                if (this._opacityTexture) {\n                    if (!this._opacityTexture.isReady()) {\n                        return false;\n                    }\n                    const alphaCutOff = material.alphaCutOff ?? ShadowGenerator.DEFAULT_ALPHA_CUTOFF;\n                    defines.push(\"#define ALPHATEXTURE\");\n                    if (needAlphaTesting) {\n                        defines.push(`#define ALPHATESTVALUE ${alphaCutOff}${alphaCutOff % 1 === 0 ? \".\" : \"\"}`);\n                    }\n                    if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\n                        attribs.push(VertexBuffer.UVKind);\n                        defines.push(\"#define UV1\");\n                        uv1 = true;\n                    }\n                    if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\n                        if (this._opacityTexture.coordinatesIndex === 1) {\n                            attribs.push(VertexBuffer.UV2Kind);\n                            defines.push(\"#define UV2\");\n                            uv2 = true;\n                        }\n                    }\n                }\n            }\n            // Bones\n            const fallbacks = new EffectFallbacks();\n            if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\n                attribs.push(VertexBuffer.MatricesIndicesKind);\n                attribs.push(VertexBuffer.MatricesWeightsKind);\n                if (mesh.numBoneInfluencers > 4) {\n                    attribs.push(VertexBuffer.MatricesIndicesExtraKind);\n                    attribs.push(VertexBuffer.MatricesWeightsExtraKind);\n                }\n                const skeleton = mesh.skeleton;\n                defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\n                if (mesh.numBoneInfluencers > 0) {\n                    fallbacks.addCPUSkinningFallback(0, mesh);\n                }\n                if (skeleton.isUsingTextureForMatrices) {\n                    defines.push(\"#define BONETEXTURE\");\n                }\n                else {\n                    defines.push(\"#define BonesPerMesh \" + (skeleton.bones.length + 1));\n                }\n            }\n            else {\n                defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\n            }\n            // Morph targets\n            const numMorphInfluencers = mesh.morphTargetManager\n                ? PrepareDefinesAndAttributesForMorphTargets(mesh.morphTargetManager, defines, attribs, mesh, true, // usePositionMorph\n                useNormal, // useNormalMorph\n                false, // useTangentMorph\n                uv1, // useUVMorph\n                uv2, // useUV2Morph\n                color // useColorMorph\n                )\n                : 0;\n            // ClipPlanes\n            PrepareStringDefinesForClipPlanes(material, this._scene, defines);\n            // Instances\n            if (useInstances) {\n                defines.push(\"#define INSTANCES\");\n                PushAttributesForInstances(attribs);\n                if (subMesh.getRenderingMesh().hasThinInstances) {\n                    defines.push(\"#define THIN_INSTANCES\");\n                }\n            }\n            if (this.customShaderOptions) {\n                if (this.customShaderOptions.defines) {\n                    for (const define of this.customShaderOptions.defines) {\n                        if (defines.indexOf(define) === -1) {\n                            defines.push(define);\n                        }\n                    }\n                }\n            }\n            // Baked vertex animations\n            const bvaManager = mesh.bakedVertexAnimationManager;\n            if (bvaManager && bvaManager.isEnabled) {\n                defines.push(\"#define BAKED_VERTEX_ANIMATION_TEXTURE\");\n                if (useInstances) {\n                    attribs.push(\"bakedVertexAnimationSettingsInstanced\");\n                }\n            }\n            // Get correct effect\n            const join = defines.join(\"\\n\");\n            if (cachedDefines !== join) {\n                cachedDefines = join;\n                let shaderName = \"shadowMap\";\n                const uniforms = [\n                    \"world\",\n                    \"mBones\",\n                    \"viewProjection\",\n                    \"diffuseMatrix\",\n                    \"lightDataSM\",\n                    \"depthValuesSM\",\n                    \"biasAndScaleSM\",\n                    \"morphTargetInfluences\",\n                    \"morphTargetCount\",\n                    \"boneTextureWidth\",\n                    \"softTransparentShadowSM\",\n                    \"morphTargetTextureInfo\",\n                    \"morphTargetTextureIndices\",\n                    \"bakedVertexAnimationSettings\",\n                    \"bakedVertexAnimationTextureSizeInverted\",\n                    \"bakedVertexAnimationTime\",\n                    \"bakedVertexAnimationTexture\",\n                ];\n                const samplers = [\"diffuseSampler\", \"boneSampler\", \"morphTargets\", \"bakedVertexAnimationTexture\"];\n                const uniformBuffers = [\"Scene\", \"Mesh\"];\n                AddClipPlaneUniforms(uniforms);\n                // Custom shader?\n                if (this.customShaderOptions) {\n                    shaderName = this.customShaderOptions.shaderName;\n                    if (this.customShaderOptions.attributes) {\n                        for (const attrib of this.customShaderOptions.attributes) {\n                            if (attribs.indexOf(attrib) === -1) {\n                                attribs.push(attrib);\n                            }\n                        }\n                    }\n                    if (this.customShaderOptions.uniforms) {\n                        for (const uniform of this.customShaderOptions.uniforms) {\n                            if (uniforms.indexOf(uniform) === -1) {\n                                uniforms.push(uniform);\n                            }\n                        }\n                    }\n                    if (this.customShaderOptions.samplers) {\n                        for (const sampler of this.customShaderOptions.samplers) {\n                            if (samplers.indexOf(sampler) === -1) {\n                                samplers.push(sampler);\n                            }\n                        }\n                    }\n                }\n                const engine = this._scene.getEngine();\n                effect = engine.createEffect(shaderName, {\n                    attributes: attribs,\n                    uniformsNames: uniforms,\n                    uniformBuffersNames: uniformBuffers,\n                    samplers: samplers,\n                    defines: join,\n                    fallbacks: fallbacks,\n                    onCompiled: null,\n                    onError: null,\n                    indexParameters: { maxSimultaneousMorphTargets: numMorphInfluencers },\n                    shaderLanguage: this._shaderLanguage,\n                }, engine);\n                subMeshEffect.setEffect(effect, cachedDefines);\n            }\n            if (!effect.isReady()) {\n                return false;\n            }\n        }\n        if (this.useBlurExponentialShadowMap || this.useBlurCloseExponentialShadowMap) {\n            if (!this._blurPostProcesses || !this._blurPostProcesses.length) {\n                this._initializeBlurRTTAndPostProcesses();\n            }\n        }\n        if (this._kernelBlurXPostprocess && !this._kernelBlurXPostprocess.isReady()) {\n            return false;\n        }\n        if (this._kernelBlurYPostprocess && !this._kernelBlurYPostprocess.isReady()) {\n            return false;\n        }\n        if (this._boxBlurPostprocess && !this._boxBlurPostprocess.isReady()) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Prepare all the defines in a material relying on a shadow map at the specified light index.\n     * @param defines Defines of the material we want to update\n     * @param lightIndex Index of the light in the enabled light list of the material\n     */\n    prepareDefines(defines, lightIndex) {\n        const scene = this._scene;\n        const light = this._light;\n        if (!scene.shadowsEnabled || !light.shadowEnabled) {\n            return;\n        }\n        defines[\"SHADOW\" + lightIndex] = true;\n        if (this.useContactHardeningShadow) {\n            defines[\"SHADOWPCSS\" + lightIndex] = true;\n            if (this._filteringQuality === ShadowGenerator.QUALITY_LOW) {\n                defines[\"SHADOWLOWQUALITY\" + lightIndex] = true;\n            }\n            else if (this._filteringQuality === ShadowGenerator.QUALITY_MEDIUM) {\n                defines[\"SHADOWMEDIUMQUALITY\" + lightIndex] = true;\n            }\n            // else default to high.\n        }\n        else if (this.usePercentageCloserFiltering) {\n            defines[\"SHADOWPCF\" + lightIndex] = true;\n            if (this._filteringQuality === ShadowGenerator.QUALITY_LOW) {\n                defines[\"SHADOWLOWQUALITY\" + lightIndex] = true;\n            }\n            else if (this._filteringQuality === ShadowGenerator.QUALITY_MEDIUM) {\n                defines[\"SHADOWMEDIUMQUALITY\" + lightIndex] = true;\n            }\n            // else default to high.\n        }\n        else if (this.usePoissonSampling) {\n            defines[\"SHADOWPOISSON\" + lightIndex] = true;\n        }\n        else if (this.useExponentialShadowMap || this.useBlurExponentialShadowMap) {\n            defines[\"SHADOWESM\" + lightIndex] = true;\n        }\n        else if (this.useCloseExponentialShadowMap || this.useBlurCloseExponentialShadowMap) {\n            defines[\"SHADOWCLOSEESM\" + lightIndex] = true;\n        }\n        if (light.needCube()) {\n            defines[\"SHADOWCUBE\" + lightIndex] = true;\n        }\n    }\n    /**\n     * Binds the shadow related information inside of an effect (information like near, far, darkness...\n     * defined in the generator but impacting the effect).\n     * @param lightIndex Index of the light in the enabled light list of the material owning the effect\n     * @param effect The effect we are binding the information for\n     */\n    bindShadowLight(lightIndex, effect) {\n        const light = this._light;\n        const scene = this._scene;\n        if (!scene.shadowsEnabled || !light.shadowEnabled) {\n            return;\n        }\n        const camera = this._getCamera();\n        const shadowMap = this.getShadowMap();\n        if (!shadowMap) {\n            return;\n        }\n        if (!light.needCube()) {\n            effect.setMatrix(\"lightMatrix\" + lightIndex, this.getTransformMatrix());\n        }\n        // Only PCF uses depth stencil texture.\n        const shadowMapForRendering = this.getShadowMapForRendering();\n        if (this._filter === ShadowGenerator.FILTER_PCF) {\n            effect.setDepthStencilTexture(\"shadowTexture\" + lightIndex, shadowMapForRendering);\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), shadowMap.getSize().width, 1 / shadowMap.getSize().width, this.frustumEdgeFalloff, lightIndex);\n        }\n        else if (this._filter === ShadowGenerator.FILTER_PCSS) {\n            effect.setDepthStencilTexture(\"shadowTexture\" + lightIndex, shadowMapForRendering);\n            effect.setTexture(\"depthTexture\" + lightIndex, shadowMapForRendering);\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), 1 / shadowMap.getSize().width, this._contactHardeningLightSizeUVRatio * shadowMap.getSize().width, this.frustumEdgeFalloff, lightIndex);\n        }\n        else {\n            effect.setTexture(\"shadowTexture\" + lightIndex, shadowMapForRendering);\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), this.blurScale / shadowMap.getSize().width, this.depthScale, this.frustumEdgeFalloff, lightIndex);\n        }\n        light._uniformBuffer.updateFloat2(\"depthValues\", this.getLight().getDepthMinZ(camera), this.getLight().getDepthMinZ(camera) + this.getLight().getDepthMaxZ(camera), lightIndex);\n    }\n    /**\n     * Gets the view matrix used to render the shadow map.\n     */\n    get viewMatrix() {\n        return this._viewMatrix;\n    }\n    /**\n     * Gets the projection matrix used to render the shadow map.\n     */\n    get projectionMatrix() {\n        return this._projectionMatrix;\n    }\n    /**\n     * Gets the transformation matrix used to project the meshes into the map from the light point of view.\n     * (eq to shadow projection matrix * light transform matrix)\n     * @returns The transform matrix used to create the shadow map\n     */\n    getTransformMatrix() {\n        const scene = this._scene;\n        if (this._currentRenderId === scene.getRenderId() && this._currentFaceIndexCache === this._currentFaceIndex) {\n            return this._transformMatrix;\n        }\n        this._currentRenderId = scene.getRenderId();\n        this._currentFaceIndexCache = this._currentFaceIndex;\n        let lightPosition = this._light.position;\n        if (this._light.computeTransformedInformation()) {\n            lightPosition = this._light.transformedPosition;\n        }\n        Vector3.NormalizeToRef(this._light.getShadowDirection(this._currentFaceIndex), this._lightDirection);\n        if (Math.abs(Vector3.Dot(this._lightDirection, Vector3.Up())) === 1.0) {\n            this._lightDirection.z = 0.0000000000001; // Required to avoid perfectly perpendicular light\n        }\n        if (this._light.needProjectionMatrixCompute() ||\n            !this._cachedPosition ||\n            !this._cachedDirection ||\n            !lightPosition.equals(this._cachedPosition) ||\n            !this._lightDirection.equals(this._cachedDirection)) {\n            this._cachedPosition.copyFrom(lightPosition);\n            this._cachedDirection.copyFrom(this._lightDirection);\n            Matrix.LookAtLHToRef(lightPosition, lightPosition.add(this._lightDirection), Vector3.Up(), this._viewMatrix);\n            const shadowMap = this.getShadowMap();\n            if (shadowMap) {\n                const renderList = shadowMap.renderList;\n                if (renderList) {\n                    this._light.setShadowProjectionMatrix(this._projectionMatrix, this._viewMatrix, renderList);\n                }\n            }\n            this._viewMatrix.multiplyToRef(this._projectionMatrix, this._transformMatrix);\n        }\n        return this._transformMatrix;\n    }\n    /**\n     * Recreates the shadow map dependencies like RTT and post processes. This can be used during the switch between\n     * Cube and 2D textures for instance.\n     */\n    recreateShadowMap() {\n        const shadowMap = this._shadowMap;\n        if (!shadowMap) {\n            return;\n        }\n        // Track render list.\n        const renderList = shadowMap.renderList;\n        // Clean up existing data.\n        this._disposeRTTandPostProcesses();\n        // Reinitializes.\n        this._initializeGenerator();\n        // Reaffect the filter to ensure a correct fallback if necessary.\n        this.filter = this._filter;\n        // Reaffect the filter.\n        this._applyFilterValues();\n        // Reaffect Render List.\n        if (renderList) {\n            // Note: don't do this._shadowMap!.renderList = renderList;\n            // The renderList hooked array is accessing the old RenderTargetTexture (see RenderTargetTexture._hookArray), which is disposed at this point (by the call to _disposeRTTandPostProcesses)\n            if (!this._shadowMap.renderList) {\n                this._shadowMap.renderList = [];\n            }\n            for (const mesh of renderList) {\n                this._shadowMap.renderList.push(mesh);\n            }\n        }\n        else {\n            this._shadowMap.renderList = null;\n        }\n    }\n    _disposeBlurPostProcesses() {\n        if (this._shadowMap2) {\n            this._shadowMap2.dispose();\n            this._shadowMap2 = null;\n        }\n        if (this._boxBlurPostprocess) {\n            this._boxBlurPostprocess.dispose();\n            this._boxBlurPostprocess = null;\n        }\n        if (this._kernelBlurXPostprocess) {\n            this._kernelBlurXPostprocess.dispose();\n            this._kernelBlurXPostprocess = null;\n        }\n        if (this._kernelBlurYPostprocess) {\n            this._kernelBlurYPostprocess.dispose();\n            this._kernelBlurYPostprocess = null;\n        }\n        this._blurPostProcesses = [];\n    }\n    _disposeRTTandPostProcesses() {\n        if (this._shadowMap) {\n            this._shadowMap.dispose();\n            this._shadowMap = null;\n        }\n        this._disposeBlurPostProcesses();\n    }\n    _disposeSceneUBOs() {\n        if (this._sceneUBOs) {\n            for (const ubo of this._sceneUBOs) {\n                ubo.dispose();\n            }\n            this._sceneUBOs = [];\n        }\n    }\n    /**\n     * Disposes the ShadowGenerator.\n     * Returns nothing.\n     */\n    dispose() {\n        this._disposeRTTandPostProcesses();\n        this._disposeSceneUBOs();\n        if (this._light) {\n            if (this._light._shadowGenerators) {\n                const iterator = this._light._shadowGenerators.entries();\n                for (let entry = iterator.next(); entry.done !== true; entry = iterator.next()) {\n                    const [camera, shadowGenerator] = entry.value;\n                    if (shadowGenerator === this) {\n                        this._light._shadowGenerators.delete(camera);\n                    }\n                }\n                if (this._light._shadowGenerators.size === 0) {\n                    this._light._shadowGenerators = null;\n                }\n            }\n            this._light._markMeshesAsLightDirty();\n        }\n        this.onBeforeShadowMapRenderMeshObservable.clear();\n        this.onBeforeShadowMapRenderObservable.clear();\n        this.onAfterShadowMapRenderMeshObservable.clear();\n        this.onAfterShadowMapRenderObservable.clear();\n    }\n    /**\n     * Serializes the shadow generator setup to a json object.\n     * @returns The serialized JSON object\n     */\n    serialize() {\n        const serializationObject = {};\n        const shadowMap = this.getShadowMap();\n        if (!shadowMap) {\n            return serializationObject;\n        }\n        serializationObject.className = this.getClassName();\n        serializationObject.lightId = this._light.id;\n        serializationObject.cameraId = this._camera?.id;\n        serializationObject.id = this.id;\n        serializationObject.mapSize = shadowMap.getRenderSize();\n        serializationObject.forceBackFacesOnly = this.forceBackFacesOnly;\n        serializationObject.darkness = this.getDarkness();\n        serializationObject.transparencyShadow = this._transparencyShadow;\n        serializationObject.frustumEdgeFalloff = this.frustumEdgeFalloff;\n        serializationObject.bias = this.bias;\n        serializationObject.normalBias = this.normalBias;\n        serializationObject.usePercentageCloserFiltering = this.usePercentageCloserFiltering;\n        serializationObject.useContactHardeningShadow = this.useContactHardeningShadow;\n        serializationObject.contactHardeningLightSizeUVRatio = this.contactHardeningLightSizeUVRatio;\n        serializationObject.filteringQuality = this.filteringQuality;\n        serializationObject.useExponentialShadowMap = this.useExponentialShadowMap;\n        serializationObject.useBlurExponentialShadowMap = this.useBlurExponentialShadowMap;\n        serializationObject.useCloseExponentialShadowMap = this.useBlurExponentialShadowMap;\n        serializationObject.useBlurCloseExponentialShadowMap = this.useBlurExponentialShadowMap;\n        serializationObject.usePoissonSampling = this.usePoissonSampling;\n        serializationObject.depthScale = this.depthScale;\n        serializationObject.blurBoxOffset = this.blurBoxOffset;\n        serializationObject.blurKernel = this.blurKernel;\n        serializationObject.blurScale = this.blurScale;\n        serializationObject.useKernelBlur = this.useKernelBlur;\n        serializationObject.renderList = [];\n        if (shadowMap.renderList) {\n            for (let meshIndex = 0; meshIndex < shadowMap.renderList.length; meshIndex++) {\n                const mesh = shadowMap.renderList[meshIndex];\n                serializationObject.renderList.push(mesh.id);\n            }\n        }\n        return serializationObject;\n    }\n    /**\n     * Parses a serialized ShadowGenerator and returns a new ShadowGenerator.\n     * @param parsedShadowGenerator The JSON object to parse\n     * @param scene The scene to create the shadow map for\n     * @param constr A function that builds a shadow generator or undefined to create an instance of the default shadow generator\n     * @returns The parsed shadow generator\n     */\n    static Parse(parsedShadowGenerator, scene, constr) {\n        const light = scene.getLightById(parsedShadowGenerator.lightId);\n        const camera = parsedShadowGenerator.cameraId !== undefined ? scene.getCameraById(parsedShadowGenerator.cameraId) : null;\n        const shadowGenerator = constr ? constr(parsedShadowGenerator.mapSize, light, camera) : new ShadowGenerator(parsedShadowGenerator.mapSize, light, undefined, camera);\n        const shadowMap = shadowGenerator.getShadowMap();\n        for (let meshIndex = 0; meshIndex < parsedShadowGenerator.renderList.length; meshIndex++) {\n            const meshes = scene.getMeshesById(parsedShadowGenerator.renderList[meshIndex]);\n            for (const mesh of meshes) {\n                if (!shadowMap) {\n                    continue;\n                }\n                if (!shadowMap.renderList) {\n                    shadowMap.renderList = [];\n                }\n                shadowMap.renderList.push(mesh);\n            }\n        }\n        if (parsedShadowGenerator.id !== undefined) {\n            shadowGenerator.id = parsedShadowGenerator.id;\n        }\n        shadowGenerator.forceBackFacesOnly = !!parsedShadowGenerator.forceBackFacesOnly;\n        if (parsedShadowGenerator.darkness !== undefined) {\n            shadowGenerator.setDarkness(parsedShadowGenerator.darkness);\n        }\n        if (parsedShadowGenerator.transparencyShadow) {\n            shadowGenerator.setTransparencyShadow(true);\n        }\n        if (parsedShadowGenerator.frustumEdgeFalloff !== undefined) {\n            shadowGenerator.frustumEdgeFalloff = parsedShadowGenerator.frustumEdgeFalloff;\n        }\n        if (parsedShadowGenerator.bias !== undefined) {\n            shadowGenerator.bias = parsedShadowGenerator.bias;\n        }\n        if (parsedShadowGenerator.normalBias !== undefined) {\n            shadowGenerator.normalBias = parsedShadowGenerator.normalBias;\n        }\n        if (parsedShadowGenerator.usePercentageCloserFiltering) {\n            shadowGenerator.usePercentageCloserFiltering = true;\n        }\n        else if (parsedShadowGenerator.useContactHardeningShadow) {\n            shadowGenerator.useContactHardeningShadow = true;\n        }\n        else if (parsedShadowGenerator.usePoissonSampling) {\n            shadowGenerator.usePoissonSampling = true;\n        }\n        else if (parsedShadowGenerator.useExponentialShadowMap) {\n            shadowGenerator.useExponentialShadowMap = true;\n        }\n        else if (parsedShadowGenerator.useBlurExponentialShadowMap) {\n            shadowGenerator.useBlurExponentialShadowMap = true;\n        }\n        else if (parsedShadowGenerator.useCloseExponentialShadowMap) {\n            shadowGenerator.useCloseExponentialShadowMap = true;\n        }\n        else if (parsedShadowGenerator.useBlurCloseExponentialShadowMap) {\n            shadowGenerator.useBlurCloseExponentialShadowMap = true;\n        }\n        // Backward compat\n        else if (parsedShadowGenerator.useVarianceShadowMap) {\n            shadowGenerator.useExponentialShadowMap = true;\n        }\n        else if (parsedShadowGenerator.useBlurVarianceShadowMap) {\n            shadowGenerator.useBlurExponentialShadowMap = true;\n        }\n        if (parsedShadowGenerator.contactHardeningLightSizeUVRatio !== undefined) {\n            shadowGenerator.contactHardeningLightSizeUVRatio = parsedShadowGenerator.contactHardeningLightSizeUVRatio;\n        }\n        if (parsedShadowGenerator.filteringQuality !== undefined) {\n            shadowGenerator.filteringQuality = parsedShadowGenerator.filteringQuality;\n        }\n        if (parsedShadowGenerator.depthScale) {\n            shadowGenerator.depthScale = parsedShadowGenerator.depthScale;\n        }\n        if (parsedShadowGenerator.blurScale) {\n            shadowGenerator.blurScale = parsedShadowGenerator.blurScale;\n        }\n        if (parsedShadowGenerator.blurBoxOffset) {\n            shadowGenerator.blurBoxOffset = parsedShadowGenerator.blurBoxOffset;\n        }\n        if (parsedShadowGenerator.useKernelBlur) {\n            shadowGenerator.useKernelBlur = parsedShadowGenerator.useKernelBlur;\n        }\n        if (parsedShadowGenerator.blurKernel) {\n            shadowGenerator.blurKernel = parsedShadowGenerator.blurKernel;\n        }\n        return shadowGenerator;\n    }\n}\n/**\n * Name of the shadow generator class\n */\nShadowGenerator.CLASSNAME = \"ShadowGenerator\";\n/**\n * Force all the shadow generators to compile to glsl even on WebGPU engines.\n * False by default. This is mostly meant for backward compatibility.\n */\nShadowGenerator.ForceGLSL = false;\n/**\n * Shadow generator mode None: no filtering applied.\n */\nShadowGenerator.FILTER_NONE = 0;\n/**\n * Shadow generator mode ESM: Exponential Shadow Mapping.\n * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\n */\nShadowGenerator.FILTER_EXPONENTIALSHADOWMAP = 1;\n/**\n * Shadow generator mode Poisson Sampling: Percentage Closer Filtering.\n * (Multiple Tap around evenly distributed around the pixel are used to evaluate the shadow strength)\n */\nShadowGenerator.FILTER_POISSONSAMPLING = 2;\n/**\n * Shadow generator mode ESM: Blurred Exponential Shadow Mapping.\n * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\n */\nShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP = 3;\n/**\n * Shadow generator mode ESM: Exponential Shadow Mapping using the inverse of the exponential preventing\n * edge artifacts on steep falloff.\n * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\n */\nShadowGenerator.FILTER_CLOSEEXPONENTIALSHADOWMAP = 4;\n/**\n * Shadow generator mode ESM: Blurred Exponential Shadow Mapping using the inverse of the exponential preventing\n * edge artifacts on steep falloff.\n * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\n */\nShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP = 5;\n/**\n * Shadow generator mode PCF: Percentage Closer Filtering\n * benefits from Webgl 2 shadow samplers. Fallback to Poisson Sampling in Webgl 1\n * (https://developer.nvidia.com/gpugems/GPUGems/gpugems_ch11.html)\n */\nShadowGenerator.FILTER_PCF = 6;\n/**\n * Shadow generator mode PCSS: Percentage Closering Soft Shadow.\n * benefits from Webgl 2 shadow samplers. Fallback to Poisson Sampling in Webgl 1\n * Contact Hardening\n */\nShadowGenerator.FILTER_PCSS = 7;\n/**\n * Reserved for PCF and PCSS\n * Highest Quality.\n *\n * Execute PCF on a 5*5 kernel improving a lot the shadow aliasing artifacts.\n *\n * Execute PCSS with 32 taps blocker search and 64 taps PCF.\n */\nShadowGenerator.QUALITY_HIGH = 0;\n/**\n * Reserved for PCF and PCSS\n * Good tradeoff for quality/perf cross devices\n *\n * Execute PCF on a 3*3 kernel.\n *\n * Execute PCSS with 16 taps blocker search and 32 taps PCF.\n */\nShadowGenerator.QUALITY_MEDIUM = 1;\n/**\n * Reserved for PCF and PCSS\n * The lowest quality but the fastest.\n *\n * Execute PCF on a 1*1 kernel.\n *\n * Execute PCSS with 16 taps blocker search and 16 taps PCF.\n */\nShadowGenerator.QUALITY_LOW = 2;\n/**\n * Defines the default alpha cutoff value used for transparent alpha tested materials.\n */\nShadowGenerator.DEFAULT_ALPHA_CUTOFF = 0.5;\n/**\n * @internal\n */\nShadowGenerator._SceneComponentInitialization = (_) => {\n    throw _WarnImport(\"ShadowGeneratorSceneComponent\");\n};\n//# sourceMappingURL=shadowGenerator.js.map"],"names":["ThinBlurPostProcess","EffectWrapper","_gatherImports","useWebGPU","list","this","_webGPUReady","push","Promise","all","import","constructor","name","engine","direction","kernel","options","blockCompilationFinal","blockCompilation","super","Engine","LastCreatedEngine","useShaderStore","useAsPostProcess","fragmentShader","FragmentUrl","uniforms","Uniforms","samplers","Samplers","vertexUrl","VertexUrl","_packedFloat","_staticDefines","textureWidth","textureHeight","Array","isArray","defines","join","undefined","v","_idealKernel","Math","max","_kernel","_nearestBestKernel","_updateParameters","packedFloat","bind","noDefaultBindings","_drawWrapper","effect","setFloat2","x","y","onCompiled","onError","n","centerIndex","offsets","weights","totalWeight","i","u","w","_gaussianWeight","length","linearSamplingWeights","linearSamplingOffsets","linearSamplingMap","j","min","floor","o","sharedCell","weightLinear","offsetLinear","maxVaryingRows","getCaps","maxVaryingVectors","shaderLanguage","freeVaryingVec2","varyingCount","indexOf","_glslFloat","depCount","updateEffect","idealKernel","round","k","sigma","exponent","sqrt","PI","exp","decimalFigures","toFixed","replace","BlurPostProcess","PostProcess","_effectWrapper","value","getClassName","camera","samplingMode","Texture","BILINEAR_SAMPLINGMODE","reusable","textureType","Constants","TEXTURETYPE_UNSIGNED_BYTE","textureFormat","TEXTUREFORMAT_RGBA","localOptions","size","indexParameters","effectWrapper","onApplyObservable","add","_outputTexture","width","height","_defines","_uniforms","_samplers","_indexParameters","_Parse","parsedPostProcess","targetCamera","scene","rootUrl","SerializationHelper","Parse","renderTargetSamplingMode","getEngine","__decorate","serializeAsVector2","prototype","serialize","RegisterClass","ShadowGenerator","bias","_bias","normalBias","_normalBias","blurBoxOffset","_blurBoxOffset","_disposeBlurPostProcesses","blurScale","_blurScale","blurKernel","_blurKernel","useKernelBlur","_useKernelBlur","depthScale","_depthScale","_light","getDepthScale","_validateFilter","filter","_filter","needCube","FILTER_BLUREXPONENTIALSHADOWMAP","useExponentialShadowMap","FILTER_BLURCLOSEEXPONENTIALSHADOWMAP","useCloseExponentialShadowMap","FILTER_PCF","FILTER_PCSS","usePoissonSampling","_scene","_features","supportShadowSamplers","_applyFilterValues","_markMeshesAsLightDirty","FILTER_POISSONSAMPLING","FILTER_NONE","FILTER_EXPONENTIALSHADOWMAP","useBlurExponentialShadowMap","FILTER_CLOSEEXPONENTIALSHADOWMAP","useBlurCloseExponentialShadowMap","usePercentageCloserFiltering","filteringQuality","_filteringQuality","useContactHardeningShadow","contactHardeningLightSizeUVRatio","_contactHardeningLightSizeUVRatio","darkness","_darkness","setDarkness","getDarkness","transparencyShadow","_transparencyShadow","setTransparencyShadow","transparent","getShadowMap","_shadowMap","getShadowMapForRendering","_shadowMap2","CLASSNAME","addShadowCaster","mesh","includeDescendants","renderList","childMesh","getChildMeshes","removeShadowCaster","index","splice","child","getChildren","getLight","_shaderLanguage","_getCamera","_camera","activeCamera","mapSize","_mapSize","recreateShadowMap","light","usefullFloatFirst","useRedTextureType","forceGLSL","onBeforeShadowMapRenderObservable","Observable","onAfterShadowMapRenderObservable","onBeforeShadowMapRenderMeshObservable","onAfterShadowMapRenderMeshObservable","doNotSerialize","QUALITY_HIGH","enableSoftTransparentShadow","useOpacityTextureForTransparentShadow","frustumEdgeFalloff","forceBackFacesOnly","_lightDirection","Vector3","Zero","_viewMatrix","Matrix","_projectionMatrix","_transformMatrix","_cachedPosition","Number","MAX_VALUE","_cachedDirection","_currentFaceIndex","_currentFaceIndexCache","_defaultTextureMatrix","Identity","_shadersLoaded","getScene","_useRedTextureType","_initShaderSourceAsync","shadowGenerators","_shadowGenerators","Map","set","id","_useUBO","supportsUniformBuffers","_sceneUBOs","createSceneUniformBuffer","_SceneComponentInitialization","caps","textureFloatRender","textureFloatLinearFiltering","_textureType","TEXTURETYPE_FLOAT","textureHalfFloatRender","textureHalfFloatLinearFiltering","TEXTURETYPE_HALF_FLOAT","_initializeGenerator","_initializeShadowMap","_createTargetRenderTexture","supportDepthStencilTexture","RenderTargetTexture","TEXTUREFORMAT_RED","createDepthStencilTexture","useReverseDepthBuffer","GREATER","LESS","noPrePassRenderer","wrapU","CLAMP_ADDRESSMODE","wrapV","anisotropicFilteringLevel","updateSamplingMode","renderParticles","ignoreCameraViewport","_storedUniqueId","uniqueId","customRenderFunction","opaqueSubMeshes","alphaTestSubMeshes","transparentSubMeshes","depthOnlySubMeshes","_renderForShadowMap","customIsReadyFunction","_refreshRate","preWarm","subMeshes","isReady","subMesh","renderingMesh","getRenderingMesh","material","getMaterial","verticesCount","customAllowRendering","batch","_getInstancesRenderList","_id","getReplacementMesh","mustReturn","hardwareInstancedRendering","instancedArrays","visibleInstances","hasThinInstances","isTransparent","needAlphaBlendingForMesh","onBeforeBindObservable","_currentSceneUBO","getSceneUniformBuffer","_debugPushGroup","currentRenderPassId","onBeforeRenderObservable","faceIndex","setSceneUniformBuffer","setColorWrite","getTransformMatrix","setTransformMatrix","unbindEffect","finalizeSceneUbo","onAfterUnbindObservable","updateTransformMatrix","_debugPopGroup","shadowMap","postProcessManager","directRender","_blurPostProcesses","renderTarget","unBindFramebuffer","clearZero","Color4","clearOne","onClearObservable","clear","onResizeObservable","rtt","getRenderSize","RenderingManager","MIN_RENDERINGGROUPS","MAX_RENDERINGGROUPS","setRenderingAutoClearDepthStencil","isWebGPU","ForceGLSL","_initializeBlurRTTAndPostProcesses","targetSize","_kernelBlurXPostprocess","Vector2","externalTextureSamplerBinding","setTexture","_kernelBlurYPostprocess","autoClear","_boxBlurPostprocess","_renderSubMeshForShadowMap","data","getEffectiveMesh","_internalAbstractMeshDataInfo","_isActiveIntermediate","_bindCustomEffectForRenderSubMeshForShadowMap","setMatrix","effectiveMesh","_renderId","getRenderId","useRHS","useRightHandedSystem","detNeg","_getWorldMatrixDeterminant","sideOrientation","_getEffectiveOrientation","MATERIAL_ClockWiseSideOrientation","MATERIAL_CounterClockWiseSideOrientation","reverseSideOrientation","setState","backFaceCulling","cullBackFaces","shadowDepthWrapper","drawWrapper","getEffect","_getDrawWrapper","DrawWrapper","GetEffect","enableEffect","_bind","fillMode","setFloat3","getTypeID","Light","LIGHTTYPEID_DIRECTIONALLIGHT","setVector3","getDepthMinZ","getDepthMaxZ","visibility","alpha","_opacityTexture","getAlphaFromRGB","_setMainDrawWrapperOverride","standalone","baseMaterial","bindForSubMesh","getWorldMatrix","getTextureMatrix","useBones","computeBonesUsingShaders","skeleton","isUsingTextureForMatrices","boneTexture","getTransformMatrixTexture","setFloat","bones","setMatrices","getTransformMatrices","BindMorphTargetParameters","morphTargetManager","isUsingTextureForTargets","bvaManager","getMesh","bakedVertexAnimationManager","isEnabled","BindClipPlane","BindSceneUniformBuffer","bindUniformBuffer","world","getMeshUniformBuffer","bindToEffect","transferToEffect","notifyObservers","_processRendering","isInstance","worldOverride","resetRefreshCounter","NEAREST_SAMPLINGMODE","forceCompilation","useInstances","currentIndex","checkReady","setTimeout","forceCompilationAsync","resolve","_isReadyCustomDefines","_prepareShadowDefines","toUpperCase","isVerticesDataPresent","VertexBuffer","NormalKind","isReadyForSubMesh","subMeshEffect","cachedDefines","attribs","PositionKind","useNormal","uv1","uv2","color","nonUniformScaling","needAlphaTesting","needAlphaTestingForMesh","opacityTexture","getAlphaTestTexture","alphaCutOff","DEFAULT_ALPHA_CUTOFF","UVKind","UV2Kind","coordinatesIndex","fallbacks","EffectFallbacks","MatricesIndicesKind","MatricesWeightsKind","numBoneInfluencers","MatricesIndicesExtraKind","MatricesWeightsExtraKind","addCPUSkinningFallback","numMorphInfluencers","PrepareDefinesAndAttributesForMorphTargets","PrepareStringDefinesForClipPlanes","PushAttributesForInstances","customShaderOptions","define","shaderName","uniformBuffers","AddClipPlaneUniforms","attributes","attrib","uniform","sampler","createEffect","uniformsNames","uniformBuffersNames","maxSimultaneousMorphTargets","setEffect","prepareDefines","lightIndex","shadowsEnabled","shadowEnabled","QUALITY_LOW","QUALITY_MEDIUM","bindShadowLight","shadowMapForRendering","setDepthStencilTexture","_uniformBuffer","updateFloat4","getSize","updateFloat2","viewMatrix","projectionMatrix","_currentRenderId","lightPosition","position","computeTransformedInformation","transformedPosition","NormalizeToRef","getShadowDirection","abs","Dot","Up","z","needProjectionMatrixCompute","equals","copyFrom","LookAtLHToRef","setShadowProjectionMatrix","multiplyToRef","_disposeRTTandPostProcesses","dispose","_disposeSceneUBOs","ubo","iterator","entries","entry","next","done","shadowGenerator","delete","serializationObject","className","lightId","cameraId","meshIndex","parsedShadowGenerator","constr","getLightById","getCameraById","meshes","getMeshesById","useVarianceShadowMap","useBlurVarianceShadowMap","_","_WarnImport"],"mappings":"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"}