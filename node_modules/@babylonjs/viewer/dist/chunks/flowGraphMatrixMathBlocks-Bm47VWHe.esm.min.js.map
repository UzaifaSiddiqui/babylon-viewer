{"version":3,"file":"flowGraphMatrixMathBlocks-Bm47VWHe.esm.min.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Data/Math/flowGraphMatrixMathBlocks.js"],"sourcesContent":["import { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport { getRichTypeByFlowGraphType, RichTypeBoolean, RichTypeMatrix, RichTypeNumber, RichTypeQuaternion, RichTypeVector3, } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { Matrix, Quaternion, Vector3 } from \"core/Maths/math.vector\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\n/**\n * Transposes a matrix.\n */\nexport class FlowGraphTransposeBlock extends FlowGraphUnaryOperationBlock {\n    /**\n     * Creates a new instance of the block.\n     * @param config the configuration of the block\n     */\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.matrixType || \"Matrix\" /* FlowGraphTypes.Matrix */), getRichTypeByFlowGraphType(config?.matrixType || \"Matrix\" /* FlowGraphTypes.Matrix */), (a) => (a.transpose ? a.transpose() : Matrix.Transpose(a)), \"FlowGraphTransposeBlock\" /* FlowGraphBlockNames.Transpose */, config);\n    }\n}\nRegisterClass(\"FlowGraphTransposeBlock\" /* FlowGraphBlockNames.Transpose */, FlowGraphTransposeBlock);\n/**\n * Gets the determinant of a matrix.\n */\nexport class FlowGraphDeterminantBlock extends FlowGraphUnaryOperationBlock {\n    /**\n     * Creates a new instance of the block.\n     * @param config the configuration of the block\n     */\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.matrixType || \"Matrix\" /* FlowGraphTypes.Matrix */), RichTypeNumber, (a) => a.determinant(), \"FlowGraphDeterminantBlock\" /* FlowGraphBlockNames.Determinant */, config);\n    }\n}\nRegisterClass(\"FlowGraphDeterminantBlock\" /* FlowGraphBlockNames.Determinant */, FlowGraphDeterminantBlock);\n/**\n * Inverts a matrix.\n */\nexport class FlowGraphInvertMatrixBlock extends FlowGraphUnaryOperationBlock {\n    /**\n     * Creates a new instance of the inverse block.\n     * @param config the configuration of the block\n     */\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.matrixType || \"Matrix\" /* FlowGraphTypes.Matrix */), getRichTypeByFlowGraphType(config?.matrixType || \"Matrix\" /* FlowGraphTypes.Matrix */), (a) => (a.inverse ? a.inverse() : Matrix.Invert(a)), \"FlowGraphInvertMatrixBlock\" /* FlowGraphBlockNames.InvertMatrix */, config);\n    }\n}\nRegisterClass(\"FlowGraphInvertMatrixBlock\" /* FlowGraphBlockNames.InvertMatrix */, FlowGraphInvertMatrixBlock);\n/**\n * Multiplies two matrices.\n */\nexport class FlowGraphMatrixMultiplicationBlock extends FlowGraphBinaryOperationBlock {\n    /**\n     * Creates a new instance of the multiplication block.\n     * Note - this is similar to the math multiplication if not using matrix per-component multiplication.\n     * @param config the configuration of the block\n     */\n    constructor(config) {\n        super(getRichTypeByFlowGraphType(config?.matrixType || \"Matrix\" /* FlowGraphTypes.Matrix */), getRichTypeByFlowGraphType(config?.matrixType || \"Matrix\" /* FlowGraphTypes.Matrix */), getRichTypeByFlowGraphType(config?.matrixType || \"Matrix\" /* FlowGraphTypes.Matrix */), (a, b) => b.multiply(a), \"FlowGraphMatrixMultiplicationBlock\" /* FlowGraphBlockNames.MatrixMultiplication */, config);\n    }\n}\nRegisterClass(\"FlowGraphMatrixMultiplicationBlock\" /* FlowGraphBlockNames.MatrixMultiplication */, FlowGraphMatrixMultiplicationBlock);\n/**\n * Matrix decompose block\n */\nexport class FlowGraphMatrixDecomposeBlock extends FlowGraphBlock {\n    constructor(config) {\n        super(config);\n        this.input = this.registerDataInput(\"input\", RichTypeMatrix);\n        this.position = this.registerDataOutput(\"position\", RichTypeVector3);\n        this.rotationQuaternion = this.registerDataOutput(\"rotationQuaternion\", RichTypeQuaternion);\n        this.scaling = this.registerDataOutput(\"scaling\", RichTypeVector3);\n        this.isValid = this.registerDataOutput(\"isValid\", RichTypeBoolean, false);\n    }\n    _updateOutputs(context) {\n        const cachedExecutionId = context._getExecutionVariable(this, \"executionId\", -1);\n        const cachedPosition = context._getExecutionVariable(this, \"cachedPosition\", null);\n        const cachedRotation = context._getExecutionVariable(this, \"cachedRotation\", null);\n        const cachedScaling = context._getExecutionVariable(this, \"cachedScaling\", null);\n        if (cachedExecutionId === context.executionId && cachedPosition && cachedRotation && cachedScaling) {\n            this.position.setValue(cachedPosition, context);\n            this.rotationQuaternion.setValue(cachedRotation, context);\n            this.scaling.setValue(cachedScaling, context);\n        }\n        else {\n            const matrix = this.input.getValue(context);\n            const position = cachedPosition || new Vector3();\n            const rotation = cachedRotation || new Quaternion();\n            const scaling = cachedScaling || new Vector3();\n            // check matrix last column components should be 0,0,0,1\n            // round them to 4 decimal places\n            const m3 = Math.round(matrix.m[3] * 10000) / 10000;\n            const m7 = Math.round(matrix.m[7] * 10000) / 10000;\n            const m11 = Math.round(matrix.m[11] * 10000) / 10000;\n            const m15 = Math.round(matrix.m[15] * 10000) / 10000;\n            if (m3 !== 0 || m7 !== 0 || m11 !== 0 || m15 !== 1) {\n                this.isValid.setValue(false, context);\n                this.position.setValue(Vector3.Zero(), context);\n                this.rotationQuaternion.setValue(Quaternion.Identity(), context);\n                this.scaling.setValue(Vector3.One(), context);\n                return;\n            }\n            // make the checks for validity\n            const valid = matrix.decompose(scaling, rotation, position);\n            this.isValid.setValue(valid, context);\n            this.position.setValue(position, context);\n            this.rotationQuaternion.setValue(rotation, context);\n            this.scaling.setValue(scaling, context);\n            context._setExecutionVariable(this, \"cachedPosition\", position);\n            context._setExecutionVariable(this, \"cachedRotation\", rotation);\n            context._setExecutionVariable(this, \"cachedScaling\", scaling);\n            context._setExecutionVariable(this, \"executionId\", context.executionId);\n        }\n    }\n    getClassName() {\n        return \"FlowGraphMatrixDecompose\" /* FlowGraphBlockNames.MatrixDecompose */;\n    }\n}\nRegisterClass(\"FlowGraphMatrixDecompose\" /* FlowGraphBlockNames.MatrixDecompose */, FlowGraphMatrixDecomposeBlock);\n/**\n * Matrix compose block\n */\nexport class FlowGraphMatrixComposeBlock extends FlowGraphBlock {\n    constructor(config) {\n        super(config);\n        this.position = this.registerDataInput(\"position\", RichTypeVector3);\n        this.rotationQuaternion = this.registerDataInput(\"rotationQuaternion\", RichTypeQuaternion);\n        this.scaling = this.registerDataInput(\"scaling\", RichTypeVector3);\n        this.value = this.registerDataOutput(\"value\", RichTypeMatrix);\n    }\n    _updateOutputs(context) {\n        const cachedExecutionId = context._getExecutionVariable(this, \"executionId\", -1);\n        const cachedMatrix = context._getExecutionVariable(this, \"cachedMatrix\", null);\n        if (cachedExecutionId === context.executionId && cachedMatrix) {\n            this.value.setValue(cachedMatrix, context);\n        }\n        else {\n            const matrix = Matrix.Compose(this.scaling.getValue(context), this.rotationQuaternion.getValue(context), this.position.getValue(context));\n            this.value.setValue(matrix, context);\n            context._setExecutionVariable(this, \"cachedMatrix\", matrix);\n            context._setExecutionVariable(this, \"executionId\", context.executionId);\n        }\n    }\n    getClassName() {\n        return \"FlowGraphMatrixCompose\" /* FlowGraphBlockNames.MatrixCompose */;\n    }\n}\nRegisterClass(\"FlowGraphMatrixCompose\" /* FlowGraphBlockNames.MatrixCompose */, FlowGraphMatrixComposeBlock);\n//# sourceMappingURL=flowGraphMatrixMathBlocks.js.map"],"names":["FlowGraphTransposeBlock","FlowGraphUnaryOperationBlock","constructor","config","super","getRichTypeByFlowGraphType","matrixType","a","transpose","Matrix","Transpose","RegisterClass","FlowGraphDeterminantBlock","RichTypeNumber","determinant","FlowGraphInvertMatrixBlock","inverse","Invert","FlowGraphMatrixMultiplicationBlock","FlowGraphBinaryOperationBlock","b","multiply","FlowGraphMatrixDecomposeBlock","FlowGraphBlock","this","input","registerDataInput","RichTypeMatrix","position","registerDataOutput","RichTypeVector3","rotationQuaternion","RichTypeQuaternion","scaling","isValid","RichTypeBoolean","_updateOutputs","context","cachedExecutionId","_getExecutionVariable","cachedPosition","cachedRotation","cachedScaling","executionId","setValue","matrix","getValue","Vector3","rotation","Quaternion","m3","Math","round","m","m7","m11","m15","Zero","Identity","One","valid","decompose","_setExecutionVariable","getClassName","FlowGraphMatrixComposeBlock","value","cachedMatrix","Compose"],"mappings":"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"}