{"version":3,"file":"flowGraphTransformCoordinatesSystemBlock-CmR0YmvW.esm.min.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Data/flowGraphTransformCoordinatesSystemBlock.js"],"sourcesContent":["import { FlowGraphBlock } from \"../../flowGraphBlock\";\nimport { RichTypeAny, RichTypeVector3 } from \"../../flowGraphRichTypes\";\nimport { TmpVectors, Vector3 } from \"../../../Maths/math.vector\";\nimport { RegisterClass } from \"../../../Misc/typeStore\";\n/**\n * This blocks transforms a vector from one coordinate system to another.\n */\nexport class FlowGraphTransformCoordinatesSystemBlock extends FlowGraphBlock {\n    /**\n     * Creates a new FlowGraphCoordinateTransformBlock\n     * @param config optional configuration for this block\n     */\n    constructor(config) {\n        super(config);\n        this.sourceSystem = this.registerDataInput(\"sourceSystem\", RichTypeAny);\n        this.destinationSystem = this.registerDataInput(\"destinationSystem\", RichTypeAny);\n        this.inputCoordinates = this.registerDataInput(\"inputCoordinates\", RichTypeVector3);\n        this.outputCoordinates = this.registerDataOutput(\"outputCoordinates\", RichTypeVector3);\n    }\n    _updateOutputs(_context) {\n        const sourceSystemValue = this.sourceSystem.getValue(_context);\n        const destinationSystemValue = this.destinationSystem.getValue(_context);\n        const inputCoordinatesValue = this.inputCoordinates.getValue(_context);\n        // takes coordinates from source space to world space\n        const sourceWorld = sourceSystemValue.getWorldMatrix();\n        // takes coordinates from destination space to world space\n        const destinationWorld = destinationSystemValue.getWorldMatrix();\n        const destinationWorldInverse = TmpVectors.Matrix[0].copyFrom(destinationWorld);\n        // takes coordinates from world space to destination space\n        destinationWorldInverse.invert();\n        const sourceToDestination = TmpVectors.Matrix[1];\n        // takes coordinates from source space to world space to destination space\n        destinationWorldInverse.multiplyToRef(sourceWorld, sourceToDestination);\n        const outputCoordinatesValue = this.outputCoordinates.getValue(_context);\n        Vector3.TransformCoordinatesToRef(inputCoordinatesValue, sourceToDestination, outputCoordinatesValue);\n    }\n    /**\n     * Gets the class name of this block\n     * @returns the class name\n     */\n    getClassName() {\n        return \"FlowGraphTransformCoordinatesSystemBlock\" /* FlowGraphBlockNames.TransformCoordinatesSystem */;\n    }\n}\nRegisterClass(\"FlowGraphTransformCoordinatesSystemBlock\" /* FlowGraphBlockNames.TransformCoordinatesSystem */, FlowGraphTransformCoordinatesSystemBlock);\n//# sourceMappingURL=flowGraphTransformCoordinatesSystemBlock.js.map"],"names":["FlowGraphTransformCoordinatesSystemBlock","FlowGraphBlock","constructor","config","super","this","sourceSystem","registerDataInput","RichTypeAny","destinationSystem","inputCoordinates","RichTypeVector3","outputCoordinates","registerDataOutput","_updateOutputs","_context","sourceSystemValue","getValue","destinationSystemValue","inputCoordinatesValue","sourceWorld","getWorldMatrix","destinationWorld","destinationWorldInverse","TmpVectors","Matrix","copyFrom","invert","sourceToDestination","multiplyToRef","outputCoordinatesValue","Vector3","TransformCoordinatesToRef","getClassName","RegisterClass"],"mappings":"+OAOO,MAAMA,UAAiDC,EAK1D,WAAAC,CAAYC,GACRC,MAAMD,GACNE,KAAKC,aAAeD,KAAKE,kBAAkB,eAAgBC,GAC3DH,KAAKI,kBAAoBJ,KAAKE,kBAAkB,oBAAqBC,GACrEH,KAAKK,iBAAmBL,KAAKE,kBAAkB,mBAAoBI,GACnEN,KAAKO,kBAAoBP,KAAKQ,mBAAmB,oBAAqBF,EAC9E,CACI,cAAAG,CAAeC,GACX,MAAMC,EAAoBX,KAAKC,aAAaW,SAASF,GAC/CG,EAAyBb,KAAKI,kBAAkBQ,SAASF,GACzDI,EAAwBd,KAAKK,iBAAiBO,SAASF,GAEvDK,EAAcJ,EAAkBK,iBAEhCC,EAAmBJ,EAAuBG,iBAC1CE,EAA0BC,EAAWC,OAAO,GAAGC,SAASJ,GAE9DC,EAAwBI,SACxB,MAAMC,EAAsBJ,EAAWC,OAAO,GAE9CF,EAAwBM,cAAcT,EAAaQ,GACnD,MAAME,EAAyBzB,KAAKO,kBAAkBK,SAASF,GAC/DgB,EAAQC,0BAA0Bb,EAAuBS,EAAqBE,EACtF,CAKI,YAAAG,GACI,MAAO,0CACf,EAEAC,EAAc,2CAAiGlC"}