{"version":3,"file":"flowGraphSequenceBlock-CAlAXuj8.esm.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Execution/ControlFlow/flowGraphSequenceBlock.js"],"sourcesContent":["import { RegisterClass } from \"../../../../Misc/typeStore\";\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock\";\n/**\n * A block that executes its output flows in sequence.\n */\nexport class FlowGraphSequenceBlock extends FlowGraphExecutionBlock {\n    constructor(\n    /**\n     * the configuration of the block\n     */\n    config) {\n        super(config);\n        this.config = config;\n        /**\n         * The output flows.\n         */\n        this.executionSignals = [];\n        this.setNumberOfOutputSignals(this.config.outputSignalCount);\n    }\n    _execute(context) {\n        for (let i = 0; i < this.executionSignals.length; i++) {\n            this.executionSignals[i]._activateSignal(context);\n        }\n    }\n    /**\n     * Sets the block's output flows. Would usually be passed from the constructor but can be changed afterwards.\n     * @param outputSignalCount the number of output flows\n     */\n    setNumberOfOutputSignals(outputSignalCount = 1) {\n        // check the size of the outFlow Array, see if it is not larger than needed\n        while (this.executionSignals.length > outputSignalCount) {\n            const flow = this.executionSignals.pop();\n            if (flow) {\n                flow.disconnectFromAll();\n                this._unregisterSignalOutput(flow.name);\n            }\n        }\n        while (this.executionSignals.length < outputSignalCount) {\n            this.executionSignals.push(this._registerSignalOutput(`out_${this.executionSignals.length}`));\n        }\n    }\n    /**\n     * @returns class name of the block.\n     */\n    getClassName() {\n        return \"FlowGraphSequenceBlock\" /* FlowGraphBlockNames.Sequence */;\n    }\n}\nRegisterClass(\"FlowGraphSequenceBlock\" /* FlowGraphBlockNames.Sequence */, FlowGraphSequenceBlock);\n//# sourceMappingURL=flowGraphSequenceBlock.js.map"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACO,MAAM,sBAAsB,SAAS,uBAAuB,CAAC;AACpE,IAAI,WAAW;AACf;AACA;AACA;AACA,IAAI,MAAM,EAAE;AACZ,QAAQ,KAAK,CAAC,MAAM,CAAC;AACrB,QAAQ,IAAI,CAAC,MAAM,GAAG,MAAM;AAC5B;AACA;AACA;AACA,QAAQ,IAAI,CAAC,gBAAgB,GAAG,EAAE;AAClC,QAAQ,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;AACpE;AACA,IAAI,QAAQ,CAAC,OAAO,EAAE;AACtB,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC/D,YAAY,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,wBAAwB,CAAC,iBAAiB,GAAG,CAAC,EAAE;AACpD;AACA,QAAQ,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,iBAAiB,EAAE;AACjE,YAAY,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE;AACpD,YAAY,IAAI,IAAI,EAAE;AACtB,gBAAgB,IAAI,CAAC,iBAAiB,EAAE;AACxC,gBAAgB,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC;AACvD;AACA;AACA,QAAQ,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,iBAAiB,EAAE;AACjE,YAAY,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACzG;AACA;AACA;AACA;AACA;AACA,IAAI,YAAY,GAAG;AACnB,QAAQ,OAAO,wBAAwB;AACvC;AACA;AACA,aAAa,CAAC,wBAAwB,qCAAqC,sBAAsB,CAAC;;;;"}