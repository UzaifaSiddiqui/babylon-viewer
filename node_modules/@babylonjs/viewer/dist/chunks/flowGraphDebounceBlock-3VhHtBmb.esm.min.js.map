{"version":3,"file":"flowGraphDebounceBlock-3VhHtBmb.esm.min.js","sources":["../../../../../dev/core/dist/FlowGraph/Blocks/Execution/ControlFlow/flowGraphDebounceBlock.js"],"sourcesContent":["import { RichTypeNumber } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { FlowGraphExecutionBlockWithOutSignal } from \"core/FlowGraph/flowGraphExecutionBlockWithOutSignal\";\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\n/**\n * This block debounces the execution of a input, i.e. ensures that the input is only executed once every X times\n */\nexport class FlowGraphDebounceBlock extends FlowGraphExecutionBlockWithOutSignal {\n    constructor(config) {\n        super(config);\n        this.count = this.registerDataInput(\"count\", RichTypeNumber);\n        this.reset = this._registerSignalInput(\"reset\");\n        this.currentCount = this.registerDataOutput(\"currentCount\", RichTypeNumber);\n    }\n    _execute(context, callingSignal) {\n        if (callingSignal === this.reset) {\n            context._setExecutionVariable(this, \"debounceCount\", 0);\n            return;\n        }\n        const count = this.count.getValue(context);\n        const currentCount = context._getExecutionVariable(this, \"debounceCount\", 0);\n        const newCount = currentCount + 1;\n        this.currentCount.setValue(newCount, context);\n        context._setExecutionVariable(this, \"debounceCount\", newCount);\n        if (newCount >= count) {\n            this.out._activateSignal(context);\n            context._setExecutionVariable(this, \"debounceCount\", 0);\n        }\n    }\n    /**\n     * @returns class name of the block.\n     */\n    getClassName() {\n        return \"FlowGraphDebounceBlock\" /* FlowGraphBlockNames.Debounce */;\n    }\n}\nRegisterClass(\"FlowGraphDebounceBlock\" /* FlowGraphBlockNames.Debounce */, FlowGraphDebounceBlock);\n//# sourceMappingURL=flowGraphDebounceBlock.js.map"],"names":["FlowGraphDebounceBlock","FlowGraphExecutionBlockWithOutSignal","constructor","config","super","this","count","registerDataInput","RichTypeNumber","reset","_registerSignalInput","currentCount","registerDataOutput","_execute","context","callingSignal","_setExecutionVariable","getValue","newCount","_getExecutionVariable","setValue","out","_activateSignal","getClassName","RegisterClass"],"mappings":"yNAMO,MAAMA,UAA+BC,EACxC,WAAAC,CAAYC,GACRC,MAAMD,GACNE,KAAKC,MAAQD,KAAKE,kBAAkB,QAASC,GAC7CH,KAAKI,MAAQJ,KAAKK,qBAAqB,SACvCL,KAAKM,aAAeN,KAAKO,mBAAmB,eAAgBJ,EACpE,CACI,QAAAK,CAASC,EAASC,GACd,GAAIA,IAAkBV,KAAKI,MAEvB,YADAK,EAAQE,sBAAsBX,KAAM,gBAAiB,GAGzD,MAAMC,EAAQD,KAAKC,MAAMW,SAASH,GAE5BI,EADeJ,EAAQK,sBAAsBd,KAAM,gBAAiB,GAC1C,EAChCA,KAAKM,aAAaS,SAASF,EAAUJ,GACrCA,EAAQE,sBAAsBX,KAAM,gBAAiBa,GACjDA,GAAYZ,IACZD,KAAKgB,IAAIC,gBAAgBR,GACzBA,EAAQE,sBAAsBX,KAAM,gBAAiB,GAEjE,CAII,YAAAkB,GACI,MAAO,wBACf,EAEAC,EAAc,yBAA6DxB"}