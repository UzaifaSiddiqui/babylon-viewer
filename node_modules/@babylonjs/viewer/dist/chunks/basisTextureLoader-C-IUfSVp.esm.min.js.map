{"version":3,"file":"basisTextureLoader-C-IUfSVp.esm.min.js","sources":["../../../../../dev/core/dist/Misc/basisWorker.js","../../../../../dev/core/dist/Misc/basis.js","../../../../../dev/core/dist/Materials/Textures/Loaders/basisTextureLoader.js"],"sourcesContent":["import { Tools } from \"./tools\";\n/**\n * The worker function that gets converted to a blob url to pass into a worker.\n * To be used if a developer wants to create their own worker instance and inject it instead of using the default worker.\n */\nexport function workerFunction() {\n    const _BASIS_FORMAT = {\n        cTFETC1: 0,\n        cTFETC2: 1,\n        cTFBC1: 2,\n        cTFBC3: 3,\n        cTFBC4: 4,\n        cTFBC5: 5,\n        cTFBC7: 6,\n        cTFPVRTC1_4_RGB: 8,\n        cTFPVRTC1_4_RGBA: 9,\n        cTFASTC_4x4: 10,\n        cTFATC_RGB: 11,\n        cTFATC_RGBA_INTERPOLATED_ALPHA: 12,\n        cTFRGBA32: 13,\n        cTFRGB565: 14,\n        cTFBGR565: 15,\n        cTFRGBA4444: 16,\n        cTFFXT1_RGB: 17,\n        cTFPVRTC2_4_RGB: 18,\n        cTFPVRTC2_4_RGBA: 19,\n        cTFETC2_EAC_R11: 20,\n        cTFETC2_EAC_RG11: 21,\n    };\n    let transcoderModulePromise = null;\n    onmessage = (event) => {\n        if (event.data.action === \"init\") {\n            // Load the transcoder if it hasn't been yet\n            if (event.data.url) {\n                // make sure we loaded the script correctly\n                try {\n                    importScripts(event.data.url);\n                }\n                catch (e) {\n                    postMessage({ action: \"error\", error: e });\n                }\n            }\n            if (!transcoderModulePromise) {\n                transcoderModulePromise = BASIS({\n                    // Override wasm binary\n                    wasmBinary: event.data.wasmBinary,\n                });\n            }\n            if (transcoderModulePromise !== null) {\n                // eslint-disable-next-line github/no-then\n                transcoderModulePromise.then((m) => {\n                    BASIS = m;\n                    m.initializeBasis();\n                    postMessage({ action: \"init\" });\n                });\n            }\n        }\n        else if (event.data.action === \"transcode\") {\n            // Transcode the basis image and return the resulting pixels\n            const config = event.data.config;\n            const imgData = event.data.imageData;\n            const loadedFile = new BASIS.BasisFile(imgData);\n            const fileInfo = GetFileInfo(loadedFile);\n            let format = event.data.ignoreSupportedFormats ? null : GetSupportedTranscodeFormat(event.data.config, fileInfo);\n            let needsConversion = false;\n            if (format === null) {\n                needsConversion = true;\n                format = fileInfo.hasAlpha ? _BASIS_FORMAT.cTFBC3 : _BASIS_FORMAT.cTFBC1;\n            }\n            // Begin transcode\n            let success = true;\n            if (!loadedFile.startTranscoding()) {\n                success = false;\n            }\n            const buffers = [];\n            for (let imageIndex = 0; imageIndex < fileInfo.images.length; imageIndex++) {\n                if (!success) {\n                    break;\n                }\n                const image = fileInfo.images[imageIndex];\n                if (config.loadSingleImage === undefined || config.loadSingleImage === imageIndex) {\n                    let mipCount = image.levels.length;\n                    if (config.loadMipmapLevels === false) {\n                        mipCount = 1;\n                    }\n                    for (let levelIndex = 0; levelIndex < mipCount; levelIndex++) {\n                        const levelInfo = image.levels[levelIndex];\n                        const pixels = TranscodeLevel(loadedFile, imageIndex, levelIndex, format, needsConversion);\n                        if (!pixels) {\n                            success = false;\n                            break;\n                        }\n                        levelInfo.transcodedPixels = pixels;\n                        buffers.push(levelInfo.transcodedPixels.buffer);\n                    }\n                }\n            }\n            // Close file\n            loadedFile.close();\n            loadedFile.delete();\n            if (needsConversion) {\n                format = -1;\n            }\n            if (!success) {\n                postMessage({ action: \"transcode\", success: success, id: event.data.id });\n            }\n            else {\n                postMessage({ action: \"transcode\", success: success, id: event.data.id, fileInfo: fileInfo, format: format }, buffers);\n            }\n        }\n    };\n    /**\n     * Detects the supported transcode format for the file\n     * @param config transcode config\n     * @param fileInfo info about the file\n     * @returns the chosed format or null if none are supported\n     */\n    function GetSupportedTranscodeFormat(config, fileInfo) {\n        let format = null;\n        if (config.supportedCompressionFormats) {\n            if (config.supportedCompressionFormats.astc) {\n                format = _BASIS_FORMAT.cTFASTC_4x4;\n            }\n            else if (config.supportedCompressionFormats.bc7) {\n                format = _BASIS_FORMAT.cTFBC7;\n            }\n            else if (config.supportedCompressionFormats.s3tc) {\n                format = fileInfo.hasAlpha ? _BASIS_FORMAT.cTFBC3 : _BASIS_FORMAT.cTFBC1;\n            }\n            else if (config.supportedCompressionFormats.pvrtc) {\n                format = fileInfo.hasAlpha ? _BASIS_FORMAT.cTFPVRTC1_4_RGBA : _BASIS_FORMAT.cTFPVRTC1_4_RGB;\n            }\n            else if (config.supportedCompressionFormats.etc2) {\n                format = _BASIS_FORMAT.cTFETC2;\n            }\n            else if (config.supportedCompressionFormats.etc1) {\n                format = _BASIS_FORMAT.cTFETC1;\n            }\n            else {\n                format = _BASIS_FORMAT.cTFRGB565;\n            }\n        }\n        return format;\n    }\n    /**\n     * Retrieves information about the basis file eg. dimensions\n     * @param basisFile the basis file to get the info from\n     * @returns information about the basis file\n     */\n    function GetFileInfo(basisFile) {\n        const hasAlpha = basisFile.getHasAlpha();\n        const imageCount = basisFile.getNumImages();\n        const images = [];\n        for (let i = 0; i < imageCount; i++) {\n            const imageInfo = {\n                levels: [],\n            };\n            const levelCount = basisFile.getNumLevels(i);\n            for (let level = 0; level < levelCount; level++) {\n                const levelInfo = {\n                    width: basisFile.getImageWidth(i, level),\n                    height: basisFile.getImageHeight(i, level),\n                };\n                imageInfo.levels.push(levelInfo);\n            }\n            images.push(imageInfo);\n        }\n        const info = { hasAlpha, images };\n        return info;\n    }\n    function TranscodeLevel(loadedFile, imageIndex, levelIndex, format, convertToRgb565) {\n        const dstSize = loadedFile.getImageTranscodedSizeInBytes(imageIndex, levelIndex, format);\n        let dst = new Uint8Array(dstSize);\n        if (!loadedFile.transcodeImage(dst, imageIndex, levelIndex, format, 1, 0)) {\n            return null;\n        }\n        // If no supported format is found, load as dxt and convert to rgb565\n        if (convertToRgb565) {\n            const alignedWidth = (loadedFile.getImageWidth(imageIndex, levelIndex) + 3) & ~3;\n            const alignedHeight = (loadedFile.getImageHeight(imageIndex, levelIndex) + 3) & ~3;\n            dst = ConvertDxtToRgb565(dst, 0, alignedWidth, alignedHeight);\n        }\n        return dst;\n    }\n    /**\n     * From https://github.com/BinomialLLC/basis_universal/blob/master/webgl/texture/dxt-to-rgb565.js\n     * An unoptimized version of dxtToRgb565.  Also, the floating\n     * point math used to compute the colors actually results in\n     * slightly different colors compared to hardware DXT decoders.\n     * @param src dxt src pixels\n     * @param srcByteOffset offset for the start of src\n     * @param  width aligned width of the image\n     * @param  height aligned height of the image\n     * @returns the converted pixels\n     */\n    function ConvertDxtToRgb565(src, srcByteOffset, width, height) {\n        const c = new Uint16Array(4);\n        const dst = new Uint16Array(width * height);\n        const blockWidth = width / 4;\n        const blockHeight = height / 4;\n        for (let blockY = 0; blockY < blockHeight; blockY++) {\n            for (let blockX = 0; blockX < blockWidth; blockX++) {\n                const i = srcByteOffset + 8 * (blockY * blockWidth + blockX);\n                c[0] = src[i] | (src[i + 1] << 8);\n                c[1] = src[i + 2] | (src[i + 3] << 8);\n                c[2] =\n                    ((2 * (c[0] & 0x1f) + 1 * (c[1] & 0x1f)) / 3) |\n                        (((2 * (c[0] & 0x7e0) + 1 * (c[1] & 0x7e0)) / 3) & 0x7e0) |\n                        (((2 * (c[0] & 0xf800) + 1 * (c[1] & 0xf800)) / 3) & 0xf800);\n                c[3] =\n                    ((2 * (c[1] & 0x1f) + 1 * (c[0] & 0x1f)) / 3) |\n                        (((2 * (c[1] & 0x7e0) + 1 * (c[0] & 0x7e0)) / 3) & 0x7e0) |\n                        (((2 * (c[1] & 0xf800) + 1 * (c[0] & 0xf800)) / 3) & 0xf800);\n                for (let row = 0; row < 4; row++) {\n                    const m = src[i + 4 + row];\n                    let dstI = (blockY * 4 + row) * width + blockX * 4;\n                    dst[dstI++] = c[m & 0x3];\n                    dst[dstI++] = c[(m >> 2) & 0x3];\n                    dst[dstI++] = c[(m >> 4) & 0x3];\n                    dst[dstI++] = c[(m >> 6) & 0x3];\n                }\n            }\n        }\n        return dst;\n    }\n}\n/**\n * Initialize a web worker with the basis transcoder\n * @param worker the worker to initialize\n * @param wasmBinary the wasm binary to load into the worker\n * @param moduleUrl the url to the basis transcoder module\n * @returns a promise that resolves when the worker is initialized\n */\n// eslint-disable-next-line no-restricted-syntax\nexport async function initializeWebWorker(worker, wasmBinary, moduleUrl) {\n    return await new Promise((res, reject) => {\n        const initHandler = (msg) => {\n            if (msg.data.action === \"init\") {\n                worker.removeEventListener(\"message\", initHandler);\n                res(worker);\n            }\n            else if (msg.data.action === \"error\") {\n                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                reject(msg.data.error || \"error initializing worker\");\n            }\n        };\n        worker.addEventListener(\"message\", initHandler);\n        // we can use transferable objects here because the worker will own the ArrayBuffer\n        worker.postMessage({ action: \"init\", url: moduleUrl ? Tools.GetBabylonScriptURL(moduleUrl) : undefined, wasmBinary }, [wasmBinary]);\n    });\n}\n//# sourceMappingURL=basisWorker.js.map","import { Tools } from \"./tools\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { InternalTexture } from \"../Materials/Textures/internalTexture\";\nimport { Constants } from \"../Engines/constants\";\nimport { initializeWebWorker, workerFunction } from \"./basisWorker\";\n/**\n * Info about the .basis files\n */\nexport class BasisFileInfo {\n}\n/**\n * Result of transcoding a basis file\n */\nclass TranscodeResult {\n}\n/**\n * Configuration options for the Basis transcoder\n */\nexport class BasisTranscodeConfiguration {\n}\n/**\n * @internal\n * Enum of basis transcoder formats\n */\nvar BASIS_FORMATS;\n(function (BASIS_FORMATS) {\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFETC1\"] = 0] = \"cTFETC1\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFETC2\"] = 1] = \"cTFETC2\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC1\"] = 2] = \"cTFBC1\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC3\"] = 3] = \"cTFBC3\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC4\"] = 4] = \"cTFBC4\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC5\"] = 5] = \"cTFBC5\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC7\"] = 6] = \"cTFBC7\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFPVRTC1_4_RGB\"] = 8] = \"cTFPVRTC1_4_RGB\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFPVRTC1_4_RGBA\"] = 9] = \"cTFPVRTC1_4_RGBA\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFASTC_4x4\"] = 10] = \"cTFASTC_4x4\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFATC_RGB\"] = 11] = \"cTFATC_RGB\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFATC_RGBA_INTERPOLATED_ALPHA\"] = 12] = \"cTFATC_RGBA_INTERPOLATED_ALPHA\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFRGBA32\"] = 13] = \"cTFRGBA32\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFRGB565\"] = 14] = \"cTFRGB565\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBGR565\"] = 15] = \"cTFBGR565\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFRGBA4444\"] = 16] = \"cTFRGBA4444\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFFXT1_RGB\"] = 17] = \"cTFFXT1_RGB\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFPVRTC2_4_RGB\"] = 18] = \"cTFPVRTC2_4_RGB\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFPVRTC2_4_RGBA\"] = 19] = \"cTFPVRTC2_4_RGBA\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFETC2_EAC_R11\"] = 20] = \"cTFETC2_EAC_R11\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFETC2_EAC_RG11\"] = 21] = \"cTFETC2_EAC_RG11\";\n})(BASIS_FORMATS || (BASIS_FORMATS = {}));\n/**\n * Used to load .Basis files\n * See https://github.com/BinomialLLC/basis_universal/tree/master/webgl\n */\nexport const BasisToolsOptions = {\n    /**\n     * URL to use when loading the basis transcoder\n     */\n    JSModuleURL: `${Tools._DefaultCdnUrl}/basisTranscoder/1/basis_transcoder.js`,\n    /**\n     * URL to use when loading the wasm module for the transcoder\n     */\n    WasmModuleURL: `${Tools._DefaultCdnUrl}/basisTranscoder/1/basis_transcoder.wasm`,\n};\n/**\n * Get the internal format to be passed to texImage2D corresponding to the .basis format value\n * @param basisFormat format chosen from GetSupportedTranscodeFormat\n * @param engine\n * @returns internal format corresponding to the Basis format\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const GetInternalFormatFromBasisFormat = (basisFormat, engine) => {\n    let format;\n    switch (basisFormat) {\n        case BASIS_FORMATS.cTFETC1:\n            format = Constants.TEXTUREFORMAT_COMPRESSED_RGB_ETC1_WEBGL;\n            break;\n        case BASIS_FORMATS.cTFBC1:\n            format = Constants.TEXTUREFORMAT_COMPRESSED_RGB_S3TC_DXT1;\n            break;\n        case BASIS_FORMATS.cTFBC4:\n            format = Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT5;\n            break;\n        case BASIS_FORMATS.cTFASTC_4x4:\n            format = Constants.TEXTUREFORMAT_COMPRESSED_RGBA_ASTC_4x4;\n            break;\n        case BASIS_FORMATS.cTFETC2:\n            format = Constants.TEXTUREFORMAT_COMPRESSED_RGBA8_ETC2_EAC;\n            break;\n        case BASIS_FORMATS.cTFBC7:\n            format = Constants.TEXTUREFORMAT_COMPRESSED_RGBA_BPTC_UNORM;\n            break;\n    }\n    if (format === undefined) {\n        // eslint-disable-next-line no-throw-literal\n        throw \"The chosen Basis transcoder format is not currently supported\";\n    }\n    return format;\n};\nlet WorkerPromise = null;\nlet LocalWorker = null;\nlet ActionId = 0;\nconst IgnoreSupportedFormats = false;\nconst CreateWorkerAsync = async () => {\n    if (!WorkerPromise) {\n        WorkerPromise = new Promise((res, reject) => {\n            if (LocalWorker) {\n                res(LocalWorker);\n            }\n            else {\n                Tools.LoadFileAsync(Tools.GetBabylonScriptURL(BasisToolsOptions.WasmModuleURL))\n                    // eslint-disable-next-line github/no-then\n                    .then((wasmBinary) => {\n                    if (typeof URL !== \"function\") {\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                        return reject(\"Basis transcoder requires an environment with a URL constructor\");\n                    }\n                    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                    const workerBlobUrl = URL.createObjectURL(new Blob([`(${workerFunction})()`], { type: \"application/javascript\" }));\n                    LocalWorker = new Worker(workerBlobUrl);\n                    // eslint-disable-next-line github/no-then\n                    initializeWebWorker(LocalWorker, wasmBinary, BasisToolsOptions.JSModuleURL).then(res, reject);\n                })\n                    // eslint-disable-next-line github/no-then\n                    .catch(reject);\n            }\n        });\n    }\n    return await WorkerPromise;\n};\n/**\n * Set the worker to use for transcoding\n * @param worker The worker that will be used for transcoding\n */\nexport const SetBasisTranscoderWorker = (worker) => {\n    LocalWorker = worker;\n};\n/**\n * Transcodes a loaded image file to compressed pixel data\n * @param data image data to transcode\n * @param config configuration options for the transcoding\n * @returns a promise resulting in the transcoded image\n */\nexport const TranscodeAsync = async (data, config) => {\n    const dataView = data instanceof ArrayBuffer ? new Uint8Array(data) : data;\n    return await new Promise((res, rej) => {\n        // eslint-disable-next-line github/no-then\n        CreateWorkerAsync().then(() => {\n            const actionId = ActionId++;\n            const messageHandler = (msg) => {\n                if (msg.data.action === \"transcode\" && msg.data.id === actionId) {\n                    LocalWorker.removeEventListener(\"message\", messageHandler);\n                    if (!msg.data.success) {\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                        rej(\"Transcode is not supported on this device\");\n                    }\n                    else {\n                        res(msg.data);\n                    }\n                }\n            };\n            LocalWorker.addEventListener(\"message\", messageHandler);\n            const dataViewCopy = new Uint8Array(dataView.byteLength);\n            dataViewCopy.set(new Uint8Array(dataView.buffer, dataView.byteOffset, dataView.byteLength));\n            LocalWorker.postMessage({ action: \"transcode\", id: actionId, imageData: dataViewCopy, config: config, ignoreSupportedFormats: IgnoreSupportedFormats }, [\n                dataViewCopy.buffer,\n            ]);\n        }, (error) => {\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            rej(error);\n        });\n    });\n};\n/**\n * Binds a texture according to its underlying target.\n * @param texture texture to bind\n * @param engine the engine to bind the texture in\n */\nconst BindTexture = (texture, engine) => {\n    let target = engine._gl?.TEXTURE_2D;\n    if (texture.isCube) {\n        target = engine._gl?.TEXTURE_CUBE_MAP;\n    }\n    engine._bindTextureDirectly(target, texture, true);\n};\n/**\n * Loads a texture from the transcode result\n * @param texture texture load to\n * @param transcodeResult the result of transcoding the basis file to load from\n */\nexport const LoadTextureFromTranscodeResult = (texture, transcodeResult) => {\n    const engine = texture.getEngine();\n    for (let i = 0; i < transcodeResult.fileInfo.images.length; i++) {\n        const rootImage = transcodeResult.fileInfo.images[i].levels[0];\n        texture._invertVScale = texture.invertY;\n        if (transcodeResult.format === -1 || transcodeResult.format === BASIS_FORMATS.cTFRGB565) {\n            // No compatable compressed format found, fallback to RGB\n            texture.type = Constants.TEXTURETYPE_UNSIGNED_SHORT_5_6_5;\n            texture.format = Constants.TEXTUREFORMAT_RGB;\n            if (engine._features.basisNeedsPOT && (Math.log2(rootImage.width) % 1 !== 0 || Math.log2(rootImage.height) % 1 !== 0)) {\n                // Create non power of two texture\n                const source = new InternalTexture(engine, 2 /* InternalTextureSource.Temp */);\n                texture._invertVScale = texture.invertY;\n                source.type = Constants.TEXTURETYPE_UNSIGNED_SHORT_5_6_5;\n                source.format = Constants.TEXTUREFORMAT_RGB;\n                // Fallback requires aligned width/height\n                source.width = (rootImage.width + 3) & ~3;\n                source.height = (rootImage.height + 3) & ~3;\n                BindTexture(source, engine);\n                engine._uploadDataToTextureDirectly(source, new Uint16Array(rootImage.transcodedPixels.buffer), i, 0, Constants.TEXTUREFORMAT_RGB, true);\n                // Resize to power of two\n                engine._rescaleTexture(source, texture, engine.scenes[0], engine._getInternalFormat(Constants.TEXTUREFORMAT_RGB), () => {\n                    engine._releaseTexture(source);\n                    BindTexture(texture, engine);\n                });\n            }\n            else {\n                // Fallback is already inverted\n                texture._invertVScale = !texture.invertY;\n                // Upload directly\n                texture.width = (rootImage.width + 3) & ~3;\n                texture.height = (rootImage.height + 3) & ~3;\n                texture.samplingMode = Constants.TEXTURE_LINEAR_LINEAR;\n                BindTexture(texture, engine);\n                engine._uploadDataToTextureDirectly(texture, new Uint16Array(rootImage.transcodedPixels.buffer), i, 0, Constants.TEXTUREFORMAT_RGB, true);\n            }\n        }\n        else {\n            texture.width = rootImage.width;\n            texture.height = rootImage.height;\n            texture.generateMipMaps = transcodeResult.fileInfo.images[i].levels.length > 1;\n            const format = BasisTools.GetInternalFormatFromBasisFormat(transcodeResult.format, engine);\n            texture.format = format;\n            BindTexture(texture, engine);\n            // Upload all mip levels in the file\n            const levels = transcodeResult.fileInfo.images[i].levels;\n            for (let index = 0; index < levels.length; index++) {\n                const level = levels[index];\n                engine._uploadCompressedDataToTextureDirectly(texture, format, level.width, level.height, level.transcodedPixels, i, index);\n            }\n            if (engine._features.basisNeedsPOT && (Math.log2(texture.width) % 1 !== 0 || Math.log2(texture.height) % 1 !== 0)) {\n                Tools.Warn(\"Loaded .basis texture width and height are not a power of two. Texture wrapping will be set to Texture.CLAMP_ADDRESSMODE as other modes are not supported with non power of two dimensions in webGL 1.\");\n                texture._cachedWrapU = Texture.CLAMP_ADDRESSMODE;\n                texture._cachedWrapV = Texture.CLAMP_ADDRESSMODE;\n            }\n        }\n    }\n};\n/**\n * Used to load .Basis files\n * See https://github.com/BinomialLLC/basis_universal/tree/master/webgl\n */\nexport const BasisTools = {\n    /**\n     * URL to use when loading the basis transcoder\n     */\n    JSModuleURL: BasisToolsOptions.JSModuleURL,\n    /**\n     * URL to use when loading the wasm module for the transcoder\n     */\n    WasmModuleURL: BasisToolsOptions.WasmModuleURL,\n    /**\n     * Get the internal format to be passed to texImage2D corresponding to the .basis format value\n     * @param basisFormat format chosen from GetSupportedTranscodeFormat\n     * @returns internal format corresponding to the Basis format\n     */\n    GetInternalFormatFromBasisFormat,\n    /**\n     * Transcodes a loaded image file to compressed pixel data\n     * @param data image data to transcode\n     * @param config configuration options for the transcoding\n     * @returns a promise resulting in the transcoded image\n     */\n    TranscodeAsync,\n    /**\n     * Loads a texture from the transcode result\n     * @param texture texture load to\n     * @param transcodeResult the result of transcoding the basis file to load from\n     */\n    LoadTextureFromTranscodeResult,\n};\nObject.defineProperty(BasisTools, \"JSModuleURL\", {\n    get: function () {\n        return BasisToolsOptions.JSModuleURL;\n    },\n    set: function (value) {\n        BasisToolsOptions.JSModuleURL = value;\n    },\n});\nObject.defineProperty(BasisTools, \"WasmModuleURL\", {\n    get: function () {\n        return BasisToolsOptions.WasmModuleURL;\n    },\n    set: function (value) {\n        BasisToolsOptions.WasmModuleURL = value;\n    },\n});\n//# sourceMappingURL=basis.js.map","import { LoadTextureFromTranscodeResult, TranscodeAsync } from \"../../../Misc/basis\";\nimport { Tools } from \"../../../Misc/tools\";\n/**\n * Loader for .basis file format\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _BasisTextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param createPolynomials will be true if polynomials have been requested\n     * @param onLoad defines the callback to trigger once the texture is ready\n     * @param onError defines the callback to trigger in case of error\n     */\n    loadCubeData(data, texture, createPolynomials, onLoad, onError) {\n        if (Array.isArray(data)) {\n            return;\n        }\n        const caps = texture.getEngine().getCaps();\n        const transcodeConfig = {\n            supportedCompressionFormats: {\n                etc1: caps.etc1 ? true : false,\n                s3tc: caps.s3tc ? true : false,\n                pvrtc: caps.pvrtc ? true : false,\n                etc2: caps.etc2 ? true : false,\n                astc: caps.astc ? true : false,\n                bc7: caps.bptc ? true : false,\n            },\n        };\n        TranscodeAsync(data, transcodeConfig)\n            // eslint-disable-next-line github/no-then\n            .then((result) => {\n            const hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\n            LoadTextureFromTranscodeResult(texture, result);\n            texture.getEngine()._setCubeMapTextureParams(texture, hasMipmap);\n            texture.isReady = true;\n            texture.onLoadedObservable.notifyObservers(texture);\n            texture.onLoadedObservable.clear();\n            if (onLoad) {\n                onLoad();\n            }\n        })\n            // eslint-disable-next-line github/no-then\n            .catch((err) => {\n            const errorMessage = \"Failed to transcode Basis file, transcoding may not be supported on this device\";\n            Tools.Warn(errorMessage);\n            texture.isReady = true;\n            if (onError) {\n                onError(err);\n            }\n        });\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     */\n    loadData(data, texture, callback) {\n        const caps = texture.getEngine().getCaps();\n        const transcodeConfig = {\n            supportedCompressionFormats: {\n                etc1: caps.etc1 ? true : false,\n                s3tc: caps.s3tc ? true : false,\n                pvrtc: caps.pvrtc ? true : false,\n                etc2: caps.etc2 ? true : false,\n                astc: caps.astc ? true : false,\n                bc7: caps.bptc ? true : false,\n            },\n        };\n        TranscodeAsync(data, transcodeConfig)\n            // eslint-disable-next-line github/no-then\n            .then((result) => {\n            const rootImage = result.fileInfo.images[0].levels[0];\n            const hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\n            callback(rootImage.width, rootImage.height, hasMipmap, result.format !== -1, () => {\n                LoadTextureFromTranscodeResult(texture, result);\n            });\n        })\n            // eslint-disable-next-line github/no-then\n            .catch((err) => {\n            Tools.Warn(\"Failed to transcode Basis file, transcoding may not be supported on this device\");\n            Tools.Warn(`Failed to transcode Basis file: ${err}`);\n            callback(0, 0, false, false, () => { }, true);\n        });\n    }\n}\n//# sourceMappingURL=basisTextureLoader.js.map"],"names":["workerFunction","_BASIS_FORMAT","transcoderModulePromise","TranscodeLevel","loadedFile","imageIndex","levelIndex","format","convertToRgb565","dstSize","getImageTranscodedSizeInBytes","dst","Uint8Array","transcodeImage","src","srcByteOffset","width","height","c","Uint16Array","blockWidth","blockHeight","blockY","blockX","i","row","m","dstI","ConvertDxtToRgb565","getImageWidth","getImageHeight","onmessage","event","data","action","url","importScripts","e","postMessage","error","BASIS","wasmBinary","then","initializeBasis","config","imgData","imageData","BasisFile","fileInfo","basisFile","hasAlpha","getHasAlpha","imageCount","getNumImages","images","imageInfo","levels","levelCount","getNumLevels","level","levelInfo","push","GetFileInfo","ignoreSupportedFormats","supportedCompressionFormats","astc","bc7","s3tc","pvrtc","etc2","etc1","GetSupportedTranscodeFormat","needsConversion","success","startTranscoding","buffers","length","image","undefined","loadSingleImage","mipCount","loadMipmapLevels","pixels","transcodedPixels","buffer","close","delete","id","BASIS_FORMATS","BasisToolsOptions","JSModuleURL","Tools","_DefaultCdnUrl","WasmModuleURL","WorkerPromise","LocalWorker","ActionId","CreateWorkerAsync","async","Promise","res","reject","LoadFileAsync","GetBabylonScriptURL","URL","workerBlobUrl","createObjectURL","Blob","type","Worker","worker","moduleUrl","initHandler","msg","removeEventListener","addEventListener","initializeWebWorker","catch","TranscodeAsync","dataView","ArrayBuffer","rej","actionId","messageHandler","dataViewCopy","byteLength","set","byteOffset","BindTexture","texture","engine","target","_gl","TEXTURE_2D","isCube","TEXTURE_CUBE_MAP","_bindTextureDirectly","LoadTextureFromTranscodeResult","transcodeResult","getEngine","rootImage","_invertVScale","invertY","cTFRGB565","Constants","TEXTURETYPE_UNSIGNED_SHORT_5_6_5","TEXTUREFORMAT_RGB","_features","basisNeedsPOT","Math","log2","samplingMode","TEXTURE_LINEAR_LINEAR","_uploadDataToTextureDirectly","source","InternalTexture","_rescaleTexture","scenes","_getInternalFormat","_releaseTexture","generateMipMaps","BasisTools","GetInternalFormatFromBasisFormat","index","_uploadCompressedDataToTextureDirectly","Warn","_cachedWrapU","Texture","CLAMP_ADDRESSMODE","_cachedWrapV","basisFormat","cTFETC1","TEXTUREFORMAT_COMPRESSED_RGB_ETC1_WEBGL","cTFBC1","TEXTUREFORMAT_COMPRESSED_RGB_S3TC_DXT1","cTFBC4","TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT5","cTFASTC_4x4","TEXTUREFORMAT_COMPRESSED_RGBA_ASTC_4x4","cTFETC2","TEXTUREFORMAT_COMPRESSED_RGBA8_ETC2_EAC","cTFBC7","TEXTUREFORMAT_COMPRESSED_RGBA_BPTC_UNORM","Object","defineProperty","get","value","_BasisTextureLoader","constructor","this","supportCascades","loadCubeData","createPolynomials","onLoad","onError","Array","isArray","caps","getCaps","transcodeConfig","bptc","result","hasMipmap","_setCubeMapTextureParams","isReady","onLoadedObservable","notifyObservers","clear","err","loadData","callback"],"mappings":"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"}