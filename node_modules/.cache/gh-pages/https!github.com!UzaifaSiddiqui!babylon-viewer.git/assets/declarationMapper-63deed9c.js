import{f as m,aO as k}from"./index-52cd4afa.js";function B(a){const[n,u]=a.split(":");return w({op:n,extension:u})}function w(a,n=!0){var l;const u=a.extension?(l=g[a.extension])==null?void 0:l[a.op]:h[a.op];if(!u&&(m.Warn(`No mapping found for operation ${a.op} and extension ${a.extension||"KHR_interactivity"}`),n)){const o={},e={flows:{}};if(a.inputValueSockets){o.values={};for(const r in a.inputValueSockets)o.values[r]={name:r}}return a.outputValueSockets&&(e.values={},Object.keys(a.outputValueSockets).forEach(r=>{e.values[r]={name:r}})),{blocks:[],inputs:o,outputs:e}}return u}function F(a,n,u){g[n]||(g[n]={}),g[n][a]=u}const g={BABYLON:{"flow/log":{blocks:["FlowGraphConsoleLogBlock"],inputs:{values:{message:{name:"message"}}}}}},h={"event/onStart":{blocks:["FlowGraphSceneReadyEventBlock"],outputs:{flows:{out:{name:"done"}}}},"event/onTick":{blocks:["FlowGraphSceneTickEventBlock"],inputs:{},outputs:{values:{timeSinceLastTick:{name:"deltaTime",gltfType:"number"}},flows:{out:{name:"done"}}}},"event/send":{blocks:["FlowGraphSendCustomEventBlock"],extraProcessor(a,n,u,l,o){if(n.op!=="event/send"||!a.configuration||Object.keys(a.configuration).length!==1)throw new Error("Receive event should have a single configuration object, the event itself");const r=a.configuration.event.value[0];if(typeof r!="number")throw new Error("Event id should be a number");const i=l.arrays.events[r],p=o[0];return p.config||(p.config={}),p.config.eventId=i.eventId,p.config.eventData=i.eventData,o}},"event/receive":{blocks:["FlowGraphReceiveCustomEventBlock"],outputs:{flows:{out:{name:"done"}}},validation(a,n){var e;if(!a.configuration)return m.Error("Receive event should have a configuration object"),{valid:!1,error:"Receive event should have a configuration object"};const u=a.configuration.event;if(!u)return m.Error("Receive event should have a single configuration object, the event itself"),{valid:!1,error:"Receive event should have a single configuration object, the event itself"};const l=u.value[0];return typeof l!="number"?(m.Error("Event id should be a number"),{valid:!1,error:"Event id should be a number"}):((e=n.events)==null?void 0:e[l])?{valid:!0}:(m.Error(`Event with id ${l} not found`),{valid:!1,error:`Event with id ${l} not found`})},extraProcessor(a,n,u,l,o){if(n.op!=="event/receive"||!a.configuration||Object.keys(a.configuration).length!==1)throw new Error("Receive event should have a single configuration object, the event itself");const r=a.configuration.event.value[0];if(typeof r!="number")throw new Error("Event id should be a number");const i=l.arrays.events[r],p=o[0];return p.config||(p.config={}),p.config.eventId=i.eventId,p.config.eventData=i.eventData,o}},"math/e":t("FlowGraphEBlock"),"math/pi":t("FlowGraphPIBlock"),"math/inf":t("FlowGraphInfBlock"),"math/nan":t("FlowGraphNaNBlock"),"math/abs":t("FlowGraphAbsBlock"),"math/sign":t("FlowGraphSignBlock"),"math/trunc":t("FlowGraphTruncBlock"),"math/floor":t("FlowGraphFloorBlock"),"math/ceil":t("FlowGraphCeilBlock"),"math/round":{blocks:["FlowGraphRoundBlock"],configuration:{},inputs:{values:{a:{name:"a"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(a,n,u,l,o){var e;return(e=o[0]).config||(e.config={}),o[0].config.roundHalfAwayFromZero=!0,o}},"math/fract":t("FlowGraphFractBlock"),"math/neg":t("FlowGraphNegationBlock"),"math/add":t("FlowGraphAddBlock",["a","b"],!0),"math/sub":t("FlowGraphSubtractBlock",["a","b"],!0),"math/mul":{blocks:["FlowGraphMultiplyBlock"],extraProcessor(a,n,u,l,o){var e;(e=o[0]).config||(e.config={}),o[0].config.useMatrixPerComponent=!0,o[0].config.preventIntegerFloatArithmetic=!0;let r=-1;return Object.keys(a.values||{}).find(i=>{var p;return((p=a.values)==null?void 0:p[i].type)!==void 0?(r=a.values[i].type,!0):!1}),r!==-1&&(o[0].config.type=l.arrays.types[r].flowGraphType),o},validation(a){return a.values?v(a):{valid:!0}}},"math/div":t("FlowGraphDivideBlock",["a","b"],!0),"math/rem":t("FlowGraphModuloBlock",["a","b"]),"math/min":t("FlowGraphMinBlock",["a","b"]),"math/max":t("FlowGraphMaxBlock",["a","b"]),"math/clamp":t("FlowGraphClampBlock",["a","b","c"]),"math/saturate":t("FlowGraphSaturateBlock"),"math/mix":t("FlowGraphMathInterpolationBlock",["a","b","c"]),"math/eq":t("FlowGraphEqualityBlock",["a","b"]),"math/lt":t("FlowGraphLessThanBlock",["a","b"]),"math/le":t("FlowGraphLessThanOrEqualBlock",["a","b"]),"math/gt":t("FlowGraphGreaterThanBlock",["a","b"]),"math/ge":t("FlowGraphGreaterThanOrEqualBlock",["a","b"]),"math/isnan":t("FlowGraphIsNaNBlock"),"math/isinf":t("FlowGraphIsInfBlock"),"math/select":{blocks:["FlowGraphConditionalBlock"],inputs:{values:{condition:{name:"condition"},a:{name:"onTrue"},b:{name:"onFalse"}}},outputs:{values:{value:{name:"output"}}}},"math/random":{blocks:["FlowGraphRandomBlock"],outputs:{values:{value:{name:"value"}}}},"math/sin":t("FlowGraphSinBlock"),"math/cos":t("FlowGraphCosBlock"),"math/tan":t("FlowGraphTanBlock"),"math/asin":t("FlowGraphASinBlock"),"math/acos":t("FlowGraphACosBlock"),"math/atan":t("FlowGraphATanBlock"),"math/atan2":t("FlowGraphATan2Block",["a","b"]),"math/sinh":t("FlowGraphSinhBlock"),"math/cosh":t("FlowGraphCoshBlock"),"math/tanh":t("FlowGraphTanhBlock"),"math/asinh":t("FlowGraphASinhBlock"),"math/acosh":t("FlowGraphACoshBlock"),"math/atanh":t("FlowGraphATanhBlock"),"math/exp":t("FlowGraphExponentialBlock"),"math/log":t("FlowGraphLogBlock"),"math/log2":t("FlowGraphLog2Block"),"math/log10":t("FlowGraphLog10Block"),"math/sqrt":t("FlowGraphSquareRootBlock"),"math/cbrt":t("FlowGraphCubeRootBlock"),"math/pow":t("FlowGraphPowerBlock",["a","b"]),"math/length":t("FlowGraphLengthBlock"),"math/normalize":t("FlowGraphNormalizeBlock"),"math/dot":t("FlowGraphDotBlock",["a","b"]),"math/cross":t("FlowGraphCrossBlock",["a","b"]),"math/rotate2D":t("FlowGraphRotate2DBlock",["a","b"]),"math/rotate3D":t("FlowGraphRotate3DBlock",["a","b"]),"math/transform":{blocks:["FlowGraphTransformVectorBlock"],inputs:{values:{a:{name:"a"},b:{name:"b"}}},outputs:{values:{value:{name:"value"}}}},"math/combine2":{blocks:["FlowGraphCombineVector2Block"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}}},"math/combine3":{blocks:["FlowGraphCombineVector3Block"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}}},"math/combine4":{blocks:["FlowGraphCombineVector4Block"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"},d:{name:"input_3",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}}},"math/extract2":{blocks:["FlowGraphExtractVector2Block"],inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"}}}},"math/extract3":{blocks:["FlowGraphExtractVector3Block"],inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"}}}},"math/extract4":{blocks:["FlowGraphExtractVector4Block"],inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"},3:{name:"output_3"}}}},"math/transpose":t("FlowGraphTransposeBlock"),"math/determinant":t("FlowGraphDeterminantBlock"),"math/inverse":t("FlowGraphInvertMatrixBlock"),"math/matmul":t("FlowGraphMatrixMultiplicationBlock",["a","b"]),"math/matCompose":{blocks:["FlowGraphMatrixCompose"],inputs:{values:{translation:{name:"position",gltfType:"float3"},rotation:{name:"rotationQuaternion",gltfType:"float4"},scale:{name:"scaling",gltfType:"float3"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(a,n,u,l,o,e){const r=o[0].dataInputs.find(i=>i.name==="rotationQuaternion");if(!r)throw new Error("Rotation quaternion input not found");return e._connectionValues[r.uniqueId]&&(e._connectionValues[r.uniqueId].type="Quaternion"),o}},"math/matDecompose":{blocks:["FlowGraphMatrixDecompose"],inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{translation:{name:"position"},rotation:{name:"rotationQuaternion"},scale:{name:"scaling"}}}},"math/quatConjugate":t("FlowGraphConjugateBlock",["a"]),"math/quatMul":{blocks:["FlowGraphMultiplyBlock"],inputs:{values:{a:{name:"a",gltfType:"vector4"},b:{name:"b",gltfType:"vector4"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(a,n,u,l,o){var e;return(e=o[0]).config||(e.config={}),o[0].config.type="Quaternion",o}},"math/quatAngleBetween":t("FlowGraphAngleBetweenBlock",["a","b"]),"math/quatFromAxisAngle":{blocks:["FlowGraphQuaternionFromAxisAngleBlock"],inputs:{values:{axis:{name:"a",gltfType:"float3"},angle:{name:"b",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}}},"math/quatToAxisAngle":t("FlowGraphAxisAngleFromQuaternionBlock",["a"]),"math/quatFromDirections":t("FlowGraphQuaternionFromDirectionsBlock",["a","b"]),"math/combine2x2":{blocks:["FlowGraphCombineMatrix2DBlock"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"},d:{name:"input_3",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(a,n,u,l,o){var e;return(e=o[0]).config||(e.config={}),o[0].config.inputIsColumnMajor=!0,o}},"math/extract2x2":{blocks:["FlowGraphExtractMatrix2DBlock"],inputs:{values:{a:{name:"input",gltfType:"float2x2"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"},3:{name:"output_3"}}}},"math/combine3x3":{blocks:["FlowGraphCombineMatrix3DBlock"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"},d:{name:"input_3",gltfType:"number"},e:{name:"input_4",gltfType:"number"},f:{name:"input_5",gltfType:"number"},g:{name:"input_6",gltfType:"number"},h:{name:"input_7",gltfType:"number"},i:{name:"input_8",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(a,n,u,l,o){var e;return(e=o[0]).config||(e.config={}),o[0].config.inputIsColumnMajor=!0,o}},"math/extract3x3":{blocks:["FlowGraphExtractMatrix3DBlock"],inputs:{values:{a:{name:"input",gltfType:"float3x3"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"},3:{name:"output_3"},4:{name:"output_4"},5:{name:"output_5"},6:{name:"output_6"},7:{name:"output_7"},8:{name:"output_8"}}}},"math/combine4x4":{blocks:["FlowGraphCombineMatrixBlock"],inputs:{values:{a:{name:"input_0",gltfType:"number"},b:{name:"input_1",gltfType:"number"},c:{name:"input_2",gltfType:"number"},d:{name:"input_3",gltfType:"number"},e:{name:"input_4",gltfType:"number"},f:{name:"input_5",gltfType:"number"},g:{name:"input_6",gltfType:"number"},h:{name:"input_7",gltfType:"number"},i:{name:"input_8",gltfType:"number"},j:{name:"input_9",gltfType:"number"},k:{name:"input_10",gltfType:"number"},l:{name:"input_11",gltfType:"number"},m:{name:"input_12",gltfType:"number"},n:{name:"input_13",gltfType:"number"},o:{name:"input_14",gltfType:"number"},p:{name:"input_15",gltfType:"number"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(a,n,u,l,o){var e;return(e=o[0]).config||(e.config={}),o[0].config.inputIsColumnMajor=!0,o}},"math/extract4x4":{blocks:["FlowGraphExtractMatrixBlock"],configuration:{},inputs:{values:{a:{name:"input",gltfType:"number"}}},outputs:{values:{0:{name:"output_0"},1:{name:"output_1"},2:{name:"output_2"},3:{name:"output_3"},4:{name:"output_4"},5:{name:"output_5"},6:{name:"output_6"},7:{name:"output_7"},8:{name:"output_8"},9:{name:"output_9"},10:{name:"output_10"},11:{name:"output_11"},12:{name:"output_12"},13:{name:"output_13"},14:{name:"output_14"},15:{name:"output_15"}}}},"math/not":{blocks:["FlowGraphBitwiseNotBlock"],inputs:{values:{a:{name:"a"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(a,n,u,l,o,e){var p;var r;(r=o[0]).config||(r.config={});const i=o[0].dataInputs[0];return o[0].config.valueType=((p=e._connectionValues[i.uniqueId])==null?void 0:p.type)??"FlowGraphInteger",o}},"math/and":{blocks:["FlowGraphBitwiseAndBlock"],inputs:{values:{a:{name:"a"},b:{name:"b"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(a,n,u,l,o,e){var s,c;var r;(r=o[0]).config||(r.config={});const i=o[0].dataInputs[0],p=o[0].dataInputs[1];return o[0].config.valueType=((s=e._connectionValues[i.uniqueId])==null?void 0:s.type)??((c=e._connectionValues[p.uniqueId])==null?void 0:c.type)??"FlowGraphInteger",o}},"math/or":{blocks:["FlowGraphBitwiseOrBlock"],inputs:{values:{a:{name:"a"},b:{name:"b"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(a,n,u,l,o,e){var s,c;var r;(r=o[0]).config||(r.config={});const i=o[0].dataInputs[0],p=o[0].dataInputs[1];return o[0].config.valueType=((s=e._connectionValues[i.uniqueId])==null?void 0:s.type)??((c=e._connectionValues[p.uniqueId])==null?void 0:c.type)??"FlowGraphInteger",o}},"math/xor":{blocks:["FlowGraphBitwiseXorBlock"],inputs:{values:{a:{name:"a"},b:{name:"b"}}},outputs:{values:{value:{name:"value"}}},extraProcessor(a,n,u,l,o,e){var s,c;var r;(r=o[0]).config||(r.config={});const i=o[0].dataInputs[0],p=o[0].dataInputs[1];return o[0].config.valueType=((s=e._connectionValues[i.uniqueId])==null?void 0:s.type)??((c=e._connectionValues[p.uniqueId])==null?void 0:c.type)??"FlowGraphInteger",o}},"math/asr":t("FlowGraphBitwiseRightShiftBlock",["a","b"]),"math/lsl":t("FlowGraphBitwiseLeftShiftBlock",["a","b"]),"math/clz":t("FlowGraphLeadingZerosBlock"),"math/ctz":t("FlowGraphTrailingZerosBlock"),"math/popcnt":t("FlowGraphOneBitsCounterBlock"),"math/rad":t("FlowGraphDegToRadBlock"),"math/deg":t("FlowGraphRadToDegBlock"),"type/boolToInt":t("FlowGraphBooleanToInt"),"type/boolToFloat":t("FlowGraphBooleanToFloat"),"type/intToBool":t("FlowGraphIntToBoolean"),"type/intToFloat":t("FlowGraphIntToFloat"),"type/floatToInt":t("FlowGraphFloatToInt"),"type/floatToBool":t("FlowGraphFloatToBoolean"),"flow/sequence":{blocks:["FlowGraphSequenceBlock"],extraProcessor(a,n,u,l,o){const e=o[0];return e.config||(e.config={}),e.config.outputSignalCount=Object.keys(a.flows||[]).length,e.signalOutputs.forEach((r,i)=>{r.name="out_"+i}),o}},"flow/branch":{blocks:["FlowGraphBranchBlock"],outputs:{flows:{true:{name:"onTrue"},false:{name:"onFalse"}}}},"flow/switch":{blocks:["FlowGraphSwitchBlock"],configuration:{cases:{name:"cases",inOptions:!0,defaultValue:[]}},inputs:{values:{selection:{name:"case"},default:{name:"default"}}},validation(a){if(a.configuration&&a.configuration.cases){const n=a.configuration.cases.value;if(!n.every(o=>typeof o=="number"&&/^-?\d+$/.test(o.toString())))return m.Warn("Switch cases should be integers. Using empty array instead."),a.configuration.cases.value=[],{valid:!0};const l=new Set(n);a.configuration.cases.value=Array.from(l)}return{valid:!0}},extraProcessor(a,n,u,l,o){if(n.op!=="flow/switch"||!a.flows||Object.keys(a.flows).length===0)throw new Error("Switch should have a single configuration object, the cases array");return o[0].signalOutputs.forEach(r=>{r.name!=="default"&&(r.name="out_"+r.name)}),o}},"flow/while":{blocks:["FlowGraphWhileLoopBlock"],outputs:{flows:{loopBody:{name:"executionFlow"}}}},"flow/for":{blocks:["FlowGraphForLoopBlock"],configuration:{initialIndex:{name:"initialIndex",gltfType:"number",inOptions:!0,defaultValue:0}},inputs:{values:{startIndex:{name:"startIndex",gltfType:"number"},endIndex:{name:"endIndex",gltfType:"number"}}},outputs:{values:{index:{name:"index"}},flows:{loopBody:{name:"executionFlow"}}},extraProcessor(a,n,u,l,o){const e=o[0];return e.config||(e.config={}),e.config.incrementIndexWhenLoopDone=!0,o}},"flow/doN":{blocks:["FlowGraphDoNBlock"],configuration:{},inputs:{values:{n:{name:"maxExecutions",gltfType:"number"}}},outputs:{values:{currentCount:{name:"executionCount"}}}},"flow/multiGate":{blocks:["FlowGraphMultiGateBlock"],configuration:{isRandom:{name:"isRandom",gltfType:"boolean",inOptions:!0,defaultValue:!1},isLoop:{name:"isLoop",gltfType:"boolean",inOptions:!0,defaultValue:!1}},extraProcessor(a,n,u,l,o){if(n.op!=="flow/multiGate"||!a.flows||Object.keys(a.flows).length===0)throw new Error("MultiGate should have a single configuration object, the number of output flows");const e=o[0];return e.config||(e.config={}),e.config.outputSignalCount=Object.keys(a.flows).length,e.signalOutputs.forEach((r,i)=>{r.name="out_"+i}),o}},"flow/waitAll":{blocks:["FlowGraphWaitAllBlock"],configuration:{inputFlows:{name:"inputSignalCount",gltfType:"number",inOptions:!0,defaultValue:0}},inputs:{flows:{reset:{name:"reset"},"[segment]":{name:"in_$1"}}},validation(a){var n,u;return typeof((u=(n=a.configuration)==null?void 0:n.inputFlows)==null?void 0:u.value[0])!="number"&&(a.configuration=a.configuration||{inputFlows:{value:[0]}},a.configuration.inputFlows.value=[0]),{valid:!0}}},"flow/throttle":{blocks:["FlowGraphThrottleBlock"],outputs:{flows:{err:{name:"error"}}}},"flow/setDelay":{blocks:["FlowGraphSetDelayBlock"],outputs:{flows:{err:{name:"error"}}}},"flow/cancelDelay":{blocks:["FlowGraphCancelDelayBlock"]},"variable/get":{blocks:["FlowGraphGetVariableBlock"],validation(a){var n,u;return(u=(n=a.configuration)==null?void 0:n.variable)!=null&&u.value?{valid:!0}:(m.Error("Variable get block should have a variable configuration"),{valid:!1,error:"Variable get block should have a variable configuration"})},configuration:{variable:{name:"variable",gltfType:"number",flowGraphType:"string",inOptions:!0,isVariable:!0,dataTransformer(a,n){return[n.getVariableName(a[0])]}}}},"variable/set":{blocks:["FlowGraphSetVariableBlock"],configuration:{variable:{name:"variable",gltfType:"number",flowGraphType:"string",inOptions:!0,isVariable:!0,dataTransformer(a,n){return[n.getVariableName(a[0])]}}}},"variable/setMultiple":{blocks:["FlowGraphSetVariableBlock"],configuration:{variables:{name:"variables",gltfType:"number",flowGraphType:"string",inOptions:!0,dataTransformer(a,n){return[a[0].map(u=>n.getVariableName(u))]}}},extraProcessor(a,n,u,l,o){return o[0].dataInputs.forEach(r=>{r.name=l.getVariableName(+r.name)}),o}},"variable/interpolate":{blocks:["FlowGraphInterpolationBlock","FlowGraphContextBlock","FlowGraphPlayAnimationBlock","FlowGraphBezierCurveEasing","FlowGraphGetVariableBlock"],configuration:{variable:{name:"propertyName",inOptions:!0,isVariable:!0,dataTransformer(a,n){return[n.getVariableName(a[0])]}},useSlerp:{name:"animationType",inOptions:!0,defaultValue:!1,dataTransformer:a=>a[0]===!0?["Quaternion"]:[void 0]}},inputs:{values:{value:{name:"value_1"},duration:{name:"duration_1",gltfType:"number"},p1:{name:"controlPoint1",toBlock:"FlowGraphBezierCurveEasing"},p2:{name:"controlPoint2",toBlock:"FlowGraphBezierCurveEasing"}},flows:{in:{name:"in",toBlock:"FlowGraphPlayAnimationBlock"}}},outputs:{flows:{err:{name:"error",toBlock:"FlowGraphPlayAnimationBlock"},out:{name:"out",toBlock:"FlowGraphPlayAnimationBlock"},done:{name:"done",toBlock:"FlowGraphPlayAnimationBlock"}}},interBlockConnectors:[{input:"object",output:"userVariables",inputBlockIndex:2,outputBlockIndex:1,isVariable:!0},{input:"animation",output:"animation",inputBlockIndex:2,outputBlockIndex:0,isVariable:!0},{input:"easingFunction",output:"easingFunction",inputBlockIndex:0,outputBlockIndex:3,isVariable:!0},{input:"value_0",output:"value",inputBlockIndex:0,outputBlockIndex:4,isVariable:!0}],extraProcessor(a,n,u,l,o){var f;var e,r;const i=o[0],p=(f=a.configuration)==null?void 0:f.variable.value[0];if(typeof p!="number")throw m.Error("Variable index is not defined for variable interpolation block"),new Error("Variable index is not defined for variable interpolation block");const s=l.arrays.staticVariables[p];typeof i.config.animationType.value>"u"&&(l.arrays.staticVariables,i.config.animationType.value=k(s.type));const c=o[4];return c.config||(c.config={}),(e=c.config).variable||(e.variable={}),c.config.variable.value=l.getVariableName(p),(r=o[3]).config||(r.config={}),o}},"pointer/get":{blocks:["FlowGraphGetPropertyBlock","FlowGraphJsonPointerParserBlock"],configuration:{pointer:{name:"jsonPointer",toBlock:"FlowGraphJsonPointerParserBlock"}},inputs:{values:{"[segment]":{name:"$1",toBlock:"FlowGraphJsonPointerParserBlock"}}},interBlockConnectors:[{input:"object",output:"object",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"propertyName",output:"propertyName",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"customGetFunction",output:"getFunction",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0}],extraProcessor(a,n,u,l,o){return o.forEach(e=>{e.className==="FlowGraphJsonPointerParserBlock"&&(e.config||(e.config={}),e.config.outputValue=!0)}),o}},"pointer/set":{blocks:["FlowGraphSetPropertyBlock","FlowGraphJsonPointerParserBlock"],configuration:{pointer:{name:"jsonPointer",toBlock:"FlowGraphJsonPointerParserBlock"}},inputs:{values:{value:{name:"value"},"[segment]":{name:"$1",toBlock:"FlowGraphJsonPointerParserBlock"}}},outputs:{flows:{err:{name:"error"}}},interBlockConnectors:[{input:"object",output:"object",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"propertyName",output:"propertyName",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"customSetFunction",output:"setFunction",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0}],extraProcessor(a,n,u,l,o){return o.forEach(e=>{e.className==="FlowGraphJsonPointerParserBlock"&&(e.config||(e.config={}),e.config.outputValue=!0)}),o}},"pointer/interpolate":{blocks:["FlowGraphInterpolationBlock","FlowGraphJsonPointerParserBlock","FlowGraphPlayAnimationBlock","FlowGraphBezierCurveEasing"],configuration:{pointer:{name:"jsonPointer",toBlock:"FlowGraphJsonPointerParserBlock"}},inputs:{values:{value:{name:"value_1"},"[segment]":{name:"$1",toBlock:"FlowGraphJsonPointerParserBlock"},duration:{name:"duration_1",gltfType:"number"},p1:{name:"controlPoint1",toBlock:"FlowGraphBezierCurveEasing"},p2:{name:"controlPoint2",toBlock:"FlowGraphBezierCurveEasing"}},flows:{in:{name:"in",toBlock:"FlowGraphPlayAnimationBlock"}}},outputs:{flows:{err:{name:"error",toBlock:"FlowGraphPlayAnimationBlock"},out:{name:"out",toBlock:"FlowGraphPlayAnimationBlock"},done:{name:"done",toBlock:"FlowGraphPlayAnimationBlock"}}},interBlockConnectors:[{input:"object",output:"object",inputBlockIndex:2,outputBlockIndex:1,isVariable:!0},{input:"propertyName",output:"propertyName",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"customBuildAnimation",output:"generateAnimationsFunction",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"animation",output:"animation",inputBlockIndex:2,outputBlockIndex:0,isVariable:!0},{input:"easingFunction",output:"easingFunction",inputBlockIndex:0,outputBlockIndex:3,isVariable:!0},{input:"value_0",output:"value",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0}],extraProcessor(a,n,u,l,o){return o.forEach(e=>{e.className==="FlowGraphJsonPointerParserBlock"?(e.config||(e.config={}),e.config.outputValue=!0):e.className==="FlowGraphInterpolationBlock"&&(e.config||(e.config={}),Object.keys(a.values||[]).forEach(r=>{var p;const i=(p=a.values)==null?void 0:p[r];if(r==="value"&&i){const s=i.type;s!==void 0&&(e.config.animationType=l.arrays.types[s].flowGraphType)}}))}),o}},"animation/start":{blocks:["FlowGraphPlayAnimationBlock","FlowGraphArrayIndexBlock","KHR_interactivity/FlowGraphGLTFDataProvider"],inputs:{values:{animation:{name:"index",gltfType:"number",toBlock:"FlowGraphArrayIndexBlock"},speed:{name:"speed",gltfType:"number"},startTime:{name:"from",gltfType:"number",dataTransformer:(a,n)=>[a[0]*n._animationTargetFps]},endTime:{name:"to",gltfType:"number",dataTransformer:(a,n)=>[a[0]*n._animationTargetFps]}}},outputs:{flows:{err:{name:"error"}}},interBlockConnectors:[{input:"animationGroup",output:"value",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"array",output:"animationGroups",inputBlockIndex:1,outputBlockIndex:2,isVariable:!0}],extraProcessor(a,n,u,l,o,e,r){const i=o[o.length-1];return i.config||(i.config={}),i.config.glTF=r,o}},"animation/stop":{blocks:["FlowGraphStopAnimationBlock","FlowGraphArrayIndexBlock","KHR_interactivity/FlowGraphGLTFDataProvider"],inputs:{values:{animation:{name:"index",gltfType:"number",toBlock:"FlowGraphArrayIndexBlock"}}},outputs:{flows:{err:{name:"error"}}},interBlockConnectors:[{input:"animationGroup",output:"value",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"array",output:"animationGroups",inputBlockIndex:1,outputBlockIndex:2,isVariable:!0}],extraProcessor(a,n,u,l,o,e,r){const i=o[o.length-1];return i.config||(i.config={}),i.config.glTF=r,o}},"animation/stopAt":{blocks:["FlowGraphStopAnimationBlock","FlowGraphArrayIndexBlock","KHR_interactivity/FlowGraphGLTFDataProvider"],configuration:{},inputs:{values:{animation:{name:"index",gltfType:"number",toBlock:"FlowGraphArrayIndexBlock"},stopTime:{name:"stopAtFrame",gltfType:"number",dataTransformer:(a,n)=>[a[0]*n._animationTargetFps]}}},outputs:{flows:{err:{name:"error"}}},interBlockConnectors:[{input:"animationGroup",output:"value",inputBlockIndex:0,outputBlockIndex:1,isVariable:!0},{input:"array",output:"animationGroups",inputBlockIndex:1,outputBlockIndex:2,isVariable:!0}],extraProcessor(a,n,u,l,o,e,r){const i=o[o.length-1];return i.config||(i.config={}),i.config.glTF=r,o}},"math/switch":{blocks:["FlowGraphDataSwitchBlock"],configuration:{cases:{name:"cases",inOptions:!0,defaultValue:[]}},inputs:{values:{selection:{name:"case"}}},validation(a){if(a.configuration&&a.configuration.cases){const n=a.configuration.cases.value;if(!n.every(o=>typeof o=="number"&&/^-?\d+$/.test(o.toString())))return m.Warn("Switch cases should be integers. Using empty array instead."),a.configuration.cases.value=[],{valid:!0};const l=new Set(n);a.configuration.cases.value=Array.from(l)}return{valid:!0}},extraProcessor(a,n,u,l,o){const e=o[0];return e.dataInputs.forEach(r=>{r.name!=="default"&&r.name!=="case"&&(r.name="in_"+r.name)}),e.config||(e.config={}),e.config.treatCasesAsIntegers=!0,o}},"debug/log":{blocks:["FlowGraphConsoleLogBlock"],configuration:{message:{name:"messageTemplate",inOptions:!0}}}};h["math/compose"]=h["math/matCompose"];h["math/decompose"]=h["math/matDecompose"];function t(a,n=["a"],u){return{blocks:[a],inputs:{values:n.reduce((l,o)=>(l[o]={name:o},l),{})},outputs:{values:{value:{name:"value"}}},extraProcessor(l,o,e,r,i){var p;if(u){(p=i[0]).config||(p.config={}),i[0].config.preventIntegerFloatArithmetic=!0;let s=-1;Object.keys(l.values||{}).find(c=>{var f;return((f=l.values)==null?void 0:f[c].type)!==void 0?(s=l.values[c].type,!0):!1}),s!==-1&&(i[0].config.type=r.arrays.types[s].flowGraphType)}return i},validation(l){return u?v(l):{valid:!0}}}}function v(a){if(a.values){const n=Object.keys(a.values).map(l=>a.values[l].type).filter(l=>l!==void 0);if(!n.every(l=>l===n[0]))return{valid:!1,error:"All inputs must be of the same type"}}return{valid:!0}}export{B as a,F as b,w as g};
