{
  "version": 3,
  "sources": ["../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_specular.ts"],
  "sourcesContent": ["import type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport type { IEXTMaterialsSpecularEdgeColor, IKHRMaterialsSpecular } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_specular\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_specular extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_specular\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_specular/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_specular implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 190;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsSpecular>(context, material, this.name, async (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadSpecularPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            // Handle the EXT_materials_specular_edge_color sub-extension\r\n            // https://github.com/KhronosGroup/glTF/blob/2a1111b88f052cbd3e2d82abb9faee56e7494904/extensions/2.0/Vendor/EXT_materials_specular_edge_color/README.md\r\n            if (extension.extensions && extension.extensions.EXT_materials_specular_edge_color && babylonMaterial instanceof PBRMaterial) {\r\n                const specularEdgeColorExtension = extension.extensions.EXT_materials_specular_edge_color as IEXTMaterialsSpecularEdgeColor;\r\n                if (specularEdgeColorExtension.specularEdgeColorEnabled) {\r\n                    babylonMaterial.brdf.dielectricSpecularModel = Constants.MATERIAL_DIELECTRIC_SPECULAR_MODEL_OPENPBR;\r\n                    babylonMaterial.brdf.conductorSpecularModel = Constants.MATERIAL_CONDUCTOR_SPECULAR_MODEL_OPENPBR;\r\n                }\r\n            }\r\n            // eslint-disable-next-line github/no-then\r\n            return await Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadSpecularPropertiesAsync(context: string, properties: IKHRMaterialsSpecular, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        if (properties.specularFactor !== undefined) {\r\n            babylonMaterial.metallicF0Factor = properties.specularFactor;\r\n        }\r\n\r\n        if (properties.specularColorFactor !== undefined) {\r\n            babylonMaterial.metallicReflectanceColor = Color3.FromArray(properties.specularColorFactor);\r\n        }\r\n\r\n        if (properties.specularTexture) {\r\n            (properties.specularTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/specularTexture`, properties.specularTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Specular)`;\r\n                    babylonMaterial.metallicReflectanceTexture = texture;\r\n                    babylonMaterial.useOnlyMetallicFromMetallicReflectanceTexture = true;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.specularColorTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/specularColorTexture`, properties.specularColorTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Specular Color)`;\r\n                    babylonMaterial.reflectanceTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        // eslint-disable-next-line github/no-then\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_specular(loader));\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,IAAM,OAAO;AAiBP,IAAO,yBAAP,MAA6B;;;;EAqB/B,YAAY,QAAkB;AAjBd,SAAA,OAAO;AAUhB,SAAA,QAAQ;AAQX,SAAK,UAAU;AACf,SAAK,UAAU,KAAK,QAAQ,gBAAgB,IAAI;EACpD;;EAGO,UAAO;AACT,SAAK,UAAkB;EAC5B;;;;;EAMO,4BAA4B,SAAiB,UAAqB,iBAAyB;AAC9F,WAAO,WAAW,mBAA0C,SAAS,UAAU,KAAK,MAAM,OAAO,kBAAkB,cAAa;AAC5H,YAAM,WAAW,IAAI,MAAK;AAC1B,eAAS,KAAK,KAAK,QAAQ,4BAA4B,SAAS,UAAU,eAAe,CAAC;AAC1F,eAAS,KAAK,KAAK,6BAA6B,kBAAkB,WAAW,eAAe,CAAC;AAG7F,UAAI,UAAU,cAAc,UAAU,WAAW,qCAAqC,2BAA2B,aAAa;AAC1H,cAAM,6BAA6B,UAAU,WAAW;AACxD,YAAI,2BAA2B,0BAA0B;AACrD,0BAAgB,KAAK,0BAA0B,UAAU;AACzD,0BAAgB,KAAK,yBAAyB,UAAU;QAC5D;MACJ;AAEA,aAAO,MAAM,QAAQ,IAAI,QAAQ,EAAE,KAAK,MAAK;MAAE,CAAC;IACpD,CAAC;EACL;;EAGQ,6BAA6B,SAAiB,YAAmC,iBAAyB;AAC9G,QAAI,EAAE,2BAA2B,cAAc;AAC3C,YAAM,IAAI,MAAM,GAAG,OAAO,+BAA+B;IAC7D;AAEA,UAAM,WAAW,IAAI,MAAK;AAE1B,QAAI,WAAW,mBAAmB,QAAW;AACzC,sBAAgB,mBAAmB,WAAW;IAClD;AAEA,QAAI,WAAW,wBAAwB,QAAW;AAC9C,sBAAgB,2BAA2B,OAAO,UAAU,WAAW,mBAAmB;IAC9F;AAEA,QAAI,WAAW,iBAAiB;AAC3B,iBAAW,gBAAiC,eAAe;AAC5D,eAAS,KACL,KAAK,QAAQ,qBAAqB,GAAG,OAAO,oBAAoB,WAAW,iBAAiB,CAAC,YAAW;AACpG,gBAAQ,OAAO,GAAG,gBAAgB,IAAI;AACtC,wBAAgB,6BAA6B;AAC7C,wBAAgB,gDAAgD;MACpE,CAAC,CAAC;IAEV;AAEA,QAAI,WAAW,sBAAsB;AACjC,eAAS,KACL,KAAK,QAAQ,qBAAqB,GAAG,OAAO,yBAAyB,WAAW,sBAAsB,CAAC,YAAW;AAC9G,gBAAQ,OAAO,GAAG,gBAAgB,IAAI;AACtC,wBAAgB,qBAAqB;MACzC,CAAC,CAAC;IAEV;AAGA,WAAO,QAAQ,IAAI,QAAQ,EAAE,KAAK,MAAK;IAAE,CAAC;EAC9C;;AAGJ,wBAAwB,IAAI;AAC5B,sBAAsB,MAAM,MAAM,CAAC,WAAW,IAAI,uBAAuB,MAAM,CAAC;",
  "names": []
}
