import {
  ArrayItem,
  GLTFLoader
} from "./chunk-3TB6AK5U.js";
import "./chunk-UU3CS7MV.js";
import {
  MeshoptCompression
} from "./chunk-IRQK6D4P.js";
import "./chunk-LE57K3OI.js";
import "./chunk-BADZLSSB.js";
import "./chunk-EUDQUTFD.js";
import "./chunk-EA5Y7UBE.js";
import "./chunk-KCMUW3TE.js";
import "./chunk-2VZLPTT4.js";
import "./chunk-FEZ4AZAI.js";
import "./chunk-V4NEUSAV.js";
import "./chunk-BP3EVIYU.js";
import "./chunk-XKRKL6YP.js";
import "./chunk-2ZZCOA4S.js";
import "./chunk-E3BT65CZ.js";
import "./chunk-GSOC3KDB.js";
import "./chunk-FZ54PSXY.js";
import "./chunk-7LAWCXNF.js";
import "./chunk-JFIM5ZM3.js";
import "./chunk-NBEEHJT4.js";
import "./chunk-YC7U4GEU.js";
import "./chunk-HDKDYI4D.js";
import "./chunk-U6F2POQ4.js";
import "./chunk-EALI4KUG.js";
import "./chunk-4U4OQIRL.js";
import "./chunk-3BK5LF7O.js";
import {
  registerGLTFExtension,
  unregisterGLTFExtension
} from "./chunk-QGBHPVKU.js";
import "./chunk-GSUGVQ2V.js";
import "./chunk-QURDUCRJ.js";
import "./chunk-Q4NWZFNQ.js";
import "./chunk-WKXRXUEO.js";
import "./chunk-VECXS57A.js";
import "./chunk-ZXVFJ3IO.js";
import "./chunk-R5E54K5P.js";
import "./chunk-LJSODA3L.js";
import "./chunk-HEJT6QLT.js";
import "./chunk-AZ5ZQKUU.js";
import "./chunk-P6JJKNRD.js";
import "./chunk-KU4OFD2T.js";
import "./chunk-6JFLQ55T.js";
import "./chunk-XKDR2MBU.js";
import "./chunk-UEXKFJPR.js";
import "./chunk-2ZEUD233.js";
import "./chunk-IW7YW5OA.js";
import "./chunk-I2PO3XEU.js";
import "./chunk-NJKHZWGX.js";
import "./chunk-OWCZTH5B.js";
import "./chunk-AZNEH5GV.js";
import "./chunk-J4DZ2XK7.js";
import "./chunk-FX6MN5HL.js";
import "./chunk-7HZJAC7S.js";
import "./chunk-YCWH5W4G.js";
import "./chunk-S7NDMBDF.js";
import "./chunk-LDFLUTDO.js";
import "./chunk-ZVW3KNNR.js";
import "./chunk-2YUEJ7I2.js";
import "./chunk-SSYGV25P.js";

// node_modules/@babylonjs/loaders/glTF/2.0/Extensions/EXT_meshopt_compression.js
var NAME = "EXT_meshopt_compression";
var EXT_meshopt_compression = class {
  /**
   * @internal
   */
  constructor(loader) {
    this.name = NAME;
    this.enabled = loader.isExtensionUsed(NAME);
    this._loader = loader;
  }
  /** @internal */
  dispose() {
    this._loader = null;
  }
  /**
   * @internal
   */
  // eslint-disable-next-line no-restricted-syntax
  loadBufferViewAsync(context, bufferView) {
    return GLTFLoader.LoadExtensionAsync(context, bufferView, this.name, async (extensionContext, extension) => {
      const bufferViewMeshopt = bufferView;
      if (bufferViewMeshopt._meshOptData) {
        return await bufferViewMeshopt._meshOptData;
      }
      const buffer = ArrayItem.Get(`${context}/buffer`, this._loader.gltf.buffers, extension.buffer);
      bufferViewMeshopt._meshOptData = this._loader.loadBufferAsync(`/buffers/${buffer.index}`, buffer, extension.byteOffset || 0, extension.byteLength).then(async (buffer2) => {
        return await MeshoptCompression.Default.decodeGltfBufferAsync(buffer2, extension.count, extension.byteStride, extension.mode, extension.filter);
      });
      return await bufferViewMeshopt._meshOptData;
    });
  }
};
unregisterGLTFExtension(NAME);
registerGLTFExtension(NAME, true, (loader) => new EXT_meshopt_compression(loader));
export {
  EXT_meshopt_compression
};
//# sourceMappingURL=EXT_meshopt_compression-HIZXNMGD.js.map
