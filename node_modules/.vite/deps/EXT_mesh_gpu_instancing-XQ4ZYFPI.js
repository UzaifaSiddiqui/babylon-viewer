import {
  ArrayItem,
  GLTFLoader
} from "./chunk-3TB6AK5U.js";
import "./chunk-UU3CS7MV.js";
import "./chunk-BOSYRIBV.js";
import "./chunk-LE57K3OI.js";
import "./chunk-BADZLSSB.js";
import "./chunk-EUDQUTFD.js";
import "./chunk-EA5Y7UBE.js";
import "./chunk-KCMUW3TE.js";
import "./chunk-2VZLPTT4.js";
import "./chunk-FEZ4AZAI.js";
import "./chunk-V4NEUSAV.js";
import "./chunk-BP3EVIYU.js";
import "./chunk-XKRKL6YP.js";
import "./chunk-2ZZCOA4S.js";
import "./chunk-E3BT65CZ.js";
import "./chunk-GSOC3KDB.js";
import "./chunk-FZ54PSXY.js";
import "./chunk-7LAWCXNF.js";
import "./chunk-JFIM5ZM3.js";
import "./chunk-NBEEHJT4.js";
import "./chunk-YC7U4GEU.js";
import "./chunk-HDKDYI4D.js";
import "./chunk-U6F2POQ4.js";
import "./chunk-EALI4KUG.js";
import "./chunk-4U4OQIRL.js";
import "./chunk-3BK5LF7O.js";
import {
  registerGLTFExtension,
  unregisterGLTFExtension
} from "./chunk-QGBHPVKU.js";
import "./chunk-GSUGVQ2V.js";
import "./chunk-QURDUCRJ.js";
import "./chunk-Q4NWZFNQ.js";
import "./chunk-WKXRXUEO.js";
import "./chunk-VECXS57A.js";
import "./chunk-ZXVFJ3IO.js";
import "./chunk-R5E54K5P.js";
import "./chunk-LJSODA3L.js";
import "./chunk-HEJT6QLT.js";
import "./chunk-AZ5ZQKUU.js";
import "./chunk-P6JJKNRD.js";
import "./chunk-KU4OFD2T.js";
import "./chunk-6JFLQ55T.js";
import "./chunk-XKDR2MBU.js";
import "./chunk-UEXKFJPR.js";
import "./chunk-2ZEUD233.js";
import "./chunk-IW7YW5OA.js";
import "./chunk-I2PO3XEU.js";
import "./chunk-NJKHZWGX.js";
import "./chunk-OWCZTH5B.js";
import "./chunk-AZNEH5GV.js";
import "./chunk-J4DZ2XK7.js";
import "./chunk-FX6MN5HL.js";
import "./chunk-7HZJAC7S.js";
import {
  Matrix,
  Quaternion,
  TmpVectors,
  Vector3
} from "./chunk-YCWH5W4G.js";
import "./chunk-S7NDMBDF.js";
import "./chunk-LDFLUTDO.js";
import "./chunk-ZVW3KNNR.js";
import "./chunk-2YUEJ7I2.js";
import "./chunk-SSYGV25P.js";

// node_modules/@babylonjs/loaders/glTF/2.0/Extensions/EXT_mesh_gpu_instancing.js
var NAME = "EXT_mesh_gpu_instancing";
var EXT_mesh_gpu_instancing = class {
  /**
   * @internal
   */
  constructor(loader) {
    this.name = NAME;
    this._loader = loader;
    this.enabled = this._loader.isExtensionUsed(NAME);
  }
  /** @internal */
  dispose() {
    this._loader = null;
  }
  /**
   * @internal
   */
  // eslint-disable-next-line no-restricted-syntax
  loadNodeAsync(context, node, assign) {
    return GLTFLoader.LoadExtensionAsync(context, node, this.name, async (extensionContext, extension) => {
      this._loader._disableInstancedMesh++;
      const promise = this._loader.loadNodeAsync(`/nodes/${node.index}`, node, assign);
      this._loader._disableInstancedMesh--;
      if (!node._primitiveBabylonMeshes) {
        return await promise;
      }
      const promises = new Array();
      let instanceCount = 0;
      const loadAttribute = (attribute) => {
        if (extension.attributes[attribute] == void 0) {
          promises.push(Promise.resolve(null));
          return;
        }
        const accessor = ArrayItem.Get(`${extensionContext}/attributes/${attribute}`, this._loader.gltf.accessors, extension.attributes[attribute]);
        promises.push(this._loader._loadFloatAccessorAsync(`/accessors/${accessor.bufferView}`, accessor));
        if (instanceCount === 0) {
          instanceCount = accessor.count;
        } else if (instanceCount !== accessor.count) {
          throw new Error(`${extensionContext}/attributes: Instance buffer accessors do not have the same count.`);
        }
      };
      loadAttribute("TRANSLATION");
      loadAttribute("ROTATION");
      loadAttribute("SCALE");
      return await promise.then(async (babylonTransformNode) => {
        const [translationBuffer, rotationBuffer, scaleBuffer] = await Promise.all(promises);
        const matrices = new Float32Array(instanceCount * 16);
        TmpVectors.Vector3[0].copyFromFloats(0, 0, 0);
        TmpVectors.Quaternion[0].copyFromFloats(0, 0, 0, 1);
        TmpVectors.Vector3[1].copyFromFloats(1, 1, 1);
        for (let i = 0; i < instanceCount; ++i) {
          translationBuffer && Vector3.FromArrayToRef(translationBuffer, i * 3, TmpVectors.Vector3[0]);
          rotationBuffer && Quaternion.FromArrayToRef(rotationBuffer, i * 4, TmpVectors.Quaternion[0]);
          scaleBuffer && Vector3.FromArrayToRef(scaleBuffer, i * 3, TmpVectors.Vector3[1]);
          Matrix.ComposeToRef(TmpVectors.Vector3[1], TmpVectors.Quaternion[0], TmpVectors.Vector3[0], TmpVectors.Matrix[0]);
          TmpVectors.Matrix[0].copyToArray(matrices, i * 16);
        }
        for (const babylonMesh of node._primitiveBabylonMeshes) {
          babylonMesh.thinInstanceSetBuffer("matrix", matrices, 16, true);
        }
        return babylonTransformNode;
      });
    });
  }
};
unregisterGLTFExtension(NAME);
registerGLTFExtension(NAME, true, (loader) => new EXT_mesh_gpu_instancing(loader));
export {
  EXT_mesh_gpu_instancing
};
//# sourceMappingURL=EXT_mesh_gpu_instancing-XQ4ZYFPI.js.map
