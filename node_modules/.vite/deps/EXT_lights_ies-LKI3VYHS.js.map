{
  "version": 3,
  "sources": ["../../../dev/loaders/src/glTF/2.0/Extensions/EXT_lights_ies.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { SpotLight } from \"core/Lights/spotLight\";\r\nimport { Light } from \"core/Lights/light\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\n\r\nimport type { IEXTLightsIES_LightReference } from \"babylonjs-gltf2interface\";\r\nimport type { IEXTLightsIES_Light, INode } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\n\r\nconst NAME = \"EXT_lights_ies\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the EXT_lights_ies extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"EXT_lights_ies\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Vendor/EXT_lights_ies)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_lights_ies implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /** hidden */\r\n    private _loader: GLTFLoader;\r\n    private _lights?: IEXTLightsIES_Light[];\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n        delete this._lights;\r\n    }\r\n\r\n    /** @internal */\r\n    public onLoading(): void {\r\n        const extensions = this._loader.gltf.extensions;\r\n        if (extensions && extensions[this.name]) {\r\n            const extension = extensions[this.name];\r\n            this._lights = extension.lights;\r\n            ArrayItem.Assign(this._lights);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTLightsIES_LightReference, TransformNode>(context, node, this.name, async (extensionContext, extension) => {\r\n            this._loader._allMaterialsDirtyRequired = true;\r\n\r\n            let babylonSpotLight: SpotLight;\r\n            let light: IEXTLightsIES_Light;\r\n\r\n            const transformNode = await this._loader.loadNodeAsync(context, node, (babylonMesh) => {\r\n                light = ArrayItem.Get(extensionContext, this._lights, extension.light);\r\n                const name = light.name || babylonMesh.name;\r\n\r\n                this._loader.babylonScene._blockEntityCollection = !!this._loader._assetContainer;\r\n\r\n                babylonSpotLight = new SpotLight(name, Vector3.Zero(), Vector3.Backward(), 0, 1, this._loader.babylonScene);\r\n                babylonSpotLight.angle = Math.PI / 2;\r\n                babylonSpotLight.innerAngle = 0;\r\n\r\n                babylonSpotLight._parentContainer = this._loader._assetContainer;\r\n                this._loader.babylonScene._blockEntityCollection = false;\r\n                light._babylonLight = babylonSpotLight;\r\n\r\n                babylonSpotLight.falloffType = Light.FALLOFF_GLTF;\r\n                babylonSpotLight.diffuse = extension.color ? Color3.FromArray(extension.color) : Color3.White();\r\n                babylonSpotLight.intensity = extension.multiplier || 1;\r\n                babylonSpotLight.range = Number.MAX_VALUE;\r\n                babylonSpotLight.parent = babylonMesh;\r\n\r\n                this._loader._babylonLights.push(babylonSpotLight);\r\n\r\n                GLTFLoader.AddPointerMetadata(babylonSpotLight, extensionContext);\r\n\r\n                assign(babylonMesh);\r\n            });\r\n\r\n            // Load the profile\r\n            let bufferData: ArrayBufferView;\r\n            if (light!.uri) {\r\n                bufferData = await this._loader.loadUriAsync(context, light!, light!.uri);\r\n            } else {\r\n                const bufferView = ArrayItem.Get(`${context}/bufferView`, this._loader.gltf.bufferViews, light!.bufferView);\r\n                bufferData = await this._loader.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView);\r\n            }\r\n            babylonSpotLight!.iesProfileTexture = new Texture(\r\n                name + \"_iesProfile\",\r\n                this._loader.babylonScene,\r\n                true,\r\n                false,\r\n                undefined,\r\n                null,\r\n                null,\r\n                bufferData,\r\n                true,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                \".ies\"\r\n            );\r\n\r\n            return transformNode;\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new EXT_lights_ies(loader));\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA,IAAM,OAAO;AAiBP,IAAO,iBAAP,MAAqB;;;;EAkBvB,YAAY,QAAkB;AAdd,SAAA,OAAO;AAenB,SAAK,UAAU;AACf,SAAK,UAAU,KAAK,QAAQ,gBAAgB,IAAI;EACpD;;EAGO,UAAO;AACT,SAAK,UAAkB;AACxB,WAAO,KAAK;EAChB;;EAGO,YAAS;AACZ,UAAM,aAAa,KAAK,QAAQ,KAAK;AACrC,QAAI,cAAc,WAAW,KAAK,IAAI,GAAG;AACrC,YAAM,YAAY,WAAW,KAAK,IAAI;AACtC,WAAK,UAAU,UAAU;AACzB,gBAAU,OAAO,KAAK,OAAO;IACjC;EACJ;;;;;;EAOO,cAAc,SAAiB,MAAa,QAAqD;AACpG,WAAO,WAAW,mBAAgE,SAAS,MAAM,KAAK,MAAM,OAAO,kBAAkB,cAAa;AAC9I,WAAK,QAAQ,6BAA6B;AAE1C,UAAI;AACJ,UAAI;AAEJ,YAAM,gBAAgB,MAAM,KAAK,QAAQ,cAAc,SAAS,MAAM,CAAC,gBAAe;AAClF,gBAAQ,UAAU,IAAI,kBAAkB,KAAK,SAAS,UAAU,KAAK;AACrE,cAAMA,QAAO,MAAM,QAAQ,YAAY;AAEvC,aAAK,QAAQ,aAAa,yBAAyB,CAAC,CAAC,KAAK,QAAQ;AAElE,2BAAmB,IAAI,UAAUA,OAAM,QAAQ,KAAI,GAAI,QAAQ,SAAQ,GAAI,GAAG,GAAG,KAAK,QAAQ,YAAY;AAC1G,yBAAiB,QAAQ,KAAK,KAAK;AACnC,yBAAiB,aAAa;AAE9B,yBAAiB,mBAAmB,KAAK,QAAQ;AACjD,aAAK,QAAQ,aAAa,yBAAyB;AACnD,cAAM,gBAAgB;AAEtB,yBAAiB,cAAc,MAAM;AACrC,yBAAiB,UAAU,UAAU,QAAQ,OAAO,UAAU,UAAU,KAAK,IAAI,OAAO,MAAK;AAC7F,yBAAiB,YAAY,UAAU,cAAc;AACrD,yBAAiB,QAAQ,OAAO;AAChC,yBAAiB,SAAS;AAE1B,aAAK,QAAQ,eAAe,KAAK,gBAAgB;AAEjD,mBAAW,mBAAmB,kBAAkB,gBAAgB;AAEhE,eAAO,WAAW;MACtB,CAAC;AAGD,UAAI;AACJ,UAAI,MAAO,KAAK;AACZ,qBAAa,MAAM,KAAK,QAAQ,aAAa,SAAS,OAAQ,MAAO,GAAG;MAC5E,OAAO;AACH,cAAM,aAAa,UAAU,IAAI,GAAG,OAAO,eAAe,KAAK,QAAQ,KAAK,aAAa,MAAO,UAAU;AAC1G,qBAAa,MAAM,KAAK,QAAQ,oBAAoB,gBAAgB,WAAW,KAAK,IAAI,UAAU;MACtG;AACA,uBAAkB,oBAAoB,IAAI,QACtC,OAAO,eACP,KAAK,QAAQ,cACb,MACA,OACA,QACA,MACA,MACA,YACA,MACA,QACA,QACA,QACA,QACA,MAAM;AAGV,aAAO;IACX,CAAC;EACL;;AAGJ,wBAAwB,IAAI;AAC5B,sBAAsB,MAAM,MAAM,CAAC,WAAW,IAAI,eAAe,MAAM,CAAC;",
  "names": ["name"]
}
