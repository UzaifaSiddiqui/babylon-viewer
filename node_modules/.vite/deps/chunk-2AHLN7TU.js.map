{
  "version": 3,
  "sources": ["../../../dev/loaders/src/glTF/2.0/Extensions/MSFT_lod.ts"],
  "sourcesContent": ["/* eslint-disable github/no-then */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Deferred } from \"core/Misc/deferred\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { INode, IMaterial, IBuffer, IScene } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport type { IProperty, IMSFTLOD } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"MSFT_lod\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the MSFT_lod extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"MSFT_lod\"]: Partial<{\r\n            /**\r\n             * Maximum number of LODs to load, starting from the lowest LOD.\r\n             */\r\n            maxLODsToLoad: number;\r\n        }>;\r\n    }\r\n}\r\n\r\ninterface IBufferInfo {\r\n    start: number;\r\n    end: number;\r\n    loaded: Deferred<ArrayBufferView>;\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/MSFT_lod/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class MSFT_lod implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 100;\r\n\r\n    /**\r\n     * Maximum number of LODs to load, starting from the lowest LOD.\r\n     */\r\n    public maxLODsToLoad = 10;\r\n\r\n    /**\r\n     * Observable raised when all node LODs of one level are loaded.\r\n     * The event data is the index of the loaded LOD starting from zero.\r\n     * Dispose the loader to cancel the loading of the next level of LODs.\r\n     */\r\n    public onNodeLODsLoadedObservable = new Observable<number>();\r\n\r\n    /**\r\n     * Observable raised when all material LODs of one level are loaded.\r\n     * The event data is the index of the loaded LOD starting from zero.\r\n     * Dispose the loader to cancel the loading of the next level of LODs.\r\n     */\r\n    public onMaterialLODsLoadedObservable = new Observable<number>();\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    private _bufferLODs = new Array<IBufferInfo>();\r\n\r\n    private _nodeIndexLOD: Nullable<number> = null;\r\n    private _nodeSignalLODs = new Array<Deferred<void>>();\r\n    private _nodePromiseLODs = new Array<Array<Promise<any>>>();\r\n    private _nodeBufferLODs = new Array<IBufferInfo>();\r\n\r\n    private _materialIndexLOD: Nullable<number> = null;\r\n    private _materialSignalLODs = new Array<Deferred<void>>();\r\n    private _materialPromiseLODs = new Array<Array<Promise<any>>>();\r\n    private _materialBufferLODs = new Array<IBufferInfo>();\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        // Options takes precedence. The maxLODsToLoad extension property is retained for back compat.\r\n        // For new extensions, they should only use options.\r\n        this.maxLODsToLoad = this._loader.parent.extensionOptions[NAME]?.maxLODsToLoad ?? this.maxLODsToLoad;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n\r\n        this._nodeIndexLOD = null;\r\n        this._nodeSignalLODs.length = 0;\r\n        this._nodePromiseLODs.length = 0;\r\n        this._nodeBufferLODs.length = 0;\r\n\r\n        this._materialIndexLOD = null;\r\n        this._materialSignalLODs.length = 0;\r\n        this._materialPromiseLODs.length = 0;\r\n        this._materialBufferLODs.length = 0;\r\n\r\n        this.onMaterialLODsLoadedObservable.clear();\r\n        this.onNodeLODsLoadedObservable.clear();\r\n    }\r\n\r\n    /** @internal */\r\n    public onReady(): void {\r\n        for (let indexLOD = 0; indexLOD < this._nodePromiseLODs.length; indexLOD++) {\r\n            const promise = Promise.all(this._nodePromiseLODs[indexLOD]).then(() => {\r\n                if (indexLOD !== 0) {\r\n                    this._loader.endPerformanceCounter(`Node LOD ${indexLOD}`);\r\n                    this._loader.log(`Loaded node LOD ${indexLOD}`);\r\n                }\r\n\r\n                this.onNodeLODsLoadedObservable.notifyObservers(indexLOD);\r\n\r\n                if (indexLOD !== this._nodePromiseLODs.length - 1) {\r\n                    this._loader.startPerformanceCounter(`Node LOD ${indexLOD + 1}`);\r\n                    this._loadBufferLOD(this._nodeBufferLODs, indexLOD + 1);\r\n                    if (this._nodeSignalLODs[indexLOD]) {\r\n                        this._nodeSignalLODs[indexLOD].resolve();\r\n                    }\r\n                }\r\n            });\r\n\r\n            this._loader._completePromises.push(promise);\r\n        }\r\n\r\n        for (let indexLOD = 0; indexLOD < this._materialPromiseLODs.length; indexLOD++) {\r\n            const promise = Promise.all(this._materialPromiseLODs[indexLOD]).then(() => {\r\n                if (indexLOD !== 0) {\r\n                    this._loader.endPerformanceCounter(`Material LOD ${indexLOD}`);\r\n                    this._loader.log(`Loaded material LOD ${indexLOD}`);\r\n                }\r\n\r\n                this.onMaterialLODsLoadedObservable.notifyObservers(indexLOD);\r\n\r\n                if (indexLOD !== this._materialPromiseLODs.length - 1) {\r\n                    this._loader.startPerformanceCounter(`Material LOD ${indexLOD + 1}`);\r\n                    this._loadBufferLOD(this._materialBufferLODs, indexLOD + 1);\r\n                    if (this._materialSignalLODs[indexLOD]) {\r\n                        this._materialSignalLODs[indexLOD].resolve();\r\n                    }\r\n                }\r\n            });\r\n\r\n            this._loader._completePromises.push(promise);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadSceneAsync(context: string, scene: IScene): Nullable<Promise<void>> {\r\n        const promise = this._loader.loadSceneAsync(context, scene);\r\n        this._loadBufferLOD(this._bufferLODs, 0);\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return GLTFLoader.LoadExtensionAsync<IMSFTLOD, TransformNode>(context, node, this.name, async (extensionContext, extension) => {\r\n            let firstPromise: Promise<TransformNode>;\r\n\r\n            const nodeLODs = this._getLODs(extensionContext, node, this._loader.gltf.nodes, extension.ids);\r\n            this._loader.logOpen(`${extensionContext}`);\r\n\r\n            for (let indexLOD = 0; indexLOD < nodeLODs.length; indexLOD++) {\r\n                const nodeLOD = nodeLODs[indexLOD];\r\n\r\n                if (indexLOD !== 0) {\r\n                    this._nodeIndexLOD = indexLOD;\r\n                    this._nodeSignalLODs[indexLOD] = this._nodeSignalLODs[indexLOD] || new Deferred();\r\n                }\r\n\r\n                const assignWrap = (babylonTransformNode: TransformNode) => {\r\n                    assign(babylonTransformNode);\r\n                    babylonTransformNode.setEnabled(false);\r\n                };\r\n\r\n                const promise = this._loader.loadNodeAsync(`/nodes/${nodeLOD.index}`, nodeLOD, assignWrap).then((babylonMesh) => {\r\n                    if (indexLOD !== 0) {\r\n                        // TODO: should not rely on _babylonTransformNode\r\n                        const previousNodeLOD = nodeLODs[indexLOD - 1];\r\n                        if (previousNodeLOD._babylonTransformNode) {\r\n                            this._disposeTransformNode(previousNodeLOD._babylonTransformNode);\r\n                            delete previousNodeLOD._babylonTransformNode;\r\n                        }\r\n                    }\r\n\r\n                    babylonMesh.setEnabled(true);\r\n                    return babylonMesh;\r\n                });\r\n\r\n                this._nodePromiseLODs[indexLOD] = this._nodePromiseLODs[indexLOD] || [];\r\n\r\n                if (indexLOD === 0) {\r\n                    firstPromise = promise;\r\n                } else {\r\n                    this._nodeIndexLOD = null;\r\n                    this._nodePromiseLODs[indexLOD].push(promise);\r\n                }\r\n            }\r\n\r\n            this._loader.logClose();\r\n            return await firstPromise!;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public _loadMaterialAsync(\r\n        context: string,\r\n        material: IMaterial,\r\n        babylonMesh: Nullable<Mesh>,\r\n        babylonDrawMode: number,\r\n        assign: (babylonMaterial: Material) => void\r\n    ): Nullable<Promise<Material>> {\r\n        // Don't load material LODs if already loading a node LOD.\r\n        if (this._nodeIndexLOD) {\r\n            return null;\r\n        }\r\n\r\n        return GLTFLoader.LoadExtensionAsync<IMSFTLOD, Material>(context, material, this.name, async (extensionContext, extension) => {\r\n            let firstPromise: Promise<Material>;\r\n\r\n            const materialLODs = this._getLODs(extensionContext, material, this._loader.gltf.materials, extension.ids);\r\n            this._loader.logOpen(`${extensionContext}`);\r\n\r\n            for (let indexLOD = 0; indexLOD < materialLODs.length; indexLOD++) {\r\n                const materialLOD = materialLODs[indexLOD];\r\n\r\n                if (indexLOD !== 0) {\r\n                    this._materialIndexLOD = indexLOD;\r\n                }\r\n\r\n                const promise = this._loader\r\n                    ._loadMaterialAsync(`/materials/${materialLOD.index}`, materialLOD, babylonMesh, babylonDrawMode, (babylonMaterial) => {\r\n                        if (indexLOD === 0) {\r\n                            assign(babylonMaterial);\r\n                        }\r\n                    })\r\n                    .then((babylonMaterial) => {\r\n                        if (indexLOD !== 0) {\r\n                            assign(babylonMaterial);\r\n\r\n                            // TODO: should not rely on _data\r\n                            const previousDataLOD = materialLODs[indexLOD - 1]._data!;\r\n                            if (previousDataLOD[babylonDrawMode]) {\r\n                                this._disposeMaterials([previousDataLOD[babylonDrawMode].babylonMaterial]);\r\n                                delete previousDataLOD[babylonDrawMode];\r\n                            }\r\n                        }\r\n\r\n                        return babylonMaterial;\r\n                    });\r\n\r\n                this._materialPromiseLODs[indexLOD] = this._materialPromiseLODs[indexLOD] || [];\r\n\r\n                if (indexLOD === 0) {\r\n                    firstPromise = promise;\r\n                } else {\r\n                    this._materialIndexLOD = null;\r\n                    this._materialPromiseLODs[indexLOD].push(promise);\r\n                }\r\n            }\r\n\r\n            this._loader.logClose();\r\n            return await firstPromise!;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public _loadUriAsync(context: string, property: IProperty, uri: string): Nullable<Promise<ArrayBufferView>> {\r\n        // Defer the loading of uris if loading a node or material LOD.\r\n        if (this._nodeIndexLOD !== null) {\r\n            this._loader.log(`deferred`);\r\n            const previousIndexLOD = this._nodeIndexLOD - 1;\r\n            this._nodeSignalLODs[previousIndexLOD] = this._nodeSignalLODs[previousIndexLOD] || new Deferred<void>();\r\n            return this._nodeSignalLODs[this._nodeIndexLOD - 1].promise.then(async () => {\r\n                return await this._loader.loadUriAsync(context, property, uri);\r\n            });\r\n        } else if (this._materialIndexLOD !== null) {\r\n            this._loader.log(`deferred`);\r\n            const previousIndexLOD = this._materialIndexLOD - 1;\r\n            this._materialSignalLODs[previousIndexLOD] = this._materialSignalLODs[previousIndexLOD] || new Deferred<void>();\r\n            return this._materialSignalLODs[previousIndexLOD].promise.then(async () => {\r\n                return await this._loader.loadUriAsync(context, property, uri);\r\n            });\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadBufferAsync(context: string, buffer: IBuffer, byteOffset: number, byteLength: number): Nullable<Promise<ArrayBufferView>> {\r\n        if (this._loader.parent.useRangeRequests && !buffer.uri) {\r\n            if (!this._loader.bin) {\r\n                throw new Error(`${context}: Uri is missing or the binary glTF is missing its binary chunk`);\r\n            }\r\n\r\n            const loadAsync = async (bufferLODs: Array<IBufferInfo>, indexLOD: number) => {\r\n                const start = byteOffset;\r\n                const end = start + byteLength - 1;\r\n                let bufferLOD = bufferLODs[indexLOD];\r\n                if (bufferLOD) {\r\n                    bufferLOD.start = Math.min(bufferLOD.start, start);\r\n                    bufferLOD.end = Math.max(bufferLOD.end, end);\r\n                } else {\r\n                    bufferLOD = { start: start, end: end, loaded: new Deferred() };\r\n                    bufferLODs[indexLOD] = bufferLOD;\r\n                }\r\n\r\n                return await bufferLOD.loaded.promise.then((data) => {\r\n                    return new Uint8Array(data.buffer, data.byteOffset + byteOffset - bufferLOD.start, byteLength);\r\n                });\r\n            };\r\n\r\n            this._loader.log(`deferred`);\r\n\r\n            if (this._nodeIndexLOD !== null) {\r\n                return loadAsync(this._nodeBufferLODs, this._nodeIndexLOD);\r\n            } else if (this._materialIndexLOD !== null) {\r\n                return loadAsync(this._materialBufferLODs, this._materialIndexLOD);\r\n            } else {\r\n                return loadAsync(this._bufferLODs, 0);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _loadBufferLOD(bufferLODs: Array<IBufferInfo>, indexLOD: number): void {\r\n        const bufferLOD = bufferLODs[indexLOD];\r\n        if (bufferLOD) {\r\n            this._loader.log(`Loading buffer range [${bufferLOD.start}-${bufferLOD.end}]`);\r\n            this._loader.bin!.readAsync(bufferLOD.start, bufferLOD.end - bufferLOD.start + 1).then(\r\n                (data) => {\r\n                    bufferLOD.loaded.resolve(data);\r\n                },\r\n                (error) => {\r\n                    bufferLOD.loaded.reject(error);\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns an array of LOD properties from lowest to highest.\r\n     * @param context\r\n     * @param property\r\n     * @param array\r\n     * @param ids\r\n     */\r\n    private _getLODs<T>(context: string, property: T, array: ArrayLike<T> | undefined, ids: number[]): T[] {\r\n        if (this.maxLODsToLoad <= 0) {\r\n            throw new Error(\"maxLODsToLoad must be greater than zero\");\r\n        }\r\n\r\n        const properties: T[] = [];\r\n\r\n        for (let i = ids.length - 1; i >= 0; i--) {\r\n            properties.push(ArrayItem.Get(`${context}/ids/${ids[i]}`, array, ids[i]));\r\n            if (properties.length === this.maxLODsToLoad) {\r\n                return properties;\r\n            }\r\n        }\r\n\r\n        properties.push(property);\r\n        return properties;\r\n    }\r\n\r\n    private _disposeTransformNode(babylonTransformNode: TransformNode): void {\r\n        const babylonMaterials: Material[] = [];\r\n        const babylonMaterial = (babylonTransformNode as Mesh).material;\r\n        if (babylonMaterial) {\r\n            babylonMaterials.push(babylonMaterial);\r\n        }\r\n        for (const babylonMesh of babylonTransformNode.getChildMeshes()) {\r\n            if (babylonMesh.material) {\r\n                babylonMaterials.push(babylonMesh.material);\r\n            }\r\n        }\r\n\r\n        babylonTransformNode.dispose();\r\n\r\n        const babylonMaterialsToDispose = babylonMaterials.filter((babylonMaterial) => this._loader.babylonScene.meshes.every((mesh) => mesh.material != babylonMaterial));\r\n        this._disposeMaterials(babylonMaterialsToDispose);\r\n    }\r\n\r\n    private _disposeMaterials(babylonMaterials: Material[]): void {\r\n        const babylonTextures: { [uniqueId: number]: BaseTexture } = {};\r\n\r\n        for (const babylonMaterial of babylonMaterials) {\r\n            for (const babylonTexture of babylonMaterial.getActiveTextures()) {\r\n                babylonTextures[babylonTexture.uniqueId] = babylonTexture;\r\n            }\r\n\r\n            babylonMaterial.dispose();\r\n        }\r\n\r\n        for (const uniqueId in babylonTextures) {\r\n            for (const babylonMaterial of this._loader.babylonScene.materials) {\r\n                if (babylonMaterial.hasTexture(babylonTextures[uniqueId])) {\r\n                    delete babylonTextures[uniqueId];\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const uniqueId in babylonTextures) {\r\n            babylonTextures[uniqueId].dispose();\r\n        }\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new MSFT_lod(loader));\r\n"],
  "mappings": "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",
  "names": ["babylonMaterial"]
}
