{
  "version": 3,
  "sources": ["../../../dev/loaders/src/BVH/bvhLoader.ts", "../../../dev/loaders/src/BVH/bvhFileLoader.ts"],
  "sourcesContent": ["import type { IAnimationKey } from \"core/Animations\";\nimport { Animation } from \"core/Animations/animation\";\nimport { Bone } from \"core/Bones/bone\";\nimport { Skeleton } from \"core/Bones/skeleton\";\nimport { Matrix, Quaternion, Vector3 } from \"core/Maths/math.vector\";\nimport type { Scene } from \"core/scene\";\nimport type { Nullable } from \"core/types\";\nimport type { BVHLoadingOptions } from \"./bvhLoadingOptions\";\nimport { Tools } from \"core/Misc/tools\";\nimport type { AssetContainer } from \"core/assetContainer\";\n\nconst _XPosition = \"Xposition\";\nconst _YPosition = \"Yposition\";\nconst _ZPosition = \"Zposition\";\nconst _XRotation = \"Xrotation\";\nconst _YRotation = \"Yrotation\";\nconst _ZRotation = \"Zrotation\";\n\nconst _HierarchyNode = \"HIERARCHY\";\nconst _MotionNode = \"MOTION\";\n\nclass LoaderContext {\n    loopMode: number = Animation.ANIMATIONLOOPMODE_CYCLE;\n    list: IBVHNode[] = [];\n    root: IBVHNode = CreateBVHNode();\n    numFrames: number = 0;\n    frameRate: number = 0;\n    skeleton: Skeleton;\n\n    constructor(skeleton: Skeleton) {\n        this.skeleton = skeleton;\n    }\n}\n\ninterface IBVHNode {\n    name: string;\n    type: string;\n    offset: Vector3;\n    channels: string[];\n    children: IBVHNode[];\n    frames: IBVHKeyFrame[];\n    parent: Nullable<IBVHNode>;\n}\n\ninterface IBVHKeyFrame {\n    frame: number;\n    position: Vector3;\n    rotation: Quaternion;\n}\n\nfunction CreateBVHNode(): IBVHNode {\n    return {\n        name: \"\",\n        type: \"\",\n        offset: new Vector3(),\n        channels: [],\n        children: [],\n        frames: [],\n        parent: null,\n    };\n}\n\nfunction CreateBVHKeyFrame(): IBVHKeyFrame {\n    return {\n        frame: 0,\n        position: new Vector3(),\n        rotation: new Quaternion(),\n    };\n}\n\n/**\n * Converts the BVH node's offset to a Babylon matrix\n * @param node - The BVH node to convert\n * @returns The converted matrix\n */\nfunction BoneOffset(node: IBVHNode): Matrix {\n    const x = node.offset.x;\n    const y = node.offset.y;\n    const z = node.offset.z;\n    return Matrix.Translation(x, y, z);\n}\n\n/**\n * Creates animations for the BVH node\n * @param node - The BVH node to create animations for\n * @param context - The loader context\n * @returns The created animations\n */\nfunction CreateAnimations(node: IBVHNode, context: LoaderContext): Animation[] {\n    if (node.frames.length === 0) {\n        return [];\n    }\n\n    const animations: Animation[] = [];\n\n    // Create position animation if there are position channels\n    const hasPosition = node.channels.some((c) => c === _XPosition || c === _YPosition || c === _ZPosition);\n\n    // Create rotation animation if there are rotation channels\n    const hasRotation = node.channels.some((c) => c === _XRotation || c === _YRotation || c === _ZRotation);\n\n    const posAnim = new Animation(`${node.name}_pos`, \"position\", context.frameRate, Animation.ANIMATIONTYPE_VECTOR3, context.loopMode);\n\n    const rotAnim = new Animation(`${node.name}_rot`, \"rotationQuaternion\", context.frameRate, Animation.ANIMATIONTYPE_QUATERNION, context.loopMode);\n\n    const posKeys: IAnimationKey[] = [];\n    const rotKeys: IAnimationKey[] = [];\n\n    for (let i = 0; i < node.frames.length; i++) {\n        const frame = node.frames[i];\n\n        if (hasPosition && frame.position) {\n            posKeys.push({\n                frame: frame.frame,\n                value: frame.position.clone(),\n            });\n        }\n\n        if (hasRotation) {\n            rotKeys.push({\n                frame: frame.frame,\n                value: frame.rotation.clone(),\n            });\n        }\n    }\n\n    if (posKeys.length > 0) {\n        posAnim.setKeys(posKeys);\n        animations.push(posAnim);\n    }\n\n    if (rotKeys.length > 0) {\n        rotAnim.setKeys(rotKeys);\n        animations.push(rotAnim);\n    }\n\n    return animations;\n}\n\n/**\n * Converts a BVH node to a Babylon bone\n * @param node - The BVH node to convert\n * @param parent - The parent bone\n * @param context - The loader context\n */\nfunction ConvertNode(node: IBVHNode, parent: Nullable<Bone>, context: LoaderContext) {\n    const matrix = BoneOffset(node);\n    const bone = new Bone(node.name, context.skeleton, parent, matrix);\n\n    // Create animation for this bone\n    const animations = CreateAnimations(node, context);\n    for (const animation of animations) {\n        if (animation.getKeys() && animation.getKeys().length > 0) {\n            bone.animations.push(animation);\n        }\n    }\n\n    for (const child of node.children) {\n        ConvertNode(child, bone, context);\n    }\n}\n\n/**\n * Recursively reads data from a single frame into the bone hierarchy.\n * The bone hierarchy has to be structured in the same order as the BVH file.\n * keyframe data is stored in bone.frames.\n * @param data - splitted string array (frame values), values are shift()ed\n * @param frameNumber - playback time for this keyframe\n * @param bone - the bone to read frame data from\n * @param tokenIndex - the index of the token to read\n */\nfunction ReadFrameData(data: string[], frameNumber: number, bone: IBVHNode, tokenIndex: { i: number }) {\n    if (bone.type === \"ENDSITE\") {\n        // end sites have no motion data\n        return;\n    }\n\n    // add keyframe\n    const keyframe = CreateBVHKeyFrame();\n    keyframe.frame = frameNumber;\n    keyframe.position = new Vector3();\n    keyframe.rotation = new Quaternion();\n\n    bone.frames.push(keyframe);\n\n    let combinedRotation = Matrix.Identity();\n\n    // parse values for each channel in node\n    for (let i = 0; i < bone.channels.length; ++i) {\n        const channel = bone.channels[i];\n        const value = data[tokenIndex.i++];\n        if (!value) {\n            continue;\n        }\n        const parsedValue = parseFloat(value.trim());\n        if (channel.endsWith(\"position\")) {\n            switch (channel) {\n                case _XPosition:\n                    keyframe.position.x = parsedValue;\n                    break;\n                case _YPosition:\n                    keyframe.position.y = parsedValue;\n                    break;\n                case _ZPosition:\n                    keyframe.position.z = parsedValue;\n                    break;\n            }\n        } else if (channel.endsWith(\"rotation\")) {\n            const angle = Tools.ToRadians(parsedValue);\n            let rotationMatrix: Matrix;\n            switch (channel) {\n                case _XRotation:\n                    rotationMatrix = Matrix.RotationX(angle);\n                    break;\n                case _YRotation:\n                    rotationMatrix = Matrix.RotationY(angle);\n                    break;\n                case _ZRotation:\n                    rotationMatrix = Matrix.RotationZ(angle);\n                    break;\n            }\n            combinedRotation = rotationMatrix!.multiply(combinedRotation);\n        }\n    }\n\n    Quaternion.FromRotationMatrixToRef(combinedRotation, keyframe.rotation);\n\n    // parse child nodes\n    for (const child of bone.children) {\n        ReadFrameData(data, frameNumber, child, tokenIndex);\n    }\n}\n\n/**\n * Recursively parses the HIERARCHY section of the BVH file\n * @param lines - all lines of the file. lines are consumed as we go along\n * @param firstLine - line containing the node type and name e.g. \"JOINT hip\"\n * @param parent - the parent node for hierarchy\n * @param context - the loader context containing the list of nodes and other data\n * @returns a BVH node including children\n */\nfunction ReadNode(lines: string[], firstLine: string, parent: Nullable<IBVHNode>, context: LoaderContext): IBVHNode {\n    const node = CreateBVHNode();\n    node.parent = parent;\n    context.list.push(node);\n\n    // parse node type and name.\n    let tokens: string[] | undefined = firstLine.trim().split(/\\s+/);\n\n    if (tokens[0].toUpperCase() === \"END\" && tokens[1].toUpperCase() === \"SITE\") {\n        node.type = \"ENDSITE\";\n        node.name = \"ENDSITE\"; // bvh end sites have no name\n    } else {\n        node.name = tokens[1];\n        node.type = tokens[0].toUpperCase();\n    }\n\n    // opening bracket\n    if (lines.shift()?.trim() != \"{\") {\n        throw new Error(\"Expected opening { after type & name\");\n    }\n\n    // parse OFFSET\n    const tokensSplit = lines.shift()?.trim().split(/\\s+/);\n    if (!tokensSplit) {\n        throw new Error(\"Unexpected end of file: missing OFFSET\");\n    }\n    tokens = tokensSplit;\n\n    if (tokens[0].toUpperCase() != \"OFFSET\") {\n        throw new Error(\"Expected OFFSET, but got: \" + tokens[0]);\n    }\n    if (tokens.length != 4) {\n        throw new Error(\"OFFSET: Invalid number of values\");\n    }\n\n    const offset = new Vector3(parseFloat(tokens[1]), parseFloat(tokens[2]), parseFloat(tokens[3]));\n\n    if (isNaN(offset.x) || isNaN(offset.y) || isNaN(offset.z)) {\n        throw new Error(\"OFFSET: Invalid values\");\n    }\n\n    node.offset = offset;\n\n    // parse CHANNELS definitions\n    if (node.type != \"ENDSITE\") {\n        tokens = lines.shift()?.trim().split(/\\s+/);\n        if (!tokens) {\n            throw new Error(\"Unexpected end of file: missing CHANNELS\");\n        }\n\n        if (tokens[0].toUpperCase() != \"CHANNELS\") {\n            throw new Error(\"Expected CHANNELS definition\");\n        }\n\n        const numChannels = parseInt(tokens[1]);\n        // Skip CHANNELS and the number of channels\n        node.channels = tokens.splice(2, numChannels);\n        node.children = [];\n    }\n\n    // read children\n    while (lines.length > 0) {\n        const line = lines.shift()?.trim();\n\n        if (line === \"}\") {\n            // Finish reading the node\n            return node;\n        } else if (line) {\n            node.children.push(ReadNode(lines, line, node, context));\n        }\n    }\n\n    throw new Error(\"Unexpected end of file: missing closing brace\");\n}\n\n/**\n * Reads a BVH file, returns a skeleton\n * @param text - The BVH file content\n * @param scene - The scene to add the skeleton to\n * @param assetContainer - The asset container to add the skeleton to\n * @param loadingOptions - The loading options\n * @returns The skeleton\n */\nexport function ReadBvh(text: string, scene: Scene, assetContainer: Nullable<AssetContainer>, loadingOptions: BVHLoadingOptions): Skeleton {\n    const lines = text.split(\"\\n\");\n\n    const { loopMode } = loadingOptions;\n\n    scene._blockEntityCollection = !!assetContainer;\n    const skeleton = new Skeleton(\"\", \"\", scene);\n    skeleton._parentContainer = assetContainer;\n    scene._blockEntityCollection = false;\n\n    const context = new LoaderContext(skeleton);\n    context.loopMode = loopMode;\n\n    // read model structure\n    const firstLine = lines.shift();\n    if (!firstLine || firstLine.trim().toUpperCase() !== _HierarchyNode) {\n        throw new Error(\"HIERARCHY expected\");\n    }\n\n    const nodeLine = lines.shift();\n    if (!nodeLine) {\n        throw new Error(\"Unexpected end of file after HIERARCHY\");\n    }\n    const root = ReadNode(lines, nodeLine.trim(), null, context);\n\n    // read motion data\n    const motionLine = lines.shift();\n    if (!motionLine || motionLine.trim().toUpperCase() !== _MotionNode) {\n        throw new Error(\"MOTION expected\");\n    }\n\n    const framesLine = lines.shift();\n    if (!framesLine) {\n        throw new Error(\"Unexpected end of file before frame count\");\n    }\n    const framesTokens = framesLine.trim().split(/[\\s]+/);\n    if (framesTokens.length < 2) {\n        throw new Error(\"Invalid frame count line\");\n    }\n\n    // number of frames\n    const numFrames = parseInt(framesTokens[1]);\n    if (isNaN(numFrames)) {\n        throw new Error(\"Failed to read number of frames.\");\n    }\n    context.numFrames = numFrames;\n\n    // frame time\n    const frameTimeLine = lines.shift();\n    if (!frameTimeLine) {\n        throw new Error(\"Unexpected end of file before frame time\");\n    }\n    const frameTimeTokens = frameTimeLine.trim().split(/[\\s]+/);\n    if (frameTimeTokens.length < 3) {\n        throw new Error(\"Invalid frame time line\");\n    }\n    const frameTime = parseFloat(frameTimeTokens[2]);\n    if (isNaN(frameTime)) {\n        throw new Error(\"Failed to read frame time.\");\n    }\n\n    context.frameRate = frameTime;\n\n    // read frame data line by line\n    for (let i = 0; i < numFrames; ++i) {\n        const frameLine = lines.shift();\n        if (!frameLine) {\n            continue;\n        }\n        const tokens = frameLine.trim().split(/[\\s]+/) || [];\n        ReadFrameData(tokens, i, root, { i: 0 });\n    }\n\n    context.root = root;\n\n    ConvertNode(context.root, null, context);\n\n    context.skeleton.returnToRest();\n    return context.skeleton;\n}\n", "import type { ISceneLoaderPluginAsync, ISceneLoaderPluginFactory, ISceneLoaderAsyncResult, SceneLoaderPluginOptions } from \"core/Loading/sceneLoader\";\nimport { RegisterSceneLoaderPlugin } from \"core/Loading/sceneLoader\";\nimport { AssetContainer } from \"core/assetContainer\";\nimport { Animation } from \"core/Animations/animation\";\nimport type { Scene } from \"core/scene\";\nimport type { BVHLoadingOptions } from \"./bvhLoadingOptions\";\nimport { BVHFileLoaderMetadata } from \"./bvhFileLoader.metadata\";\nimport { ReadBvh } from \"./bvhLoader\";\n\ndeclare module \"core/Loading/sceneLoader\" {\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\n    export interface SceneLoaderPluginOptions {\n        /**\n         * Defines options for the bvh loader.\n         */\n        [BVHFileLoaderMetadata.name]: Partial<BVHLoadingOptions>;\n    }\n}\n\n/**\n * @experimental\n * BVH file type loader.\n * This is a babylon scene loader plugin.\n */\nexport class BVHFileLoader implements ISceneLoaderPluginAsync, ISceneLoaderPluginFactory {\n    /**\n     * Name of the loader (\"bvh\")\n     */\n    public readonly name = BVHFileLoaderMetadata.name;\n\n    /** @internal */\n    public readonly extensions = BVHFileLoaderMetadata.extensions;\n\n    private readonly _loadingOptions: BVHLoadingOptions;\n\n    /**\n     * Creates loader for bvh motion files\n     * @param loadingOptions - Options for the bvh loader\n     */\n    constructor(loadingOptions?: Partial<Readonly<BVHLoadingOptions>>) {\n        this._loadingOptions = { ...BVHFileLoader._DefaultLoadingOptions, ...(loadingOptions ?? {}) };\n    }\n\n    private static get _DefaultLoadingOptions(): BVHLoadingOptions {\n        return {\n            loopMode: Animation.ANIMATIONLOOPMODE_CYCLE,\n        };\n    }\n\n    /** @internal */\n    public createPlugin(options: SceneLoaderPluginOptions): ISceneLoaderPluginAsync {\n        return new BVHFileLoader(options[BVHFileLoaderMetadata.name]);\n    }\n\n    /**\n     * If the data string can be loaded directly.\n     * @returns if the data can be loaded directly\n     */\n    public canDirectLoad(): boolean {\n        return true;\n    }\n\n    /**\n     * Imports  from the loaded gaussian splatting data and adds them to the scene\n     * @param _meshesNames a string or array of strings of the mesh names that should be loaded from the file\n     * @param scene the scene the meshes should be added to\n     * @param data the bvh data to load\n     * @returns a promise containing the loaded skeletons and animations\n     */\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    public importMeshAsync(_meshesNames: string | readonly string[] | null | undefined, scene: Scene, data: unknown): Promise<ISceneLoaderAsyncResult> {\n        if (typeof data !== \"string\") {\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            return Promise.reject(\"BVH loader expects string data.\");\n        }\n        try {\n            const skeleton = ReadBvh(data, scene, null, this._loadingOptions);\n            return Promise.resolve({\n                meshes: [],\n                particleSystems: [],\n                skeletons: [skeleton],\n                animationGroups: [],\n                transformNodes: [],\n                geometries: [],\n                lights: [],\n                spriteManagers: [],\n            } as ISceneLoaderAsyncResult);\n        } catch (e) {\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Imports all objects from the loaded bvh data and adds them to the scene\n     * @param scene the scene the objects should be added to\n     * @param data the bvh data to load\n     * @returns a promise which completes when objects have been loaded to the scene\n     */\n    // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/promise-function-async\n    public loadAsync(scene: Scene, data: unknown): Promise<void> {\n        if (typeof data !== \"string\") {\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            return Promise.reject(\"BVH loader expects string data.\");\n        }\n\n        // eslint-disable-next-line github/no-then\n        return this.importMeshAsync(null, scene, data).then(() => {\n            // return void\n        });\n    }\n\n    /**\n     * Load into an asset container.\n     * @param scene The scene to load into\n     * @param data The data to import\n     * @returns The loaded asset container\n     */\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    public loadAssetContainerAsync(scene: Scene, data: unknown): Promise<AssetContainer> {\n        if (typeof data !== \"string\") {\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            return Promise.reject(\"BVH loader expects string data.\");\n        }\n        const assetContainer = new AssetContainer(scene);\n        try {\n            const skeleton = ReadBvh(data, scene, assetContainer, this._loadingOptions);\n            assetContainer.skeletons.push(skeleton);\n            return Promise.resolve(assetContainer);\n        } catch (e) {\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            return Promise.reject(e);\n        }\n    }\n}\n\nRegisterSceneLoaderPlugin(new BVHFileLoader());\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,IAAM,aAAa;AACnB,IAAM,aAAa;AACnB,IAAM,aAAa;AACnB,IAAM,aAAa;AACnB,IAAM,aAAa;AACnB,IAAM,aAAa;AAEnB,IAAM,iBAAiB;AACvB,IAAM,cAAc;AAEpB,IAAM,gBAAN,MAAmB;EAQf,YAAY,UAAkB;AAP9B,SAAA,WAAmB,UAAU;AAC7B,SAAA,OAAmB,CAAA;AACnB,SAAA,OAAiB,cAAa;AAC9B,SAAA,YAAoB;AACpB,SAAA,YAAoB;AAIhB,SAAK,WAAW;EACpB;;AAmBJ,SAAS,gBAAa;AAClB,SAAO;IACH,MAAM;IACN,MAAM;IACN,QAAQ,IAAI,QAAO;IACnB,UAAU,CAAA;IACV,UAAU,CAAA;IACV,QAAQ,CAAA;IACR,QAAQ;;AAEhB;AAEA,SAAS,oBAAiB;AACtB,SAAO;IACH,OAAO;IACP,UAAU,IAAI,QAAO;IACrB,UAAU,IAAI,WAAU;;AAEhC;AAOA,SAAS,WAAW,MAAc;AAC9B,QAAM,IAAI,KAAK,OAAO;AACtB,QAAM,IAAI,KAAK,OAAO;AACtB,QAAM,IAAI,KAAK,OAAO;AACtB,SAAO,OAAO,YAAY,GAAG,GAAG,CAAC;AACrC;AAQA,SAAS,iBAAiB,MAAgB,SAAsB;AAC5D,MAAI,KAAK,OAAO,WAAW,GAAG;AAC1B,WAAO,CAAA;EACX;AAEA,QAAM,aAA0B,CAAA;AAGhC,QAAM,cAAc,KAAK,SAAS,KAAK,CAAC,MAAM,MAAM,cAAc,MAAM,cAAc,MAAM,UAAU;AAGtG,QAAM,cAAc,KAAK,SAAS,KAAK,CAAC,MAAM,MAAM,cAAc,MAAM,cAAc,MAAM,UAAU;AAEtG,QAAM,UAAU,IAAI,UAAU,GAAG,KAAK,IAAI,QAAQ,YAAY,QAAQ,WAAW,UAAU,uBAAuB,QAAQ,QAAQ;AAElI,QAAM,UAAU,IAAI,UAAU,GAAG,KAAK,IAAI,QAAQ,sBAAsB,QAAQ,WAAW,UAAU,0BAA0B,QAAQ,QAAQ;AAE/I,QAAM,UAA2B,CAAA;AACjC,QAAM,UAA2B,CAAA;AAEjC,WAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AACzC,UAAM,QAAQ,KAAK,OAAO,CAAC;AAE3B,QAAI,eAAe,MAAM,UAAU;AAC/B,cAAQ,KAAK;QACT,OAAO,MAAM;QACb,OAAO,MAAM,SAAS,MAAK;OAC9B;IACL;AAEA,QAAI,aAAa;AACb,cAAQ,KAAK;QACT,OAAO,MAAM;QACb,OAAO,MAAM,SAAS,MAAK;OAC9B;IACL;EACJ;AAEA,MAAI,QAAQ,SAAS,GAAG;AACpB,YAAQ,QAAQ,OAAO;AACvB,eAAW,KAAK,OAAO;EAC3B;AAEA,MAAI,QAAQ,SAAS,GAAG;AACpB,YAAQ,QAAQ,OAAO;AACvB,eAAW,KAAK,OAAO;EAC3B;AAEA,SAAO;AACX;AAQA,SAAS,YAAY,MAAgB,QAAwB,SAAsB;AAC/E,QAAM,SAAS,WAAW,IAAI;AAC9B,QAAM,OAAO,IAAI,KAAK,KAAK,MAAM,QAAQ,UAAU,QAAQ,MAAM;AAGjE,QAAM,aAAa,iBAAiB,MAAM,OAAO;AACjD,aAAW,aAAa,YAAY;AAChC,QAAI,UAAU,QAAO,KAAM,UAAU,QAAO,EAAG,SAAS,GAAG;AACvD,WAAK,WAAW,KAAK,SAAS;IAClC;EACJ;AAEA,aAAW,SAAS,KAAK,UAAU;AAC/B,gBAAY,OAAO,MAAM,OAAO;EACpC;AACJ;AAWA,SAAS,cAAc,MAAgB,aAAqB,MAAgB,YAAyB;AACjG,MAAI,KAAK,SAAS,WAAW;AAEzB;EACJ;AAGA,QAAM,WAAW,kBAAiB;AAClC,WAAS,QAAQ;AACjB,WAAS,WAAW,IAAI,QAAO;AAC/B,WAAS,WAAW,IAAI,WAAU;AAElC,OAAK,OAAO,KAAK,QAAQ;AAEzB,MAAI,mBAAmB,OAAO,SAAQ;AAGtC,WAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,EAAE,GAAG;AAC3C,UAAM,UAAU,KAAK,SAAS,CAAC;AAC/B,UAAM,QAAQ,KAAK,WAAW,GAAG;AACjC,QAAI,CAAC,OAAO;AACR;IACJ;AACA,UAAM,cAAc,WAAW,MAAM,KAAI,CAAE;AAC3C,QAAI,QAAQ,SAAS,UAAU,GAAG;AAC9B,cAAQ,SAAS;QACb,KAAK;AACD,mBAAS,SAAS,IAAI;AACtB;QACJ,KAAK;AACD,mBAAS,SAAS,IAAI;AACtB;QACJ,KAAK;AACD,mBAAS,SAAS,IAAI;AACtB;MACR;IACJ,WAAW,QAAQ,SAAS,UAAU,GAAG;AACrC,YAAM,QAAQ,MAAM,UAAU,WAAW;AACzC,UAAI;AACJ,cAAQ,SAAS;QACb,KAAK;AACD,2BAAiB,OAAO,UAAU,KAAK;AACvC;QACJ,KAAK;AACD,2BAAiB,OAAO,UAAU,KAAK;AACvC;QACJ,KAAK;AACD,2BAAiB,OAAO,UAAU,KAAK;AACvC;MACR;AACA,yBAAmB,eAAgB,SAAS,gBAAgB;IAChE;EACJ;AAEA,aAAW,wBAAwB,kBAAkB,SAAS,QAAQ;AAGtE,aAAW,SAAS,KAAK,UAAU;AAC/B,kBAAc,MAAM,aAAa,OAAO,UAAU;EACtD;AACJ;AAUA,SAAS,SAAS,OAAiB,WAAmB,QAA4B,SAAsB;AAhPxG;AAiPI,QAAM,OAAO,cAAa;AAC1B,OAAK,SAAS;AACd,UAAQ,KAAK,KAAK,IAAI;AAGtB,MAAI,SAA+B,UAAU,KAAI,EAAG,MAAM,KAAK;AAE/D,MAAI,OAAO,CAAC,EAAE,YAAW,MAAO,SAAS,OAAO,CAAC,EAAE,YAAW,MAAO,QAAQ;AACzE,SAAK,OAAO;AACZ,SAAK,OAAO;EAChB,OAAO;AACH,SAAK,OAAO,OAAO,CAAC;AACpB,SAAK,OAAO,OAAO,CAAC,EAAE,YAAW;EACrC;AAGA,QAAI,WAAM,MAAK,MAAX,mBAAe,WAAU,KAAK;AAC9B,UAAM,IAAI,MAAM,sCAAsC;EAC1D;AAGA,QAAM,eAAc,WAAM,MAAK,MAAX,mBAAe,OAAO,MAAM;AAChD,MAAI,CAAC,aAAa;AACd,UAAM,IAAI,MAAM,wCAAwC;EAC5D;AACA,WAAS;AAET,MAAI,OAAO,CAAC,EAAE,YAAW,KAAM,UAAU;AACrC,UAAM,IAAI,MAAM,+BAA+B,OAAO,CAAC,CAAC;EAC5D;AACA,MAAI,OAAO,UAAU,GAAG;AACpB,UAAM,IAAI,MAAM,kCAAkC;EACtD;AAEA,QAAM,SAAS,IAAI,QAAQ,WAAW,OAAO,CAAC,CAAC,GAAG,WAAW,OAAO,CAAC,CAAC,GAAG,WAAW,OAAO,CAAC,CAAC,CAAC;AAE9F,MAAI,MAAM,OAAO,CAAC,KAAK,MAAM,OAAO,CAAC,KAAK,MAAM,OAAO,CAAC,GAAG;AACvD,UAAM,IAAI,MAAM,wBAAwB;EAC5C;AAEA,OAAK,SAAS;AAGd,MAAI,KAAK,QAAQ,WAAW;AACxB,cAAS,WAAM,MAAK,MAAX,mBAAe,OAAO,MAAM;AACrC,QAAI,CAAC,QAAQ;AACT,YAAM,IAAI,MAAM,0CAA0C;IAC9D;AAEA,QAAI,OAAO,CAAC,EAAE,YAAW,KAAM,YAAY;AACvC,YAAM,IAAI,MAAM,8BAA8B;IAClD;AAEA,UAAM,cAAc,SAAS,OAAO,CAAC,CAAC;AAEtC,SAAK,WAAW,OAAO,OAAO,GAAG,WAAW;AAC5C,SAAK,WAAW,CAAA;EACpB;AAGA,SAAO,MAAM,SAAS,GAAG;AACrB,UAAM,QAAO,WAAM,MAAK,MAAX,mBAAe;AAE5B,QAAI,SAAS,KAAK;AAEd,aAAO;IACX,WAAW,MAAM;AACb,WAAK,SAAS,KAAK,SAAS,OAAO,MAAM,MAAM,OAAO,CAAC;IAC3D;EACJ;AAEA,QAAM,IAAI,MAAM,+CAA+C;AACnE;AAUM,SAAU,QAAQ,MAAc,OAAc,gBAA0C,gBAAiC;AAC3H,QAAM,QAAQ,KAAK,MAAM,IAAI;AAE7B,QAAM,EAAE,SAAQ,IAAK;AAErB,QAAM,yBAAyB,CAAC,CAAC;AACjC,QAAM,WAAW,IAAI,SAAS,IAAI,IAAI,KAAK;AAC3C,WAAS,mBAAmB;AAC5B,QAAM,yBAAyB;AAE/B,QAAM,UAAU,IAAI,cAAc,QAAQ;AAC1C,UAAQ,WAAW;AAGnB,QAAM,YAAY,MAAM,MAAK;AAC7B,MAAI,CAAC,aAAa,UAAU,KAAI,EAAG,YAAW,MAAO,gBAAgB;AACjE,UAAM,IAAI,MAAM,oBAAoB;EACxC;AAEA,QAAM,WAAW,MAAM,MAAK;AAC5B,MAAI,CAAC,UAAU;AACX,UAAM,IAAI,MAAM,wCAAwC;EAC5D;AACA,QAAM,OAAO,SAAS,OAAO,SAAS,KAAI,GAAI,MAAM,OAAO;AAG3D,QAAM,aAAa,MAAM,MAAK;AAC9B,MAAI,CAAC,cAAc,WAAW,KAAI,EAAG,YAAW,MAAO,aAAa;AAChE,UAAM,IAAI,MAAM,iBAAiB;EACrC;AAEA,QAAM,aAAa,MAAM,MAAK;AAC9B,MAAI,CAAC,YAAY;AACb,UAAM,IAAI,MAAM,2CAA2C;EAC/D;AACA,QAAM,eAAe,WAAW,KAAI,EAAG,MAAM,OAAO;AACpD,MAAI,aAAa,SAAS,GAAG;AACzB,UAAM,IAAI,MAAM,0BAA0B;EAC9C;AAGA,QAAM,YAAY,SAAS,aAAa,CAAC,CAAC;AAC1C,MAAI,MAAM,SAAS,GAAG;AAClB,UAAM,IAAI,MAAM,kCAAkC;EACtD;AACA,UAAQ,YAAY;AAGpB,QAAM,gBAAgB,MAAM,MAAK;AACjC,MAAI,CAAC,eAAe;AAChB,UAAM,IAAI,MAAM,0CAA0C;EAC9D;AACA,QAAM,kBAAkB,cAAc,KAAI,EAAG,MAAM,OAAO;AAC1D,MAAI,gBAAgB,SAAS,GAAG;AAC5B,UAAM,IAAI,MAAM,yBAAyB;EAC7C;AACA,QAAM,YAAY,WAAW,gBAAgB,CAAC,CAAC;AAC/C,MAAI,MAAM,SAAS,GAAG;AAClB,UAAM,IAAI,MAAM,4BAA4B;EAChD;AAEA,UAAQ,YAAY;AAGpB,WAAS,IAAI,GAAG,IAAI,WAAW,EAAE,GAAG;AAChC,UAAM,YAAY,MAAM,MAAK;AAC7B,QAAI,CAAC,WAAW;AACZ;IACJ;AACA,UAAM,SAAS,UAAU,KAAI,EAAG,MAAM,OAAO,KAAK,CAAA;AAClD,kBAAc,QAAQ,GAAG,MAAM,EAAE,GAAG,EAAC,CAAE;EAC3C;AAEA,UAAQ,OAAO;AAEf,cAAY,QAAQ,MAAM,MAAM,OAAO;AAEvC,UAAQ,SAAS,aAAY;AAC7B,SAAO,QAAQ;AACnB;;;AC3XM,IAAO,gBAAP,MAAO,eAAa;;;;;EAetB,YAAY,gBAAqD;AAXjD,SAAA,OAAO,sBAAsB;AAG7B,SAAA,aAAa,sBAAsB;AAS/C,SAAK,kBAAkB,EAAE,GAAG,eAAc,wBAAwB,GAAI,kBAAkB,CAAA,EAAG;EAC/F;EAEQ,WAAW,yBAAsB;AACrC,WAAO;MACH,UAAU,UAAU;;EAE5B;;EAGO,aAAa,SAAiC;AACjD,WAAO,IAAI,eAAc,QAAQ,sBAAsB,IAAI,CAAC;EAChE;;;;;EAMO,gBAAa;AAChB,WAAO;EACX;;;;;;;;;EAUO,gBAAgB,cAA6D,OAAc,MAAa;AAC3G,QAAI,OAAO,SAAS,UAAU;AAE1B,aAAO,QAAQ,OAAO,iCAAiC;IAC3D;AACA,QAAI;AACA,YAAM,WAAW,QAAQ,MAAM,OAAO,MAAM,KAAK,eAAe;AAChE,aAAO,QAAQ,QAAQ;QACnB,QAAQ,CAAA;QACR,iBAAiB,CAAA;QACjB,WAAW,CAAC,QAAQ;QACpB,iBAAiB,CAAA;QACjB,gBAAgB,CAAA;QAChB,YAAY,CAAA;QACZ,QAAQ,CAAA;QACR,gBAAgB,CAAA;OACQ;IAChC,SAAS,GAAG;AAER,aAAO,QAAQ,OAAO,CAAC;IAC3B;EACJ;;;;;;;;EASO,UAAU,OAAc,MAAa;AACxC,QAAI,OAAO,SAAS,UAAU;AAE1B,aAAO,QAAQ,OAAO,iCAAiC;IAC3D;AAGA,WAAO,KAAK,gBAAgB,MAAM,OAAO,IAAI,EAAE,KAAK,MAAK;IAEzD,CAAC;EACL;;;;;;;;EASO,wBAAwB,OAAc,MAAa;AACtD,QAAI,OAAO,SAAS,UAAU;AAE1B,aAAO,QAAQ,OAAO,iCAAiC;IAC3D;AACA,UAAM,iBAAiB,IAAI,eAAe,KAAK;AAC/C,QAAI;AACA,YAAM,WAAW,QAAQ,MAAM,OAAO,gBAAgB,KAAK,eAAe;AAC1E,qBAAe,UAAU,KAAK,QAAQ;AACtC,aAAO,QAAQ,QAAQ,cAAc;IACzC,SAAS,GAAG;AAER,aAAO,QAAQ,OAAO,CAAC;IAC3B;EACJ;;AAGJ,0BAA0B,IAAI,cAAa,CAAE;",
  "names": []
}
