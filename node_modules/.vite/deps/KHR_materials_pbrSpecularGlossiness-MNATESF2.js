import {
  GLTFLoader
} from "./chunk-3TB6AK5U.js";
import "./chunk-UU3CS7MV.js";
import {
  PBRMaterial
} from "./chunk-LE57K3OI.js";
import "./chunk-BADZLSSB.js";
import "./chunk-EUDQUTFD.js";
import "./chunk-EA5Y7UBE.js";
import "./chunk-KCMUW3TE.js";
import "./chunk-2VZLPTT4.js";
import "./chunk-FEZ4AZAI.js";
import "./chunk-V4NEUSAV.js";
import "./chunk-BP3EVIYU.js";
import "./chunk-XKRKL6YP.js";
import "./chunk-2ZZCOA4S.js";
import "./chunk-E3BT65CZ.js";
import "./chunk-GSOC3KDB.js";
import "./chunk-FZ54PSXY.js";
import "./chunk-7LAWCXNF.js";
import "./chunk-JFIM5ZM3.js";
import "./chunk-NBEEHJT4.js";
import "./chunk-YC7U4GEU.js";
import "./chunk-HDKDYI4D.js";
import "./chunk-U6F2POQ4.js";
import "./chunk-EALI4KUG.js";
import "./chunk-4U4OQIRL.js";
import "./chunk-3BK5LF7O.js";
import {
  registerGLTFExtension,
  unregisterGLTFExtension
} from "./chunk-QGBHPVKU.js";
import "./chunk-GSUGVQ2V.js";
import "./chunk-QURDUCRJ.js";
import "./chunk-Q4NWZFNQ.js";
import "./chunk-WKXRXUEO.js";
import "./chunk-VECXS57A.js";
import "./chunk-ZXVFJ3IO.js";
import "./chunk-R5E54K5P.js";
import "./chunk-LJSODA3L.js";
import "./chunk-HEJT6QLT.js";
import "./chunk-AZ5ZQKUU.js";
import "./chunk-P6JJKNRD.js";
import {
  Color3
} from "./chunk-KU4OFD2T.js";
import "./chunk-6JFLQ55T.js";
import "./chunk-XKDR2MBU.js";
import "./chunk-UEXKFJPR.js";
import "./chunk-2ZEUD233.js";
import "./chunk-IW7YW5OA.js";
import "./chunk-I2PO3XEU.js";
import "./chunk-NJKHZWGX.js";
import "./chunk-OWCZTH5B.js";
import "./chunk-AZNEH5GV.js";
import "./chunk-J4DZ2XK7.js";
import "./chunk-FX6MN5HL.js";
import "./chunk-7HZJAC7S.js";
import "./chunk-YCWH5W4G.js";
import "./chunk-S7NDMBDF.js";
import "./chunk-LDFLUTDO.js";
import "./chunk-ZVW3KNNR.js";
import "./chunk-2YUEJ7I2.js";
import "./chunk-SSYGV25P.js";

// node_modules/@babylonjs/loaders/glTF/2.0/Extensions/KHR_materials_pbrSpecularGlossiness.js
var NAME = "KHR_materials_pbrSpecularGlossiness";
var KHR_materials_pbrSpecularGlossiness = class {
  /**
   * @internal
   */
  constructor(loader) {
    this.name = NAME;
    this.order = 200;
    this._loader = loader;
    this.enabled = this._loader.isExtensionUsed(NAME);
  }
  /** @internal */
  dispose() {
    this._loader = null;
  }
  /**
   * @internal
   */
  // eslint-disable-next-line no-restricted-syntax
  loadMaterialPropertiesAsync(context, material, babylonMaterial) {
    return GLTFLoader.LoadExtensionAsync(context, material, this.name, async (extensionContext, extension) => {
      const promises = new Array();
      promises.push(this._loader.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));
      promises.push(this._loadSpecularGlossinessPropertiesAsync(extensionContext, extension, babylonMaterial));
      this._loader.loadMaterialAlphaProperties(context, material, babylonMaterial);
      return await Promise.all(promises).then(() => {
      });
    });
  }
  // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax
  _loadSpecularGlossinessPropertiesAsync(context, properties, babylonMaterial) {
    if (!(babylonMaterial instanceof PBRMaterial)) {
      throw new Error(`${context}: Material type not supported`);
    }
    const promises = new Array();
    babylonMaterial.metallic = null;
    babylonMaterial.roughness = null;
    if (properties.diffuseFactor) {
      babylonMaterial.albedoColor = Color3.FromArray(properties.diffuseFactor);
      babylonMaterial.alpha = properties.diffuseFactor[3];
    } else {
      babylonMaterial.albedoColor = Color3.White();
    }
    babylonMaterial.reflectivityColor = properties.specularFactor ? Color3.FromArray(properties.specularFactor) : Color3.White();
    babylonMaterial.microSurface = properties.glossinessFactor == void 0 ? 1 : properties.glossinessFactor;
    if (properties.diffuseTexture) {
      promises.push(this._loader.loadTextureInfoAsync(`${context}/diffuseTexture`, properties.diffuseTexture, (texture) => {
        texture.name = `${babylonMaterial.name} (Diffuse)`;
        babylonMaterial.albedoTexture = texture;
      }));
    }
    if (properties.specularGlossinessTexture) {
      promises.push(this._loader.loadTextureInfoAsync(`${context}/specularGlossinessTexture`, properties.specularGlossinessTexture, (texture) => {
        texture.name = `${babylonMaterial.name} (Specular Glossiness)`;
        babylonMaterial.reflectivityTexture = texture;
        babylonMaterial.reflectivityTexture.hasAlpha = true;
      }));
      babylonMaterial.useMicroSurfaceFromReflectivityMapAlpha = true;
    }
    return Promise.all(promises).then(() => {
    });
  }
};
unregisterGLTFExtension(NAME);
registerGLTFExtension(NAME, true, (loader) => new KHR_materials_pbrSpecularGlossiness(loader));
export {
  KHR_materials_pbrSpecularGlossiness
};
//# sourceMappingURL=KHR_materials_pbrSpecularGlossiness-MNATESF2.js.map
