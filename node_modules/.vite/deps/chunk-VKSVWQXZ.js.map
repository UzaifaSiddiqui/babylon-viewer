{
  "version": 3,
  "sources": ["../../../dev/loaders/src/STL/stlFileLoader.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport type { ISceneLoaderPlugin } from \"core/Loading/sceneLoader\";\r\nimport { RegisterSceneLoaderPlugin } from \"core/Loading/sceneLoader\";\r\nimport { AssetContainer } from \"core/assetContainer\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { STLFileLoaderMetadata } from \"./stlFileLoader.metadata\";\r\nimport \"core/Materials/standardMaterial\";\r\n\r\ndeclare module \"core/Loading/sceneLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface SceneLoaderPluginOptions {\r\n        /**\r\n         * Defines options for the stl loader.\r\n         */\r\n        [STLFileLoaderMetadata.name]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * STL file type loader.\r\n * This is a babylon scene loader plugin.\r\n */\r\nexport class STLFileLoader implements ISceneLoaderPlugin {\r\n    /** @internal */\r\n    public solidPattern = /solid (\\S*)([\\S\\s]*?)endsolid[ ]*(\\S*)/g;\r\n\r\n    /** @internal */\r\n    public facetsPattern = /facet([\\s\\S]*?)endfacet/g;\r\n    /** @internal */\r\n    public normalPattern = /normal[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;\r\n    /** @internal */\r\n    public vertexPattern = /vertex[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;\r\n\r\n    /**\r\n     * Defines the name of the plugin.\r\n     */\r\n    public readonly name = STLFileLoaderMetadata.name;\r\n\r\n    /**\r\n     * Defines the extensions the stl loader is able to load.\r\n     * force data to come in as an ArrayBuffer\r\n     * we'll convert to string if it looks like it's an ASCII .stl\r\n     */\r\n    public readonly extensions = STLFileLoaderMetadata.extensions;\r\n\r\n    /**\r\n     * Defines if Y and Z axes are swapped or not when loading an STL file.\r\n     * The default is false to maintain backward compatibility. When set to\r\n     * true, coordinates from the STL file are used without change.\r\n     */\r\n    public static DO_NOT_ALTER_FILE_COORDINATES = false;\r\n\r\n    /**\r\n     * Import meshes into a scene.\r\n     * @param meshesNames An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param scene The scene to import into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param meshes The meshes array to import into\r\n     * @returns True if successful or false otherwise\r\n     */\r\n    public importMesh(meshesNames: any, scene: Scene, data: any, rootUrl: string, meshes: Nullable<AbstractMesh[]>): boolean {\r\n        let matches;\r\n\r\n        if (typeof data !== \"string\") {\r\n            if (this._isBinary(data)) {\r\n                // binary .stl\r\n                const babylonMesh = new Mesh(\"stlmesh\", scene);\r\n                this._parseBinary(babylonMesh, data);\r\n                if (meshes) {\r\n                    meshes.push(babylonMesh);\r\n                }\r\n                return true;\r\n            }\r\n\r\n            // ASCII .stl\r\n\r\n            // convert to string\r\n            data = new TextDecoder().decode(new Uint8Array(data));\r\n        }\r\n\r\n        //if arrived here, data is a string, containing the STLA data.\r\n\r\n        while ((matches = this.solidPattern.exec(data))) {\r\n            let meshName = matches[1];\r\n            const meshNameFromEnd = matches[3];\r\n            if (meshNameFromEnd && meshName != meshNameFromEnd) {\r\n                Tools.Error(\"Error in STL, solid name != endsolid name\");\r\n                return false;\r\n            }\r\n\r\n            // check meshesNames\r\n            if (meshesNames && meshName) {\r\n                if (meshesNames instanceof Array) {\r\n                    if (!meshesNames.indexOf(meshName)) {\r\n                        continue;\r\n                    }\r\n                } else {\r\n                    if (meshName !== meshesNames) {\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // stl mesh name can be empty as well\r\n            meshName = meshName || \"stlmesh\";\r\n\r\n            const babylonMesh = new Mesh(meshName, scene);\r\n            this._parseASCII(babylonMesh, matches[2]);\r\n            if (meshes) {\r\n                meshes.push(babylonMesh);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Load into a scene.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @returns true if successful or false otherwise\r\n     */\r\n    public load(scene: Scene, data: any, rootUrl: string): boolean {\r\n        const result = this.importMesh(null, scene, data, rootUrl, null);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @returns The loaded asset container\r\n     */\r\n    public loadAssetContainer(scene: Scene, data: string, rootUrl: string): AssetContainer {\r\n        const container = new AssetContainer(scene);\r\n        scene._blockEntityCollection = true;\r\n        this.importMesh(null, scene, data, rootUrl, container.meshes);\r\n        scene._blockEntityCollection = false;\r\n        return container;\r\n    }\r\n\r\n    private _isBinary(data: any) {\r\n        // check if file size is correct for binary stl\r\n        const reader = new DataView(data);\r\n\r\n        // A Binary STL header is 80 bytes, if the data size is not great than\r\n        // that then it's not a binary STL.\r\n        if (reader.byteLength <= 80) {\r\n            return false;\r\n        }\r\n\r\n        const faceSize = (32 / 8) * 3 + (32 / 8) * 3 * 3 + 16 / 8;\r\n        const nFaces = reader.getUint32(80, true);\r\n\r\n        if (80 + 32 / 8 + nFaces * faceSize === reader.byteLength) {\r\n            return true;\r\n        }\r\n\r\n        // US-ASCII begin with 's', 'o', 'l', 'i', 'd'\r\n        const ascii = [115, 111, 108, 105, 100];\r\n        for (let off = 0; off < 5; off++) {\r\n            if (reader.getUint8(off) !== ascii[off]) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _parseBinary(mesh: Mesh, data: ArrayBuffer) {\r\n        const reader = new DataView(data);\r\n        const faces = reader.getUint32(80, true);\r\n\r\n        const dataOffset = 84;\r\n        const faceLength = 12 * 4 + 2;\r\n\r\n        let offset = 0;\r\n\r\n        const positions = new Float32Array(faces * 3 * 3);\r\n        const normals = new Float32Array(faces * 3 * 3);\r\n        const indices = new Uint32Array(faces * 3);\r\n        let indicesCount = 0;\r\n\r\n        for (let face = 0; face < faces; face++) {\r\n            const start = dataOffset + face * faceLength;\r\n            const normalX = reader.getFloat32(start, true);\r\n            const normalY = reader.getFloat32(start + 4, true);\r\n            const normalZ = reader.getFloat32(start + 8, true);\r\n\r\n            for (let i = 1; i <= 3; i++) {\r\n                const vertexstart = start + i * 12;\r\n\r\n                // ordering is intentional to match ascii import\r\n                positions[offset] = reader.getFloat32(vertexstart, true);\r\n                normals[offset] = normalX;\r\n\r\n                if (!STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                    positions[offset + 2] = reader.getFloat32(vertexstart + 4, true);\r\n                    positions[offset + 1] = reader.getFloat32(vertexstart + 8, true);\r\n\r\n                    normals[offset + 2] = normalY;\r\n                    normals[offset + 1] = normalZ;\r\n                } else {\r\n                    positions[offset + 1] = reader.getFloat32(vertexstart + 4, true);\r\n                    positions[offset + 2] = reader.getFloat32(vertexstart + 8, true);\r\n\r\n                    normals[offset + 1] = normalY;\r\n                    normals[offset + 2] = normalZ;\r\n                }\r\n\r\n                offset += 3;\r\n            }\r\n\r\n            if (STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                indices[indicesCount] = indicesCount;\r\n                indices[indicesCount + 1] = indicesCount + 2;\r\n                indices[indicesCount + 2] = indicesCount + 1;\r\n                indicesCount += 3;\r\n            } else {\r\n                indices[indicesCount] = indicesCount++;\r\n                indices[indicesCount] = indicesCount++;\r\n                indices[indicesCount] = indicesCount++;\r\n            }\r\n        }\r\n\r\n        mesh.setVerticesData(VertexBuffer.PositionKind, positions);\r\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\r\n        mesh.setIndices(indices);\r\n        mesh.computeWorldMatrix(true);\r\n    }\r\n\r\n    private _parseASCII(mesh: Mesh, solidData: string) {\r\n        const positions = [];\r\n        const normals = [];\r\n        const indices = [];\r\n        let indicesCount = 0;\r\n\r\n        //load facets, ignoring loop as the standard doesn't define it can contain more than vertices\r\n        let matches;\r\n        while ((matches = this.facetsPattern.exec(solidData))) {\r\n            const facet = matches[1];\r\n            //one normal per face\r\n            const normalMatches = this.normalPattern.exec(facet);\r\n            this.normalPattern.lastIndex = 0;\r\n            if (!normalMatches) {\r\n                continue;\r\n            }\r\n            const normal = [Number(normalMatches[1]), Number(normalMatches[5]), Number(normalMatches[3])];\r\n\r\n            let vertexMatch;\r\n            while ((vertexMatch = this.vertexPattern.exec(facet))) {\r\n                if (!STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                    positions.push(Number(vertexMatch[1]), Number(vertexMatch[5]), Number(vertexMatch[3]));\r\n                    normals.push(normal[0], normal[1], normal[2]);\r\n                } else {\r\n                    positions.push(Number(vertexMatch[1]), Number(vertexMatch[3]), Number(vertexMatch[5]));\r\n\r\n                    // Flipping the second and third component because inverted\r\n                    // when normal was declared.\r\n                    normals.push(normal[0], normal[2], normal[1]);\r\n                }\r\n            }\r\n            if (STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                indices.push(indicesCount, indicesCount + 2, indicesCount + 1);\r\n                indicesCount += 3;\r\n            } else {\r\n                indices.push(indicesCount++, indicesCount++, indicesCount++);\r\n            }\r\n            this.vertexPattern.lastIndex = 0;\r\n        }\r\n\r\n        this.facetsPattern.lastIndex = 0;\r\n        mesh.setVerticesData(VertexBuffer.PositionKind, positions);\r\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\r\n        mesh.setIndices(indices);\r\n        mesh.computeWorldMatrix(true);\r\n    }\r\n}\r\n\r\nRegisterSceneLoaderPlugin(new STLFileLoader());\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AA2BM,IAAO,gBAAP,MAAO,eAAa;EAA1B,cAAA;AAEW,SAAA,eAAe;AAGf,SAAA,gBAAgB;AAEhB,SAAA,gBAAgB;AAEhB,SAAA,gBAAgB;AAKP,SAAA,OAAO,sBAAsB;AAO7B,SAAA,aAAa,sBAAsB;EA6OvD;;;;;;;;;;EA3NW,WAAW,aAAkB,OAAc,MAAW,SAAiB,QAAgC;AAC1G,QAAI;AAEJ,QAAI,OAAO,SAAS,UAAU;AAC1B,UAAI,KAAK,UAAU,IAAI,GAAG;AAEtB,cAAM,cAAc,IAAI,KAAK,WAAW,KAAK;AAC7C,aAAK,aAAa,aAAa,IAAI;AACnC,YAAI,QAAQ;AACR,iBAAO,KAAK,WAAW;QAC3B;AACA,eAAO;MACX;AAKA,aAAO,IAAI,YAAW,EAAG,OAAO,IAAI,WAAW,IAAI,CAAC;IACxD;AAIA,WAAQ,UAAU,KAAK,aAAa,KAAK,IAAI,GAAI;AAC7C,UAAI,WAAW,QAAQ,CAAC;AACxB,YAAM,kBAAkB,QAAQ,CAAC;AACjC,UAAI,mBAAmB,YAAY,iBAAiB;AAChD,cAAM,MAAM,2CAA2C;AACvD,eAAO;MACX;AAGA,UAAI,eAAe,UAAU;AACzB,YAAI,uBAAuB,OAAO;AAC9B,cAAI,CAAC,YAAY,QAAQ,QAAQ,GAAG;AAChC;UACJ;QACJ,OAAO;AACH,cAAI,aAAa,aAAa;AAC1B;UACJ;QACJ;MACJ;AAGA,iBAAW,YAAY;AAEvB,YAAM,cAAc,IAAI,KAAK,UAAU,KAAK;AAC5C,WAAK,YAAY,aAAa,QAAQ,CAAC,CAAC;AACxC,UAAI,QAAQ;AACR,eAAO,KAAK,WAAW;MAC3B;IACJ;AAEA,WAAO;EACX;;;;;;;;EASO,KAAK,OAAc,MAAW,SAAe;AAChD,UAAM,SAAS,KAAK,WAAW,MAAM,OAAO,MAAM,SAAS,IAAI;AAC/D,WAAO;EACX;;;;;;;;EASO,mBAAmB,OAAc,MAAc,SAAe;AACjE,UAAM,YAAY,IAAI,eAAe,KAAK;AAC1C,UAAM,yBAAyB;AAC/B,SAAK,WAAW,MAAM,OAAO,MAAM,SAAS,UAAU,MAAM;AAC5D,UAAM,yBAAyB;AAC/B,WAAO;EACX;EAEQ,UAAU,MAAS;AAEvB,UAAM,SAAS,IAAI,SAAS,IAAI;AAIhC,QAAI,OAAO,cAAc,IAAI;AACzB,aAAO;IACX;AAEA,UAAM,WAAY,KAAK,IAAK,IAAK,KAAK,IAAK,IAAI,IAAI,KAAK;AACxD,UAAM,SAAS,OAAO,UAAU,IAAI,IAAI;AAExC,QAAI,KAAK,KAAK,IAAI,SAAS,aAAa,OAAO,YAAY;AACvD,aAAO;IACX;AAGA,UAAM,QAAQ,CAAC,KAAK,KAAK,KAAK,KAAK,GAAG;AACtC,aAAS,MAAM,GAAG,MAAM,GAAG,OAAO;AAC9B,UAAI,OAAO,SAAS,GAAG,MAAM,MAAM,GAAG,GAAG;AACrC,eAAO;MACX;IACJ;AAEA,WAAO;EACX;EAEQ,aAAa,MAAY,MAAiB;AAC9C,UAAM,SAAS,IAAI,SAAS,IAAI;AAChC,UAAM,QAAQ,OAAO,UAAU,IAAI,IAAI;AAEvC,UAAM,aAAa;AACnB,UAAM,aAAa,KAAK,IAAI;AAE5B,QAAI,SAAS;AAEb,UAAM,YAAY,IAAI,aAAa,QAAQ,IAAI,CAAC;AAChD,UAAM,UAAU,IAAI,aAAa,QAAQ,IAAI,CAAC;AAC9C,UAAM,UAAU,IAAI,YAAY,QAAQ,CAAC;AACzC,QAAI,eAAe;AAEnB,aAAS,OAAO,GAAG,OAAO,OAAO,QAAQ;AACrC,YAAM,QAAQ,aAAa,OAAO;AAClC,YAAM,UAAU,OAAO,WAAW,OAAO,IAAI;AAC7C,YAAM,UAAU,OAAO,WAAW,QAAQ,GAAG,IAAI;AACjD,YAAM,UAAU,OAAO,WAAW,QAAQ,GAAG,IAAI;AAEjD,eAAS,IAAI,GAAG,KAAK,GAAG,KAAK;AACzB,cAAM,cAAc,QAAQ,IAAI;AAGhC,kBAAU,MAAM,IAAI,OAAO,WAAW,aAAa,IAAI;AACvD,gBAAQ,MAAM,IAAI;AAElB,YAAI,CAAC,eAAc,+BAA+B;AAC9C,oBAAU,SAAS,CAAC,IAAI,OAAO,WAAW,cAAc,GAAG,IAAI;AAC/D,oBAAU,SAAS,CAAC,IAAI,OAAO,WAAW,cAAc,GAAG,IAAI;AAE/D,kBAAQ,SAAS,CAAC,IAAI;AACtB,kBAAQ,SAAS,CAAC,IAAI;QAC1B,OAAO;AACH,oBAAU,SAAS,CAAC,IAAI,OAAO,WAAW,cAAc,GAAG,IAAI;AAC/D,oBAAU,SAAS,CAAC,IAAI,OAAO,WAAW,cAAc,GAAG,IAAI;AAE/D,kBAAQ,SAAS,CAAC,IAAI;AACtB,kBAAQ,SAAS,CAAC,IAAI;QAC1B;AAEA,kBAAU;MACd;AAEA,UAAI,eAAc,+BAA+B;AAC7C,gBAAQ,YAAY,IAAI;AACxB,gBAAQ,eAAe,CAAC,IAAI,eAAe;AAC3C,gBAAQ,eAAe,CAAC,IAAI,eAAe;AAC3C,wBAAgB;MACpB,OAAO;AACH,gBAAQ,YAAY,IAAI;AACxB,gBAAQ,YAAY,IAAI;AACxB,gBAAQ,YAAY,IAAI;MAC5B;IACJ;AAEA,SAAK,gBAAgB,aAAa,cAAc,SAAS;AACzD,SAAK,gBAAgB,aAAa,YAAY,OAAO;AACrD,SAAK,WAAW,OAAO;AACvB,SAAK,mBAAmB,IAAI;EAChC;EAEQ,YAAY,MAAY,WAAiB;AAC7C,UAAM,YAAY,CAAA;AAClB,UAAM,UAAU,CAAA;AAChB,UAAM,UAAU,CAAA;AAChB,QAAI,eAAe;AAGnB,QAAI;AACJ,WAAQ,UAAU,KAAK,cAAc,KAAK,SAAS,GAAI;AACnD,YAAM,QAAQ,QAAQ,CAAC;AAEvB,YAAM,gBAAgB,KAAK,cAAc,KAAK,KAAK;AACnD,WAAK,cAAc,YAAY;AAC/B,UAAI,CAAC,eAAe;AAChB;MACJ;AACA,YAAM,SAAS,CAAC,OAAO,cAAc,CAAC,CAAC,GAAG,OAAO,cAAc,CAAC,CAAC,GAAG,OAAO,cAAc,CAAC,CAAC,CAAC;AAE5F,UAAI;AACJ,aAAQ,cAAc,KAAK,cAAc,KAAK,KAAK,GAAI;AACnD,YAAI,CAAC,eAAc,+BAA+B;AAC9C,oBAAU,KAAK,OAAO,YAAY,CAAC,CAAC,GAAG,OAAO,YAAY,CAAC,CAAC,GAAG,OAAO,YAAY,CAAC,CAAC,CAAC;AACrF,kBAAQ,KAAK,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;QAChD,OAAO;AACH,oBAAU,KAAK,OAAO,YAAY,CAAC,CAAC,GAAG,OAAO,YAAY,CAAC,CAAC,GAAG,OAAO,YAAY,CAAC,CAAC,CAAC;AAIrF,kBAAQ,KAAK,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;QAChD;MACJ;AACA,UAAI,eAAc,+BAA+B;AAC7C,gBAAQ,KAAK,cAAc,eAAe,GAAG,eAAe,CAAC;AAC7D,wBAAgB;MACpB,OAAO;AACH,gBAAQ,KAAK,gBAAgB,gBAAgB,cAAc;MAC/D;AACA,WAAK,cAAc,YAAY;IACnC;AAEA,SAAK,cAAc,YAAY;AAC/B,SAAK,gBAAgB,aAAa,cAAc,SAAS;AACzD,SAAK,gBAAgB,aAAa,YAAY,OAAO;AACrD,SAAK,WAAW,OAAO;AACvB,SAAK,mBAAmB,IAAI;EAChC;;AArOc,cAAA,gCAAgC;AAwOlD,0BAA0B,IAAI,cAAa,CAAE;",
  "names": []
}
