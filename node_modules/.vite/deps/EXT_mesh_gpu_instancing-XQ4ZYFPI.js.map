{
  "version": 3,
  "sources": ["../../../dev/loaders/src/glTF/2.0/Extensions/EXT_mesh_gpu_instancing.ts"],
  "sourcesContent": ["import { Vector3, Quaternion, Matrix, TmpVectors } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport type { INode } from \"../glTFLoaderInterfaces\";\r\nimport type { IEXTMeshGpuInstancing } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nimport \"core/Meshes/thinInstanceMesh\";\r\n\r\nconst NAME = \"EXT_mesh_gpu_instancing\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the EXT_mesh_gpu_instancing extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"EXT_mesh_gpu_instancing\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_mesh_gpu_instancing/README.md)\r\n * [Playground Sample](https://playground.babylonjs.com/#QFIGLW#9)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_mesh_gpu_instancing implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTMeshGpuInstancing, TransformNode>(context, node, this.name, async (extensionContext, extension) => {\r\n            this._loader._disableInstancedMesh++;\r\n\r\n            const promise = this._loader.loadNodeAsync(`/nodes/${node.index}`, node, assign);\r\n\r\n            this._loader._disableInstancedMesh--;\r\n\r\n            if (!node._primitiveBabylonMeshes) {\r\n                return await promise;\r\n            }\r\n\r\n            const promises = new Array<Promise<Nullable<Float32Array>>>();\r\n            let instanceCount = 0;\r\n\r\n            const loadAttribute = (attribute: string) => {\r\n                if (extension.attributes[attribute] == undefined) {\r\n                    promises.push(Promise.resolve(null));\r\n                    return;\r\n                }\r\n\r\n                const accessor = ArrayItem.Get(`${extensionContext}/attributes/${attribute}`, this._loader.gltf.accessors, extension.attributes[attribute]);\r\n                promises.push(this._loader._loadFloatAccessorAsync(`/accessors/${accessor.bufferView}`, accessor));\r\n\r\n                if (instanceCount === 0) {\r\n                    instanceCount = accessor.count;\r\n                } else if (instanceCount !== accessor.count) {\r\n                    throw new Error(`${extensionContext}/attributes: Instance buffer accessors do not have the same count.`);\r\n                }\r\n            };\r\n\r\n            loadAttribute(\"TRANSLATION\");\r\n            loadAttribute(\"ROTATION\");\r\n            loadAttribute(\"SCALE\");\r\n\r\n            // eslint-disable-next-line github/no-then\r\n            return await promise.then(async (babylonTransformNode) => {\r\n                const [translationBuffer, rotationBuffer, scaleBuffer] = await Promise.all(promises);\r\n                const matrices = new Float32Array(instanceCount * 16);\r\n                TmpVectors.Vector3[0].copyFromFloats(0, 0, 0); // translation\r\n                TmpVectors.Quaternion[0].copyFromFloats(0, 0, 0, 1); // rotation\r\n                TmpVectors.Vector3[1].copyFromFloats(1, 1, 1); // scale\r\n                for (let i = 0; i < instanceCount; ++i) {\r\n                    translationBuffer && Vector3.FromArrayToRef(translationBuffer, i * 3, TmpVectors.Vector3[0]);\r\n                    rotationBuffer && Quaternion.FromArrayToRef(rotationBuffer, i * 4, TmpVectors.Quaternion[0]);\r\n                    scaleBuffer && Vector3.FromArrayToRef(scaleBuffer, i * 3, TmpVectors.Vector3[1]);\r\n\r\n                    Matrix.ComposeToRef(TmpVectors.Vector3[1], TmpVectors.Quaternion[0], TmpVectors.Vector3[0], TmpVectors.Matrix[0]);\r\n\r\n                    TmpVectors.Matrix[0].copyToArray(matrices, i * 16);\r\n                }\r\n                for (const babylonMesh of node._primitiveBabylonMeshes!) {\r\n                    (babylonMesh as Mesh).thinInstanceSetBuffer(\"matrix\", matrices, 16, true);\r\n                }\r\n                return babylonTransformNode;\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new EXT_mesh_gpu_instancing(loader));\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,IAAM,OAAO;AAkBP,IAAO,0BAAP,MAA8B;;;;EAgBhC,YAAY,QAAkB;AAZd,SAAA,OAAO;AAanB,SAAK,UAAU;AACf,SAAK,UAAU,KAAK,QAAQ,gBAAgB,IAAI;EACpD;;EAGO,UAAO;AACT,SAAK,UAAkB;EAC5B;;;;;EAMO,cAAc,SAAiB,MAAa,QAAqD;AACpG,WAAO,WAAW,mBAAyD,SAAS,MAAM,KAAK,MAAM,OAAO,kBAAkB,cAAa;AACvI,WAAK,QAAQ;AAEb,YAAM,UAAU,KAAK,QAAQ,cAAc,UAAU,KAAK,KAAK,IAAI,MAAM,MAAM;AAE/E,WAAK,QAAQ;AAEb,UAAI,CAAC,KAAK,yBAAyB;AAC/B,eAAO,MAAM;MACjB;AAEA,YAAM,WAAW,IAAI,MAAK;AAC1B,UAAI,gBAAgB;AAEpB,YAAM,gBAAgB,CAAC,cAAqB;AACxC,YAAI,UAAU,WAAW,SAAS,KAAK,QAAW;AAC9C,mBAAS,KAAK,QAAQ,QAAQ,IAAI,CAAC;AACnC;QACJ;AAEA,cAAM,WAAW,UAAU,IAAI,GAAG,gBAAgB,eAAe,SAAS,IAAI,KAAK,QAAQ,KAAK,WAAW,UAAU,WAAW,SAAS,CAAC;AAC1I,iBAAS,KAAK,KAAK,QAAQ,wBAAwB,cAAc,SAAS,UAAU,IAAI,QAAQ,CAAC;AAEjG,YAAI,kBAAkB,GAAG;AACrB,0BAAgB,SAAS;QAC7B,WAAW,kBAAkB,SAAS,OAAO;AACzC,gBAAM,IAAI,MAAM,GAAG,gBAAgB,oEAAoE;QAC3G;MACJ;AAEA,oBAAc,aAAa;AAC3B,oBAAc,UAAU;AACxB,oBAAc,OAAO;AAGrB,aAAO,MAAM,QAAQ,KAAK,OAAO,yBAAwB;AACrD,cAAM,CAAC,mBAAmB,gBAAgB,WAAW,IAAI,MAAM,QAAQ,IAAI,QAAQ;AACnF,cAAM,WAAW,IAAI,aAAa,gBAAgB,EAAE;AACpD,mBAAW,QAAQ,CAAC,EAAE,eAAe,GAAG,GAAG,CAAC;AAC5C,mBAAW,WAAW,CAAC,EAAE,eAAe,GAAG,GAAG,GAAG,CAAC;AAClD,mBAAW,QAAQ,CAAC,EAAE,eAAe,GAAG,GAAG,CAAC;AAC5C,iBAAS,IAAI,GAAG,IAAI,eAAe,EAAE,GAAG;AACpC,+BAAqB,QAAQ,eAAe,mBAAmB,IAAI,GAAG,WAAW,QAAQ,CAAC,CAAC;AAC3F,4BAAkB,WAAW,eAAe,gBAAgB,IAAI,GAAG,WAAW,WAAW,CAAC,CAAC;AAC3F,yBAAe,QAAQ,eAAe,aAAa,IAAI,GAAG,WAAW,QAAQ,CAAC,CAAC;AAE/E,iBAAO,aAAa,WAAW,QAAQ,CAAC,GAAG,WAAW,WAAW,CAAC,GAAG,WAAW,QAAQ,CAAC,GAAG,WAAW,OAAO,CAAC,CAAC;AAEhH,qBAAW,OAAO,CAAC,EAAE,YAAY,UAAU,IAAI,EAAE;QACrD;AACA,mBAAW,eAAe,KAAK,yBAA0B;AACpD,sBAAqB,sBAAsB,UAAU,UAAU,IAAI,IAAI;QAC5E;AACA,eAAO;MACX,CAAC;IACL,CAAC;EACL;;AAGJ,wBAAwB,IAAI;AAC5B,sBAAsB,MAAM,MAAM,CAAC,WAAW,IAAI,wBAAwB,MAAM,CAAC;",
  "names": []
}
