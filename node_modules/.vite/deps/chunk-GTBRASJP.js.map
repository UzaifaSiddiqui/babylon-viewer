{
  "version": 3,
  "sources": ["../../../dev/loaders/src/glTF/2.0/Extensions/MSFT_sRGBFactors.ts"],
  "sourcesContent": ["import type { Nullable } from \"core/types\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"MSFT_sRGBFactors\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the MSFT_sRGBFactors extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"MSFT_sRGBFactors\"]: {};\r\n    }\r\n}\r\n\r\n/** @internal */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class MSFT_sRGBFactors implements IGLTFLoaderExtension {\r\n    /** @internal */\r\n    public readonly name = NAME;\r\n\r\n    /** @internal */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /** @internal */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /** @internal*/\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtraAsync<boolean>(context, material, this.name, async (extraContext, extra) => {\r\n            if (extra) {\r\n                if (!(babylonMaterial instanceof PBRMaterial)) {\r\n                    throw new Error(`${extraContext}: Material type not supported`);\r\n                }\r\n\r\n                const promise = this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial);\r\n\r\n                const useExactSrgbConversions = babylonMaterial.getScene().getEngine().useExactSrgbConversions;\r\n                if (!babylonMaterial.albedoTexture) {\r\n                    babylonMaterial.albedoColor.toLinearSpaceToRef(babylonMaterial.albedoColor, useExactSrgbConversions);\r\n                }\r\n\r\n                if (!babylonMaterial.reflectivityTexture) {\r\n                    babylonMaterial.reflectivityColor.toLinearSpaceToRef(babylonMaterial.reflectivityColor, useExactSrgbConversions);\r\n                }\r\n\r\n                return await promise;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new MSFT_sRGBFactors(loader));\r\n"],
  "mappings": ";;;;;;;;;;;;AASA,IAAM,OAAO;AAeP,IAAO,mBAAP,MAAuB;;EAUzB,YAAY,QAAkB;AARd,SAAA,OAAO;AASnB,SAAK,UAAU;AACf,SAAK,UAAU,KAAK,QAAQ,gBAAgB,IAAI;EACpD;;EAGO,UAAO;AACT,SAAK,UAAkB;EAC5B;;;EAIO,4BAA4B,SAAiB,UAAqB,iBAAyB;AAC9F,WAAO,WAAW,eAAwB,SAAS,UAAU,KAAK,MAAM,OAAO,cAAc,UAAS;AAClG,UAAI,OAAO;AACP,YAAI,EAAE,2BAA2B,cAAc;AAC3C,gBAAM,IAAI,MAAM,GAAG,YAAY,+BAA+B;QAClE;AAEA,cAAM,UAAU,KAAK,QAAQ,4BAA4B,SAAS,UAAU,eAAe;AAE3F,cAAM,0BAA0B,gBAAgB,SAAQ,EAAG,UAAS,EAAG;AACvE,YAAI,CAAC,gBAAgB,eAAe;AAChC,0BAAgB,YAAY,mBAAmB,gBAAgB,aAAa,uBAAuB;QACvG;AAEA,YAAI,CAAC,gBAAgB,qBAAqB;AACtC,0BAAgB,kBAAkB,mBAAmB,gBAAgB,mBAAmB,uBAAuB;QACnH;AAEA,eAAO,MAAM;MACjB;IACJ,CAAC;EACL;;AAGJ,wBAAwB,IAAI;AAC5B,sBAAsB,MAAM,MAAM,CAAC,WAAW,IAAI,iBAAiB,MAAM,CAAC;",
  "names": []
}
