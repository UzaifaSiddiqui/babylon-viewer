{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/CustomTypes/flowGraphInteger.ts", "../../../dev/core/src/FlowGraph/CustomTypes/flowGraphMatrix.ts", "../../../dev/core/src/FlowGraph/flowGraphRichTypes.ts"],
  "sourcesContent": ["import { RegisterClass } from \"../../Misc/typeStore\";\r\n\r\n/**\r\n * Class that represents an integer value.\r\n */\r\nexport class FlowGraphInteger {\r\n    /**\r\n     * The value of the integer. Its type\r\n     * is a javascript number. Shouldn't be\r\n     * directly modified - it is populated by\r\n     * the constructor.\r\n     */\r\n    readonly value: number;\r\n\r\n    constructor(value: number) {\r\n        this.value = this._toInt(value);\r\n    }\r\n\r\n    /**\r\n     * Converts a float to an integer.\r\n     * @param n the float to convert\r\n     * @returns the result of n | 0 - converting it to a int\r\n     */\r\n    private _toInt(n: number): number {\r\n        return n | 0;\r\n    }\r\n\r\n    /**\r\n     * Adds two integers together.\r\n     * @param other the other integer to add\r\n     * @returns a FlowGraphInteger with the result of the addition\r\n     */\r\n    public add(other: FlowGraphInteger): FlowGraphInteger {\r\n        return new FlowGraphInteger(this.value + other.value);\r\n    }\r\n\r\n    /**\r\n     * Subtracts two integers.\r\n     * @param other the other integer to subtract\r\n     * @returns a FlowGraphInteger with the result of the subtraction\r\n     */\r\n    public subtract(other: FlowGraphInteger): FlowGraphInteger {\r\n        return new FlowGraphInteger(this.value - other.value);\r\n    }\r\n\r\n    /**\r\n     * Multiplies two integers.\r\n     * @param other the other integer to multiply\r\n     * @returns a FlowGraphInteger with the result of the multiplication\r\n     */\r\n    public multiply(other: FlowGraphInteger): FlowGraphInteger {\r\n        return new FlowGraphInteger(Math.imul(this.value, other.value));\r\n    }\r\n\r\n    /**\r\n     * Divides two integers.\r\n     * @param other the other integer to divide\r\n     * @returns a FlowGraphInteger with the result of the division\r\n     */\r\n    public divide(other: FlowGraphInteger): FlowGraphInteger {\r\n        return new FlowGraphInteger(this.value / other.value);\r\n    }\r\n\r\n    /**\r\n     * The class name of this type.\r\n     * @returns\r\n     */\r\n    public getClassName() {\r\n        return FlowGraphInteger.ClassName;\r\n    }\r\n\r\n    /**\r\n     * Compares two integers for equality.\r\n     * @param other the other integer to compare\r\n     * @returns\r\n     */\r\n    public equals(other: FlowGraphInteger): boolean {\r\n        return this.value === other.value;\r\n    }\r\n\r\n    public static ClassName = \"FlowGraphInteger\";\r\n\r\n    /**\r\n     * Parses a FlowGraphInteger from a serialization object.\r\n     * @param value te number to parse\r\n     * @returns\r\n     */\r\n    public static FromValue(value: number): FlowGraphInteger {\r\n        return new FlowGraphInteger(value);\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.value.toString();\r\n    }\r\n}\r\nRegisterClass(\"FlowGraphInteger\", FlowGraphInteger);\r\n", "import { Vector3, Vector2 } from \"core/Maths/math.vector\";\n\n/**\n * Interface representing a generic flow graph matrix.\n */\nexport interface IFlowGraphMatrix<VectorType> {\n    /**\n     * The matrix elements stored in a row-major order.\n     */\n    m: number[];\n\n    /**\n     * Transforms a vector using this matrix.\n     *\n     * @param v - The vector to transform.\n     * @returns The transformed vector.\n     */\n    transformVector(v: VectorType): VectorType;\n\n    /**\n     * Transforms a vector using this matrix and stores the result in a reference vector.\n     *\n     * @param v - The vector to transform.\n     * @param result - The vector to store the result.\n     * @returns The transformed vector.\n     */\n    transformVectorToRef(v: VectorType, result: VectorType): VectorType;\n\n    /**\n     * Returns the matrix elements as an array.\n     *\n     * @returns The matrix elements as an array.\n     */\n    asArray(): number[];\n\n    /**\n     * Copies the matrix elements to an array.\n     *\n     * @param emptyArray - The array to copy the elements to.\n     * @returns The array with the matrix elements.\n     */\n    toArray(emptyArray: number[]): number[];\n\n    /**\n     * Sets the matrix elements from an array.\n     *\n     * @param array - The array containing the matrix elements.\n     * @returns The updated matrix.\n     */\n    fromArray(array: number[]): IFlowGraphMatrix<VectorType>;\n\n    /**\n     * Multiplies this matrix with another matrix and stores the result in a reference matrix.\n     *\n     * @param other - The matrix to multiply with.\n     * @param result - The matrix to store the result.\n     * @returns The result matrix.\n     */\n    multiplyToRef(other: IFlowGraphMatrix<VectorType>, result: IFlowGraphMatrix<VectorType>): IFlowGraphMatrix<VectorType>;\n\n    /**\n     * Multiplies this matrix with another matrix.\n     * To staz conform with the Matrix class, this does B * A\n     *\n     * @param other - The matrix to multiply with.\n     * @returns The result matrix.\n     */\n    multiply(other: IFlowGraphMatrix<VectorType>): IFlowGraphMatrix<VectorType>;\n\n    /**\n     * Divides this matrix by another matrix and stores the result in a reference matrix.\n     *\n     * @param other - The matrix to divide by.\n     * @param result - The matrix to store the result.\n     * @returns The result matrix.\n     */\n    divideToRef(other: IFlowGraphMatrix<VectorType>, result: IFlowGraphMatrix<VectorType>): IFlowGraphMatrix<VectorType>;\n\n    /**\n     * Divides this matrix by another matrix.\n     *\n     * @param other - The matrix to divide by.\n     * @returns The result matrix.\n     */\n    divide(other: IFlowGraphMatrix<VectorType>): IFlowGraphMatrix<VectorType>;\n\n    /**\n     * Adds another matrix to this matrix and stores the result in a reference matrix.\n     *\n     * @param other - The matrix to add.\n     * @param result - The matrix to store the result.\n     * @returns The result matrix.\n     */\n    addToRef(other: IFlowGraphMatrix<VectorType>, result: IFlowGraphMatrix<VectorType>): IFlowGraphMatrix<VectorType>;\n\n    /**\n     * Adds another matrix to this matrix.\n     *\n     * @param other - The matrix to add.\n     * @returns The result matrix.\n     */\n    add(other: IFlowGraphMatrix<VectorType>): IFlowGraphMatrix<VectorType>;\n\n    /**\n     * Subtracts another matrix from this matrix and stores the result in a reference matrix.\n     *\n     * @param other - The matrix to subtract.\n     * @param result - The matrix to store the result.\n     * @returns The result matrix.\n     */\n    subtractToRef(other: IFlowGraphMatrix<VectorType>, result: IFlowGraphMatrix<VectorType>): IFlowGraphMatrix<VectorType>;\n\n    /**\n     * Subtracts another matrix from this matrix.\n     *\n     * @param other - The matrix to subtract.\n     * @returns The result matrix.\n     */\n    subtract(other: IFlowGraphMatrix<VectorType>): IFlowGraphMatrix<VectorType>;\n\n    /**\n     * Transposes this matrix.\n     *\n     * @returns The transposed matrix.\n     */\n    transpose(): IFlowGraphMatrix<VectorType>;\n\n    /**\n     * Computes the determinant of this matrix.\n     *\n     * @returns The determinant of the matrix.\n     */\n    determinant(): number;\n\n    /**\n     * Computes the inverse of this matrix.\n     *\n     * @returns The inverse of the matrix.\n     * @throws Error if the matrix is not invertible.\n     */\n    inverse(): IFlowGraphMatrix<VectorType>;\n\n    /**\n     * Gets the class name of this matrix.\n     *\n     * @returns The class name.\n     */\n    getClassName(): string;\n\n    /**\n     * Checks if this matrix is equal to another matrix within an optional epsilon.\n     *\n     * @param other - The matrix to compare with.\n     * @param epsilon - The optional epsilon for comparison.\n     * @returns True if the matrices are equal, false otherwise.\n     */\n    equals(other: IFlowGraphMatrix<VectorType>, epsilon?: number): boolean;\n}\n\n// Note - the matrix classes are basically column-major, and work similarly to Babylon.js' Matrix class.\n\n/**\n * A 2x2 matrix.\n */\nexport class FlowGraphMatrix2D implements IFlowGraphMatrix<Vector2> {\n    /**\n     * @internal\n     */\n    public _m: number[];\n\n    constructor(m: number[] = [1, 0, 0, 1]) {\n        this._m = m;\n    }\n\n    public get m(): number[] {\n        return this._m;\n    }\n\n    public transformVector(v: Vector2): Vector2 {\n        return this.transformVectorToRef(v, new Vector2());\n    }\n\n    public transformVectorToRef(v: Vector2, result: Vector2): Vector2 {\n        result.x = v.x * this._m[0] + v.y * this._m[1];\n        result.y = v.x * this._m[2] + v.y * this._m[3];\n        return result;\n    }\n\n    public asArray(): number[] {\n        return this.toArray();\n    }\n\n    public toArray(emptyArray: number[] = []): number[] {\n        for (let i = 0; i < 4; i++) {\n            emptyArray[i] = this._m[i];\n        }\n        return emptyArray;\n    }\n\n    public fromArray(array: number[]): FlowGraphMatrix2D {\n        for (let i = 0; i < 4; i++) {\n            this._m[i] = array[i];\n        }\n        return this;\n    }\n\n    public multiplyToRef(other: FlowGraphMatrix2D, result: FlowGraphMatrix2D): FlowGraphMatrix2D {\n        const otherMatrix = other._m;\n        const thisMatrix = this._m;\n        const r = result._m;\n        // other * this\n        r[0] = otherMatrix[0] * thisMatrix[0] + otherMatrix[1] * thisMatrix[2];\n        r[1] = otherMatrix[0] * thisMatrix[1] + otherMatrix[1] * thisMatrix[3];\n        r[2] = otherMatrix[2] * thisMatrix[0] + otherMatrix[3] * thisMatrix[2];\n        r[3] = otherMatrix[2] * thisMatrix[1] + otherMatrix[3] * thisMatrix[3];\n\n        return result;\n    }\n\n    public multiply(other: FlowGraphMatrix2D): FlowGraphMatrix2D {\n        return this.multiplyToRef(other, new FlowGraphMatrix2D());\n    }\n\n    public divideToRef(other: FlowGraphMatrix2D, result: FlowGraphMatrix2D): FlowGraphMatrix2D {\n        const m = this._m;\n        const o = other._m;\n        const r = result._m;\n\n        r[0] = m[0] / o[0];\n        r[1] = m[1] / o[1];\n        r[2] = m[2] / o[2];\n        r[3] = m[3] / o[3];\n\n        return result;\n    }\n\n    public divide(other: FlowGraphMatrix2D): FlowGraphMatrix2D {\n        return this.divideToRef(other, new FlowGraphMatrix2D());\n    }\n\n    public addToRef(other: FlowGraphMatrix2D, result: FlowGraphMatrix2D): FlowGraphMatrix2D {\n        const m = this._m;\n        const o = other.m;\n        const r = result.m;\n\n        r[0] = m[0] + o[0];\n        r[1] = m[1] + o[1];\n        r[2] = m[2] + o[2];\n        r[3] = m[3] + o[3];\n\n        return result;\n    }\n\n    public add(other: FlowGraphMatrix2D): FlowGraphMatrix2D {\n        return this.addToRef(other, new FlowGraphMatrix2D());\n    }\n\n    public subtractToRef(other: FlowGraphMatrix2D, result: FlowGraphMatrix2D): FlowGraphMatrix2D {\n        const m = this._m;\n        const o = other.m;\n        const r = result.m;\n\n        r[0] = m[0] - o[0];\n        r[1] = m[1] - o[1];\n        r[2] = m[2] - o[2];\n        r[3] = m[3] - o[3];\n\n        return result;\n    }\n\n    public subtract(other: FlowGraphMatrix2D): FlowGraphMatrix2D {\n        return this.subtractToRef(other, new FlowGraphMatrix2D());\n    }\n\n    public transpose(): FlowGraphMatrix2D {\n        const m = this._m;\n        return new FlowGraphMatrix2D([m[0], m[2], m[1], m[3]]);\n    }\n\n    public determinant(): number {\n        const m = this._m;\n        return m[0] * m[3] - m[1] * m[2];\n    }\n\n    public inverse(): FlowGraphMatrix2D {\n        const det = this.determinant();\n        if (det === 0) {\n            throw new Error(\"Matrix is not invertible\");\n        }\n        const m = this._m;\n        const invDet = 1 / det;\n        return new FlowGraphMatrix2D([m[3] * invDet, -m[1] * invDet, -m[2] * invDet, m[0] * invDet]);\n    }\n\n    public equals(other: IFlowGraphMatrix<Vector2>, epsilon: number = 0): boolean {\n        const m = this._m;\n        const o = other.m;\n        if (epsilon === 0) {\n            return m[0] === o[0] && m[1] === o[1] && m[2] === o[2] && m[3] === o[3];\n        }\n        return Math.abs(m[0] - o[0]) < epsilon && Math.abs(m[1] - o[1]) < epsilon && Math.abs(m[2] - o[2]) < epsilon && Math.abs(m[3] - o[3]) < epsilon;\n    }\n\n    public getClassName(): string {\n        return \"FlowGraphMatrix2D\";\n    }\n\n    public toString(): string {\n        return `FlowGraphMatrix2D(${this._m.join(\", \")})`;\n    }\n}\n\n/**\n * A 3x3 matrix.\n */\nexport class FlowGraphMatrix3D implements IFlowGraphMatrix<Vector3> {\n    /**\n     * @internal\n     */\n    public _m: number[];\n\n    constructor(array: number[] = [1, 0, 0, 0, 1, 0, 0, 0, 1]) {\n        this._m = array;\n    }\n\n    public get m(): number[] {\n        return this._m;\n    }\n\n    public transformVector(v: Vector3): Vector3 {\n        return this.transformVectorToRef(v, new Vector3());\n    }\n\n    public transformVectorToRef(v: Vector3, result: Vector3): Vector3 {\n        const m = this._m;\n        result.x = v.x * m[0] + v.y * m[1] + v.z * m[2];\n        result.y = v.x * m[3] + v.y * m[4] + v.z * m[5];\n        result.z = v.x * m[6] + v.y * m[7] + v.z * m[8];\n        return result;\n    }\n\n    public multiplyToRef(other: FlowGraphMatrix3D, result: FlowGraphMatrix3D): FlowGraphMatrix3D {\n        const otherMatrix = other._m;\n        const thisMatrix = this._m;\n        const r = result.m;\n\n        r[0] = otherMatrix[0] * thisMatrix[0] + otherMatrix[1] * thisMatrix[3] + otherMatrix[2] * thisMatrix[6];\n        r[1] = otherMatrix[0] * thisMatrix[1] + otherMatrix[1] * thisMatrix[4] + otherMatrix[2] * thisMatrix[7];\n        r[2] = otherMatrix[0] * thisMatrix[2] + otherMatrix[1] * thisMatrix[5] + otherMatrix[2] * thisMatrix[8];\n\n        r[3] = otherMatrix[3] * thisMatrix[0] + otherMatrix[4] * thisMatrix[3] + otherMatrix[5] * thisMatrix[6];\n        r[4] = otherMatrix[3] * thisMatrix[1] + otherMatrix[4] * thisMatrix[4] + otherMatrix[5] * thisMatrix[7];\n        r[5] = otherMatrix[3] * thisMatrix[2] + otherMatrix[4] * thisMatrix[5] + otherMatrix[5] * thisMatrix[8];\n\n        r[6] = otherMatrix[6] * thisMatrix[0] + otherMatrix[7] * thisMatrix[3] + otherMatrix[8] * thisMatrix[6];\n        r[7] = otherMatrix[6] * thisMatrix[1] + otherMatrix[7] * thisMatrix[4] + otherMatrix[8] * thisMatrix[7];\n        r[8] = otherMatrix[6] * thisMatrix[2] + otherMatrix[7] * thisMatrix[5] + otherMatrix[8] * thisMatrix[8];\n\n        return result;\n    }\n\n    public multiply(other: FlowGraphMatrix3D): FlowGraphMatrix3D {\n        return this.multiplyToRef(other, new FlowGraphMatrix3D());\n    }\n\n    public divideToRef(other: FlowGraphMatrix3D, result: FlowGraphMatrix3D): FlowGraphMatrix3D {\n        const m = this._m;\n        const o = other.m;\n        const r = result.m;\n\n        r[0] = m[0] / o[0];\n        r[1] = m[1] / o[1];\n        r[2] = m[2] / o[2];\n        r[3] = m[3] / o[3];\n        r[4] = m[4] / o[4];\n        r[5] = m[5] / o[5];\n        r[6] = m[6] / o[6];\n        r[7] = m[7] / o[7];\n        r[8] = m[8] / o[8];\n\n        return result;\n    }\n\n    public divide(other: FlowGraphMatrix3D): FlowGraphMatrix3D {\n        return this.divideToRef(other, new FlowGraphMatrix3D());\n    }\n\n    public addToRef(other: FlowGraphMatrix3D, result: FlowGraphMatrix3D): FlowGraphMatrix3D {\n        const m = this._m;\n        const o = other.m;\n        const r = result.m;\n\n        r[0] = m[0] + o[0];\n        r[1] = m[1] + o[1];\n        r[2] = m[2] + o[2];\n        r[3] = m[3] + o[3];\n        r[4] = m[4] + o[4];\n        r[5] = m[5] + o[5];\n        r[6] = m[6] + o[6];\n        r[7] = m[7] + o[7];\n        r[8] = m[8] + o[8];\n\n        return result;\n    }\n\n    public add(other: FlowGraphMatrix3D): FlowGraphMatrix3D {\n        return this.addToRef(other, new FlowGraphMatrix3D());\n    }\n\n    public subtractToRef(other: FlowGraphMatrix3D, result: FlowGraphMatrix3D): FlowGraphMatrix3D {\n        const m = this._m;\n        const o = other.m;\n        const r = result.m;\n\n        r[0] = m[0] - o[0];\n        r[1] = m[1] - o[1];\n        r[2] = m[2] - o[2];\n        r[3] = m[3] - o[3];\n        r[4] = m[4] - o[4];\n        r[5] = m[5] - o[5];\n        r[6] = m[6] - o[6];\n        r[7] = m[7] - o[7];\n        r[8] = m[8] - o[8];\n\n        return result;\n    }\n\n    public subtract(other: FlowGraphMatrix3D): FlowGraphMatrix3D {\n        return this.subtractToRef(other, new FlowGraphMatrix3D());\n    }\n\n    public toArray(emptyArray: number[] = []): number[] {\n        for (let i = 0; i < 9; i++) {\n            emptyArray[i] = this._m[i];\n        }\n        return emptyArray;\n    }\n\n    public asArray(): number[] {\n        return this.toArray();\n    }\n\n    public fromArray(array: number[]): FlowGraphMatrix3D {\n        for (let i = 0; i < 9; i++) {\n            this._m[i] = array[i];\n        }\n        return this;\n    }\n\n    public transpose(): FlowGraphMatrix3D {\n        const m = this._m;\n        return new FlowGraphMatrix3D([m[0], m[3], m[6], m[1], m[4], m[7], m[2], m[5], m[8]]);\n    }\n\n    public determinant(): number {\n        const m = this._m;\n        return m[0] * (m[4] * m[8] - m[5] * m[7]) - m[1] * (m[3] * m[8] - m[5] * m[6]) + m[2] * (m[3] * m[7] - m[4] * m[6]);\n    }\n\n    public inverse(): FlowGraphMatrix3D {\n        const det = this.determinant();\n        if (det === 0) {\n            throw new Error(\"Matrix is not invertible\");\n        }\n        const m = this._m;\n        const invDet = 1 / det;\n        return new FlowGraphMatrix3D([\n            (m[4] * m[8] - m[5] * m[7]) * invDet,\n            (m[2] * m[7] - m[1] * m[8]) * invDet,\n            (m[1] * m[5] - m[2] * m[4]) * invDet,\n            (m[5] * m[6] - m[3] * m[8]) * invDet,\n            (m[0] * m[8] - m[2] * m[6]) * invDet,\n            (m[2] * m[3] - m[0] * m[5]) * invDet,\n            (m[3] * m[7] - m[4] * m[6]) * invDet,\n            (m[1] * m[6] - m[0] * m[7]) * invDet,\n            (m[0] * m[4] - m[1] * m[3]) * invDet,\n        ]);\n    }\n\n    public equals(other: IFlowGraphMatrix<Vector3>, epsilon: number = 0): boolean {\n        const m = this._m;\n        const o = other.m;\n        // performance shortcut\n        if (epsilon === 0) {\n            return m[0] === o[0] && m[1] === o[1] && m[2] === o[2] && m[3] === o[3] && m[4] === o[4] && m[5] === o[5] && m[6] === o[6] && m[7] === o[7] && m[8] === o[8];\n        }\n        return (\n            Math.abs(m[0] - o[0]) < epsilon &&\n            Math.abs(m[1] - o[1]) < epsilon &&\n            Math.abs(m[2] - o[2]) < epsilon &&\n            Math.abs(m[3] - o[3]) < epsilon &&\n            Math.abs(m[4] - o[4]) < epsilon &&\n            Math.abs(m[5] - o[5]) < epsilon &&\n            Math.abs(m[6] - o[6]) < epsilon &&\n            Math.abs(m[7] - o[7]) < epsilon &&\n            Math.abs(m[8] - o[8]) < epsilon\n        );\n    }\n\n    public getClassName(): string {\n        return \"FlowGraphMatrix3D\";\n    }\n\n    public toString(): string {\n        return `FlowGraphMatrix3D(${this._m.join(\", \")})`;\n    }\n}\n", "import { Vector2, Vector3, Vector4, Matrix, Quaternion } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { FlowGraphInteger } from \"./CustomTypes/flowGraphInteger\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { FlowGraphMatrix2D, FlowGraphMatrix3D } from \"./CustomTypes/flowGraphMatrix\";\r\n\r\n/**\r\n * The types supported by the flow graph.\r\n */\r\nexport const enum FlowGraphTypes {\r\n    Any = \"any\",\r\n    String = \"string\",\r\n    Number = \"number\",\r\n    Boolean = \"boolean\",\r\n    Object = \"object\",\r\n    Integer = \"FlowGraphInteger\",\r\n    Vector2 = \"Vector2\",\r\n    Vector3 = \"Vector3\",\r\n    Vector4 = \"Vector4\",\r\n    Quaternion = \"Quaternion\",\r\n    Matrix = \"Matrix\",\r\n    Matrix2D = \"Matrix2D\",\r\n    Matrix3D = \"Matrix3D\",\r\n    Color3 = \"Color3\",\r\n    Color4 = \"Color4\",\r\n}\r\n\r\n/**\r\n * A rich type represents extra information about a type,\r\n * such as its name and a default value constructor.\r\n */\r\nexport class RichType<T> {\r\n    /**\r\n     * A function that can be used to transform a value of any type into a value of this rich type.\r\n     * This can be used, for example, between vector4 and quaternion.\r\n     */\r\n    public typeTransformer: (value: any) => T;\r\n\r\n    constructor(\r\n        /**\r\n         * The name given to the type.\r\n         */\r\n        public typeName: string,\r\n        /**\r\n         * The default value of the type.\r\n         */\r\n        public defaultValue: T,\r\n\r\n        /**\r\n         * [-1] The ANIMATIONTYPE of the type, if available\r\n         */\r\n        public animationType: number = -1\r\n    ) {}\r\n\r\n    /**\r\n     * Serializes this rich type into a serialization object.\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    serialize(serializationObject: any) {\r\n        serializationObject.typeName = this.typeName;\r\n        serializationObject.defaultValue = this.defaultValue;\r\n    }\r\n}\r\n\r\nexport const RichTypeAny: RichType<any> = new RichType(FlowGraphTypes.Any, undefined);\r\n\r\nexport const RichTypeString: RichType<string> = new RichType(FlowGraphTypes.String, \"\");\r\n\r\nexport const RichTypeNumber: RichType<number> = new RichType(FlowGraphTypes.Number, 0, Constants.ANIMATIONTYPE_FLOAT);\r\n\r\nexport const RichTypeBoolean: RichType<boolean> = new RichType(FlowGraphTypes.Boolean, false);\r\n\r\nexport const RichTypeVector2: RichType<Vector2> = new RichType(FlowGraphTypes.Vector2, Vector2.Zero(), Constants.ANIMATIONTYPE_VECTOR2);\r\n\r\nexport const RichTypeVector3: RichType<Vector3> = new RichType(FlowGraphTypes.Vector3, Vector3.Zero(), Constants.ANIMATIONTYPE_VECTOR3);\r\n\r\nexport const RichTypeVector4: RichType<Vector4> = new RichType(FlowGraphTypes.Vector4, Vector4.Zero());\r\n\r\nexport const RichTypeMatrix: RichType<Matrix> = new RichType(FlowGraphTypes.Matrix, Matrix.Identity(), Constants.ANIMATIONTYPE_MATRIX);\r\n\r\nexport const RichTypeMatrix2D: RichType<FlowGraphMatrix2D> = new RichType(FlowGraphTypes.Matrix2D, new FlowGraphMatrix2D());\r\n\r\nexport const RichTypeMatrix3D: RichType<FlowGraphMatrix3D> = new RichType(FlowGraphTypes.Matrix3D, new FlowGraphMatrix3D());\r\n\r\nexport const RichTypeColor3: RichType<Color3> = new RichType(FlowGraphTypes.Color3, Color3.Black(), Constants.ANIMATIONTYPE_COLOR3);\r\n\r\nexport const RichTypeColor4: RichType<Color4> = new RichType(FlowGraphTypes.Color4, new Color4(0, 0, 0, 0), Constants.ANIMATIONTYPE_COLOR4);\r\n\r\nexport const RichTypeQuaternion: RichType<Quaternion> = new RichType(FlowGraphTypes.Quaternion, Quaternion.Identity(), Constants.ANIMATIONTYPE_QUATERNION);\r\nRichTypeQuaternion.typeTransformer = (value: any) => {\r\n    if (value.getClassName) {\r\n        if (value.getClassName() === FlowGraphTypes.Vector4) {\r\n            return Quaternion.FromArray(value.asArray());\r\n        } else if (value.getClassName() === FlowGraphTypes.Vector3) {\r\n            return Quaternion.FromEulerVector(value);\r\n        } else if (value.getClassName() === FlowGraphTypes.Matrix) {\r\n            return Quaternion.FromRotationMatrix(value);\r\n        }\r\n    }\r\n    return value;\r\n};\r\nexport const RichTypeFlowGraphInteger: RichType<FlowGraphInteger> = new RichType(FlowGraphTypes.Integer, new FlowGraphInteger(0), Constants.ANIMATIONTYPE_FLOAT);\r\n\r\n/**\r\n * Given a value, try to deduce its rich type.\r\n * @param value the value to deduce the rich type from\r\n * @returns the value's rich type, or RichTypeAny if the type could not be deduced.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function getRichTypeFromValue<T>(value: T): RichType<T> {\r\n    const anyValue = value as any;\r\n    switch (typeof value) {\r\n        case FlowGraphTypes.String:\r\n            return RichTypeString as RichType<T>;\r\n        case FlowGraphTypes.Number:\r\n            return RichTypeNumber as RichType<T>;\r\n        case FlowGraphTypes.Boolean:\r\n            return RichTypeBoolean as RichType<T>;\r\n        case FlowGraphTypes.Object:\r\n            if (anyValue.getClassName) {\r\n                switch (anyValue.getClassName() as string) {\r\n                    case FlowGraphTypes.Vector2:\r\n                        return RichTypeVector2 as RichType<T>;\r\n                    case FlowGraphTypes.Vector3:\r\n                        return RichTypeVector3 as RichType<T>;\r\n                    case FlowGraphTypes.Vector4:\r\n                        return RichTypeVector4 as RichType<T>;\r\n                    case FlowGraphTypes.Matrix:\r\n                        return RichTypeMatrix as RichType<T>;\r\n                    case FlowGraphTypes.Color3:\r\n                        return RichTypeColor3 as RichType<T>;\r\n                    case FlowGraphTypes.Color4:\r\n                        return RichTypeColor4 as RichType<T>;\r\n                    case FlowGraphTypes.Quaternion:\r\n                        return RichTypeQuaternion as RichType<T>;\r\n                    case FlowGraphTypes.Integer:\r\n                        return RichTypeFlowGraphInteger as RichType<T>;\r\n                    case FlowGraphTypes.Matrix2D:\r\n                        return RichTypeMatrix2D as RichType<T>;\r\n                    case FlowGraphTypes.Matrix3D:\r\n                        return RichTypeMatrix3D as RichType<T>;\r\n                }\r\n            }\r\n            return RichTypeAny as RichType<T>;\r\n        default:\r\n            return RichTypeAny as RichType<T>;\r\n    }\r\n}\r\n\r\n/**\r\n * Given a flow graph type, return the rich type that corresponds to it.\r\n * @param flowGraphType the flow graph type\r\n * @returns the rich type that corresponds to the flow graph type\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function getRichTypeByFlowGraphType(flowGraphType?: string): RichType<any> {\r\n    switch (flowGraphType) {\r\n        case FlowGraphTypes.String:\r\n            return RichTypeString;\r\n        case FlowGraphTypes.Number:\r\n            return RichTypeNumber;\r\n        case FlowGraphTypes.Boolean:\r\n            return RichTypeBoolean;\r\n        case FlowGraphTypes.Vector2:\r\n            return RichTypeVector2;\r\n        case FlowGraphTypes.Vector3:\r\n            return RichTypeVector3;\r\n        case FlowGraphTypes.Vector4:\r\n            return RichTypeVector4;\r\n        case FlowGraphTypes.Matrix:\r\n            return RichTypeMatrix;\r\n        case FlowGraphTypes.Color3:\r\n            return RichTypeColor3;\r\n        case FlowGraphTypes.Color4:\r\n            return RichTypeColor4;\r\n        case FlowGraphTypes.Quaternion:\r\n            return RichTypeQuaternion;\r\n        case FlowGraphTypes.Integer:\r\n            return RichTypeFlowGraphInteger;\r\n        case FlowGraphTypes.Matrix2D:\r\n            return RichTypeMatrix2D;\r\n        case FlowGraphTypes.Matrix3D:\r\n            return RichTypeMatrix3D;\r\n        default:\r\n            return RichTypeAny;\r\n    }\r\n}\r\n\r\n/**\r\n * get the animation type for a given flow graph type\r\n * @param flowGraphType the flow graph type\r\n * @returns the animation type for this flow graph type\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function getAnimationTypeByFlowGraphType(flowGraphType: FlowGraphTypes): number {\r\n    switch (flowGraphType) {\r\n        case FlowGraphTypes.Number:\r\n            return Constants.ANIMATIONTYPE_FLOAT;\r\n        case FlowGraphTypes.Vector2:\r\n            return Constants.ANIMATIONTYPE_VECTOR2;\r\n        case FlowGraphTypes.Vector3:\r\n            return Constants.ANIMATIONTYPE_VECTOR3;\r\n        case FlowGraphTypes.Matrix:\r\n            return Constants.ANIMATIONTYPE_MATRIX;\r\n        case FlowGraphTypes.Color3:\r\n            return Constants.ANIMATIONTYPE_COLOR3;\r\n        case FlowGraphTypes.Color4:\r\n            return Constants.ANIMATIONTYPE_COLOR4;\r\n        case FlowGraphTypes.Quaternion:\r\n            return Constants.ANIMATIONTYPE_QUATERNION;\r\n        default:\r\n            return Constants.ANIMATIONTYPE_FLOAT;\r\n    }\r\n}\r\n\r\n/**\r\n * Given an animation type, return the rich type that corresponds to it.\r\n * @param animationType the animation type\r\n * @returns the rich type that corresponds to the animation type\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function getRichTypeByAnimationType(animationType: number): RichType<any> {\r\n    switch (animationType) {\r\n        case Constants.ANIMATIONTYPE_FLOAT:\r\n            return RichTypeNumber;\r\n        case Constants.ANIMATIONTYPE_VECTOR2:\r\n            return RichTypeVector2;\r\n        case Constants.ANIMATIONTYPE_VECTOR3:\r\n            return RichTypeVector3;\r\n        case Constants.ANIMATIONTYPE_MATRIX:\r\n            return RichTypeMatrix;\r\n        case Constants.ANIMATIONTYPE_COLOR3:\r\n            return RichTypeColor3;\r\n        case Constants.ANIMATIONTYPE_COLOR4:\r\n            return RichTypeColor4;\r\n        case Constants.ANIMATIONTYPE_QUATERNION:\r\n            return RichTypeQuaternion;\r\n        default:\r\n            return RichTypeAny;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["FlowGraphTypes"]
}
