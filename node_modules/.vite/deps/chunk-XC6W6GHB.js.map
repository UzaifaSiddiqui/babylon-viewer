{
  "version": 3,
  "sources": ["../../../dev/loaders/src/glTF/2.0/Extensions/KHR_animation_pointer.data.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_animation_pointer.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/naming-convention */\r\n\r\nimport { Animation } from \"core/Animations/animation\";\r\nimport type { ICamera, IKHRLightsPunctual_Light, IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport { AnimationPropertyInfo } from \"../glTFLoaderAnimation\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { SetInterpolationForKey } from \"./objectModelMapping\";\r\n\r\nfunction getColor3(_target: any, source: Float32Array, offset: number, scale: number): Color3 {\r\n    return Color3.FromArray(source, offset).scale(scale);\r\n}\r\n\r\nfunction getAlpha(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return source[offset + 3] * scale;\r\n}\r\n\r\nfunction getFloat(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return source[offset] * scale;\r\n}\r\n\r\nfunction getMinusFloat(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return -source[offset] * scale;\r\n}\r\n\r\nfunction getNextFloat(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return source[offset + 1] * scale;\r\n}\r\n\r\nfunction getFloatBy2(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return source[offset] * scale * 2;\r\n}\r\n\r\nfunction getTextureTransformTree(textureName: string) {\r\n    return {\r\n        scale: [\r\n            new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.uScale`, getFloat, () => 2),\r\n            new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.vScale`, getNextFloat, () => 2),\r\n        ],\r\n        offset: [\r\n            new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.uOffset`, getFloat, () => 2),\r\n            new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.vOffset`, getNextFloat, () => 2),\r\n        ],\r\n        rotation: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.wAng`, getMinusFloat, () => 1)],\r\n    };\r\n}\r\n\r\nclass CameraAnimationPropertyInfo extends AnimationPropertyInfo {\r\n    /** @internal */\r\n    public buildAnimations(target: ICamera, name: string, fps: number, keys: any[]) {\r\n        return [{ babylonAnimatable: target._babylonCamera!, babylonAnimation: this._buildAnimation(name, fps, keys) }];\r\n    }\r\n}\r\n\r\nclass MaterialAnimationPropertyInfo extends AnimationPropertyInfo {\r\n    /** @internal */\r\n    public buildAnimations(target: IMaterial, name: string, fps: number, keys: any[]) {\r\n        const babylonAnimations: { babylonAnimatable: IAnimatable; babylonAnimation: Animation }[] = [];\r\n        for (const fillMode in target._data!) {\r\n            babylonAnimations.push({\r\n                babylonAnimatable: target._data[fillMode].babylonMaterial,\r\n                babylonAnimation: this._buildAnimation(name, fps, keys),\r\n            });\r\n        }\r\n        return babylonAnimations;\r\n    }\r\n}\r\n\r\nclass LightAnimationPropertyInfo extends AnimationPropertyInfo {\r\n    /** @internal */\r\n    public buildAnimations(target: IKHRLightsPunctual_Light, name: string, fps: number, keys: any[]) {\r\n        return [{ babylonAnimatable: target._babylonLight!, babylonAnimation: this._buildAnimation(name, fps, keys) }];\r\n    }\r\n}\r\n\r\nSetInterpolationForKey(\"/cameras/{}/orthographic/xmag\", [\r\n    new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoLeft\", getMinusFloat, () => 1),\r\n    new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoRight\", getNextFloat, () => 1),\r\n]);\r\n\r\nSetInterpolationForKey(\"/cameras/{}/orthographic/ymag\", [\r\n    new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoBottom\", getMinusFloat, () => 1),\r\n    new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoTop\", getNextFloat, () => 1),\r\n]);\r\n\r\nSetInterpolationForKey(\"/cameras/{}/orthographic/zfar\", [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"maxZ\", getFloat, () => 1)]);\r\nSetInterpolationForKey(\"/cameras/{}/orthographic/znear\", [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"minZ\", getFloat, () => 1)]);\r\n\r\nSetInterpolationForKey(\"/cameras/{}/perspective/yfov\", [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"fov\", getFloat, () => 1)]);\r\nSetInterpolationForKey(\"/cameras/{}/perspective/zfar\", [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"maxZ\", getFloat, () => 1)]);\r\nSetInterpolationForKey(\"/cameras/{}/perspective/znear\", [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"minZ\", getFloat, () => 1)]);\r\n\r\n// add interpolation to the materials mapping\r\nSetInterpolationForKey(\"/materials/{}/pbrMetallicRoughness/baseColorFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"albedoColor\", getColor3, () => 4),\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"alpha\", getAlpha, () => 4),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/pbrMetallicRoughness/metallicFactor\", [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"metallic\", getFloat, () => 1)]);\r\nSetInterpolationForKey(\"/materials/{}/pbrMetallicRoughness/metallicFactor\", [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"roughness\", getFloat, () => 1)]);\r\nconst baseColorTextureInterpolation = getTextureTransformTree(\"albedoTexture\");\r\nSetInterpolationForKey(\"/materials/{}/pbrMetallicRoughness/baseColorTexture/extensions/KHR_texture_transform/scale\", baseColorTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/pbrMetallicRoughness/baseColorTexture/extensions/KHR_texture_transform/offset\", baseColorTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/pbrMetallicRoughness/baseColorTexture/extensions/KHR_texture_transform/rotation\", baseColorTextureInterpolation.rotation);\r\n\r\nconst metallicRoughnessTextureInterpolation = getTextureTransformTree(\"metallicTexture\");\r\nSetInterpolationForKey(\"//materials/{}/pbrMetallicRoughness/metallicRoughnessTexture/scale\", metallicRoughnessTextureInterpolation.scale);\r\nSetInterpolationForKey(\"//materials/{}/pbrMetallicRoughness/metallicRoughnessTexture/offset\", metallicRoughnessTextureInterpolation.offset);\r\nSetInterpolationForKey(\"//materials/{}/pbrMetallicRoughness/metallicRoughnessTexture/rotation\", metallicRoughnessTextureInterpolation.rotation);\r\n\r\nSetInterpolationForKey(\"/materials/{}/emissiveFactor\", [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"emissiveColor\", getColor3, () => 3)]);\r\nconst normalTextureInterpolation = getTextureTransformTree(\"bumpTexture\");\r\nSetInterpolationForKey(\"/materials/{}/normalTexture/scale\", [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"bumpTexture.level\", getFloat, () => 1)]);\r\n\r\nSetInterpolationForKey(\"/materials/{}/normalTexture/extensions/KHR_texture_transform/scale\", normalTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/normalTexture/extensions/KHR_texture_transform/offset\", normalTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/normalTexture/extensions/KHR_texture_transform/rotation\", normalTextureInterpolation.rotation);\r\n\r\nSetInterpolationForKey(\"/materials/{}/occlusionTexture/strength\", [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"ambientTextureStrength\", getFloat, () => 1)]);\r\n\r\nconst occlusionTextureInterpolation = getTextureTransformTree(\"ambientTexture\");\r\nSetInterpolationForKey(\"/materials/{}/occlusionTexture/extensions/KHR_texture_transform/scale\", occlusionTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/occlusionTexture/extensions/KHR_texture_transform/offset\", occlusionTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/occlusionTexture/extensions/KHR_texture_transform/rotation\", occlusionTextureInterpolation.rotation);\r\nconst emissiveTextureInterpolation = getTextureTransformTree(\"emissiveTexture\");\r\nSetInterpolationForKey(\"/materials/{}/emissiveTexture/extensions/KHR_texture_transform/scale\", emissiveTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/emissiveTexture/extensions/KHR_texture_transform/offset\", emissiveTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/emissiveTexture/extensions/KHR_texture_transform/rotation\", emissiveTextureInterpolation.rotation);\r\n\r\n// materials extensions\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_anisotropy/anisotropyStrength\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"anisotropy.intensity\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_anisotropy/anisotropyRotation\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"anisotropy.angle\", getFloat, () => 1),\r\n]);\r\nconst anisotropyTextureInterpolation = getTextureTransformTree(\"anisotropy.texture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_anisotropy/anisotropyTexture/extensions/KHR_texture_transform/scale\", anisotropyTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_anisotropy/anisotropyTexture/extensions/KHR_texture_transform/offset\", anisotropyTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_anisotropy/anisotropyTexture/extensions/KHR_texture_transform/rotation\", anisotropyTextureInterpolation.rotation);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"clearCoat.intensity\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatRoughnessFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"clearCoat.roughness\", getFloat, () => 1),\r\n]);\r\nconst clearcoatTextureInterpolation = getTextureTransformTree(\"clearCoat.texture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatTexture/extensions/KHR_texture_transform/scale\", clearcoatTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatTexture/extensions/KHR_texture_transform/offset\", clearcoatTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatTexture/extensions/KHR_texture_transform/rotation\", clearcoatTextureInterpolation.rotation);\r\nconst clearcoatNormalTextureInterpolation = getTextureTransformTree(\"clearCoat.bumpTexture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatNormalTexture/scale\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"clearCoat.bumpTexture.level\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatNormalTexture/extensions/KHR_texture_transform/scale\", clearcoatNormalTextureInterpolation.scale);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatNormalTexture/extensions/KHR_texture_transform/offset\",\r\n    clearcoatNormalTextureInterpolation.offset\r\n);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatNormalTexture/extensions/KHR_texture_transform/rotation\",\r\n    clearcoatNormalTextureInterpolation.rotation\r\n);\r\nconst clearcoatRoughnessTextureInterpolation = getTextureTransformTree(\"clearCoat.textureRoughness\");\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatRoughnessTexture/extensions/KHR_texture_transform/scale\",\r\n    clearcoatRoughnessTextureInterpolation.scale\r\n);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatRoughnessTexture/extensions/KHR_texture_transform/offset\",\r\n    clearcoatRoughnessTextureInterpolation.offset\r\n);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatRoughnessTexture/extensions/KHR_texture_transform/rotation\",\r\n    clearcoatRoughnessTextureInterpolation.rotation\r\n);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_dispersion/dispersionFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.dispersion\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_emissive_strength/emissiveStrength\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"emissiveIntensity\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_ior/ior\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"indexOfRefraction\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.intensity\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceIor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.indexOfRefraction\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceThicknessMinimum\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.minimumThickness\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceThicknessMaximum\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.maximumThickness\", getFloat, () => 1),\r\n]);\r\n\r\nconst iridescenceTextureInterpolation = getTextureTransformTree(\"iridescence.texture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceTexture/extensions/KHR_texture_transform/scale\", iridescenceTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceTexture/extensions/KHR_texture_transform/offset\", iridescenceTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceTexture/extensions/KHR_texture_transform/rotation\", iridescenceTextureInterpolation.rotation);\r\n\r\nconst iridescenceThicknessTextureInterpolation = getTextureTransformTree(\"iridescence.thicknessTexture\");\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_iridescence/iridescenceThicknessTexture/extensions/KHR_texture_transform/scale\",\r\n    iridescenceThicknessTextureInterpolation.scale\r\n);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_iridescence/iridescenceThicknessTexture/extensions/KHR_texture_transform/offset\",\r\n    iridescenceThicknessTextureInterpolation.offset\r\n);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_iridescence/iridescenceThicknessTexture/extensions/KHR_texture_transform/rotation\",\r\n    iridescenceThicknessTextureInterpolation.rotation\r\n);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenColorFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"sheen.color\", getColor3, () => 3),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenRoughnessFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"sheen.roughness\", getFloat, () => 1),\r\n]);\r\n\r\nconst sheenTextureInterpolation = getTextureTransformTree(\"sheen.texture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenColorTexture/extensions/KHR_texture_transform/scale\", sheenTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenColorTexture/extensions/KHR_texture_transform/offset\", sheenTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenColorTexture/extensions/KHR_texture_transform/rotation\", sheenTextureInterpolation.rotation);\r\n\r\nconst sheenRoughnessTextureInterpolation = getTextureTransformTree(\"sheen.textureRoughness\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenRoughnessTexture/extensions/KHR_texture_transform/scale\", sheenRoughnessTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenRoughnessTexture/extensions/KHR_texture_transform/offset\", sheenRoughnessTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenRoughnessTexture/extensions/KHR_texture_transform/rotation\", sheenRoughnessTextureInterpolation.rotation);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"metallicF0Factor\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularColorFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"metallicReflectanceColor\", getColor3, () => 3),\r\n]);\r\n\r\nconst specularTextureInterpolation = getTextureTransformTree(\"metallicReflectanceTexture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularTexture/extensions/KHR_texture_transform/scale\", specularTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularTexture/extensions/KHR_texture_transform/offset\", specularTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularTexture/extensions/KHR_texture_transform/rotation\", specularTextureInterpolation.rotation);\r\nconst specularColorTextureInterpolation = getTextureTransformTree(\"reflectanceTexture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularColorTexture/extensions/KHR_texture_transform/scale\", specularColorTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularColorTexture/extensions/KHR_texture_transform/offset\", specularColorTextureInterpolation.offset);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_specular/specularColorTexture/extensions/KHR_texture_transform/rotation\",\r\n    specularColorTextureInterpolation.rotation\r\n);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_transmission/transmissionFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.refractionIntensity\", getFloat, () => 1),\r\n]);\r\nconst transmissionTextureInterpolation = getTextureTransformTree(\"subSurface.refractionIntensityTexture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_transmission/transmissionTexture/extensions/KHR_texture_transform/scale\", transmissionTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_transmission/transmissionTexture/extensions/KHR_texture_transform/offset\", transmissionTextureInterpolation.offset);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_transmission/transmissionTexture/extensions/KHR_texture_transform/rotation\",\r\n    transmissionTextureInterpolation.rotation\r\n);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_volume/attenuationColor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"subSurface.tintColor\", getColor3, () => 3),\r\n]);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_volume/attenuationDistance\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.tintColorAtDistance\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_volume/thicknessFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.maximumThickness\", getFloat, () => 1),\r\n]);\r\n\r\nconst thicknessTextureInterpolation = getTextureTransformTree(\"subSurface.thicknessTexture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_volume/thicknessTexture/extensions/KHR_texture_transform/scale\", thicknessTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_volume/thicknessTexture/extensions/KHR_texture_transform/offset\", thicknessTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_volume/thicknessTexture/extensions/KHR_texture_transform/rotation\", thicknessTextureInterpolation.rotation);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.translucencyIntensity\", getFloat, () => 1),\r\n]);\r\n\r\nconst diffuseTransmissionTextureInterpolation = getTextureTransformTree(\"subSurface.translucencyIntensityTexture\");\r\nSetInterpolationForKey(\r\n    \"materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionTexture/extensions/KHR_texture_transform/scale\",\r\n    diffuseTransmissionTextureInterpolation.scale\r\n);\r\nSetInterpolationForKey(\r\n    \"materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionTexture/extensions/KHR_texture_transform/offset\",\r\n    diffuseTransmissionTextureInterpolation.offset\r\n);\r\nSetInterpolationForKey(\r\n    \"materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionTexture/extensions/KHR_texture_transform/rotation\",\r\n    diffuseTransmissionTextureInterpolation.rotation\r\n);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionColorFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"subSurface.translucencyColor\", getColor3, () => 3),\r\n]);\r\n\r\nconst diffuseTransmissionColorTextureInterpolation = getTextureTransformTree(\"subSurface.translucencyColorTexture\");\r\nSetInterpolationForKey(\r\n    \"materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionColorTexture/extensions/KHR_texture_transform/scale\",\r\n    diffuseTransmissionColorTextureInterpolation.scale\r\n);\r\nSetInterpolationForKey(\r\n    \"materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionColorTexture/extensions/KHR_texture_transform/offset\",\r\n    diffuseTransmissionColorTextureInterpolation.offset\r\n);\r\nSetInterpolationForKey(\r\n    \"materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionColorTexture/extensions/KHR_texture_transform/rotation\",\r\n    diffuseTransmissionColorTextureInterpolation.rotation\r\n);\r\n\r\nSetInterpolationForKey(\"/extensions/KHR_lights_punctual/lights/{}/color\", [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"diffuse\", getColor3, () => 3)]);\r\nSetInterpolationForKey(\"/extensions/KHR_lights_punctual/lights/{}/intensity\", [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"intensity\", getFloat, () => 1)]);\r\nSetInterpolationForKey(\"/extensions/KHR_lights_punctual/lights/{}/range\", [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"range\", getFloat, () => 1)]);\r\nSetInterpolationForKey(\"/extensions/KHR_lights_punctual/lights/{}/spot/innerConeAngle\", [\r\n    new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"innerAngle\", getFloatBy2, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/extensions/KHR_lights_punctual/lights/{}/spot/outerConeAngle\", [\r\n    new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"angle\", getFloatBy2, () => 1),\r\n]);\r\n\r\nSetInterpolationForKey(\"/nodes/{}/extensions/EXT_lights_ies/color\", [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"diffuse\", getColor3, () => 3)]);\r\nSetInterpolationForKey(\"/nodes/{}/extensions/EXT_lights_ies/multiplier\", [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"intensity\", getFloat, () => 1)]);\r\n", "import type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport type { GLTFLoader } from \"../glTFLoader\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Animation } from \"core/Animations/animation\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IAnimation, IAnimationChannel } from \"../glTFLoaderInterfaces\";\r\nimport type { IKHRAnimationPointer } from \"babylonjs-gltf2interface\";\r\nimport { AnimationChannelTargetPath } from \"babylonjs-gltf2interface\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport type { GLTFPathToObjectConverter } from \"./gltfPathToObjectConverter\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\nimport { GetPathToObjectConverter } from \"./objectModelMapping\";\r\nimport \"./KHR_animation_pointer.data\";\r\n\r\nconst NAME = \"KHR_animation_pointer\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_animation_pointer extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_animation_pointer\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification PR](https://github.com/KhronosGroup/glTF/pull/2147)\r\n * !!! Experimental Extension Subject to Changes !!!\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_animation_pointer implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    private _loader: GLTFLoader;\r\n    private _pathToObjectConverter?: GLTFPathToObjectConverter<any, any, any>;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this._pathToObjectConverter = GetPathToObjectConverter(this._loader.gltf);\r\n    }\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public get enabled(): boolean {\r\n        return this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n        delete this._pathToObjectConverter; // GC\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF animation channel.\r\n     * @param context The context when loading the asset\r\n     * @param animationContext The context of the animation when loading the asset\r\n     * @param animation The glTF animation property\r\n     * @param channel The glTF animation channel property\r\n     * @param onLoad Called for each animation loaded\r\n     * @returns A void promise that resolves when the load is complete or null if not handled\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public _loadAnimationChannelAsync(\r\n        context: string,\r\n        animationContext: string,\r\n        animation: IAnimation,\r\n        channel: IAnimationChannel,\r\n        onLoad: (babylonAnimatable: IAnimatable, babylonAnimation: Animation) => void\r\n    ): Nullable<Promise<void>> {\r\n        const extension = channel.target.extensions?.KHR_animation_pointer as IKHRAnimationPointer;\r\n        if (!extension || !this._pathToObjectConverter) {\r\n            return null;\r\n        }\r\n\r\n        if (channel.target.path !== AnimationChannelTargetPath.POINTER) {\r\n            Logger.Warn(`${context}/target/path: Value (${channel.target.path}) must be (${AnimationChannelTargetPath.POINTER}) when using the ${this.name} extension`);\r\n        }\r\n\r\n        if (channel.target.node != undefined) {\r\n            Logger.Warn(`${context}/target/node: Value (${channel.target.node}) must not be present when using the ${this.name} extension`);\r\n        }\r\n\r\n        const extensionContext = `${context}/extensions/${this.name}`;\r\n\r\n        const pointer = extension.pointer;\r\n        if (!pointer) {\r\n            throw new Error(`${extensionContext}: Pointer is missing`);\r\n        }\r\n\r\n        try {\r\n            const obj = this._pathToObjectConverter.convert(pointer);\r\n            if (!obj.info.interpolation) {\r\n                throw new Error(`${extensionContext}/pointer: Interpolation is missing`);\r\n            }\r\n            return this._loader._loadAnimationChannelFromTargetInfoAsync(\r\n                context,\r\n                animationContext,\r\n                animation,\r\n                channel,\r\n                {\r\n                    object: obj.object,\r\n                    info: obj.info.interpolation,\r\n                },\r\n                onLoad\r\n            );\r\n        } catch (e) {\r\n            Logger.Warn(`${extensionContext}/pointer: Invalid pointer (${pointer}) skipped`);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_animation_pointer(loader));\r\n"],
  "mappings": "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",
  "names": []
}
