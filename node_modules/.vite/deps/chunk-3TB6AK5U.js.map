{
  "version": 3,
  "sources": ["../../../dev/loaders/src/glTF/glTFValidation.ts", "../../../dev/loaders/src/glTF/glTFFileLoader.ts", "../../../dev/loaders/src/glTF/2.0/glTFLoader.ts"],
  "sourcesContent": ["/* eslint-disable github/no-then */\r\n/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable @typescript-eslint/promise-function-async */\r\nimport type * as GLTF2 from \"babylonjs-gltf2interface\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let GLTFValidator: GLTF2.IGLTFValidator;\r\n\r\n// WorkerGlobalScope\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare function importScripts(...urls: string[]): void;\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare function postMessage(message: any, transfer?: any[]): void;\r\n\r\nfunction ValidateAsync(\r\n    data: string | Uint8Array,\r\n    rootUrl: string,\r\n    fileName: string,\r\n    getExternalResource: (uri: string) => Promise<Uint8Array>\r\n): Promise<GLTF2.IGLTFValidationResults> {\r\n    const options: GLTF2.IGLTFValidationOptions = {\r\n        externalResourceFunction: getExternalResource,\r\n    };\r\n\r\n    if (fileName) {\r\n        options.uri = rootUrl === \"file:\" ? fileName : rootUrl + fileName;\r\n    }\r\n\r\n    return ArrayBuffer.isView(data) ? GLTFValidator.validateBytes(data, options) : GLTFValidator.validateString(data, options);\r\n}\r\n\r\n/**\r\n * The worker function that gets converted to a blob url to pass into a worker.\r\n */\r\nfunction WorkerFunc(): void {\r\n    const pendingExternalResources: Array<{ resolve: (data: any) => void; reject: (reason: any) => void }> = [];\r\n\r\n    onmessage = (message) => {\r\n        const data = message.data;\r\n        switch (data.id) {\r\n            case \"init\": {\r\n                importScripts(data.url);\r\n                break;\r\n            }\r\n            case \"validate\": {\r\n                ValidateAsync(\r\n                    data.data,\r\n                    data.rootUrl,\r\n                    data.fileName,\r\n                    (uri) =>\r\n                        new Promise((resolve, reject) => {\r\n                            const index = pendingExternalResources.length;\r\n                            pendingExternalResources.push({ resolve, reject });\r\n                            postMessage({ id: \"getExternalResource\", index: index, uri: uri });\r\n                        })\r\n                ).then(\r\n                    (value) => {\r\n                        postMessage({ id: \"validate.resolve\", value: value });\r\n                    },\r\n                    (reason) => {\r\n                        postMessage({ id: \"validate.reject\", reason: reason });\r\n                    }\r\n                );\r\n                break;\r\n            }\r\n            case \"getExternalResource.resolve\": {\r\n                pendingExternalResources[data.index].resolve(data.value);\r\n                break;\r\n            }\r\n            case \"getExternalResource.reject\": {\r\n                pendingExternalResources[data.index].reject(data.reason);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Configuration for glTF validation\r\n */\r\nexport interface IGLTFValidationConfiguration {\r\n    /**\r\n     * The url of the glTF validator.\r\n     */\r\n    url: string;\r\n}\r\n\r\n/**\r\n * glTF validation\r\n */\r\nexport class GLTFValidation {\r\n    /**\r\n     * The configuration. Defaults to `{ url: \"https://cdn.babylonjs.com/gltf_validator.js\" }`.\r\n     */\r\n    public static Configuration: IGLTFValidationConfiguration = {\r\n        url: `${Tools._DefaultCdnUrl}/gltf_validator.js`,\r\n    };\r\n\r\n    private static _LoadScriptPromise: Promise<void>;\r\n\r\n    /**\r\n     * Validate a glTF asset using the glTF-Validator.\r\n     * @param data The JSON of a glTF or the array buffer of a binary glTF\r\n     * @param rootUrl The root url for the glTF\r\n     * @param fileName The file name for the glTF\r\n     * @param getExternalResource The callback to get external resources for the glTF validator\r\n     * @returns A promise that resolves with the glTF validation results once complete\r\n     */\r\n    public static ValidateAsync(\r\n        data: string | Uint8Array,\r\n        rootUrl: string,\r\n        fileName: string,\r\n        getExternalResource: (uri: string) => Promise<Uint8Array>\r\n    ): Promise<GLTF2.IGLTFValidationResults> {\r\n        if (typeof Worker === \"function\") {\r\n            return new Promise((resolve, reject) => {\r\n                const workerContent = `${ValidateAsync}(${WorkerFunc})()`;\r\n                const workerBlobUrl = URL.createObjectURL(new Blob([workerContent], { type: \"application/javascript\" }));\r\n                const worker = new Worker(workerBlobUrl);\r\n\r\n                const onError = (error: ErrorEvent) => {\r\n                    worker.removeEventListener(\"error\", onError);\r\n                    worker.removeEventListener(\"message\", onMessage);\r\n                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                    reject(error);\r\n                };\r\n\r\n                const onMessage = (message: MessageEvent) => {\r\n                    const data = message.data;\r\n                    switch (data.id) {\r\n                        case \"getExternalResource\": {\r\n                            getExternalResource(data.uri).then(\r\n                                (value) => {\r\n                                    worker.postMessage({ id: \"getExternalResource.resolve\", index: data.index, value: value }, [value.buffer]);\r\n                                },\r\n                                (reason) => {\r\n                                    worker.postMessage({ id: \"getExternalResource.reject\", index: data.index, reason: reason });\r\n                                }\r\n                            );\r\n                            break;\r\n                        }\r\n                        case \"validate.resolve\": {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            resolve(data.value);\r\n                            worker.terminate();\r\n                            break;\r\n                        }\r\n                        case \"validate.reject\": {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                            reject(data.reason);\r\n                            worker.terminate();\r\n                        }\r\n                    }\r\n                };\r\n\r\n                worker.addEventListener(\"error\", onError);\r\n                worker.addEventListener(\"message\", onMessage);\r\n\r\n                worker.postMessage({ id: \"init\", url: Tools.GetBabylonScriptURL(this.Configuration.url) });\r\n\r\n                if (ArrayBuffer.isView(data)) {\r\n                    // Slice the data to avoid copying the whole array buffer.\r\n                    const slicedData = data.slice();\r\n                    worker.postMessage({ id: \"validate\", data: slicedData, rootUrl: rootUrl, fileName: fileName }, [slicedData.buffer]);\r\n                } else {\r\n                    worker.postMessage({ id: \"validate\", data: data, rootUrl: rootUrl, fileName: fileName });\r\n                }\r\n            });\r\n        } else {\r\n            if (!this._LoadScriptPromise) {\r\n                this._LoadScriptPromise = Tools.LoadBabylonScriptAsync(this.Configuration.url);\r\n            }\r\n\r\n            return this._LoadScriptPromise.then(() => {\r\n                return ValidateAsync(data, rootUrl, fileName, getExternalResource);\r\n            });\r\n        }\r\n    }\r\n}\r\n", "/* eslint-disable github/no-then */\r\n/* eslint-disable @typescript-eslint/no-floating-promises */\r\n/* eslint-disable @typescript-eslint/prefer-promise-reject-errors */\r\n/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable @typescript-eslint/promise-function-async */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type * as GLTF2 from \"babylonjs-gltf2interface\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { ISceneLoaderPluginFactory, ISceneLoaderPluginAsync, ISceneLoaderProgressEvent, ISceneLoaderAsyncResult, SceneLoaderPluginOptions } from \"core/Loading/sceneLoader\";\r\nimport { RegisterSceneLoaderPlugin } from \"core/Loading/sceneLoader\";\r\nimport { AssetContainer } from \"core/assetContainer\";\r\nimport type { Scene, IDisposable } from \"core/scene\";\r\nimport type { WebRequest } from \"core/Misc/webRequest\";\r\nimport type { IFileRequest } from \"core/Misc/fileRequest\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport type { IDataBuffer } from \"core/Misc/dataReader\";\r\nimport { DataReader } from \"core/Misc/dataReader\";\r\nimport { GLTFValidation } from \"./glTFValidation\";\r\nimport { GLTFFileLoaderMetadata, GLTFMagicBase64Encoded } from \"./glTFFileLoader.metadata\";\r\nimport type { LoadFileError } from \"core/Misc/fileTools\";\r\nimport { DecodeBase64UrlToBinary } from \"core/Misc/fileTools\";\r\nimport { RuntimeError, ErrorCodes } from \"core/Misc/error\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { MorphTargetManager } from \"core/Morph/morphTargetManager\";\r\n\r\n/**\r\n * Defines options for glTF loader extensions. This interface is extended by specific extensions.\r\n */\r\nexport interface GLTFLoaderExtensionOptions extends Record<string, Record<string, unknown> | undefined> {}\r\n\r\ndeclare module \"core/Loading/sceneLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface SceneLoaderPluginOptions {\r\n        /**\r\n         * Defines options for the glTF loader.\r\n         */\r\n        [GLTFFileLoaderMetadata.name]: Partial<GLTFLoaderOptions>;\r\n    }\r\n}\r\n\r\ninterface IFileRequestInfo extends IFileRequest {\r\n    _lengthComputable?: boolean;\r\n    _loaded?: number;\r\n    _total?: number;\r\n}\r\n\r\nfunction readAsync(arrayBuffer: ArrayBuffer, byteOffset: number, byteLength: number): Promise<Uint8Array> {\r\n    try {\r\n        return Promise.resolve(new Uint8Array(arrayBuffer, byteOffset, byteLength));\r\n    } catch (e) {\r\n        return Promise.reject(e);\r\n    }\r\n}\r\n\r\nfunction readViewAsync(arrayBufferView: ArrayBufferView, byteOffset: number, byteLength: number): Promise<Uint8Array> {\r\n    try {\r\n        if (byteOffset < 0 || byteOffset >= arrayBufferView.byteLength) {\r\n            throw new RangeError(\"Offset is out of range.\");\r\n        }\r\n\r\n        if (byteOffset + byteLength > arrayBufferView.byteLength) {\r\n            throw new RangeError(\"Length is out of range.\");\r\n        }\r\n\r\n        return Promise.resolve(new Uint8Array(arrayBufferView.buffer, arrayBufferView.byteOffset + byteOffset, byteLength));\r\n    } catch (e) {\r\n        return Promise.reject(e);\r\n    }\r\n}\r\n\r\n/**\r\n * Mode that determines the coordinate system to use.\r\n */\r\nexport enum GLTFLoaderCoordinateSystemMode {\r\n    /**\r\n     * Automatically convert the glTF right-handed data to the appropriate system based on the current coordinate system mode of the scene.\r\n     */\r\n    AUTO,\r\n\r\n    /**\r\n     * Sets the useRightHandedSystem flag on the scene.\r\n     */\r\n    FORCE_RIGHT_HANDED,\r\n}\r\n\r\n/**\r\n * Mode that determines what animations will start.\r\n */\r\nexport enum GLTFLoaderAnimationStartMode {\r\n    /**\r\n     * No animation will start.\r\n     */\r\n    NONE,\r\n\r\n    /**\r\n     * The first animation will start.\r\n     */\r\n    FIRST,\r\n\r\n    /**\r\n     * All animations will start.\r\n     */\r\n    ALL,\r\n}\r\n\r\n/**\r\n * Interface that contains the data for the glTF asset.\r\n */\r\nexport interface IGLTFLoaderData {\r\n    /**\r\n     * The object that represents the glTF JSON.\r\n     */\r\n    json: object;\r\n\r\n    /**\r\n     * The BIN chunk of a binary glTF.\r\n     */\r\n    bin: Nullable<IDataBuffer>;\r\n}\r\n\r\n/**\r\n * Interface for extending the loader.\r\n */\r\nexport interface IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    readonly name: string;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    enabled: boolean;\r\n\r\n    /**\r\n     * Defines the order of this extension.\r\n     * The loader sorts the extensions using these values when loading.\r\n     */\r\n    order?: number;\r\n}\r\n\r\n/**\r\n * Loader state.\r\n */\r\nexport enum GLTFLoaderState {\r\n    /**\r\n     * The asset is loading.\r\n     */\r\n    LOADING,\r\n\r\n    /**\r\n     * The asset is ready for rendering.\r\n     */\r\n    READY,\r\n\r\n    /**\r\n     * The asset is completely loaded.\r\n     */\r\n    COMPLETE,\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFLoader extends IDisposable {\r\n    importMeshAsync: (\r\n        meshesNames: string | readonly string[] | null | undefined,\r\n        scene: Scene,\r\n        container: Nullable<AssetContainer>,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName?: string\r\n    ) => Promise<ISceneLoaderAsyncResult>;\r\n    loadAsync: (scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName?: string) => Promise<void>;\r\n}\r\n\r\n/**\r\n * Adds default/implicit options to extension specific options.\r\n */\r\ntype DefaultExtensionOptions<BaseExtensionOptions> = {\r\n    /**\r\n     * Defines if the extension is enabled\r\n     */\r\n    enabled?: boolean;\r\n} & BaseExtensionOptions;\r\n\r\nabstract class GLTFLoaderOptions {\r\n    // eslint-disable-next-line babylonjs/available\r\n    protected copyFrom(options?: Partial<Readonly<GLTFLoaderOptions>>) {\r\n        if (options) {\r\n            this.onParsed = options.onParsed;\r\n            this.coordinateSystemMode = options.coordinateSystemMode ?? this.coordinateSystemMode;\r\n            this.animationStartMode = options.animationStartMode ?? this.animationStartMode;\r\n            this.loadNodeAnimations = options.loadNodeAnimations ?? this.loadNodeAnimations;\r\n            this.loadSkins = options.loadSkins ?? this.loadSkins;\r\n            this.loadMorphTargets = options.loadMorphTargets ?? this.loadMorphTargets;\r\n            this.compileMaterials = options.compileMaterials ?? this.compileMaterials;\r\n            this.useClipPlane = options.useClipPlane ?? this.useClipPlane;\r\n            this.compileShadowGenerators = options.compileShadowGenerators ?? this.compileShadowGenerators;\r\n            this.transparencyAsCoverage = options.transparencyAsCoverage ?? this.transparencyAsCoverage;\r\n            this.useRangeRequests = options.useRangeRequests ?? this.useRangeRequests;\r\n            this.createInstances = options.createInstances ?? this.createInstances;\r\n            this.alwaysComputeBoundingBox = options.alwaysComputeBoundingBox ?? this.alwaysComputeBoundingBox;\r\n            this.loadAllMaterials = options.loadAllMaterials ?? this.loadAllMaterials;\r\n            this.loadOnlyMaterials = options.loadOnlyMaterials ?? this.loadOnlyMaterials;\r\n            this.skipMaterials = options.skipMaterials ?? this.skipMaterials;\r\n            this.useSRGBBuffers = options.useSRGBBuffers ?? this.useSRGBBuffers;\r\n            this.targetFps = options.targetFps ?? this.targetFps;\r\n            this.alwaysComputeSkeletonRootNode = options.alwaysComputeSkeletonRootNode ?? this.alwaysComputeSkeletonRootNode;\r\n            this.useGltfTextureNames = options.useGltfTextureNames ?? this.useGltfTextureNames;\r\n            this.preprocessUrlAsync = options.preprocessUrlAsync ?? this.preprocessUrlAsync;\r\n            this.customRootNode = options.customRootNode;\r\n            this.onMeshLoaded = options.onMeshLoaded;\r\n            this.onSkinLoaded = options.onSkinLoaded;\r\n            this.onTextureLoaded = options.onTextureLoaded;\r\n            this.onMaterialLoaded = options.onMaterialLoaded;\r\n            this.onCameraLoaded = options.onCameraLoaded;\r\n            this.extensionOptions = options.extensionOptions ?? this.extensionOptions;\r\n        }\r\n    }\r\n\r\n    // --------------\r\n    // Common options\r\n    // --------------\r\n\r\n    /**\r\n     * Raised when the asset has been parsed\r\n     */\r\n    public abstract onParsed?: ((loaderData: IGLTFLoaderData) => void) | undefined;\r\n\r\n    // ----------\r\n    // V2 options\r\n    // ----------\r\n\r\n    /**\r\n     * The coordinate system mode. Defaults to AUTO.\r\n     */\r\n    public coordinateSystemMode = GLTFLoaderCoordinateSystemMode.AUTO;\r\n\r\n    /**\r\n     * The animation start mode. Defaults to FIRST.\r\n     */\r\n    public animationStartMode = GLTFLoaderAnimationStartMode.FIRST;\r\n\r\n    /**\r\n     * Defines if the loader should load node animations. Defaults to true.\r\n     * NOTE: The animation of this node will still load if the node is also a joint of a skin and `loadSkins` is true.\r\n     */\r\n    public loadNodeAnimations = true;\r\n\r\n    /**\r\n     * Defines if the loader should load skins. Defaults to true.\r\n     */\r\n    public loadSkins = true;\r\n\r\n    /**\r\n     * Defines if the loader should load morph targets. Defaults to true.\r\n     */\r\n    public loadMorphTargets = true;\r\n\r\n    /**\r\n     * Defines if the loader should compile materials before raising the success callback. Defaults to false.\r\n     */\r\n    public compileMaterials = false;\r\n\r\n    /**\r\n     * Defines if the loader should also compile materials with clip planes. Defaults to false.\r\n     */\r\n    public useClipPlane = false;\r\n\r\n    /**\r\n     * Defines if the loader should compile shadow generators before raising the success callback. Defaults to false.\r\n     */\r\n    public compileShadowGenerators = false;\r\n\r\n    /**\r\n     * Defines if the Alpha blended materials are only applied as coverage.\r\n     * If false, (default) The luminance of each pixel will reduce its opacity to simulate the behaviour of most physical materials.\r\n     * If true, no extra effects are applied to transparent pixels.\r\n     */\r\n    public transparencyAsCoverage = false;\r\n\r\n    /**\r\n     * Defines if the loader should use range requests when load binary glTF files from HTTP.\r\n     * Enabling will disable offline support and glTF validator.\r\n     * Defaults to false.\r\n     */\r\n    public useRangeRequests = false;\r\n\r\n    /**\r\n     * Defines if the loader should create instances when multiple glTF nodes point to the same glTF mesh. Defaults to true.\r\n     */\r\n    public createInstances = true;\r\n\r\n    /**\r\n     * Defines if the loader should always compute the bounding boxes of meshes and not use the min/max values from the position accessor. Defaults to false.\r\n     */\r\n    public alwaysComputeBoundingBox = false;\r\n\r\n    /**\r\n     * If true, load all materials defined in the file, even if not used by any mesh. Defaults to false.\r\n     */\r\n    public loadAllMaterials = false;\r\n\r\n    /**\r\n     * If true, load only the materials defined in the file. Defaults to false.\r\n     */\r\n    public loadOnlyMaterials = false;\r\n\r\n    /**\r\n     * If true, do not load any materials defined in the file. Defaults to false.\r\n     */\r\n    public skipMaterials = false;\r\n\r\n    /**\r\n     * If true, load the color (gamma encoded) textures into sRGB buffers (if supported by the GPU), which will yield more accurate results when sampling the texture. Defaults to true.\r\n     */\r\n    public useSRGBBuffers = true;\r\n\r\n    /**\r\n     * When loading glTF animations, which are defined in seconds, target them to this FPS. Defaults to 60.\r\n     */\r\n    public targetFps = 60;\r\n\r\n    /**\r\n     * Defines if the loader should always compute the nearest common ancestor of the skeleton joints instead of using `skin.skeleton`. Defaults to false.\r\n     * Set this to true if loading assets with invalid `skin.skeleton` values.\r\n     */\r\n    public alwaysComputeSkeletonRootNode = false;\r\n\r\n    /**\r\n     * If true, the loader will derive the name for Babylon textures from the glTF texture name, image name, or image url. Defaults to false.\r\n     * Note that it is possible for multiple Babylon textures to share the same name when the Babylon textures load from the same glTF texture or image.\r\n     */\r\n    public useGltfTextureNames = false;\r\n\r\n    /**\r\n     * Function called before loading a url referenced by the asset.\r\n     * @param url url referenced by the asset\r\n     * @returns Async url to load\r\n     */\r\n    public preprocessUrlAsync = (url: string) => Promise.resolve(url);\r\n\r\n    /**\r\n     * Defines the node to use as the root of the hierarchy when loading the scene (default: undefined). If not defined, a root node will be automatically created.\r\n     * You can also pass null if you don't want a root node to be created.\r\n     */\r\n    public customRootNode?: Nullable<TransformNode>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a mesh after parsing the glTF properties of the mesh.\r\n     * Note that the callback is called as soon as the mesh object is created, meaning some data may not have been setup yet for this mesh (vertex data, morph targets, material, ...)\r\n     */\r\n    public abstract onMeshLoaded?: ((mesh: AbstractMesh) => void) | undefined;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a skin after parsing the glTF properties of the skin node.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/glTF/glTFSkinning#ignoring-the-transform-of-the-skinned-mesh\r\n     */\r\n    public abstract onSkinLoaded?: ((node: TransformNode, skinnedNode: TransformNode) => void) | undefined;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a texture after parsing the glTF properties of the texture.\r\n     */\r\n    public abstract onTextureLoaded?: ((texture: BaseTexture) => void) | undefined;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a material after parsing the glTF properties of the material.\r\n     */\r\n    public abstract onMaterialLoaded?: ((material: Material) => void) | undefined;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a camera after parsing the glTF properties of the camera.\r\n     */\r\n    public abstract onCameraLoaded?: ((camera: Camera) => void) | undefined;\r\n\r\n    /**\r\n     * Defines options for glTF extensions.\r\n     */\r\n    public extensionOptions: {\r\n        // NOTE: This type is doing two things:\r\n        // 1. Adding an implicit 'enabled' property to the options for each extension.\r\n        // 2. Creating a mapped type of all the options of all the extensions to make it just look like a consolidated plain object in intellisense for the user.\r\n        [Extension in keyof GLTFLoaderExtensionOptions]?: {\r\n            [Option in keyof DefaultExtensionOptions<GLTFLoaderExtensionOptions[Extension]>]: DefaultExtensionOptions<GLTFLoaderExtensionOptions[Extension]>[Option];\r\n        };\r\n    } = {};\r\n}\r\n\r\n/**\r\n * File loader for loading glTF files into a scene.\r\n */\r\nexport class GLTFFileLoader extends GLTFLoaderOptions implements IDisposable, ISceneLoaderPluginAsync, ISceneLoaderPluginFactory {\r\n    /** @internal */\r\n    public static _CreateGLTF1Loader: (parent: GLTFFileLoader) => IGLTFLoader;\r\n\r\n    /** @internal */\r\n    public static _CreateGLTF2Loader: (parent: GLTFFileLoader) => IGLTFLoader;\r\n\r\n    /**\r\n     * Creates a new glTF file loader.\r\n     * @param options The options for the loader\r\n     */\r\n    public constructor(options?: Partial<Readonly<GLTFLoaderOptions>>) {\r\n        super();\r\n        this.copyFrom(options);\r\n    }\r\n\r\n    // --------------------\r\n    // Begin Common options\r\n    // --------------------\r\n\r\n    /**\r\n     * Raised when the asset has been parsed\r\n     */\r\n    public onParsedObservable = new Observable<IGLTFLoaderData>();\r\n\r\n    private _onParsedObserver: Nullable<Observer<IGLTFLoaderData>>;\r\n\r\n    /**\r\n     * Raised when the asset has been parsed\r\n     */\r\n    public set onParsed(callback: ((loaderData: IGLTFLoaderData) => void) | undefined) {\r\n        if (this._onParsedObserver) {\r\n            this.onParsedObservable.remove(this._onParsedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onParsedObserver = this.onParsedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    // ------------------\r\n    // End Common options\r\n    // ------------------\r\n\r\n    // ----------------\r\n    // Begin V1 options\r\n    // ----------------\r\n\r\n    /**\r\n     * Set this property to false to disable incremental loading which delays the loader from calling the success callback until after loading the meshes and shaders.\r\n     * Textures always loads asynchronously. For example, the success callback can compute the bounding information of the loaded meshes when incremental loading is disabled.\r\n     * Defaults to true.\r\n     * @internal\r\n     */\r\n    public static IncrementalLoading = true;\r\n\r\n    /**\r\n     * Set this property to true in order to work with homogeneous coordinates, available with some converters and exporters.\r\n     * Defaults to false. See https://en.wikipedia.org/wiki/Homogeneous_coordinates.\r\n     * @internal\r\n     */\r\n    public static HomogeneousCoordinates = false;\r\n\r\n    // --------------\r\n    // End V1 options\r\n    // --------------\r\n\r\n    /**\r\n     * Observable raised when the loader creates a mesh after parsing the glTF properties of the mesh.\r\n     * Note that the observable is raised as soon as the mesh object is created, meaning some data may not have been setup yet for this mesh (vertex data, morph targets, material, ...)\r\n     */\r\n    public readonly onMeshLoadedObservable = new Observable<AbstractMesh>();\r\n\r\n    private _onMeshLoadedObserver: Nullable<Observer<AbstractMesh>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a mesh after parsing the glTF properties of the mesh.\r\n     * Note that the callback is called as soon as the mesh object is created, meaning some data may not have been setup yet for this mesh (vertex data, morph targets, material, ...)\r\n     */\r\n    public set onMeshLoaded(callback: ((mesh: AbstractMesh) => void) | undefined) {\r\n        if (this._onMeshLoadedObserver) {\r\n            this.onMeshLoadedObservable.remove(this._onMeshLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onMeshLoadedObserver = this.onMeshLoadedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a skin after parsing the glTF properties of the skin node.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/glTF/glTFSkinning#ignoring-the-transform-of-the-skinned-mesh\r\n     * @param node - the transform node that corresponds to the original glTF skin node used for animations\r\n     * @param skinnedNode - the transform node that is the skinned mesh itself or the parent of the skinned meshes\r\n     */\r\n    public readonly onSkinLoadedObservable = new Observable<{ node: TransformNode; skinnedNode: TransformNode }>();\r\n\r\n    private _onSkinLoadedObserver: Nullable<Observer<{ node: TransformNode; skinnedNode: TransformNode }>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a skin after parsing the glTF properties of the skin node.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/glTF/glTFSkinning#ignoring-the-transform-of-the-skinned-mesh\r\n     */\r\n    public set onSkinLoaded(callback: ((node: TransformNode, skinnedNode: TransformNode) => void) | undefined) {\r\n        if (this._onSkinLoadedObserver) {\r\n            this.onSkinLoadedObservable.remove(this._onSkinLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onSkinLoadedObserver = this.onSkinLoadedObservable.add((data) => callback(data.node, data.skinnedNode));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a texture after parsing the glTF properties of the texture.\r\n     */\r\n    public readonly onTextureLoadedObservable = new Observable<BaseTexture>();\r\n\r\n    private _onTextureLoadedObserver: Nullable<Observer<BaseTexture>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a texture after parsing the glTF properties of the texture.\r\n     */\r\n    public set onTextureLoaded(callback: ((texture: BaseTexture) => void) | undefined) {\r\n        if (this._onTextureLoadedObserver) {\r\n            this.onTextureLoadedObservable.remove(this._onTextureLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onTextureLoadedObserver = this.onTextureLoadedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a material after parsing the glTF properties of the material.\r\n     */\r\n    public readonly onMaterialLoadedObservable = new Observable<Material>();\r\n\r\n    private _onMaterialLoadedObserver: Nullable<Observer<Material>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a material after parsing the glTF properties of the material.\r\n     */\r\n    public set onMaterialLoaded(callback: ((material: Material) => void) | undefined) {\r\n        if (this._onMaterialLoadedObserver) {\r\n            this.onMaterialLoadedObservable.remove(this._onMaterialLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onMaterialLoadedObserver = this.onMaterialLoadedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a camera after parsing the glTF properties of the camera.\r\n     */\r\n    public readonly onCameraLoadedObservable = new Observable<Camera>();\r\n\r\n    private _onCameraLoadedObserver: Nullable<Observer<Camera>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a camera after parsing the glTF properties of the camera.\r\n     */\r\n    public set onCameraLoaded(callback: ((camera: Camera) => void) | undefined) {\r\n        if (this._onCameraLoadedObserver) {\r\n            this.onCameraLoadedObservable.remove(this._onCameraLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onCameraLoadedObserver = this.onCameraLoadedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the asset is completely loaded, immediately before the loader is disposed.\r\n     * For assets with LODs, raised when all of the LODs are complete.\r\n     * For assets without LODs, raised when the model is complete, immediately after the loader resolves the returned promise.\r\n     */\r\n    public readonly onCompleteObservable = new Observable<void>();\r\n\r\n    private _onCompleteObserver: Nullable<Observer<void>>;\r\n\r\n    /**\r\n     * Callback raised when the asset is completely loaded, immediately before the loader is disposed.\r\n     * For assets with LODs, raised when all of the LODs are complete.\r\n     * For assets without LODs, raised when the model is complete, immediately after the loader resolves the returned promise.\r\n     */\r\n    public set onComplete(callback: () => void) {\r\n        if (this._onCompleteObserver) {\r\n            this.onCompleteObservable.remove(this._onCompleteObserver);\r\n        }\r\n        this._onCompleteObserver = this.onCompleteObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised when an error occurs.\r\n     */\r\n    public readonly onErrorObservable = new Observable<any>();\r\n\r\n    private _onErrorObserver: Nullable<Observer<any>>;\r\n\r\n    /**\r\n     * Callback raised when an error occurs.\r\n     */\r\n    public set onError(callback: (reason: any) => void) {\r\n        if (this._onErrorObserver) {\r\n            this.onErrorObservable.remove(this._onErrorObserver);\r\n        }\r\n        this._onErrorObserver = this.onErrorObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised after the loader is disposed.\r\n     */\r\n    public readonly onDisposeObservable = new Observable<void>();\r\n\r\n    private _onDisposeObserver: Nullable<Observer<void>>;\r\n\r\n    /**\r\n     * Callback raised after the loader is disposed.\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised after a loader extension is created.\r\n     * Set additional options for a loader extension in this event.\r\n     */\r\n    public readonly onExtensionLoadedObservable = new Observable<IGLTFLoaderExtension>();\r\n\r\n    private _onExtensionLoadedObserver: Nullable<Observer<IGLTFLoaderExtension>>;\r\n\r\n    /**\r\n     * Callback raised after a loader extension is created.\r\n     */\r\n    public set onExtensionLoaded(callback: (extension: IGLTFLoaderExtension) => void) {\r\n        if (this._onExtensionLoadedObserver) {\r\n            this.onExtensionLoadedObservable.remove(this._onExtensionLoadedObserver);\r\n        }\r\n        this._onExtensionLoadedObserver = this.onExtensionLoadedObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Defines if the loader logging is enabled.\r\n     */\r\n    public get loggingEnabled(): boolean {\r\n        return this._loggingEnabled;\r\n    }\r\n\r\n    public set loggingEnabled(value: boolean) {\r\n        if (this._loggingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._loggingEnabled = value;\r\n\r\n        if (this._loggingEnabled) {\r\n            this._log = this._logEnabled;\r\n        } else {\r\n            this._log = this._logDisabled;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines if the loader should capture performance counters.\r\n     */\r\n    public get capturePerformanceCounters(): boolean {\r\n        return this._capturePerformanceCounters;\r\n    }\r\n\r\n    public set capturePerformanceCounters(value: boolean) {\r\n        if (this._capturePerformanceCounters === value) {\r\n            return;\r\n        }\r\n\r\n        this._capturePerformanceCounters = value;\r\n\r\n        if (this._capturePerformanceCounters) {\r\n            this._startPerformanceCounter = this._startPerformanceCounterEnabled;\r\n            this._endPerformanceCounter = this._endPerformanceCounterEnabled;\r\n        } else {\r\n            this._startPerformanceCounter = this._startPerformanceCounterDisabled;\r\n            this._endPerformanceCounter = this._endPerformanceCounterDisabled;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines if the loader should validate the asset.\r\n     */\r\n    public validate = false;\r\n\r\n    /**\r\n     * Observable raised after validation when validate is set to true. The event data is the result of the validation.\r\n     */\r\n    public readonly onValidatedObservable = new Observable<GLTF2.IGLTFValidationResults>();\r\n\r\n    private _onValidatedObserver: Nullable<Observer<GLTF2.IGLTFValidationResults>>;\r\n\r\n    /**\r\n     * Callback raised after a loader extension is created.\r\n     */\r\n    public set onValidated(callback: (results: GLTF2.IGLTFValidationResults) => void) {\r\n        if (this._onValidatedObserver) {\r\n            this.onValidatedObservable.remove(this._onValidatedObserver);\r\n        }\r\n        this._onValidatedObserver = this.onValidatedObservable.add(callback);\r\n    }\r\n\r\n    private _loader: Nullable<IGLTFLoader> = null;\r\n    private _state: Nullable<GLTFLoaderState> = null;\r\n    private _progressCallback?: (event: ISceneLoaderProgressEvent) => void;\r\n    private _requests = new Array<IFileRequestInfo>();\r\n\r\n    /**\r\n     * Name of the loader (\"gltf\")\r\n     */\r\n    public readonly name = GLTFFileLoaderMetadata.name;\r\n\r\n    /** @internal */\r\n    public readonly extensions = GLTFFileLoaderMetadata.extensions;\r\n\r\n    /**\r\n     * Disposes the loader, releases resources during load, and cancels any outstanding requests.\r\n     */\r\n    public dispose(): void {\r\n        if (this._loader) {\r\n            this._loader.dispose();\r\n            this._loader = null;\r\n        }\r\n\r\n        for (const request of this._requests) {\r\n            request.abort();\r\n        }\r\n\r\n        this._requests.length = 0;\r\n\r\n        delete this._progressCallback;\r\n\r\n        this.preprocessUrlAsync = (url) => Promise.resolve(url);\r\n\r\n        this.onMeshLoadedObservable.clear();\r\n        this.onSkinLoadedObservable.clear();\r\n        this.onTextureLoadedObservable.clear();\r\n        this.onMaterialLoadedObservable.clear();\r\n        this.onCameraLoadedObservable.clear();\r\n        this.onCompleteObservable.clear();\r\n        this.onExtensionLoadedObservable.clear();\r\n\r\n        this.onDisposeObservable.notifyObservers(undefined);\r\n        this.onDisposeObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadFile(\r\n        scene: Scene,\r\n        fileOrUrl: File | string | ArrayBufferView,\r\n        rootUrl: string,\r\n        onSuccess: (data: unknown, responseURL?: string) => void,\r\n        onProgress?: (ev: ISceneLoaderProgressEvent) => void,\r\n        useArrayBuffer?: boolean,\r\n        onError?: (request?: WebRequest, exception?: LoadFileError) => void,\r\n        name?: string\r\n    ): Nullable<IFileRequest> {\r\n        if (ArrayBuffer.isView(fileOrUrl)) {\r\n            this._loadBinary(scene, fileOrUrl, rootUrl, onSuccess, onError, name);\r\n            return null;\r\n        }\r\n\r\n        this._progressCallback = onProgress;\r\n\r\n        const fileName = (fileOrUrl as File).name || Tools.GetFilename(fileOrUrl as string);\r\n\r\n        if (useArrayBuffer) {\r\n            if (this.useRangeRequests) {\r\n                if (this.validate) {\r\n                    Logger.Warn(\"glTF validation is not supported when range requests are enabled\");\r\n                }\r\n\r\n                const fileRequest: IFileRequest = {\r\n                    abort: () => {},\r\n                    onCompleteObservable: new Observable<IFileRequest>(),\r\n                };\r\n\r\n                const dataBuffer = {\r\n                    readAsync: (byteOffset: number, byteLength: number) => {\r\n                        return new Promise<ArrayBufferView>((resolve, reject) => {\r\n                            this._loadFile(\r\n                                scene,\r\n                                fileOrUrl,\r\n                                (data) => {\r\n                                    resolve(new Uint8Array(data as ArrayBuffer));\r\n                                },\r\n                                true,\r\n                                (error) => {\r\n                                    reject(error);\r\n                                },\r\n                                (webRequest) => {\r\n                                    webRequest.setRequestHeader(\"Range\", `bytes=${byteOffset}-${byteOffset + byteLength - 1}`);\r\n                                }\r\n                            );\r\n                        });\r\n                    },\r\n                    byteLength: 0,\r\n                };\r\n\r\n                this._unpackBinaryAsync(new DataReader(dataBuffer)).then(\r\n                    (loaderData) => {\r\n                        fileRequest.onCompleteObservable.notifyObservers(fileRequest);\r\n                        onSuccess(loaderData);\r\n                    },\r\n                    onError ? (error) => onError(undefined, error) : undefined\r\n                );\r\n\r\n                return fileRequest;\r\n            }\r\n\r\n            return this._loadFile(\r\n                scene,\r\n                fileOrUrl,\r\n                (data) => {\r\n                    this._validate(scene, new Uint8Array(data as ArrayBuffer, 0, (data as ArrayBuffer).byteLength), rootUrl, fileName);\r\n                    this._unpackBinaryAsync(\r\n                        new DataReader({\r\n                            readAsync: (byteOffset, byteLength) => readAsync(data as ArrayBuffer, byteOffset, byteLength),\r\n                            byteLength: (data as ArrayBuffer).byteLength,\r\n                        })\r\n                    ).then(\r\n                        (loaderData) => {\r\n                            onSuccess(loaderData);\r\n                        },\r\n                        onError ? (error) => onError(undefined, error) : undefined\r\n                    );\r\n                },\r\n                true,\r\n                onError\r\n            );\r\n        } else {\r\n            return this._loadFile(\r\n                scene,\r\n                fileOrUrl,\r\n                (data) => {\r\n                    try {\r\n                        this._validate(scene, data as string, rootUrl, fileName);\r\n                        onSuccess({ json: this._parseJson(data as string) });\r\n                    } catch {\r\n                        if (onError) {\r\n                            onError();\r\n                        }\r\n                    }\r\n                },\r\n                false,\r\n                onError\r\n            );\r\n        }\r\n    }\r\n\r\n    private _loadBinary(\r\n        scene: Scene,\r\n        data: ArrayBufferView,\r\n        rootUrl: string,\r\n        onSuccess: (data: unknown, responseURL?: string) => void,\r\n        onError?: (request?: WebRequest, exception?: LoadFileError) => void,\r\n        fileName?: string\r\n    ): void {\r\n        this._validate(scene, new Uint8Array(data.buffer, data.byteOffset, data.byteLength), rootUrl, fileName);\r\n        this._unpackBinaryAsync(\r\n            new DataReader({\r\n                readAsync: (byteOffset, byteLength) => readViewAsync(data, byteOffset, byteLength),\r\n                byteLength: data.byteLength,\r\n            })\r\n        ).then(\r\n            (loaderData) => {\r\n                onSuccess(loaderData);\r\n            },\r\n            onError ? (error) => onError(undefined, error) : undefined\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public importMeshAsync(\r\n        meshesNames: string | readonly string[] | null | undefined,\r\n        scene: Scene,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName?: string\r\n    ): Promise<ISceneLoaderAsyncResult> {\r\n        return Promise.resolve().then(() => {\r\n            this.onParsedObservable.notifyObservers(data);\r\n            this.onParsedObservable.clear();\r\n\r\n            this._log(`Loading ${fileName || \"\"}`);\r\n            this._loader = this._getLoader(data);\r\n            return this._loader.importMeshAsync(meshesNames, scene, null, data, rootUrl, onProgress, fileName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName?: string): Promise<void> {\r\n        return Promise.resolve().then(() => {\r\n            this.onParsedObservable.notifyObservers(data);\r\n            this.onParsedObservable.clear();\r\n\r\n            this._log(`Loading ${fileName || \"\"}`);\r\n            this._loader = this._getLoader(data);\r\n            return this._loader.loadAsync(scene, data, rootUrl, onProgress, fileName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadAssetContainerAsync(\r\n        scene: Scene,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName?: string\r\n    ): Promise<AssetContainer> {\r\n        return Promise.resolve().then(() => {\r\n            this.onParsedObservable.notifyObservers(data);\r\n            this.onParsedObservable.clear();\r\n\r\n            this._log(`Loading ${fileName || \"\"}`);\r\n            this._loader = this._getLoader(data);\r\n\r\n            // Prepare the asset container.\r\n            const container = new AssetContainer(scene);\r\n\r\n            // Get materials/textures when loading to add to container\r\n            const materials: Array<Material> = [];\r\n            this.onMaterialLoadedObservable.add((material) => {\r\n                materials.push(material);\r\n            });\r\n            const textures: Array<BaseTexture> = [];\r\n            this.onTextureLoadedObservable.add((texture) => {\r\n                textures.push(texture);\r\n            });\r\n            const cameras: Array<Camera> = [];\r\n            this.onCameraLoadedObservable.add((camera) => {\r\n                cameras.push(camera);\r\n            });\r\n\r\n            const morphTargetManagers: Array<MorphTargetManager> = [];\r\n            this.onMeshLoadedObservable.add((mesh) => {\r\n                if (mesh.morphTargetManager) {\r\n                    morphTargetManagers.push(mesh.morphTargetManager);\r\n                }\r\n            });\r\n\r\n            return this._loader.importMeshAsync(null, scene, container, data, rootUrl, onProgress, fileName).then((result) => {\r\n                Array.prototype.push.apply(container.geometries, result.geometries);\r\n                Array.prototype.push.apply(container.meshes, result.meshes);\r\n                Array.prototype.push.apply(container.particleSystems, result.particleSystems);\r\n                Array.prototype.push.apply(container.skeletons, result.skeletons);\r\n                Array.prototype.push.apply(container.animationGroups, result.animationGroups);\r\n                Array.prototype.push.apply(container.materials, materials);\r\n                Array.prototype.push.apply(container.textures, textures);\r\n                Array.prototype.push.apply(container.lights, result.lights);\r\n                Array.prototype.push.apply(container.transformNodes, result.transformNodes);\r\n                Array.prototype.push.apply(container.cameras, cameras);\r\n                Array.prototype.push.apply(container.morphTargetManagers, morphTargetManagers);\r\n                return container;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public canDirectLoad(data: string): boolean {\r\n        return GLTFFileLoaderMetadata.canDirectLoad(data);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public directLoad(scene: Scene, data: string): Promise<object> {\r\n        if (\r\n            data.startsWith(\"base64,\" + GLTFMagicBase64Encoded) || // this is technically incorrect, but will continue to support for backcompat.\r\n            data.startsWith(\";base64,\" + GLTFMagicBase64Encoded) ||\r\n            data.startsWith(\"application/octet-stream;base64,\" + GLTFMagicBase64Encoded) ||\r\n            data.startsWith(\"model/gltf-binary;base64,\" + GLTFMagicBase64Encoded)\r\n        ) {\r\n            const arrayBuffer = DecodeBase64UrlToBinary(data);\r\n\r\n            this._validate(scene, new Uint8Array(arrayBuffer, 0, arrayBuffer.byteLength));\r\n            return this._unpackBinaryAsync(\r\n                new DataReader({\r\n                    readAsync: (byteOffset, byteLength) => readAsync(arrayBuffer, byteOffset, byteLength),\r\n                    byteLength: arrayBuffer.byteLength,\r\n                })\r\n            );\r\n        }\r\n\r\n        this._validate(scene, data);\r\n        return Promise.resolve({ json: this._parseJson(data) });\r\n    }\r\n\r\n    /**\r\n     * The callback that allows custom handling of the root url based on the response url.\r\n     * @param rootUrl the original root url\r\n     * @param responseURL the response url if available\r\n     * @returns the new root url\r\n     */\r\n    public rewriteRootURL?(rootUrl: string, responseURL?: string): string;\r\n\r\n    /** @internal */\r\n    public createPlugin(options: SceneLoaderPluginOptions): ISceneLoaderPluginAsync {\r\n        return new GLTFFileLoader(options[GLTFFileLoaderMetadata.name]);\r\n    }\r\n\r\n    /**\r\n     * The loader state or null if the loader is not active.\r\n     */\r\n    public get loaderState(): Nullable<GLTFLoaderState> {\r\n        return this._state;\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader state changes.\r\n     */\r\n    public onLoaderStateChangedObservable = new Observable<Nullable<GLTFLoaderState>>();\r\n\r\n    /**\r\n     * Returns a promise that resolves when the asset is completely loaded.\r\n     * @returns a promise that resolves when the asset is completely loaded.\r\n     */\r\n    public whenCompleteAsync(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            this.onCompleteObservable.addOnce(() => {\r\n                resolve();\r\n            });\r\n            this.onErrorObservable.addOnce((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setState(state: GLTFLoaderState): void {\r\n        if (this._state === state) {\r\n            return;\r\n        }\r\n\r\n        this._state = state;\r\n        this.onLoaderStateChangedObservable.notifyObservers(this._state);\r\n        this._log(GLTFLoaderState[this._state]);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadFile(\r\n        scene: Scene,\r\n        fileOrUrl: File | string,\r\n        onSuccess: (data: string | ArrayBuffer) => void,\r\n        useArrayBuffer?: boolean,\r\n        onError?: (request?: WebRequest) => void,\r\n        onOpened?: (request: WebRequest) => void\r\n    ): IFileRequest {\r\n        const request = scene._loadFile(\r\n            fileOrUrl,\r\n            onSuccess,\r\n            (event) => {\r\n                this._onProgress(event, request);\r\n            },\r\n            true,\r\n            useArrayBuffer,\r\n            onError,\r\n            onOpened\r\n        ) as IFileRequestInfo;\r\n        request.onCompleteObservable.add(() => {\r\n            // Force the length computable to be true since we can guarantee the data is loaded.\r\n            request._lengthComputable = true;\r\n            request._total = request._loaded;\r\n        });\r\n        this._requests.push(request);\r\n        return request;\r\n    }\r\n\r\n    private _onProgress(event: ProgressEvent, request: IFileRequestInfo): void {\r\n        if (!this._progressCallback) {\r\n            return;\r\n        }\r\n\r\n        request._lengthComputable = event.lengthComputable;\r\n        request._loaded = event.loaded;\r\n        request._total = event.total;\r\n\r\n        let lengthComputable = true;\r\n        let loaded = 0;\r\n        let total = 0;\r\n        for (const request of this._requests) {\r\n            if (request._lengthComputable === undefined || request._loaded === undefined || request._total === undefined) {\r\n                return;\r\n            }\r\n\r\n            lengthComputable = lengthComputable && request._lengthComputable;\r\n            loaded += request._loaded;\r\n            total += request._total;\r\n        }\r\n\r\n        this._progressCallback({\r\n            lengthComputable: lengthComputable,\r\n            loaded: loaded,\r\n            total: lengthComputable ? total : 0,\r\n        });\r\n    }\r\n\r\n    private _validate(scene: Scene, data: string | Uint8Array, rootUrl = \"\", fileName = \"\"): void {\r\n        if (!this.validate) {\r\n            return;\r\n        }\r\n\r\n        this._startPerformanceCounter(\"Validate JSON\");\r\n        GLTFValidation.ValidateAsync(data, rootUrl, fileName, (uri) => {\r\n            return this.preprocessUrlAsync(rootUrl + uri).then((url) => {\r\n                return scene._loadFileAsync(url, undefined, true, true).then((data) => {\r\n                    return new Uint8Array(data, 0, data.byteLength);\r\n                });\r\n            });\r\n        }).then(\r\n            (result) => {\r\n                this._endPerformanceCounter(\"Validate JSON\");\r\n                this.onValidatedObservable.notifyObservers(result);\r\n                this.onValidatedObservable.clear();\r\n            },\r\n            (reason) => {\r\n                this._endPerformanceCounter(\"Validate JSON\");\r\n                Tools.Warn(`Failed to validate: ${reason.message}`);\r\n                this.onValidatedObservable.clear();\r\n            }\r\n        );\r\n    }\r\n\r\n    private _getLoader(loaderData: IGLTFLoaderData): IGLTFLoader {\r\n        const asset = (<any>loaderData.json).asset || {};\r\n\r\n        this._log(`Asset version: ${asset.version}`);\r\n        asset.minVersion && this._log(`Asset minimum version: ${asset.minVersion}`);\r\n        asset.generator && this._log(`Asset generator: ${asset.generator}`);\r\n\r\n        const version = GLTFFileLoader._parseVersion(asset.version);\r\n        if (!version) {\r\n            throw new Error(\"Invalid version: \" + asset.version);\r\n        }\r\n\r\n        if (asset.minVersion !== undefined) {\r\n            const minVersion = GLTFFileLoader._parseVersion(asset.minVersion);\r\n            if (!minVersion) {\r\n                throw new Error(\"Invalid minimum version: \" + asset.minVersion);\r\n            }\r\n\r\n            if (GLTFFileLoader._compareVersion(minVersion, { major: 2, minor: 0 }) > 0) {\r\n                throw new Error(\"Incompatible minimum version: \" + asset.minVersion);\r\n            }\r\n        }\r\n\r\n        const createLoaders: { [key: number]: (parent: GLTFFileLoader) => IGLTFLoader } = {\r\n            1: GLTFFileLoader._CreateGLTF1Loader,\r\n            2: GLTFFileLoader._CreateGLTF2Loader,\r\n        };\r\n\r\n        const createLoader = createLoaders[version.major];\r\n        if (!createLoader) {\r\n            throw new Error(\"Unsupported version: \" + asset.version);\r\n        }\r\n\r\n        return createLoader(this);\r\n    }\r\n\r\n    private _parseJson(json: string): object {\r\n        this._startPerformanceCounter(\"Parse JSON\");\r\n        this._log(`JSON length: ${json.length}`);\r\n        const parsed = JSON.parse(json);\r\n        this._endPerformanceCounter(\"Parse JSON\");\r\n        return parsed;\r\n    }\r\n\r\n    private _unpackBinaryAsync(dataReader: DataReader): Promise<IGLTFLoaderData> {\r\n        this._startPerformanceCounter(\"Unpack Binary\");\r\n\r\n        // Read magic + version + length + json length + json format\r\n        return dataReader.loadAsync(20).then(() => {\r\n            const Binary = {\r\n                Magic: 0x46546c67,\r\n            };\r\n\r\n            const magic = dataReader.readUint32();\r\n            if (magic !== Binary.Magic) {\r\n                throw new RuntimeError(\"Unexpected magic: \" + magic, ErrorCodes.GLTFLoaderUnexpectedMagicError);\r\n            }\r\n\r\n            const version = dataReader.readUint32();\r\n\r\n            if (this.loggingEnabled) {\r\n                this._log(`Binary version: ${version}`);\r\n            }\r\n\r\n            const length = dataReader.readUint32();\r\n            if (!this.useRangeRequests && length !== dataReader.buffer.byteLength) {\r\n                Logger.Warn(`Length in header does not match actual data length: ${length} != ${dataReader.buffer.byteLength}`);\r\n            }\r\n\r\n            let unpacked: Promise<IGLTFLoaderData>;\r\n            switch (version) {\r\n                case 1: {\r\n                    unpacked = this._unpackBinaryV1Async(dataReader, length);\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    unpacked = this._unpackBinaryV2Async(dataReader, length);\r\n                    break;\r\n                }\r\n                default: {\r\n                    throw new Error(\"Unsupported version: \" + version);\r\n                }\r\n            }\r\n\r\n            this._endPerformanceCounter(\"Unpack Binary\");\r\n\r\n            return unpacked;\r\n        });\r\n    }\r\n\r\n    private _unpackBinaryV1Async(dataReader: DataReader, length: number): Promise<IGLTFLoaderData> {\r\n        const ContentFormat = {\r\n            JSON: 0,\r\n        };\r\n\r\n        const contentLength = dataReader.readUint32();\r\n        const contentFormat = dataReader.readUint32();\r\n\r\n        if (contentFormat !== ContentFormat.JSON) {\r\n            throw new Error(`Unexpected content format: ${contentFormat}`);\r\n        }\r\n\r\n        const bodyLength = length - dataReader.byteOffset;\r\n\r\n        const data: IGLTFLoaderData = { json: this._parseJson(dataReader.readString(contentLength)), bin: null };\r\n        if (bodyLength !== 0) {\r\n            const startByteOffset = dataReader.byteOffset;\r\n            data.bin = {\r\n                readAsync: (byteOffset, byteLength) => dataReader.buffer.readAsync(startByteOffset + byteOffset, byteLength),\r\n                byteLength: bodyLength,\r\n            };\r\n        }\r\n\r\n        return Promise.resolve(data);\r\n    }\r\n\r\n    private _unpackBinaryV2Async(dataReader: DataReader, length: number): Promise<IGLTFLoaderData> {\r\n        const ChunkFormat = {\r\n            JSON: 0x4e4f534a,\r\n            BIN: 0x004e4942,\r\n        };\r\n\r\n        // Read the JSON chunk header.\r\n        const chunkLength = dataReader.readUint32();\r\n        const chunkFormat = dataReader.readUint32();\r\n        if (chunkFormat !== ChunkFormat.JSON) {\r\n            throw new Error(\"First chunk format is not JSON\");\r\n        }\r\n\r\n        // Bail if there are no other chunks.\r\n        if (dataReader.byteOffset + chunkLength === length) {\r\n            return dataReader.loadAsync(chunkLength).then(() => {\r\n                return { json: this._parseJson(dataReader.readString(chunkLength)), bin: null };\r\n            });\r\n        }\r\n\r\n        // Read the JSON chunk and the length and type of the next chunk.\r\n        return dataReader.loadAsync(chunkLength + 8).then(() => {\r\n            const data: IGLTFLoaderData = { json: this._parseJson(dataReader.readString(chunkLength)), bin: null };\r\n\r\n            const readAsync = (): Promise<IGLTFLoaderData> => {\r\n                const chunkLength = dataReader.readUint32();\r\n                const chunkFormat = dataReader.readUint32();\r\n\r\n                switch (chunkFormat) {\r\n                    case ChunkFormat.JSON: {\r\n                        throw new Error(\"Unexpected JSON chunk\");\r\n                    }\r\n                    case ChunkFormat.BIN: {\r\n                        const startByteOffset = dataReader.byteOffset;\r\n                        data.bin = {\r\n                            readAsync: (byteOffset, byteLength) => dataReader.buffer.readAsync(startByteOffset + byteOffset, byteLength),\r\n                            byteLength: chunkLength,\r\n                        };\r\n                        dataReader.skipBytes(chunkLength);\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        // ignore unrecognized chunkFormat\r\n                        dataReader.skipBytes(chunkLength);\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (dataReader.byteOffset !== length) {\r\n                    return dataReader.loadAsync(8).then(readAsync);\r\n                }\r\n\r\n                return Promise.resolve(data);\r\n            };\r\n\r\n            return readAsync();\r\n        });\r\n    }\r\n\r\n    private static _parseVersion(version: string): Nullable<{ major: number; minor: number }> {\r\n        if (version === \"1.0\" || version === \"1.0.1\") {\r\n            return {\r\n                major: 1,\r\n                minor: 0,\r\n            };\r\n        }\r\n\r\n        const match = (version + \"\").match(/^(\\d+)\\.(\\d+)/);\r\n        if (!match) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            major: parseInt(match[1]),\r\n            minor: parseInt(match[2]),\r\n        };\r\n    }\r\n\r\n    private static _compareVersion(a: { major: number; minor: number }, b: { major: number; minor: number }): number {\r\n        if (a.major > b.major) {\r\n            return 1;\r\n        }\r\n        if (a.major < b.major) {\r\n            return -1;\r\n        }\r\n        if (a.minor > b.minor) {\r\n            return 1;\r\n        }\r\n        if (a.minor < b.minor) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    private static readonly _logSpaces = \"                                \";\r\n    private _logIndentLevel = 0;\r\n    private _loggingEnabled = false;\r\n\r\n    /** @internal */\r\n    public _log = this._logDisabled;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _logOpen(message: string): void {\r\n        this._log(message);\r\n        this._logIndentLevel++;\r\n    }\r\n\r\n    /** @internal */\r\n    public _logClose(): void {\r\n        --this._logIndentLevel;\r\n    }\r\n\r\n    private _logEnabled(message: string): void {\r\n        const spaces = GLTFFileLoader._logSpaces.substring(0, this._logIndentLevel * 2);\r\n        Logger.Log(`${spaces}${message}`);\r\n    }\r\n\r\n    private _logDisabled(message: string): void {}\r\n\r\n    private _capturePerformanceCounters = false;\r\n\r\n    /** @internal */\r\n    public _startPerformanceCounter = this._startPerformanceCounterDisabled;\r\n\r\n    /** @internal */\r\n    public _endPerformanceCounter = this._endPerformanceCounterDisabled;\r\n\r\n    private _startPerformanceCounterEnabled(counterName: string): void {\r\n        Tools.StartPerformanceCounter(counterName);\r\n    }\r\n\r\n    private _startPerformanceCounterDisabled(counterName: string): void {}\r\n\r\n    private _endPerformanceCounterEnabled(counterName: string): void {\r\n        Tools.EndPerformanceCounter(counterName);\r\n    }\r\n\r\n    private _endPerformanceCounterDisabled(counterName: string): void {}\r\n}\r\n\r\nRegisterSceneLoaderPlugin(new GLTFFileLoader());\r\n", "/* eslint-disable @typescript-eslint/promise-function-async */\r\n/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable github/no-then */\r\nimport type { IndicesArray, Nullable, TypedArray, TypedArrayConstructor } from \"core/types\";\r\nimport { Deferred } from \"core/Misc/deferred\";\r\nimport { Quaternion, Vector3, Matrix, TmpVectors } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { Camera } from \"core/Cameras/camera\";\r\nimport { FreeCamera } from \"core/Cameras/freeCamera\";\r\nimport type { Animation } from \"core/Animations/animation\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IAnimationKey } from \"core/Animations/animationKey\";\r\nimport { AnimationKeyInterpolation } from \"core/Animations/animationKey\";\r\nimport type { AnimationGroup } from \"core/Animations/animationGroup\";\r\nimport { Bone } from \"core/Bones/bone\";\r\nimport { Skeleton } from \"core/Bones/skeleton\";\r\nimport { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { ITextureCreationOptions } from \"core/Materials/Textures/texture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Buffer, VertexBuffer } from \"core/Buffers/buffer\";\r\nimport { Geometry } from \"core/Meshes/geometry\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { MorphTarget } from \"core/Morph/morphTarget\";\r\nimport { MorphTargetManager } from \"core/Morph/morphTargetManager\";\r\nimport type { ISceneLoaderAsyncResult, ISceneLoaderProgressEvent } from \"core/Loading/sceneLoader\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { IProperty } from \"babylonjs-gltf2interface\";\r\nimport {\r\n    AnimationChannelTargetPath,\r\n    AnimationSamplerInterpolation,\r\n    AccessorType,\r\n    CameraType,\r\n    AccessorComponentType,\r\n    MaterialAlphaMode,\r\n    TextureMinFilter,\r\n    TextureWrapMode,\r\n    TextureMagFilter,\r\n    MeshPrimitiveMode,\r\n} from \"babylonjs-gltf2interface\";\r\nimport type {\r\n    IGLTF,\r\n    ISampler,\r\n    INode,\r\n    IScene,\r\n    IMesh,\r\n    IAccessor,\r\n    ISkin,\r\n    ICamera,\r\n    IAnimation,\r\n    IBuffer,\r\n    IBufferView,\r\n    IMaterialPbrMetallicRoughness,\r\n    IMaterial,\r\n    ITextureInfo,\r\n    ITexture,\r\n    IImage,\r\n    IMeshPrimitive,\r\n    IArrayItem,\r\n    _ISamplerData,\r\n    IAnimationChannel,\r\n    IAnimationSampler,\r\n    _IAnimationSamplerData,\r\n} from \"./glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"./glTFLoaderExtension\";\r\nimport type { IGLTFLoader, IGLTFLoaderData } from \"../glTFFileLoader\";\r\nimport { GLTFFileLoader, GLTFLoaderState, GLTFLoaderCoordinateSystemMode, GLTFLoaderAnimationStartMode } from \"../glTFFileLoader\";\r\nimport type { IDataBuffer } from \"core/Misc/dataReader\";\r\nimport { DecodeBase64UrlToBinary, GetMimeType, IsBase64DataUrl, LoadFileError } from \"core/Misc/fileTools\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport type { Light } from \"core/Lights/light\";\r\nimport { BoundingInfo } from \"core/Culling/boundingInfo\";\r\nimport type { AssetContainer } from \"core/assetContainer\";\r\nimport type { AnimationPropertyInfo } from \"./glTFLoaderAnimation\";\r\nimport type { IObjectInfo } from \"core/ObjectModel/objectModelInterfaces\";\r\nimport { registeredGLTFExtensions, registerGLTFExtension, unregisterGLTFExtension } from \"./glTFLoaderExtensionRegistry\";\r\nimport type { GLTFExtensionFactory } from \"./glTFLoaderExtensionRegistry\";\r\nimport type { IInterpolationPropertyInfo } from \"core/FlowGraph/typeDefinitions\";\r\nimport { GetMappingForKey } from \"./Extensions/objectModelMapping\";\r\nimport { deepMerge } from \"core/Misc/deepMerger\";\r\nimport { GetTypedArrayConstructor } from \"core/Buffers/bufferUtils\";\r\n\r\nexport { GLTFFileLoader };\r\n\r\ninterface ILoaderProperty extends IProperty {\r\n    _activeLoaderExtensionFunctions: {\r\n        [id: string]: boolean;\r\n    };\r\n}\r\n\r\ninterface IWithMetadata {\r\n    metadata: any;\r\n    _internalMetadata: any;\r\n}\r\n\r\n/**\r\n * Helper class for working with arrays when loading the glTF asset\r\n */\r\nexport class ArrayItem {\r\n    /**\r\n     * Gets an item from the given array.\r\n     * @param context The context when loading the asset\r\n     * @param array The array to get the item from\r\n     * @param index The index to the array\r\n     * @returns The array item\r\n     */\r\n    public static Get<T>(context: string, array: ArrayLike<T> | undefined, index: number | undefined): T {\r\n        if (!array || index == undefined || !array[index]) {\r\n            throw new Error(`${context}: Failed to find index (${index})`);\r\n        }\r\n\r\n        return array[index];\r\n    }\r\n\r\n    /**\r\n     * Gets an item from the given array or returns null if not available.\r\n     * @param array The array to get the item from\r\n     * @param index The index to the array\r\n     * @returns The array item or null\r\n     */\r\n    public static TryGet<T>(array: ArrayLike<T> | undefined, index: number | undefined): Nullable<T> {\r\n        if (!array || index == undefined || !array[index]) {\r\n            return null;\r\n        }\r\n\r\n        return array[index];\r\n    }\r\n\r\n    /**\r\n     * Assign an `index` field to each item of the given array.\r\n     * @param array The array of items\r\n     */\r\n    public static Assign(array?: IArrayItem[]): void {\r\n        if (array) {\r\n            for (let index = 0; index < array.length; index++) {\r\n                array[index].index = index;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport interface IAnimationTargetInfo {\r\n    /** @internal */\r\n    target: unknown;\r\n\r\n    /** @internal */\r\n    properties: Array<AnimationPropertyInfo>;\r\n}\r\n\r\n/** @internal */\r\nexport function LoadBoundingInfoFromPositionAccessor(accessor: IAccessor): Nullable<BoundingInfo> {\r\n    if (accessor.min && accessor.max) {\r\n        const minArray = accessor.min as [number, number, number];\r\n        const maxArray = accessor.max as [number, number, number];\r\n        const minVector = TmpVectors.Vector3[0].copyFromFloats(minArray[0], minArray[1], minArray[2]);\r\n        const maxVector = TmpVectors.Vector3[1].copyFromFloats(maxArray[0], maxArray[1], maxArray[2]);\r\n        if (accessor.normalized && accessor.componentType !== AccessorComponentType.FLOAT) {\r\n            let divider = 1;\r\n            switch (accessor.componentType) {\r\n                case AccessorComponentType.BYTE:\r\n                    divider = 127.0;\r\n                    break;\r\n                case AccessorComponentType.UNSIGNED_BYTE:\r\n                    divider = 255.0;\r\n                    break;\r\n                case AccessorComponentType.SHORT:\r\n                    divider = 32767.0;\r\n                    break;\r\n                case AccessorComponentType.UNSIGNED_SHORT:\r\n                    divider = 65535.0;\r\n                    break;\r\n            }\r\n            const oneOverDivider = 1 / divider;\r\n            minVector.scaleInPlace(oneOverDivider);\r\n            maxVector.scaleInPlace(oneOverDivider);\r\n        }\r\n        return new BoundingInfo(minVector, maxVector);\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * The glTF 2.0 loader\r\n */\r\nexport class GLTFLoader implements IGLTFLoader {\r\n    /** @internal */\r\n    public readonly _completePromises = new Array<Promise<unknown>>();\r\n\r\n    /** @internal */\r\n    public _assetContainer: Nullable<AssetContainer> = null;\r\n\r\n    /** Storage */\r\n    public _babylonLights: Light[] = [];\r\n\r\n    /** @internal */\r\n    public _disableInstancedMesh = 0;\r\n\r\n    /** @internal */\r\n    public _allMaterialsDirtyRequired = false;\r\n\r\n    /** @internal */\r\n    public _skipStartAnimationStep = false;\r\n\r\n    private readonly _parent: GLTFFileLoader;\r\n    private readonly _extensions = new Array<IGLTFLoaderExtension>();\r\n    private _disposed = false;\r\n    private _rootUrl: Nullable<string> = null;\r\n    private _fileName: Nullable<string> = null;\r\n    private _uniqueRootUrl: Nullable<string> = null;\r\n    private _gltf: IGLTF;\r\n    private _bin: Nullable<IDataBuffer> = null;\r\n    private _babylonScene: Scene;\r\n    private _rootBabylonMesh: Nullable<TransformNode> = null;\r\n    private _defaultBabylonMaterialData: { [drawMode: number]: Material } = {};\r\n    private readonly _postSceneLoadActions = new Array<() => void>();\r\n\r\n    /**\r\n     * The default glTF sampler.\r\n     */\r\n    public static readonly DefaultSampler: ISampler = { index: -1 };\r\n\r\n    /**\r\n     * Registers a loader extension.\r\n     * @param name The name of the loader extension.\r\n     * @param factory The factory function that creates the loader extension.\r\n     * @deprecated Please use registerGLTFExtension instead.\r\n     */\r\n    public static RegisterExtension(name: string, factory: GLTFExtensionFactory): void {\r\n        registerGLTFExtension(name, false, factory);\r\n    }\r\n\r\n    /**\r\n     * Unregisters a loader extension.\r\n     * @param name The name of the loader extension.\r\n     * @returns A boolean indicating whether the extension has been unregistered\r\n     * @deprecated Please use unregisterGLTFExtension instead.\r\n     */\r\n    public static UnregisterExtension(name: string): boolean {\r\n        return unregisterGLTFExtension(name);\r\n    }\r\n\r\n    /**\r\n     * The object that represents the glTF JSON.\r\n     */\r\n    public get gltf(): IGLTF {\r\n        if (!this._gltf) {\r\n            throw new Error(\"glTF JSON is not available\");\r\n        }\r\n\r\n        return this._gltf;\r\n    }\r\n\r\n    /**\r\n     * The BIN chunk of a binary glTF.\r\n     */\r\n    public get bin(): Nullable<IDataBuffer> {\r\n        return this._bin;\r\n    }\r\n\r\n    /**\r\n     * The parent file loader.\r\n     */\r\n    public get parent(): GLTFFileLoader {\r\n        return this._parent;\r\n    }\r\n\r\n    /**\r\n     * The Babylon scene when loading the asset.\r\n     */\r\n    public get babylonScene(): Scene {\r\n        if (!this._babylonScene) {\r\n            throw new Error(\"Scene is not available\");\r\n        }\r\n\r\n        return this._babylonScene;\r\n    }\r\n\r\n    /**\r\n     * The root Babylon node when loading the asset.\r\n     */\r\n    public get rootBabylonMesh(): Nullable<TransformNode> {\r\n        return this._rootBabylonMesh;\r\n    }\r\n\r\n    /**\r\n     * The root url when loading the asset.\r\n     */\r\n    public get rootUrl(): Nullable<string> {\r\n        return this._rootUrl;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(parent: GLTFFileLoader) {\r\n        this._parent = parent;\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose(): void {\r\n        if (this._disposed) {\r\n            return;\r\n        }\r\n\r\n        this._disposed = true;\r\n\r\n        this._completePromises.length = 0;\r\n\r\n        this._extensions.forEach((extension) => extension.dispose && extension.dispose());\r\n        this._extensions.length = 0;\r\n\r\n        (this._gltf as Nullable<IGLTF>) = null; // TODO\r\n        this._bin = null;\r\n        (this._babylonScene as Nullable<Scene>) = null; // TODO\r\n        this._rootBabylonMesh = null;\r\n        this._defaultBabylonMaterialData = {};\r\n        this._postSceneLoadActions.length = 0;\r\n\r\n        this._parent.dispose();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public async importMeshAsync(\r\n        meshesNames: string | readonly string[] | null | undefined,\r\n        scene: Scene,\r\n        container: Nullable<AssetContainer>,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName = \"\"\r\n    ): Promise<ISceneLoaderAsyncResult> {\r\n        // eslint-disable-next-line github/no-then\r\n        return await Promise.resolve().then(async () => {\r\n            this._babylonScene = scene;\r\n            this._assetContainer = container;\r\n            this._loadData(data);\r\n\r\n            let nodes: Nullable<Array<number>> = null;\r\n\r\n            if (meshesNames) {\r\n                const nodeMap: { [name: string]: number } = {};\r\n                if (this._gltf.nodes) {\r\n                    for (const node of this._gltf.nodes) {\r\n                        if (node.name) {\r\n                            nodeMap[node.name] = node.index;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const names = meshesNames instanceof Array ? meshesNames : [meshesNames];\r\n                nodes = names.map((name) => {\r\n                    const node = nodeMap[name];\r\n                    if (node === undefined) {\r\n                        throw new Error(`Failed to find node '${name}'`);\r\n                    }\r\n\r\n                    return node;\r\n                });\r\n            }\r\n\r\n            return await this._loadAsync(rootUrl, fileName, nodes, () => {\r\n                return {\r\n                    meshes: this._getMeshes(),\r\n                    particleSystems: [],\r\n                    skeletons: this._getSkeletons(),\r\n                    animationGroups: this._getAnimationGroups(),\r\n                    lights: this._babylonLights,\r\n                    transformNodes: this._getTransformNodes(),\r\n                    geometries: this._getGeometries(),\r\n                    spriteManagers: [],\r\n                };\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public async loadAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName = \"\"): Promise<void> {\r\n        this._babylonScene = scene;\r\n        this._loadData(data);\r\n        return await this._loadAsync(rootUrl, fileName, null, () => undefined);\r\n    }\r\n\r\n    private async _loadAsync<T>(rootUrl: string, fileName: string, nodes: Nullable<Array<number>>, resultFunc: () => T): Promise<T> {\r\n        return await Promise.resolve()\r\n            .then(async () => {\r\n                this._rootUrl = rootUrl;\r\n                this._uniqueRootUrl = !rootUrl.startsWith(\"file:\") && fileName ? rootUrl : `${rootUrl}${Date.now()}/`;\r\n                this._fileName = fileName;\r\n                this._allMaterialsDirtyRequired = false;\r\n\r\n                await this._loadExtensionsAsync();\r\n\r\n                const loadingToReadyCounterName = `${GLTFLoaderState[GLTFLoaderState.LOADING]} => ${GLTFLoaderState[GLTFLoaderState.READY]}`;\r\n                const loadingToCompleteCounterName = `${GLTFLoaderState[GLTFLoaderState.LOADING]} => ${GLTFLoaderState[GLTFLoaderState.COMPLETE]}`;\r\n\r\n                this._parent._startPerformanceCounter(loadingToReadyCounterName);\r\n                this._parent._startPerformanceCounter(loadingToCompleteCounterName);\r\n\r\n                this._parent._setState(GLTFLoaderState.LOADING);\r\n                this._extensionsOnLoading();\r\n\r\n                const promises = new Array<Promise<unknown>>();\r\n\r\n                // Block the marking of materials dirty until the scene is loaded.\r\n                const oldBlockMaterialDirtyMechanism = this._babylonScene.blockMaterialDirtyMechanism;\r\n                this._babylonScene.blockMaterialDirtyMechanism = true;\r\n\r\n                if (!this.parent.loadOnlyMaterials) {\r\n                    if (nodes) {\r\n                        promises.push(this.loadSceneAsync(\"/nodes\", { nodes: nodes, index: -1 }));\r\n                    } else if (this._gltf.scene != undefined || (this._gltf.scenes && this._gltf.scenes[0])) {\r\n                        const scene = ArrayItem.Get(`/scene`, this._gltf.scenes, this._gltf.scene || 0);\r\n                        promises.push(this.loadSceneAsync(`/scenes/${scene.index}`, scene));\r\n                    }\r\n                }\r\n\r\n                if (!this.parent.skipMaterials && this.parent.loadAllMaterials && this._gltf.materials) {\r\n                    for (let m = 0; m < this._gltf.materials.length; ++m) {\r\n                        const material = this._gltf.materials[m];\r\n                        const context = \"/materials/\" + m;\r\n                        const babylonDrawMode = Material.TriangleFillMode;\r\n\r\n                        promises.push(this._loadMaterialAsync(context, material, null, babylonDrawMode, () => {}));\r\n                    }\r\n                }\r\n\r\n                // Restore the blocking of material dirty.\r\n                if (this._allMaterialsDirtyRequired) {\r\n                    // This can happen if we add a light for instance as it will impact the whole scene.\r\n                    // This automatically resets everything if needed.\r\n                    this._babylonScene.blockMaterialDirtyMechanism = oldBlockMaterialDirtyMechanism;\r\n                } else {\r\n                    // By default a newly created material is dirty so there is no need to flag the full scene as dirty.\r\n                    // For perf reasons, we then bypass blockMaterialDirtyMechanism as this would \"dirty\" the entire scene.\r\n                    this._babylonScene._forceBlockMaterialDirtyMechanism(oldBlockMaterialDirtyMechanism);\r\n                }\r\n\r\n                if (this._parent.compileMaterials) {\r\n                    promises.push(this._compileMaterialsAsync());\r\n                }\r\n\r\n                if (this._parent.compileShadowGenerators) {\r\n                    promises.push(this._compileShadowGeneratorsAsync());\r\n                }\r\n\r\n                const resultPromise = Promise.all(promises).then(() => {\r\n                    if (this._rootBabylonMesh && this._rootBabylonMesh !== this._parent.customRootNode) {\r\n                        this._rootBabylonMesh.setEnabled(true);\r\n                    }\r\n\r\n                    // Making sure we enable enough lights to have all lights together\r\n                    for (const material of this._babylonScene.materials) {\r\n                        const mat = material as any;\r\n\r\n                        if (mat.maxSimultaneousLights !== undefined) {\r\n                            mat.maxSimultaneousLights = Math.max(mat.maxSimultaneousLights, this._babylonScene.lights.length);\r\n                        }\r\n                    }\r\n\r\n                    this._extensionsOnReady();\r\n                    this._parent._setState(GLTFLoaderState.READY);\r\n                    if (!this._skipStartAnimationStep) {\r\n                        this._startAnimations();\r\n                    }\r\n\r\n                    return resultFunc();\r\n                });\r\n\r\n                return await resultPromise.then((result) => {\r\n                    this._parent._endPerformanceCounter(loadingToReadyCounterName);\r\n\r\n                    Tools.SetImmediate(() => {\r\n                        if (!this._disposed) {\r\n                            Promise.all(this._completePromises).then(\r\n                                () => {\r\n                                    this._parent._endPerformanceCounter(loadingToCompleteCounterName);\r\n\r\n                                    this._parent._setState(GLTFLoaderState.COMPLETE);\r\n\r\n                                    this._parent.onCompleteObservable.notifyObservers(undefined);\r\n                                    this._parent.onCompleteObservable.clear();\r\n\r\n                                    this.dispose();\r\n                                },\r\n                                (error) => {\r\n                                    this._parent.onErrorObservable.notifyObservers(error);\r\n                                    this._parent.onErrorObservable.clear();\r\n\r\n                                    this.dispose();\r\n                                }\r\n                            );\r\n                        }\r\n                    });\r\n\r\n                    return result;\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                if (!this._disposed) {\r\n                    this._parent.onErrorObservable.notifyObservers(error);\r\n                    this._parent.onErrorObservable.clear();\r\n\r\n                    this.dispose();\r\n                }\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    private _loadData(data: IGLTFLoaderData): void {\r\n        this._gltf = data.json as IGLTF;\r\n        this._setupData();\r\n\r\n        if (data.bin) {\r\n            const buffers = this._gltf.buffers;\r\n            if (buffers && buffers[0] && !buffers[0].uri) {\r\n                const binaryBuffer = buffers[0];\r\n                if (binaryBuffer.byteLength < data.bin.byteLength - 3 || binaryBuffer.byteLength > data.bin.byteLength) {\r\n                    Logger.Warn(`Binary buffer length (${binaryBuffer.byteLength}) from JSON does not match chunk length (${data.bin.byteLength})`);\r\n                }\r\n\r\n                this._bin = data.bin;\r\n            } else {\r\n                Logger.Warn(\"Unexpected BIN chunk\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private _setupData(): void {\r\n        ArrayItem.Assign(this._gltf.accessors);\r\n        ArrayItem.Assign(this._gltf.animations);\r\n        ArrayItem.Assign(this._gltf.buffers);\r\n        ArrayItem.Assign(this._gltf.bufferViews);\r\n        ArrayItem.Assign(this._gltf.cameras);\r\n        ArrayItem.Assign(this._gltf.images);\r\n        ArrayItem.Assign(this._gltf.materials);\r\n        ArrayItem.Assign(this._gltf.meshes);\r\n        ArrayItem.Assign(this._gltf.nodes);\r\n        ArrayItem.Assign(this._gltf.samplers);\r\n        ArrayItem.Assign(this._gltf.scenes);\r\n        ArrayItem.Assign(this._gltf.skins);\r\n        ArrayItem.Assign(this._gltf.textures);\r\n\r\n        if (this._gltf.nodes) {\r\n            const nodeParents: { [index: number]: number } = {};\r\n            for (const node of this._gltf.nodes) {\r\n                if (node.children) {\r\n                    for (const index of node.children) {\r\n                        nodeParents[index] = node.index;\r\n                    }\r\n                }\r\n            }\r\n\r\n            const rootNode = this._createRootNode();\r\n            for (const node of this._gltf.nodes) {\r\n                const parentIndex = nodeParents[node.index];\r\n                node.parent = parentIndex === undefined ? rootNode : this._gltf.nodes[parentIndex];\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _loadExtensionsAsync() {\r\n        const extensionPromises: Promise<IGLTFLoaderExtension>[] = [];\r\n\r\n        registeredGLTFExtensions.forEach((registeredExtension, name) => {\r\n            // Don't load explicitly disabled extensions.\r\n            if (this.parent.extensionOptions[name]?.enabled === false) {\r\n                // But warn if the disabled extension is used by the model.\r\n                if (registeredExtension.isGLTFExtension && this.isExtensionUsed(name)) {\r\n                    Logger.Warn(`Extension ${name} is used but has been explicitly disabled.`);\r\n                }\r\n            }\r\n            // Load loader extensions that are not a glTF extension, as well as extensions that are glTF extensions and are used by the model.\r\n            else if (!registeredExtension.isGLTFExtension || this.isExtensionUsed(name)) {\r\n                extensionPromises.push(\r\n                    (async () => {\r\n                        const extension = await registeredExtension.factory(this);\r\n                        if (extension.name !== name) {\r\n                            Logger.Warn(`The name of the glTF loader extension instance does not match the registered name: ${extension.name} !== ${name}`);\r\n                        }\r\n\r\n                        this._parent.onExtensionLoadedObservable.notifyObservers(extension);\r\n                        return extension;\r\n                    })()\r\n                );\r\n            }\r\n        });\r\n\r\n        this._extensions.push(...(await Promise.all(extensionPromises)));\r\n\r\n        this._extensions.sort((a, b) => (a.order || Number.MAX_VALUE) - (b.order || Number.MAX_VALUE));\r\n        this._parent.onExtensionLoadedObservable.clear();\r\n\r\n        if (this._gltf.extensionsRequired) {\r\n            for (const name of this._gltf.extensionsRequired) {\r\n                const available = this._extensions.some((extension) => extension.name === name && extension.enabled);\r\n                if (!available) {\r\n                    if (this.parent.extensionOptions[name]?.enabled === false) {\r\n                        throw new Error(`Required extension ${name} is disabled`);\r\n                    }\r\n                    throw new Error(`Required extension ${name} is not available`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _createRootNode(): INode {\r\n        if (this._parent.customRootNode !== undefined) {\r\n            this._rootBabylonMesh = this._parent.customRootNode;\r\n            return {\r\n                // eslint-disable-next-line @typescript-eslint/naming-convention\r\n                _babylonTransformNode: this._rootBabylonMesh === null ? undefined : this._rootBabylonMesh,\r\n                index: -1,\r\n            };\r\n        }\r\n        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n        const rootMesh = new Mesh(\"__root__\", this._babylonScene);\r\n        this._rootBabylonMesh = rootMesh;\r\n        this._rootBabylonMesh._parentContainer = this._assetContainer;\r\n        this._babylonScene._blockEntityCollection = false;\r\n        this._rootBabylonMesh.setEnabled(false);\r\n\r\n        const rootNode: INode = {\r\n            // eslint-disable-next-line @typescript-eslint/naming-convention\r\n            _babylonTransformNode: this._rootBabylonMesh,\r\n            index: -1,\r\n        };\r\n\r\n        switch (this._parent.coordinateSystemMode) {\r\n            case GLTFLoaderCoordinateSystemMode.AUTO: {\r\n                if (!this._babylonScene.useRightHandedSystem) {\r\n                    rootNode.rotation = [0, 1, 0, 0];\r\n                    rootNode.scale = [1, 1, -1];\r\n                    GLTFLoader._LoadTransform(rootNode, this._rootBabylonMesh);\r\n                }\r\n                break;\r\n            }\r\n            case GLTFLoaderCoordinateSystemMode.FORCE_RIGHT_HANDED: {\r\n                this._babylonScene.useRightHandedSystem = true;\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(`Invalid coordinate system mode (${this._parent.coordinateSystemMode})`);\r\n            }\r\n        }\r\n\r\n        this._parent.onMeshLoadedObservable.notifyObservers(rootMesh);\r\n        return rootNode;\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF scene.\r\n     * @param context The context when loading the asset\r\n     * @param scene The glTF scene property\r\n     * @returns A promise that resolves when the load is complete\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/promise-function-async\r\n    public loadSceneAsync(context: string, scene: IScene): Promise<void> {\r\n        const extensionPromise = this._extensionsLoadSceneAsync(context, scene);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        this.logOpen(`${context} ${scene.name || \"\"}`);\r\n\r\n        if (scene.nodes) {\r\n            for (const index of scene.nodes) {\r\n                const node = ArrayItem.Get(`${context}/nodes/${index}`, this._gltf.nodes, index);\r\n                promises.push(\r\n                    this.loadNodeAsync(`/nodes/${node.index}`, node, (babylonMesh) => {\r\n                        babylonMesh.parent = this._rootBabylonMesh;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n\r\n        for (const action of this._postSceneLoadActions) {\r\n            action();\r\n        }\r\n\r\n        promises.push(this._loadAnimationsAsync());\r\n\r\n        this.logClose();\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    private _forEachPrimitive(node: INode, callback: (babylonMesh: AbstractMesh) => void): void {\r\n        if (node._primitiveBabylonMeshes) {\r\n            for (const babylonMesh of node._primitiveBabylonMeshes) {\r\n                callback(babylonMesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getGeometries(): Geometry[] {\r\n        const geometries: Geometry[] = [];\r\n\r\n        const nodes = this._gltf.nodes;\r\n        if (nodes) {\r\n            for (const node of nodes) {\r\n                this._forEachPrimitive(node, (babylonMesh) => {\r\n                    const geometry = (babylonMesh as Mesh).geometry;\r\n                    if (geometry && geometries.indexOf(geometry) === -1) {\r\n                        geometries.push(geometry);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return geometries;\r\n    }\r\n\r\n    private _getMeshes(): AbstractMesh[] {\r\n        const meshes: AbstractMesh[] = [];\r\n\r\n        // Root mesh is always first, if available.\r\n        if (this._rootBabylonMesh instanceof AbstractMesh) {\r\n            meshes.push(this._rootBabylonMesh);\r\n        }\r\n\r\n        const nodes = this._gltf.nodes;\r\n        if (nodes) {\r\n            for (const node of nodes) {\r\n                this._forEachPrimitive(node, (babylonMesh) => {\r\n                    meshes.push(babylonMesh);\r\n                });\r\n            }\r\n        }\r\n\r\n        return meshes;\r\n    }\r\n\r\n    private _getTransformNodes(): TransformNode[] {\r\n        const transformNodes: TransformNode[] = [];\r\n\r\n        const nodes = this._gltf.nodes;\r\n        if (nodes) {\r\n            for (const node of nodes) {\r\n                if (node._babylonTransformNode && node._babylonTransformNode.getClassName() === \"TransformNode\") {\r\n                    transformNodes.push(node._babylonTransformNode);\r\n                }\r\n                if (node._babylonTransformNodeForSkin) {\r\n                    transformNodes.push(node._babylonTransformNodeForSkin);\r\n                }\r\n            }\r\n        }\r\n\r\n        return transformNodes;\r\n    }\r\n\r\n    private _getSkeletons(): Skeleton[] {\r\n        const skeletons: Skeleton[] = [];\r\n\r\n        const skins = this._gltf.skins;\r\n        if (skins) {\r\n            for (const skin of skins) {\r\n                if (skin._data) {\r\n                    skeletons.push(skin._data.babylonSkeleton);\r\n                }\r\n            }\r\n        }\r\n\r\n        return skeletons;\r\n    }\r\n\r\n    private _getAnimationGroups(): AnimationGroup[] {\r\n        const animationGroups: AnimationGroup[] = [];\r\n\r\n        const animations = this._gltf.animations;\r\n        if (animations) {\r\n            for (const animation of animations) {\r\n                if (animation._babylonAnimationGroup) {\r\n                    animationGroups.push(animation._babylonAnimationGroup);\r\n                }\r\n            }\r\n        }\r\n\r\n        return animationGroups;\r\n    }\r\n\r\n    private _startAnimations(): void {\r\n        switch (this._parent.animationStartMode) {\r\n            case GLTFLoaderAnimationStartMode.NONE: {\r\n                // do nothing\r\n                break;\r\n            }\r\n            case GLTFLoaderAnimationStartMode.FIRST: {\r\n                const babylonAnimationGroups = this._getAnimationGroups();\r\n                if (babylonAnimationGroups.length !== 0) {\r\n                    babylonAnimationGroups[0].start(true);\r\n                }\r\n                break;\r\n            }\r\n            case GLTFLoaderAnimationStartMode.ALL: {\r\n                const babylonAnimationGroups = this._getAnimationGroups();\r\n                for (const babylonAnimationGroup of babylonAnimationGroups) {\r\n                    babylonAnimationGroup.start(true);\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                Logger.Error(`Invalid animation start mode (${this._parent.animationStartMode})`);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF node.\r\n     * @param context The context when loading the asset\r\n     * @param node The glTF node property\r\n     * @param assign A function called synchronously after parsing the glTF properties\r\n     * @returns A promise that resolves with the loaded Babylon mesh when the load is complete\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void = () => {}): Promise<TransformNode> {\r\n        const extensionPromise = this._extensionsLoadNodeAsync(context, node, assign);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        if (node._babylonTransformNode) {\r\n            throw new Error(`${context}: Invalid recursive node hierarchy`);\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        this.logOpen(`${context} ${node.name || \"\"}`);\r\n\r\n        const loadNode = (babylonTransformNode: TransformNode) => {\r\n            GLTFLoader.AddPointerMetadata(babylonTransformNode, context);\r\n            GLTFLoader._LoadTransform(node, babylonTransformNode);\r\n\r\n            if (node.camera != undefined) {\r\n                const camera = ArrayItem.Get(`${context}/camera`, this._gltf.cameras, node.camera);\r\n                promises.push(\r\n                    this.loadCameraAsync(`/cameras/${camera.index}`, camera, (babylonCamera) => {\r\n                        babylonCamera.parent = babylonTransformNode;\r\n                        if (!this._babylonScene.useRightHandedSystem) {\r\n                            babylonTransformNode.scaling.x = -1; // Cancelling root node scaling for handedness so the view matrix does not end up flipped.\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n\r\n            if (node.children) {\r\n                for (const index of node.children) {\r\n                    const childNode = ArrayItem.Get(`${context}/children/${index}`, this._gltf.nodes, index);\r\n                    promises.push(\r\n                        this.loadNodeAsync(`/nodes/${childNode.index}`, childNode, (childBabylonMesh) => {\r\n                            childBabylonMesh.parent = babylonTransformNode;\r\n                        })\r\n                    );\r\n                }\r\n            }\r\n\r\n            assign(babylonTransformNode);\r\n        };\r\n\r\n        const hasMesh = node.mesh != undefined;\r\n        const hasSkin = this._parent.loadSkins && node.skin != undefined;\r\n\r\n        if (!hasMesh || hasSkin) {\r\n            const nodeName = node.name || `node${node.index}`;\r\n            this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n            const transformNode = new TransformNode(nodeName, this._babylonScene);\r\n            transformNode._parentContainer = this._assetContainer;\r\n            this._babylonScene._blockEntityCollection = false;\r\n            if (node.mesh == undefined) {\r\n                node._babylonTransformNode = transformNode;\r\n            } else {\r\n                node._babylonTransformNodeForSkin = transformNode;\r\n            }\r\n            loadNode(transformNode);\r\n        }\r\n\r\n        if (hasMesh) {\r\n            if (hasSkin) {\r\n                // See https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins (second implementation note)\r\n                // This code path will place the skinned mesh as a sibling of the skeleton root node without loading the\r\n                // transform, which effectively ignores the transform of the skinned mesh, as per spec.\r\n\r\n                const mesh = ArrayItem.Get(`${context}/mesh`, this._gltf.meshes, node.mesh);\r\n                promises.push(\r\n                    this._loadMeshAsync(`/meshes/${mesh.index}`, node, mesh, (babylonTransformNode) => {\r\n                        const babylonTransformNodeForSkin = node._babylonTransformNodeForSkin!;\r\n\r\n                        // Merge the metadata from the skin node to the skinned mesh in case a loader extension added metadata.\r\n                        babylonTransformNode.metadata = deepMerge(babylonTransformNodeForSkin.metadata, babylonTransformNode.metadata || {});\r\n\r\n                        const skin = ArrayItem.Get(`${context}/skin`, this._gltf.skins, node.skin);\r\n                        promises.push(\r\n                            this._loadSkinAsync(`/skins/${skin.index}`, node, skin, (babylonSkeleton) => {\r\n                                this._forEachPrimitive(node, (babylonMesh) => {\r\n                                    babylonMesh.skeleton = babylonSkeleton;\r\n                                });\r\n\r\n                                // Wait until all the nodes are parented before parenting the skinned mesh.\r\n                                this._postSceneLoadActions.push(() => {\r\n                                    if (skin.skeleton != undefined) {\r\n                                        // Place the skinned mesh node as a sibling of the skeleton root node.\r\n                                        // Handle special case when the parent of the skeleton root is the skinned mesh.\r\n                                        const parentNode = ArrayItem.Get(`/skins/${skin.index}/skeleton`, this._gltf.nodes, skin.skeleton).parent!;\r\n                                        if (node.index === parentNode.index) {\r\n                                            babylonTransformNode.parent = babylonTransformNodeForSkin.parent;\r\n                                        } else {\r\n                                            babylonTransformNode.parent = parentNode._babylonTransformNode!;\r\n                                        }\r\n                                    } else {\r\n                                        babylonTransformNode.parent = this._rootBabylonMesh;\r\n                                    }\r\n\r\n                                    this._parent.onSkinLoadedObservable.notifyObservers({ node: babylonTransformNodeForSkin, skinnedNode: babylonTransformNode });\r\n                                });\r\n                            })\r\n                        );\r\n                    })\r\n                );\r\n            } else {\r\n                const mesh = ArrayItem.Get(`${context}/mesh`, this._gltf.meshes, node.mesh);\r\n                promises.push(this._loadMeshAsync(`/meshes/${mesh.index}`, node, mesh, loadNode));\r\n            }\r\n        }\r\n\r\n        this.logClose();\r\n\r\n        return Promise.all(promises).then(() => {\r\n            this._forEachPrimitive(node, (babylonMesh) => {\r\n                const asMesh = babylonMesh as Mesh;\r\n                if (!asMesh.isAnInstance && asMesh.geometry && asMesh.geometry.useBoundingInfoFromGeometry) {\r\n                    // simply apply the world matrices to the bounding info - the extends are already ok\r\n                    babylonMesh._updateBoundingInfo();\r\n                } else {\r\n                    babylonMesh.refreshBoundingInfo(true, true);\r\n                }\r\n            });\r\n\r\n            return node._babylonTransformNode!;\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadMeshAsync(context: string, node: INode, mesh: IMesh, assign: (babylonTransformNode: TransformNode) => void): Promise<TransformNode> {\r\n        const primitives = mesh.primitives;\r\n        if (!primitives || !primitives.length) {\r\n            throw new Error(`${context}: Primitives are missing`);\r\n        }\r\n\r\n        if (primitives[0].index == undefined) {\r\n            ArrayItem.Assign(primitives);\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        this.logOpen(`${context} ${mesh.name || \"\"}`);\r\n\r\n        const name = node.name || `node${node.index}`;\r\n\r\n        if (primitives.length === 1) {\r\n            const primitive = mesh.primitives[0];\r\n            promises.push(\r\n                this._loadMeshPrimitiveAsync(`${context}/primitives/${primitive.index}`, name, node, mesh, primitive, (babylonMesh) => {\r\n                    node._babylonTransformNode = babylonMesh;\r\n                    node._primitiveBabylonMeshes = [babylonMesh];\r\n                })\r\n            );\r\n        } else {\r\n            this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n            node._babylonTransformNode = new TransformNode(name, this._babylonScene);\r\n            node._babylonTransformNode._parentContainer = this._assetContainer;\r\n            this._babylonScene._blockEntityCollection = false;\r\n            node._primitiveBabylonMeshes = [];\r\n            for (const primitive of primitives) {\r\n                promises.push(\r\n                    this._loadMeshPrimitiveAsync(`${context}/primitives/${primitive.index}`, `${name}_primitive${primitive.index}`, node, mesh, primitive, (babylonMesh) => {\r\n                        babylonMesh.parent = node._babylonTransformNode!;\r\n                        node._primitiveBabylonMeshes!.push(babylonMesh);\r\n                    })\r\n                );\r\n            }\r\n        }\r\n\r\n        assign(node._babylonTransformNode!);\r\n\r\n        this.logClose();\r\n\r\n        return Promise.all(promises).then(() => {\r\n            return node._babylonTransformNode!;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal Define this method to modify the default behavior when loading data for mesh primitives.\r\n     * @param context The context when loading the asset\r\n     * @param name The mesh name when loading the asset\r\n     * @param node The glTF node when loading the asset\r\n     * @param mesh The glTF mesh when loading the asset\r\n     * @param primitive The glTF mesh primitive property\r\n     * @param assign A function called synchronously after parsing the glTF properties\r\n     * @returns A promise that resolves with the loaded mesh when the load is complete or null if not handled\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    public _loadMeshPrimitiveAsync(\r\n        context: string,\r\n        name: string,\r\n        node: INode,\r\n        mesh: IMesh,\r\n        primitive: IMeshPrimitive,\r\n        assign: (babylonMesh: AbstractMesh) => void\r\n    ): Promise<AbstractMesh> {\r\n        const extensionPromise = this._extensionsLoadMeshPrimitiveAsync(context, name, node, mesh, primitive, assign);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        this.logOpen(`${context}`);\r\n\r\n        const shouldInstance = this._disableInstancedMesh === 0 && this._parent.createInstances && node.skin == undefined && !mesh.primitives[0].targets;\r\n\r\n        let babylonAbstractMesh: AbstractMesh;\r\n        let promise: Promise<unknown>;\r\n\r\n        if (shouldInstance && primitive._instanceData) {\r\n            this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n            babylonAbstractMesh = primitive._instanceData.babylonSourceMesh.createInstance(name);\r\n            babylonAbstractMesh._parentContainer = this._assetContainer;\r\n            this._babylonScene._blockEntityCollection = false;\r\n            promise = primitive._instanceData.promise;\r\n        } else {\r\n            const promises = new Array<Promise<unknown>>();\r\n\r\n            this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n            const babylonMesh = new Mesh(name, this._babylonScene);\r\n            babylonMesh._parentContainer = this._assetContainer;\r\n            this._babylonScene._blockEntityCollection = false;\r\n            babylonMesh.sideOrientation = this._babylonScene.useRightHandedSystem ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\r\n\r\n            this._createMorphTargets(context, node, mesh, primitive, babylonMesh);\r\n            promises.push(\r\n                this._loadVertexDataAsync(context, primitive, babylonMesh).then(async (babylonGeometry) => {\r\n                    return await this._loadMorphTargetsAsync(context, primitive, babylonMesh, babylonGeometry).then(() => {\r\n                        if (this._disposed) {\r\n                            return;\r\n                        }\r\n\r\n                        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n                        babylonGeometry.applyToMesh(babylonMesh);\r\n                        babylonGeometry._parentContainer = this._assetContainer;\r\n                        this._babylonScene._blockEntityCollection = false;\r\n                    });\r\n                })\r\n            );\r\n\r\n            const babylonDrawMode = GLTFLoader._GetDrawMode(context, primitive.mode);\r\n            if (primitive.material == undefined) {\r\n                let babylonMaterial = this._defaultBabylonMaterialData[babylonDrawMode];\r\n                if (!babylonMaterial) {\r\n                    babylonMaterial = this._createDefaultMaterial(\"__GLTFLoader._default\", babylonDrawMode);\r\n                    this._parent.onMaterialLoadedObservable.notifyObservers(babylonMaterial);\r\n                    this._defaultBabylonMaterialData[babylonDrawMode] = babylonMaterial;\r\n                }\r\n                babylonMesh.material = babylonMaterial;\r\n            } else if (!this.parent.skipMaterials) {\r\n                const material = ArrayItem.Get(`${context}/material`, this._gltf.materials, primitive.material);\r\n                promises.push(\r\n                    this._loadMaterialAsync(`/materials/${material.index}`, material, babylonMesh, babylonDrawMode, (babylonMaterial) => {\r\n                        babylonMesh.material = babylonMaterial;\r\n                    })\r\n                );\r\n            }\r\n\r\n            promise = Promise.all(promises);\r\n\r\n            if (shouldInstance) {\r\n                primitive._instanceData = {\r\n                    babylonSourceMesh: babylonMesh,\r\n                    promise: promise,\r\n                };\r\n            }\r\n\r\n            babylonAbstractMesh = babylonMesh;\r\n        }\r\n\r\n        GLTFLoader.AddPointerMetadata(babylonAbstractMesh, context);\r\n        this._parent.onMeshLoadedObservable.notifyObservers(babylonAbstractMesh);\r\n        assign(babylonAbstractMesh);\r\n\r\n        this.logClose();\r\n\r\n        return promise.then(() => {\r\n            return babylonAbstractMesh;\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadVertexDataAsync(context: string, primitive: IMeshPrimitive, babylonMesh: Mesh): Promise<Geometry> {\r\n        const extensionPromise = this._extensionsLoadVertexDataAsync(context, primitive, babylonMesh);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        const attributes = primitive.attributes;\r\n        if (!attributes) {\r\n            throw new Error(`${context}: Attributes are missing`);\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        const babylonGeometry = new Geometry(babylonMesh.name, this._babylonScene);\r\n\r\n        if (primitive.indices == undefined) {\r\n            babylonMesh.isUnIndexed = true;\r\n        } else {\r\n            const accessor = ArrayItem.Get(`${context}/indices`, this._gltf.accessors, primitive.indices);\r\n            promises.push(\r\n                this._loadIndicesAccessorAsync(`/accessors/${accessor.index}`, accessor).then((data) => {\r\n                    babylonGeometry.setIndices(data);\r\n                })\r\n            );\r\n        }\r\n\r\n        const loadAttribute = (name: string, kind: string, callback?: (accessor: IAccessor) => void) => {\r\n            if (attributes[name] == undefined) {\r\n                return;\r\n            }\r\n\r\n            babylonMesh._delayInfo = babylonMesh._delayInfo || [];\r\n            if (babylonMesh._delayInfo.indexOf(kind) === -1) {\r\n                babylonMesh._delayInfo.push(kind);\r\n            }\r\n\r\n            const accessor = ArrayItem.Get(`${context}/attributes/${name}`, this._gltf.accessors, attributes[name]);\r\n            promises.push(\r\n                this._loadVertexAccessorAsync(`/accessors/${accessor.index}`, accessor, kind).then((babylonVertexBuffer) => {\r\n                    if (babylonVertexBuffer.getKind() === VertexBuffer.PositionKind && !this.parent.alwaysComputeBoundingBox && !babylonMesh.skeleton) {\r\n                        const babylonBoundingInfo = LoadBoundingInfoFromPositionAccessor(accessor);\r\n                        if (babylonBoundingInfo) {\r\n                            babylonGeometry._boundingInfo = babylonBoundingInfo;\r\n                            babylonGeometry.useBoundingInfoFromGeometry = true;\r\n                        }\r\n                    }\r\n                    babylonGeometry.setVerticesBuffer(babylonVertexBuffer, accessor.count);\r\n                })\r\n            );\r\n\r\n            if (kind == VertexBuffer.MatricesIndicesExtraKind) {\r\n                babylonMesh.numBoneInfluencers = 8;\r\n            }\r\n\r\n            if (callback) {\r\n                callback(accessor);\r\n            }\r\n        };\r\n\r\n        loadAttribute(\"POSITION\", VertexBuffer.PositionKind);\r\n        loadAttribute(\"NORMAL\", VertexBuffer.NormalKind);\r\n        loadAttribute(\"TANGENT\", VertexBuffer.TangentKind);\r\n        loadAttribute(\"TEXCOORD_0\", VertexBuffer.UVKind);\r\n        loadAttribute(\"TEXCOORD_1\", VertexBuffer.UV2Kind);\r\n        loadAttribute(\"TEXCOORD_2\", VertexBuffer.UV3Kind);\r\n        loadAttribute(\"TEXCOORD_3\", VertexBuffer.UV4Kind);\r\n        loadAttribute(\"TEXCOORD_4\", VertexBuffer.UV5Kind);\r\n        loadAttribute(\"TEXCOORD_5\", VertexBuffer.UV6Kind);\r\n        loadAttribute(\"JOINTS_0\", VertexBuffer.MatricesIndicesKind);\r\n        loadAttribute(\"WEIGHTS_0\", VertexBuffer.MatricesWeightsKind);\r\n        loadAttribute(\"JOINTS_1\", VertexBuffer.MatricesIndicesExtraKind);\r\n        loadAttribute(\"WEIGHTS_1\", VertexBuffer.MatricesWeightsExtraKind);\r\n        loadAttribute(\"COLOR_0\", VertexBuffer.ColorKind, (accessor) => {\r\n            if (accessor.type === AccessorType.VEC4) {\r\n                babylonMesh.hasVertexAlpha = true;\r\n            }\r\n        });\r\n\r\n        return Promise.all(promises).then(() => {\r\n            return babylonGeometry;\r\n        });\r\n    }\r\n\r\n    private _createMorphTargets(context: string, node: INode, mesh: IMesh, primitive: IMeshPrimitive, babylonMesh: Mesh): void {\r\n        if (!primitive.targets || !this._parent.loadMorphTargets) {\r\n            return;\r\n        }\r\n\r\n        if (node._numMorphTargets == undefined) {\r\n            node._numMorphTargets = primitive.targets.length;\r\n        } else if (primitive.targets.length !== node._numMorphTargets) {\r\n            throw new Error(`${context}: Primitives do not have the same number of targets`);\r\n        }\r\n\r\n        const targetNames = mesh.extras ? mesh.extras.targetNames : null;\r\n\r\n        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n        babylonMesh.morphTargetManager = new MorphTargetManager(this._babylonScene);\r\n        babylonMesh.morphTargetManager._parentContainer = this._assetContainer;\r\n        this._babylonScene._blockEntityCollection = false;\r\n\r\n        babylonMesh.morphTargetManager.areUpdatesFrozen = true;\r\n\r\n        for (let index = 0; index < primitive.targets.length; index++) {\r\n            const weight = node.weights ? node.weights[index] : mesh.weights ? mesh.weights[index] : 0;\r\n            const name = targetNames ? targetNames[index] : `morphTarget${index}`;\r\n            babylonMesh.morphTargetManager.addTarget(new MorphTarget(name, weight, babylonMesh.getScene()));\r\n            // TODO: tell the target whether it has positions, normals, tangents\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadMorphTargetsAsync(context: string, primitive: IMeshPrimitive, babylonMesh: Mesh, babylonGeometry: Geometry): Promise<void> {\r\n        if (!primitive.targets || !this._parent.loadMorphTargets) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        const morphTargetManager = babylonMesh.morphTargetManager!;\r\n        for (let index = 0; index < morphTargetManager.numTargets; index++) {\r\n            const babylonMorphTarget = morphTargetManager.getTarget(index);\r\n            promises.push(this._loadMorphTargetVertexDataAsync(`${context}/targets/${index}`, babylonGeometry, primitive.targets[index], babylonMorphTarget));\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {\r\n            morphTargetManager.areUpdatesFrozen = false;\r\n        });\r\n    }\r\n\r\n    private async _loadMorphTargetVertexDataAsync(\r\n        context: string,\r\n        babylonGeometry: Geometry,\r\n        attributes: { [name: string]: number },\r\n        babylonMorphTarget: MorphTarget\r\n    ): Promise<void> {\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        const loadAttribute = (attribute: string, kind: string, setData: (babylonVertexBuffer: VertexBuffer, data: Float32Array) => void) => {\r\n            if (attributes[attribute] == undefined) {\r\n                return;\r\n            }\r\n\r\n            const babylonVertexBuffer = babylonGeometry.getVertexBuffer(kind);\r\n            if (!babylonVertexBuffer) {\r\n                return;\r\n            }\r\n\r\n            const accessor = ArrayItem.Get(`${context}/${attribute}`, this._gltf.accessors, attributes[attribute]);\r\n            promises.push(\r\n                this._loadFloatAccessorAsync(`/accessors/${accessor.index}`, accessor).then((data) => {\r\n                    setData(babylonVertexBuffer, data);\r\n                })\r\n            );\r\n        };\r\n\r\n        loadAttribute(\"POSITION\", VertexBuffer.PositionKind, (babylonVertexBuffer, data) => {\r\n            const positions = new Float32Array(data.length);\r\n            babylonVertexBuffer.forEach(data.length, (value, index) => {\r\n                positions[index] = data[index] + value;\r\n            });\r\n\r\n            babylonMorphTarget.setPositions(positions);\r\n        });\r\n\r\n        loadAttribute(\"NORMAL\", VertexBuffer.NormalKind, (babylonVertexBuffer, data) => {\r\n            const normals = new Float32Array(data.length);\r\n            babylonVertexBuffer.forEach(normals.length, (value, index) => {\r\n                normals[index] = data[index] + value;\r\n            });\r\n\r\n            babylonMorphTarget.setNormals(normals);\r\n        });\r\n\r\n        loadAttribute(\"TANGENT\", VertexBuffer.TangentKind, (babylonVertexBuffer, data) => {\r\n            const tangents = new Float32Array((data.length / 3) * 4);\r\n            let dataIndex = 0;\r\n            babylonVertexBuffer.forEach((data.length / 3) * 4, (value, index) => {\r\n                // Tangent data for morph targets is stored as xyz delta.\r\n                // The vertexData.tangent is stored as xyzw.\r\n                // So we need to skip every fourth vertexData.tangent.\r\n                if ((index + 1) % 4 !== 0) {\r\n                    tangents[dataIndex] = data[dataIndex] + value;\r\n                    dataIndex++;\r\n                }\r\n            });\r\n            babylonMorphTarget.setTangents(tangents);\r\n        });\r\n\r\n        loadAttribute(\"TEXCOORD_0\", VertexBuffer.UVKind, (babylonVertexBuffer, data) => {\r\n            const uvs = new Float32Array(data.length);\r\n            babylonVertexBuffer.forEach(data.length, (value, index) => {\r\n                uvs[index] = data[index] + value;\r\n            });\r\n\r\n            babylonMorphTarget.setUVs(uvs);\r\n        });\r\n\r\n        loadAttribute(\"TEXCOORD_1\", VertexBuffer.UV2Kind, (babylonVertexBuffer, data) => {\r\n            const uvs = new Float32Array(data.length);\r\n            babylonVertexBuffer.forEach(data.length, (value, index) => {\r\n                uvs[index] = data[index] + value;\r\n            });\r\n\r\n            babylonMorphTarget.setUV2s(uvs);\r\n        });\r\n\r\n        loadAttribute(\"COLOR_0\", VertexBuffer.ColorKind, (babylonVertexBuffer, data) => {\r\n            let colors = null;\r\n            const componentSize = babylonVertexBuffer.getSize();\r\n            if (componentSize === 3) {\r\n                colors = new Float32Array((data.length / 3) * 4);\r\n                babylonVertexBuffer.forEach(data.length, (value, index) => {\r\n                    const pixid = Math.floor(index / 3);\r\n                    const channel = index % 3;\r\n                    colors[4 * pixid + channel] = data[3 * pixid + channel] + value;\r\n                });\r\n                for (let i = 0; i < data.length / 3; ++i) {\r\n                    colors[4 * i + 3] = 1;\r\n                }\r\n            } else if (componentSize === 4) {\r\n                colors = new Float32Array(data.length);\r\n                babylonVertexBuffer.forEach(data.length, (value, index) => {\r\n                    colors[index] = data[index] + value;\r\n                });\r\n            } else {\r\n                throw new Error(`${context}: Invalid number of components (${componentSize}) for COLOR_0 attribute`);\r\n            }\r\n            babylonMorphTarget.setColors(colors);\r\n        });\r\n\r\n        return await Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    private static _LoadTransform(node: INode, babylonNode: TransformNode): void {\r\n        // Ignore the TRS of skinned nodes.\r\n        // See https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins (second implementation note)\r\n        if (node.skin != undefined) {\r\n            return;\r\n        }\r\n\r\n        let position = Vector3.Zero();\r\n        let rotation = Quaternion.Identity();\r\n        let scaling = Vector3.One();\r\n\r\n        if (node.matrix) {\r\n            const matrix = Matrix.FromArray(node.matrix);\r\n            matrix.decompose(scaling, rotation, position);\r\n        } else {\r\n            if (node.translation) {\r\n                position = Vector3.FromArray(node.translation);\r\n            }\r\n            if (node.rotation) {\r\n                rotation = Quaternion.FromArray(node.rotation);\r\n            }\r\n            if (node.scale) {\r\n                scaling = Vector3.FromArray(node.scale);\r\n            }\r\n        }\r\n\r\n        babylonNode.position = position;\r\n        babylonNode.rotationQuaternion = rotation;\r\n        babylonNode.scaling = scaling;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadSkinAsync(context: string, node: INode, skin: ISkin, assign: (babylonSkeleton: Skeleton) => void): Promise<void> {\r\n        if (!this._parent.loadSkins) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const extensionPromise = this._extensionsLoadSkinAsync(context, node, skin);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        if (skin._data) {\r\n            assign(skin._data.babylonSkeleton);\r\n            return skin._data.promise;\r\n        }\r\n\r\n        const skeletonId = `skeleton${skin.index}`;\r\n        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n        const babylonSkeleton = new Skeleton(skin.name || skeletonId, skeletonId, this._babylonScene);\r\n        babylonSkeleton._parentContainer = this._assetContainer;\r\n        this._babylonScene._blockEntityCollection = false;\r\n\r\n        this._loadBones(context, skin, babylonSkeleton);\r\n        const promise = this._loadSkinInverseBindMatricesDataAsync(context, skin).then((inverseBindMatricesData) => {\r\n            this._updateBoneMatrices(babylonSkeleton, inverseBindMatricesData);\r\n        });\r\n\r\n        skin._data = {\r\n            babylonSkeleton: babylonSkeleton,\r\n            promise: promise,\r\n        };\r\n\r\n        assign(babylonSkeleton);\r\n\r\n        return promise;\r\n    }\r\n\r\n    private _loadBones(context: string, skin: ISkin, babylonSkeleton: Skeleton): void {\r\n        if (skin.skeleton == undefined || this._parent.alwaysComputeSkeletonRootNode) {\r\n            const rootNode = this._findSkeletonRootNode(`${context}/joints`, skin.joints);\r\n            if (rootNode) {\r\n                if (skin.skeleton === undefined) {\r\n                    skin.skeleton = rootNode.index;\r\n                } else {\r\n                    const isParent = (a: INode, b: INode): boolean => {\r\n                        for (; b.parent; b = b.parent) {\r\n                            if (b.parent === a) {\r\n                                return true;\r\n                            }\r\n                        }\r\n\r\n                        return false;\r\n                    };\r\n\r\n                    const skeletonNode = ArrayItem.Get(`${context}/skeleton`, this._gltf.nodes, skin.skeleton);\r\n                    if (skeletonNode !== rootNode && !isParent(skeletonNode, rootNode)) {\r\n                        Logger.Warn(`${context}/skeleton: Overriding with nearest common ancestor as skeleton node is not a common root`);\r\n                        skin.skeleton = rootNode.index;\r\n                    }\r\n                }\r\n            } else {\r\n                Logger.Warn(`${context}: Failed to find common root`);\r\n            }\r\n        }\r\n\r\n        const babylonBones: { [index: number]: Bone } = {};\r\n        for (const index of skin.joints) {\r\n            const node = ArrayItem.Get(`${context}/joints/${index}`, this._gltf.nodes, index);\r\n            this._loadBone(node, skin, babylonSkeleton, babylonBones);\r\n        }\r\n    }\r\n\r\n    private _findSkeletonRootNode(context: string, joints: Array<number>): Nullable<INode> {\r\n        if (joints.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const paths: { [joint: number]: Array<INode> } = {};\r\n        for (const index of joints) {\r\n            const path: INode[] = [];\r\n            let node = ArrayItem.Get(`${context}/${index}`, this._gltf.nodes, index);\r\n            while (node.index !== -1) {\r\n                path.unshift(node);\r\n                node = node.parent!;\r\n            }\r\n            paths[index] = path;\r\n        }\r\n\r\n        let rootNode: Nullable<INode> = null;\r\n        for (let i = 0; ; ++i) {\r\n            let path = paths[joints[0]];\r\n            if (i >= path.length) {\r\n                return rootNode;\r\n            }\r\n\r\n            const node = path[i];\r\n            for (let j = 1; j < joints.length; ++j) {\r\n                path = paths[joints[j]];\r\n                if (i >= path.length || node !== path[i]) {\r\n                    return rootNode;\r\n                }\r\n            }\r\n\r\n            rootNode = node;\r\n        }\r\n    }\r\n\r\n    private _loadBone(node: INode, skin: ISkin, babylonSkeleton: Skeleton, babylonBones: { [index: number]: Bone }): Bone {\r\n        node._isJoint = true;\r\n\r\n        let babylonBone = babylonBones[node.index];\r\n        if (babylonBone) {\r\n            return babylonBone;\r\n        }\r\n\r\n        let parentBabylonBone: Nullable<Bone> = null;\r\n        if (node.index !== skin.skeleton) {\r\n            if (node.parent && node.parent.index !== -1) {\r\n                parentBabylonBone = this._loadBone(node.parent, skin, babylonSkeleton, babylonBones);\r\n            } else if (skin.skeleton !== undefined) {\r\n                Logger.Warn(`/skins/${skin.index}/skeleton: Skeleton node is not a common root`);\r\n            }\r\n        }\r\n\r\n        const boneIndex = skin.joints.indexOf(node.index);\r\n        babylonBone = new Bone(node.name || `joint${node.index}`, babylonSkeleton, parentBabylonBone, this._getNodeMatrix(node), null, null, boneIndex);\r\n        babylonBones[node.index] = babylonBone;\r\n\r\n        // Wait until the scene is loaded to ensure the transform nodes are loaded.\r\n        this._postSceneLoadActions.push(() => {\r\n            // Link the Babylon bone with the corresponding Babylon transform node.\r\n            // A glTF joint is a pointer to a glTF node in the glTF node hierarchy similar to Unity3D.\r\n            babylonBone.linkTransformNode(node._babylonTransformNode!);\r\n        });\r\n\r\n        return babylonBone;\r\n    }\r\n\r\n    private _loadSkinInverseBindMatricesDataAsync(context: string, skin: ISkin): Promise<Nullable<Float32Array>> {\r\n        if (skin.inverseBindMatrices == undefined) {\r\n            return Promise.resolve(null);\r\n        }\r\n\r\n        const accessor = ArrayItem.Get(`${context}/inverseBindMatrices`, this._gltf.accessors, skin.inverseBindMatrices);\r\n        return this._loadFloatAccessorAsync(`/accessors/${accessor.index}`, accessor);\r\n    }\r\n\r\n    private _updateBoneMatrices(babylonSkeleton: Skeleton, inverseBindMatricesData: Nullable<Float32Array>): void {\r\n        for (const babylonBone of babylonSkeleton.bones) {\r\n            const baseMatrix = Matrix.Identity();\r\n            const boneIndex = babylonBone._index!;\r\n            if (inverseBindMatricesData && boneIndex !== -1) {\r\n                Matrix.FromArrayToRef(inverseBindMatricesData, boneIndex * 16, baseMatrix);\r\n                baseMatrix.invertToRef(baseMatrix);\r\n            }\r\n\r\n            const babylonParentBone = babylonBone.getParent();\r\n            if (babylonParentBone) {\r\n                baseMatrix.multiplyToRef(babylonParentBone.getAbsoluteInverseBindMatrix(), baseMatrix);\r\n            }\r\n\r\n            babylonBone.updateMatrix(baseMatrix, false, false);\r\n            babylonBone._updateAbsoluteBindMatrices(undefined, false);\r\n        }\r\n    }\r\n\r\n    private _getNodeMatrix(node: INode): Matrix {\r\n        return node.matrix\r\n            ? Matrix.FromArray(node.matrix)\r\n            : Matrix.Compose(\r\n                  node.scale ? Vector3.FromArray(node.scale) : Vector3.One(),\r\n                  node.rotation ? Quaternion.FromArray(node.rotation) : Quaternion.Identity(),\r\n                  node.translation ? Vector3.FromArray(node.translation) : Vector3.Zero()\r\n              );\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF camera.\r\n     * @param context The context when loading the asset\r\n     * @param camera The glTF camera property\r\n     * @param assign A function called synchronously after parsing the glTF properties\r\n     * @returns A promise that resolves with the loaded Babylon camera when the load is complete\r\n     */\r\n    public loadCameraAsync(context: string, camera: ICamera, assign: (babylonCamera: Camera) => void = () => {}): Promise<Camera> {\r\n        const extensionPromise = this._extensionsLoadCameraAsync(context, camera, assign);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        this.logOpen(`${context} ${camera.name || \"\"}`);\r\n\r\n        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n        const babylonCamera = new FreeCamera(camera.name || `camera${camera.index}`, Vector3.Zero(), this._babylonScene, false);\r\n        babylonCamera._parentContainer = this._assetContainer;\r\n        this._babylonScene._blockEntityCollection = false;\r\n        camera._babylonCamera = babylonCamera;\r\n\r\n        // glTF cameras look towards the local -Z axis.\r\n        babylonCamera.setTarget(new Vector3(0, 0, -1));\r\n\r\n        switch (camera.type) {\r\n            case CameraType.PERSPECTIVE: {\r\n                const perspective = camera.perspective;\r\n                if (!perspective) {\r\n                    throw new Error(`${context}: Camera perspective properties are missing`);\r\n                }\r\n\r\n                babylonCamera.fov = perspective.yfov;\r\n                babylonCamera.minZ = perspective.znear;\r\n                babylonCamera.maxZ = perspective.zfar || 0;\r\n                break;\r\n            }\r\n            case CameraType.ORTHOGRAPHIC: {\r\n                if (!camera.orthographic) {\r\n                    throw new Error(`${context}: Camera orthographic properties are missing`);\r\n                }\r\n\r\n                babylonCamera.mode = Camera.ORTHOGRAPHIC_CAMERA;\r\n                babylonCamera.orthoLeft = -camera.orthographic.xmag;\r\n                babylonCamera.orthoRight = camera.orthographic.xmag;\r\n                babylonCamera.orthoBottom = -camera.orthographic.ymag;\r\n                babylonCamera.orthoTop = camera.orthographic.ymag;\r\n                babylonCamera.minZ = camera.orthographic.znear;\r\n                babylonCamera.maxZ = camera.orthographic.zfar;\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(`${context}: Invalid camera type (${camera.type})`);\r\n            }\r\n        }\r\n\r\n        GLTFLoader.AddPointerMetadata(babylonCamera, context);\r\n        this._parent.onCameraLoadedObservable.notifyObservers(babylonCamera);\r\n        assign(babylonCamera);\r\n\r\n        this.logClose();\r\n\r\n        return Promise.all(promises).then(() => {\r\n            return babylonCamera;\r\n        });\r\n    }\r\n\r\n    private _loadAnimationsAsync(): Promise<void> {\r\n        const animations = this._gltf.animations;\r\n        if (!animations) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const promises = new Array<Promise<void>>();\r\n\r\n        for (let index = 0; index < animations.length; index++) {\r\n            const animation = animations[index];\r\n            promises.push(\r\n                this.loadAnimationAsync(`/animations/${animation.index}`, animation).then((animationGroup) => {\r\n                    // Delete the animation group if it ended up not having any animations in it.\r\n                    if (animationGroup.targetedAnimations.length === 0) {\r\n                        animationGroup.dispose();\r\n                    }\r\n                })\r\n            );\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF animation.\r\n     * @param context The context when loading the asset\r\n     * @param animation The glTF animation property\r\n     * @returns A promise that resolves with the loaded Babylon animation group when the load is complete\r\n     */\r\n    public loadAnimationAsync(context: string, animation: IAnimation): Promise<AnimationGroup> {\r\n        const promise = this._extensionsLoadAnimationAsync(context, animation);\r\n        if (promise) {\r\n            return promise;\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        return import(\"core/Animations/animationGroup\").then(({ AnimationGroup }) => {\r\n            this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n            const babylonAnimationGroup = new AnimationGroup(animation.name || `animation${animation.index}`, this._babylonScene);\r\n            babylonAnimationGroup._parentContainer = this._assetContainer;\r\n            this._babylonScene._blockEntityCollection = false;\r\n            animation._babylonAnimationGroup = babylonAnimationGroup;\r\n\r\n            const promises = new Array<Promise<unknown>>();\r\n\r\n            ArrayItem.Assign(animation.channels);\r\n            ArrayItem.Assign(animation.samplers);\r\n\r\n            for (const channel of animation.channels) {\r\n                promises.push(\r\n                    this._loadAnimationChannelAsync(`${context}/channels/${channel.index}`, context, animation, channel, (babylonTarget, babylonAnimation) => {\r\n                        babylonTarget.animations = babylonTarget.animations || [];\r\n                        babylonTarget.animations.push(babylonAnimation);\r\n                        babylonAnimationGroup.addTargetedAnimation(babylonAnimation, babylonTarget);\r\n                    })\r\n                );\r\n            }\r\n\r\n            return Promise.all(promises).then(() => {\r\n                babylonAnimationGroup.normalize(0);\r\n                return babylonAnimationGroup;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Loads a glTF animation channel.\r\n     * @param context The context when loading the asset\r\n     * @param animationContext The context of the animation when loading the asset\r\n     * @param animation The glTF animation property\r\n     * @param channel The glTF animation channel property\r\n     * @param onLoad Called for each animation loaded\r\n     * @returns A void promise that resolves when the load is complete\r\n     */\r\n    public async _loadAnimationChannelAsync(\r\n        context: string,\r\n        animationContext: string,\r\n        animation: IAnimation,\r\n        channel: IAnimationChannel,\r\n        onLoad: (babylonAnimatable: IAnimatable, babylonAnimation: Animation) => void\r\n    ): Promise<void> {\r\n        const promise = this._extensionsLoadAnimationChannelAsync(context, animationContext, animation, channel, onLoad);\r\n        if (promise) {\r\n            return await promise;\r\n        }\r\n\r\n        if (channel.target.node == undefined) {\r\n            return await Promise.resolve();\r\n        }\r\n\r\n        const targetNode = ArrayItem.Get(`${context}/target/node`, this._gltf.nodes, channel.target.node);\r\n        const channelTargetPath = channel.target.path;\r\n        const pathIsWeights = channelTargetPath === AnimationChannelTargetPath.WEIGHTS;\r\n\r\n        // Ignore animations that have no animation targets.\r\n        if ((pathIsWeights && !targetNode._numMorphTargets) || (!pathIsWeights && !targetNode._babylonTransformNode)) {\r\n            return await Promise.resolve();\r\n        }\r\n\r\n        // Don't load node animations if disabled.\r\n        if (!this._parent.loadNodeAnimations && !pathIsWeights && !targetNode._isJoint) {\r\n            return await Promise.resolve();\r\n        }\r\n        // async-load the animation sampler to provide the interpolation of the channelTargetPath\r\n        await import(\"./glTFLoaderAnimation\");\r\n\r\n        let properties: IInterpolationPropertyInfo[];\r\n        switch (channelTargetPath) {\r\n            case AnimationChannelTargetPath.TRANSLATION: {\r\n                properties = GetMappingForKey(\"/nodes/{}/translation\")?.interpolation!;\r\n                break;\r\n            }\r\n            case AnimationChannelTargetPath.ROTATION: {\r\n                properties = GetMappingForKey(\"/nodes/{}/rotation\")?.interpolation!;\r\n                break;\r\n            }\r\n            case AnimationChannelTargetPath.SCALE: {\r\n                properties = GetMappingForKey(\"/nodes/{}/scale\")?.interpolation!;\r\n                break;\r\n            }\r\n            case AnimationChannelTargetPath.WEIGHTS: {\r\n                properties = GetMappingForKey(\"/nodes/{}/weights\")?.interpolation!;\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(`${context}/target/path: Invalid value (${channel.target.path})`);\r\n            }\r\n        }\r\n        // stay safe\r\n        if (!properties) {\r\n            throw new Error(`${context}/target/path: Could not find interpolation properties for target path (${channel.target.path})`);\r\n        }\r\n\r\n        const targetInfo: IObjectInfo<IInterpolationPropertyInfo[]> = {\r\n            object: targetNode,\r\n            info: properties,\r\n        };\r\n\r\n        return await this._loadAnimationChannelFromTargetInfoAsync(context, animationContext, animation, channel, targetInfo, onLoad);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Loads a glTF animation channel.\r\n     * @param context The context when loading the asset\r\n     * @param animationContext The context of the animation when loading the asset\r\n     * @param animation The glTF animation property\r\n     * @param channel The glTF animation channel property\r\n     * @param targetInfo The glTF target and properties\r\n     * @param onLoad Called for each animation loaded\r\n     * @returns A void promise that resolves when the load is complete\r\n     */\r\n    public _loadAnimationChannelFromTargetInfoAsync(\r\n        context: string,\r\n        animationContext: string,\r\n        animation: IAnimation,\r\n        channel: IAnimationChannel,\r\n        targetInfo: IObjectInfo<IInterpolationPropertyInfo[]>,\r\n        onLoad: (babylonAnimatable: IAnimatable, babylonAnimation: Animation) => void\r\n    ): Promise<void> {\r\n        const fps = this.parent.targetFps;\r\n        const invfps = 1 / fps;\r\n\r\n        const sampler = ArrayItem.Get(`${context}/sampler`, animation.samplers, channel.sampler);\r\n        return this._loadAnimationSamplerAsync(`${animationContext}/samplers/${channel.sampler}`, sampler).then((data) => {\r\n            let numAnimations = 0;\r\n\r\n            const target = targetInfo.object;\r\n            const propertyInfos = targetInfo.info;\r\n            // Extract the corresponding values from the read value.\r\n            // GLTF values may be dispatched to several Babylon properties.\r\n            // For example, baseColorFactor [`r`, `g`, `b`, `a`] is dispatched to\r\n            // - albedoColor as Color3(`r`, `g`, `b`)\r\n            // - alpha as `a`\r\n            for (const propertyInfo of propertyInfos) {\r\n                const stride = propertyInfo.getStride(target);\r\n                const input = data.input;\r\n                const output = data.output;\r\n                const keys = new Array<IAnimationKey>(input.length);\r\n                let outputOffset = 0;\r\n\r\n                switch (data.interpolation) {\r\n                    case AnimationSamplerInterpolation.STEP: {\r\n                        for (let index = 0; index < input.length; index++) {\r\n                            const value = propertyInfo.getValue(target, output, outputOffset, 1);\r\n                            outputOffset += stride;\r\n\r\n                            keys[index] = {\r\n                                frame: input[index] * fps,\r\n                                value: value,\r\n                                interpolation: AnimationKeyInterpolation.STEP,\r\n                            };\r\n                        }\r\n                        break;\r\n                    }\r\n                    case AnimationSamplerInterpolation.CUBICSPLINE: {\r\n                        for (let index = 0; index < input.length; index++) {\r\n                            const inTangent = propertyInfo.getValue(target, output, outputOffset, invfps);\r\n                            outputOffset += stride;\r\n                            const value = propertyInfo.getValue(target, output, outputOffset, 1);\r\n                            outputOffset += stride;\r\n                            const outTangent = propertyInfo.getValue(target, output, outputOffset, invfps);\r\n                            outputOffset += stride;\r\n\r\n                            keys[index] = {\r\n                                frame: input[index] * fps,\r\n                                inTangent: inTangent,\r\n                                value: value,\r\n                                outTangent: outTangent,\r\n                            };\r\n                        }\r\n                        break;\r\n                    }\r\n                    case AnimationSamplerInterpolation.LINEAR: {\r\n                        for (let index = 0; index < input.length; index++) {\r\n                            const value = propertyInfo.getValue(target, output, outputOffset, 1);\r\n                            outputOffset += stride;\r\n\r\n                            keys[index] = {\r\n                                frame: input[index] * fps,\r\n                                value: value,\r\n                            };\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (outputOffset > 0) {\r\n                    const name = `${animation.name || `animation${animation.index}`}_channel${channel.index}_${numAnimations}`;\r\n                    const babylonAnimations = propertyInfo.buildAnimations(target, name, fps, keys);\r\n                    for (const babylonAnimation of babylonAnimations) {\r\n                        numAnimations++;\r\n                        onLoad(babylonAnimation.babylonAnimatable, babylonAnimation.babylonAnimation);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private _loadAnimationSamplerAsync(context: string, sampler: IAnimationSampler): Promise<_IAnimationSamplerData> {\r\n        if (sampler._data) {\r\n            return sampler._data;\r\n        }\r\n\r\n        const interpolation = sampler.interpolation || AnimationSamplerInterpolation.LINEAR;\r\n        switch (interpolation) {\r\n            case AnimationSamplerInterpolation.STEP:\r\n            case AnimationSamplerInterpolation.LINEAR:\r\n            case AnimationSamplerInterpolation.CUBICSPLINE: {\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(`${context}/interpolation: Invalid value (${sampler.interpolation})`);\r\n            }\r\n        }\r\n\r\n        const inputAccessor = ArrayItem.Get(`${context}/input`, this._gltf.accessors, sampler.input);\r\n        const outputAccessor = ArrayItem.Get(`${context}/output`, this._gltf.accessors, sampler.output);\r\n        sampler._data = Promise.all([\r\n            this._loadFloatAccessorAsync(`/accessors/${inputAccessor.index}`, inputAccessor),\r\n            this._loadFloatAccessorAsync(`/accessors/${outputAccessor.index}`, outputAccessor),\r\n        ]).then(([inputData, outputData]) => {\r\n            return {\r\n                input: inputData,\r\n                interpolation: interpolation,\r\n                output: outputData,\r\n            };\r\n        });\r\n\r\n        return sampler._data;\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF buffer.\r\n     * @param context The context when loading the asset\r\n     * @param buffer The glTF buffer property\r\n     * @param byteOffset The byte offset to use\r\n     * @param byteLength The byte length to use\r\n     * @returns A promise that resolves with the loaded data when the load is complete\r\n     */\r\n    public loadBufferAsync(context: string, buffer: IBuffer, byteOffset: number, byteLength: number): Promise<ArrayBufferView> {\r\n        const extensionPromise = this._extensionsLoadBufferAsync(context, buffer, byteOffset, byteLength);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        if (!buffer._data) {\r\n            if (buffer.uri) {\r\n                buffer._data = this.loadUriAsync(`${context}/uri`, buffer, buffer.uri);\r\n            } else {\r\n                if (!this._bin) {\r\n                    throw new Error(`${context}: Uri is missing or the binary glTF is missing its binary chunk`);\r\n                }\r\n\r\n                buffer._data = this._bin.readAsync(0, buffer.byteLength);\r\n            }\r\n        }\r\n\r\n        return buffer._data.then((data) => {\r\n            try {\r\n                return new Uint8Array(data.buffer, data.byteOffset + byteOffset, byteLength);\r\n            } catch (e) {\r\n                throw new Error(`${context}: ${e.message}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF buffer view.\r\n     * @param context The context when loading the asset\r\n     * @param bufferView The glTF buffer view property\r\n     * @returns A promise that resolves with the loaded data when the load is complete\r\n     */\r\n    public loadBufferViewAsync(context: string, bufferView: IBufferView): Promise<ArrayBufferView> {\r\n        const extensionPromise = this._extensionsLoadBufferViewAsync(context, bufferView);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        if (bufferView._data) {\r\n            return bufferView._data;\r\n        }\r\n\r\n        const buffer = ArrayItem.Get(`${context}/buffer`, this._gltf.buffers, bufferView.buffer);\r\n        bufferView._data = this.loadBufferAsync(`/buffers/${buffer.index}`, buffer, bufferView.byteOffset || 0, bufferView.byteLength);\r\n\r\n        return bufferView._data;\r\n    }\r\n\r\n    private _loadAccessorAsync(context: string, accessor: IAccessor, constructor: TypedArrayConstructor): Promise<ArrayBufferView> {\r\n        if (accessor._data) {\r\n            return accessor._data;\r\n        }\r\n\r\n        const numComponents = GLTFLoader._GetNumComponents(context, accessor.type);\r\n        const byteStride = numComponents * VertexBuffer.GetTypeByteLength(accessor.componentType);\r\n        const length = numComponents * accessor.count;\r\n\r\n        if (accessor.bufferView == undefined) {\r\n            accessor._data = Promise.resolve(new constructor(length));\r\n        } else {\r\n            const bufferView = ArrayItem.Get(`${context}/bufferView`, this._gltf.bufferViews, accessor.bufferView);\r\n            accessor._data = this.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView).then((data) => {\r\n                if (accessor.componentType === AccessorComponentType.FLOAT && !accessor.normalized && (!bufferView.byteStride || bufferView.byteStride === byteStride)) {\r\n                    return GLTFLoader._GetTypedArray(context, accessor.componentType, data, accessor.byteOffset, length);\r\n                } else {\r\n                    const typedArray = new constructor(length);\r\n                    VertexBuffer.ForEach(\r\n                        data,\r\n                        accessor.byteOffset || 0,\r\n                        bufferView.byteStride || byteStride,\r\n                        numComponents,\r\n                        accessor.componentType,\r\n                        typedArray.length,\r\n                        accessor.normalized || false,\r\n                        (value, index) => {\r\n                            typedArray[index] = value;\r\n                        }\r\n                    );\r\n                    return typedArray;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (accessor.sparse) {\r\n            const sparse = accessor.sparse;\r\n            accessor._data = accessor._data.then((data) => {\r\n                const typedArray = data as TypedArray;\r\n                const indicesBufferView = ArrayItem.Get(`${context}/sparse/indices/bufferView`, this._gltf.bufferViews, sparse.indices.bufferView);\r\n                const valuesBufferView = ArrayItem.Get(`${context}/sparse/values/bufferView`, this._gltf.bufferViews, sparse.values.bufferView);\r\n                return Promise.all([\r\n                    this.loadBufferViewAsync(`/bufferViews/${indicesBufferView.index}`, indicesBufferView),\r\n                    this.loadBufferViewAsync(`/bufferViews/${valuesBufferView.index}`, valuesBufferView),\r\n                ]).then(([indicesData, valuesData]) => {\r\n                    const indices = GLTFLoader._GetTypedArray(\r\n                        `${context}/sparse/indices`,\r\n                        sparse.indices.componentType,\r\n                        indicesData,\r\n                        sparse.indices.byteOffset,\r\n                        sparse.count\r\n                    ) as IndicesArray;\r\n\r\n                    const sparseLength = numComponents * sparse.count;\r\n                    let values: TypedArray;\r\n\r\n                    if (accessor.componentType === AccessorComponentType.FLOAT && !accessor.normalized) {\r\n                        values = GLTFLoader._GetTypedArray(`${context}/sparse/values`, accessor.componentType, valuesData, sparse.values.byteOffset, sparseLength);\r\n                    } else {\r\n                        const sparseData = GLTFLoader._GetTypedArray(`${context}/sparse/values`, accessor.componentType, valuesData, sparse.values.byteOffset, sparseLength);\r\n                        values = new constructor(sparseLength);\r\n                        VertexBuffer.ForEach(sparseData, 0, byteStride, numComponents, accessor.componentType, values.length, accessor.normalized || false, (value, index) => {\r\n                            values[index] = value;\r\n                        });\r\n                    }\r\n\r\n                    let valuesIndex = 0;\r\n                    for (let indicesIndex = 0; indicesIndex < indices.length; indicesIndex++) {\r\n                        let dataIndex = indices[indicesIndex] * numComponents;\r\n                        for (let componentIndex = 0; componentIndex < numComponents; componentIndex++) {\r\n                            typedArray[dataIndex++] = values[valuesIndex++];\r\n                        }\r\n                    }\r\n\r\n                    return typedArray;\r\n                });\r\n            });\r\n        }\r\n\r\n        return accessor._data;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadFloatAccessorAsync(context: string, accessor: IAccessor): Promise<Float32Array> {\r\n        return this._loadAccessorAsync(context, accessor, Float32Array) as Promise<Float32Array>;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadIndicesAccessorAsync(context: string, accessor: IAccessor): Promise<IndicesArray> {\r\n        if (accessor.type !== AccessorType.SCALAR) {\r\n            throw new Error(`${context}/type: Invalid value ${accessor.type}`);\r\n        }\r\n\r\n        if (\r\n            accessor.componentType !== AccessorComponentType.UNSIGNED_BYTE &&\r\n            accessor.componentType !== AccessorComponentType.UNSIGNED_SHORT &&\r\n            accessor.componentType !== AccessorComponentType.UNSIGNED_INT\r\n        ) {\r\n            throw new Error(`${context}/componentType: Invalid value ${accessor.componentType}`);\r\n        }\r\n\r\n        if (accessor._data) {\r\n            return accessor._data as Promise<IndicesArray>;\r\n        }\r\n\r\n        if (accessor.sparse) {\r\n            const constructor = GLTFLoader._GetTypedArrayConstructor(`${context}/componentType`, accessor.componentType);\r\n            accessor._data = this._loadAccessorAsync(context, accessor, constructor);\r\n        } else {\r\n            const bufferView = ArrayItem.Get(`${context}/bufferView`, this._gltf.bufferViews, accessor.bufferView);\r\n            accessor._data = this.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView).then((data) => {\r\n                return GLTFLoader._GetTypedArray(context, accessor.componentType, data, accessor.byteOffset, accessor.count);\r\n            });\r\n        }\r\n\r\n        return accessor._data as Promise<IndicesArray>;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadVertexBufferViewAsync(bufferView: IBufferView): Promise<Buffer> {\r\n        if (bufferView._babylonBuffer) {\r\n            return bufferView._babylonBuffer;\r\n        }\r\n\r\n        const engine = this._babylonScene.getEngine();\r\n        bufferView._babylonBuffer = this.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView).then((data) => {\r\n            return new Buffer(engine, data, false);\r\n        });\r\n\r\n        return bufferView._babylonBuffer;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadVertexAccessorAsync(context: string, accessor: IAccessor, kind: string): Promise<VertexBuffer> {\r\n        if (accessor._babylonVertexBuffer?.[kind]) {\r\n            return accessor._babylonVertexBuffer[kind];\r\n        }\r\n\r\n        if (!accessor._babylonVertexBuffer) {\r\n            accessor._babylonVertexBuffer = {};\r\n        }\r\n\r\n        const engine = this._babylonScene.getEngine();\r\n\r\n        if (accessor.sparse || accessor.bufferView == undefined) {\r\n            accessor._babylonVertexBuffer[kind] = this._loadFloatAccessorAsync(context, accessor).then((data) => {\r\n                return new VertexBuffer(engine, data, kind, false);\r\n            });\r\n        } else {\r\n            const bufferView = ArrayItem.Get(`${context}/bufferView`, this._gltf.bufferViews, accessor.bufferView);\r\n            accessor._babylonVertexBuffer[kind] = this._loadVertexBufferViewAsync(bufferView).then((babylonBuffer) => {\r\n                const numComponents = GLTFLoader._GetNumComponents(context, accessor.type);\r\n                return new VertexBuffer(\r\n                    engine,\r\n                    babylonBuffer,\r\n                    kind,\r\n                    false,\r\n                    undefined,\r\n                    bufferView.byteStride,\r\n                    undefined,\r\n                    accessor.byteOffset,\r\n                    numComponents,\r\n                    accessor.componentType,\r\n                    accessor.normalized,\r\n                    true,\r\n                    undefined,\r\n                    true\r\n                );\r\n            });\r\n        }\r\n\r\n        return accessor._babylonVertexBuffer[kind];\r\n    }\r\n\r\n    private _loadMaterialMetallicRoughnessPropertiesAsync(context: string, properties: IMaterialPbrMetallicRoughness, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        if (properties) {\r\n            if (properties.baseColorFactor) {\r\n                babylonMaterial.albedoColor = Color3.FromArray(properties.baseColorFactor);\r\n                babylonMaterial.alpha = properties.baseColorFactor[3];\r\n            } else {\r\n                babylonMaterial.albedoColor = Color3.White();\r\n            }\r\n\r\n            babylonMaterial.metallic = properties.metallicFactor == undefined ? 1 : properties.metallicFactor;\r\n            babylonMaterial.roughness = properties.roughnessFactor == undefined ? 1 : properties.roughnessFactor;\r\n\r\n            if (properties.baseColorTexture) {\r\n                promises.push(\r\n                    this.loadTextureInfoAsync(`${context}/baseColorTexture`, properties.baseColorTexture, (texture) => {\r\n                        texture.name = `${babylonMaterial.name} (Base Color)`;\r\n                        babylonMaterial.albedoTexture = texture;\r\n                    })\r\n                );\r\n            }\r\n\r\n            if (properties.metallicRoughnessTexture) {\r\n                properties.metallicRoughnessTexture.nonColorData = true;\r\n                promises.push(\r\n                    this.loadTextureInfoAsync(`${context}/metallicRoughnessTexture`, properties.metallicRoughnessTexture, (texture) => {\r\n                        texture.name = `${babylonMaterial.name} (Metallic Roughness)`;\r\n                        babylonMaterial.metallicTexture = texture;\r\n                    })\r\n                );\r\n\r\n                babylonMaterial.useMetallnessFromMetallicTextureBlue = true;\r\n                babylonMaterial.useRoughnessFromMetallicTextureGreen = true;\r\n                babylonMaterial.useRoughnessFromMetallicTextureAlpha = false;\r\n            }\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadMaterialAsync(\r\n        context: string,\r\n        material: IMaterial,\r\n        babylonMesh: Nullable<Mesh>,\r\n        babylonDrawMode: number,\r\n        assign: (babylonMaterial: Material) => void = () => {}\r\n    ): Promise<Material> {\r\n        const extensionPromise = this._extensionsLoadMaterialAsync(context, material, babylonMesh, babylonDrawMode, assign);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        material._data = material._data || {};\r\n        let babylonData = material._data[babylonDrawMode];\r\n        if (!babylonData) {\r\n            this.logOpen(`${context} ${material.name || \"\"}`);\r\n\r\n            const babylonMaterial = this.createMaterial(context, material, babylonDrawMode);\r\n\r\n            babylonData = {\r\n                babylonMaterial: babylonMaterial,\r\n                babylonMeshes: [],\r\n                promise: this.loadMaterialPropertiesAsync(context, material, babylonMaterial),\r\n            };\r\n\r\n            material._data[babylonDrawMode] = babylonData;\r\n\r\n            GLTFLoader.AddPointerMetadata(babylonMaterial, context);\r\n            this._parent.onMaterialLoadedObservable.notifyObservers(babylonMaterial);\r\n\r\n            this.logClose();\r\n        }\r\n\r\n        if (babylonMesh) {\r\n            babylonData.babylonMeshes.push(babylonMesh);\r\n\r\n            babylonMesh.onDisposeObservable.addOnce(() => {\r\n                const index = babylonData.babylonMeshes.indexOf(babylonMesh);\r\n                if (index !== -1) {\r\n                    babylonData.babylonMeshes.splice(index, 1);\r\n                }\r\n            });\r\n        }\r\n\r\n        assign(babylonData.babylonMaterial);\r\n\r\n        return babylonData.promise.then(() => {\r\n            return babylonData.babylonMaterial;\r\n        });\r\n    }\r\n\r\n    private _createDefaultMaterial(name: string, babylonDrawMode: number): Material {\r\n        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n        const babylonMaterial = new PBRMaterial(name, this._babylonScene);\r\n        babylonMaterial._parentContainer = this._assetContainer;\r\n        this._babylonScene._blockEntityCollection = false;\r\n        // Moved to mesh so user can change materials on gltf meshes: babylonMaterial.sideOrientation = this._babylonScene.useRightHandedSystem ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\r\n        babylonMaterial.fillMode = babylonDrawMode;\r\n        babylonMaterial.enableSpecularAntiAliasing = true;\r\n        babylonMaterial.useRadianceOverAlpha = !this._parent.transparencyAsCoverage;\r\n        babylonMaterial.useSpecularOverAlpha = !this._parent.transparencyAsCoverage;\r\n        babylonMaterial.transparencyMode = PBRMaterial.PBRMATERIAL_OPAQUE;\r\n        babylonMaterial.metallic = 1;\r\n        babylonMaterial.roughness = 1;\r\n\r\n        return babylonMaterial;\r\n    }\r\n\r\n    /**\r\n     * Creates a Babylon material from a glTF material.\r\n     * @param context The context when loading the asset\r\n     * @param material The glTF material property\r\n     * @param babylonDrawMode The draw mode for the Babylon material\r\n     * @returns The Babylon material\r\n     */\r\n    public createMaterial(context: string, material: IMaterial, babylonDrawMode: number): Material {\r\n        const extensionPromise = this._extensionsCreateMaterial(context, material, babylonDrawMode);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        const name = material.name || `material${material.index}`;\r\n        const babylonMaterial = this._createDefaultMaterial(name, babylonDrawMode);\r\n\r\n        return babylonMaterial;\r\n    }\r\n\r\n    /**\r\n     * Loads properties from a glTF material into a Babylon material.\r\n     * @param context The context when loading the asset\r\n     * @param material The glTF material property\r\n     * @param babylonMaterial The Babylon material\r\n     * @returns A promise that resolves when the load is complete\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Promise<void> {\r\n        const extensionPromise = this._extensionsLoadMaterialPropertiesAsync(context, material, babylonMaterial);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        promises.push(this.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));\r\n\r\n        if (material.pbrMetallicRoughness) {\r\n            promises.push(this._loadMaterialMetallicRoughnessPropertiesAsync(`${context}/pbrMetallicRoughness`, material.pbrMetallicRoughness, babylonMaterial));\r\n        }\r\n\r\n        this.loadMaterialAlphaProperties(context, material, babylonMaterial);\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    /**\r\n     * Loads the normal, occlusion, and emissive properties from a glTF material into a Babylon material.\r\n     * @param context The context when loading the asset\r\n     * @param material The glTF material property\r\n     * @param babylonMaterial The Babylon material\r\n     * @returns A promise that resolves when the load is complete\r\n     */\r\n    public loadMaterialBasePropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        babylonMaterial.emissiveColor = material.emissiveFactor ? Color3.FromArray(material.emissiveFactor) : new Color3(0, 0, 0);\r\n        if (material.doubleSided) {\r\n            babylonMaterial.backFaceCulling = false;\r\n            babylonMaterial.twoSidedLighting = true;\r\n        }\r\n\r\n        if (material.normalTexture) {\r\n            material.normalTexture.nonColorData = true;\r\n            promises.push(\r\n                this.loadTextureInfoAsync(`${context}/normalTexture`, material.normalTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Normal)`;\r\n                    babylonMaterial.bumpTexture = texture;\r\n                })\r\n            );\r\n\r\n            babylonMaterial.invertNormalMapX = !this._babylonScene.useRightHandedSystem;\r\n            babylonMaterial.invertNormalMapY = this._babylonScene.useRightHandedSystem;\r\n            if (material.normalTexture.scale != undefined && babylonMaterial.bumpTexture) {\r\n                babylonMaterial.bumpTexture.level = material.normalTexture.scale;\r\n            }\r\n\r\n            babylonMaterial.forceIrradianceInFragment = true;\r\n        }\r\n\r\n        if (material.occlusionTexture) {\r\n            material.occlusionTexture.nonColorData = true;\r\n            promises.push(\r\n                this.loadTextureInfoAsync(`${context}/occlusionTexture`, material.occlusionTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Occlusion)`;\r\n                    babylonMaterial.ambientTexture = texture;\r\n                })\r\n            );\r\n\r\n            babylonMaterial.useAmbientInGrayScale = true;\r\n            if (material.occlusionTexture.strength != undefined) {\r\n                babylonMaterial.ambientTextureStrength = material.occlusionTexture.strength;\r\n            }\r\n        }\r\n\r\n        if (material.emissiveTexture) {\r\n            promises.push(\r\n                this.loadTextureInfoAsync(`${context}/emissiveTexture`, material.emissiveTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Emissive)`;\r\n                    babylonMaterial.emissiveTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    /**\r\n     * Loads the alpha properties from a glTF material into a Babylon material.\r\n     * Must be called after the setting the albedo texture of the Babylon material when the material has an albedo texture.\r\n     * @param context The context when loading the asset\r\n     * @param material The glTF material property\r\n     * @param babylonMaterial The Babylon material\r\n     */\r\n    public loadMaterialAlphaProperties(context: string, material: IMaterial, babylonMaterial: Material): void {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const alphaMode = material.alphaMode || MaterialAlphaMode.OPAQUE;\r\n        switch (alphaMode) {\r\n            case MaterialAlphaMode.OPAQUE: {\r\n                babylonMaterial.transparencyMode = PBRMaterial.PBRMATERIAL_OPAQUE;\r\n                babylonMaterial.alpha = 1.0; // Force alpha to 1.0 for opaque mode.\r\n                break;\r\n            }\r\n            case MaterialAlphaMode.MASK: {\r\n                babylonMaterial.transparencyMode = PBRMaterial.PBRMATERIAL_ALPHATEST;\r\n                babylonMaterial.alphaCutOff = material.alphaCutoff == undefined ? 0.5 : material.alphaCutoff;\r\n                if (babylonMaterial.albedoTexture) {\r\n                    babylonMaterial.albedoTexture.hasAlpha = true;\r\n                }\r\n                break;\r\n            }\r\n            case MaterialAlphaMode.BLEND: {\r\n                babylonMaterial.transparencyMode = PBRMaterial.PBRMATERIAL_ALPHABLEND;\r\n                if (babylonMaterial.albedoTexture) {\r\n                    babylonMaterial.albedoTexture.hasAlpha = true;\r\n                    babylonMaterial.useAlphaFromAlbedoTexture = true;\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(`${context}/alphaMode: Invalid value (${material.alphaMode})`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF texture info.\r\n     * @param context The context when loading the asset\r\n     * @param textureInfo The glTF texture info property\r\n     * @param assign A function called synchronously after parsing the glTF properties\r\n     * @returns A promise that resolves with the loaded Babylon texture when the load is complete\r\n     */\r\n    public loadTextureInfoAsync(context: string, textureInfo: ITextureInfo, assign: (babylonTexture: BaseTexture) => void = () => {}): Promise<BaseTexture> {\r\n        const extensionPromise = this._extensionsLoadTextureInfoAsync(context, textureInfo, assign);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        this.logOpen(`${context}`);\r\n\r\n        if (textureInfo.texCoord! >= 6) {\r\n            throw new Error(`${context}/texCoord: Invalid value (${textureInfo.texCoord})`);\r\n        }\r\n\r\n        const texture = ArrayItem.Get(`${context}/index`, this._gltf.textures, textureInfo.index);\r\n        texture._textureInfo = textureInfo;\r\n\r\n        const promise = this._loadTextureAsync(`/textures/${textureInfo.index}`, texture, (babylonTexture) => {\r\n            babylonTexture.coordinatesIndex = textureInfo.texCoord || 0;\r\n            GLTFLoader.AddPointerMetadata(babylonTexture, context);\r\n            this._parent.onTextureLoadedObservable.notifyObservers(babylonTexture);\r\n            assign(babylonTexture);\r\n        });\r\n\r\n        this.logClose();\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadTextureAsync(context: string, texture: ITexture, assign: (babylonTexture: BaseTexture) => void = () => {}): Promise<BaseTexture> {\r\n        const extensionPromise = this._extensionsLoadTextureAsync(context, texture, assign);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        this.logOpen(`${context} ${texture.name || \"\"}`);\r\n\r\n        const sampler = texture.sampler == undefined ? GLTFLoader.DefaultSampler : ArrayItem.Get(`${context}/sampler`, this._gltf.samplers, texture.sampler);\r\n        const image = ArrayItem.Get(`${context}/source`, this._gltf.images, texture.source);\r\n        const promise = this._createTextureAsync(context, sampler, image, assign, undefined, !texture._textureInfo.nonColorData);\r\n\r\n        this.logClose();\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _createTextureAsync(\r\n        context: string,\r\n        sampler: ISampler,\r\n        image: IImage,\r\n        assign: (babylonTexture: BaseTexture) => void = () => {},\r\n        textureLoaderOptions?: unknown,\r\n        useSRGBBuffer?: boolean\r\n    ): Promise<BaseTexture> {\r\n        const samplerData = this._loadSampler(`/samplers/${sampler.index}`, sampler);\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        const deferred = new Deferred<void>();\r\n        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n        const textureCreationOptions: ITextureCreationOptions = {\r\n            noMipmap: samplerData.noMipMaps,\r\n            invertY: false,\r\n            samplingMode: samplerData.samplingMode,\r\n            onLoad: () => {\r\n                if (!this._disposed) {\r\n                    deferred.resolve();\r\n                }\r\n            },\r\n            onError: (message?: string, exception?: any) => {\r\n                if (!this._disposed) {\r\n                    deferred.reject(new Error(`${context}: ${exception && exception.message ? exception.message : message || \"Failed to load texture\"}`));\r\n                }\r\n            },\r\n            mimeType: image.mimeType ?? GetMimeType(image.uri ?? \"\"),\r\n            loaderOptions: textureLoaderOptions,\r\n            useSRGBBuffer: !!useSRGBBuffer && this._parent.useSRGBBuffers,\r\n        };\r\n        const babylonTexture = new Texture(null, this._babylonScene, textureCreationOptions);\r\n        babylonTexture._parentContainer = this._assetContainer;\r\n        this._babylonScene._blockEntityCollection = false;\r\n        promises.push(deferred.promise);\r\n\r\n        promises.push(\r\n            this.loadImageAsync(`/images/${image.index}`, image).then((data) => {\r\n                const name = image.uri || `${this._fileName}#image${image.index}`;\r\n                const dataUrl = `data:${this._uniqueRootUrl}${name}`;\r\n                babylonTexture.updateURL(dataUrl, data);\r\n\r\n                // Set the internal texture label.\r\n                const internalTexture = babylonTexture.getInternalTexture();\r\n                if (internalTexture) {\r\n                    internalTexture.label = image.name;\r\n                }\r\n            })\r\n        );\r\n\r\n        babylonTexture.wrapU = samplerData.wrapU;\r\n        babylonTexture.wrapV = samplerData.wrapV;\r\n        assign(babylonTexture);\r\n\r\n        if (this._parent.useGltfTextureNames) {\r\n            babylonTexture.name = image.name || image.uri || `image${image.index}`;\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {\r\n            return babylonTexture;\r\n        });\r\n    }\r\n\r\n    private _loadSampler(context: string, sampler: ISampler): _ISamplerData {\r\n        if (!sampler._data) {\r\n            sampler._data = {\r\n                noMipMaps: sampler.minFilter === TextureMinFilter.NEAREST || sampler.minFilter === TextureMinFilter.LINEAR,\r\n                samplingMode: GLTFLoader._GetTextureSamplingMode(context, sampler),\r\n                wrapU: GLTFLoader._GetTextureWrapMode(`${context}/wrapS`, sampler.wrapS),\r\n                wrapV: GLTFLoader._GetTextureWrapMode(`${context}/wrapT`, sampler.wrapT),\r\n            };\r\n        }\r\n\r\n        return sampler._data;\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF image.\r\n     * @param context The context when loading the asset\r\n     * @param image The glTF image property\r\n     * @returns A promise that resolves with the loaded data when the load is complete\r\n     */\r\n    public loadImageAsync(context: string, image: IImage): Promise<ArrayBufferView> {\r\n        if (!image._data) {\r\n            this.logOpen(`${context} ${image.name || \"\"}`);\r\n\r\n            if (image.uri) {\r\n                image._data = this.loadUriAsync(`${context}/uri`, image, image.uri);\r\n            } else {\r\n                const bufferView = ArrayItem.Get(`${context}/bufferView`, this._gltf.bufferViews, image.bufferView);\r\n                image._data = this.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView);\r\n            }\r\n\r\n            this.logClose();\r\n        }\r\n\r\n        return image._data;\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF uri.\r\n     * @param context The context when loading the asset\r\n     * @param property The glTF property associated with the uri\r\n     * @param uri The base64 or relative uri\r\n     * @returns A promise that resolves with the loaded data when the load is complete\r\n     */\r\n    public loadUriAsync(context: string, property: IProperty, uri: string): Promise<ArrayBufferView> {\r\n        const extensionPromise = this._extensionsLoadUriAsync(context, property, uri);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        if (!GLTFLoader._ValidateUri(uri)) {\r\n            throw new Error(`${context}: '${uri}' is invalid`);\r\n        }\r\n\r\n        if (IsBase64DataUrl(uri)) {\r\n            const data = new Uint8Array(DecodeBase64UrlToBinary(uri));\r\n            this.log(`${context}: Decoded ${uri.substring(0, 64)}... (${data.length} bytes)`);\r\n            return Promise.resolve(data);\r\n        }\r\n\r\n        this.log(`${context}: Loading ${uri}`);\r\n\r\n        return this._parent.preprocessUrlAsync(this._rootUrl + uri).then((url) => {\r\n            return new Promise((resolve, reject) => {\r\n                this._parent._loadFile(\r\n                    this._babylonScene,\r\n                    url,\r\n                    (data) => {\r\n                        if (!this._disposed) {\r\n                            this.log(`${context}: Loaded ${uri} (${(data as ArrayBuffer).byteLength} bytes)`);\r\n                            resolve(new Uint8Array(data as ArrayBuffer));\r\n                        }\r\n                    },\r\n                    true,\r\n                    (request) => {\r\n                        reject(new LoadFileError(`${context}: Failed to load '${uri}'${request ? \": \" + request.status + \" \" + request.statusText : \"\"}`, request));\r\n                    }\r\n                );\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a JSON pointer to the _internalMetadata of the Babylon object at `<object>._internalMetadata.gltf.pointers`.\r\n     * @param babylonObject the Babylon object with _internalMetadata\r\n     * @param pointer the JSON pointer\r\n     */\r\n    public static AddPointerMetadata(babylonObject: IWithMetadata, pointer: string): void {\r\n        babylonObject.metadata = babylonObject.metadata || {};\r\n        const metadata = (babylonObject._internalMetadata = babylonObject._internalMetadata || {});\r\n        const gltf = (metadata.gltf = metadata.gltf || {});\r\n        const pointers = (gltf.pointers = gltf.pointers || []);\r\n        pointers.push(pointer);\r\n    }\r\n\r\n    private static _GetTextureWrapMode(context: string, mode: TextureWrapMode | undefined): number {\r\n        // Set defaults if undefined\r\n        mode = mode == undefined ? TextureWrapMode.REPEAT : mode;\r\n\r\n        switch (mode) {\r\n            case TextureWrapMode.CLAMP_TO_EDGE:\r\n                return Texture.CLAMP_ADDRESSMODE;\r\n            case TextureWrapMode.MIRRORED_REPEAT:\r\n                return Texture.MIRROR_ADDRESSMODE;\r\n            case TextureWrapMode.REPEAT:\r\n                return Texture.WRAP_ADDRESSMODE;\r\n            default:\r\n                Logger.Warn(`${context}: Invalid value (${mode})`);\r\n                return Texture.WRAP_ADDRESSMODE;\r\n        }\r\n    }\r\n\r\n    private static _GetTextureSamplingMode(context: string, sampler: ISampler): number {\r\n        // Set defaults if undefined\r\n        const magFilter = sampler.magFilter == undefined ? TextureMagFilter.LINEAR : sampler.magFilter;\r\n        const minFilter = sampler.minFilter == undefined ? TextureMinFilter.LINEAR_MIPMAP_LINEAR : sampler.minFilter;\r\n\r\n        if (magFilter === TextureMagFilter.LINEAR) {\r\n            switch (minFilter) {\r\n                case TextureMinFilter.NEAREST:\r\n                    return Texture.LINEAR_NEAREST;\r\n                case TextureMinFilter.LINEAR:\r\n                    return Texture.LINEAR_LINEAR;\r\n                case TextureMinFilter.NEAREST_MIPMAP_NEAREST:\r\n                    return Texture.LINEAR_NEAREST_MIPNEAREST;\r\n                case TextureMinFilter.LINEAR_MIPMAP_NEAREST:\r\n                    return Texture.LINEAR_LINEAR_MIPNEAREST;\r\n                case TextureMinFilter.NEAREST_MIPMAP_LINEAR:\r\n                    return Texture.LINEAR_NEAREST_MIPLINEAR;\r\n                case TextureMinFilter.LINEAR_MIPMAP_LINEAR:\r\n                    return Texture.LINEAR_LINEAR_MIPLINEAR;\r\n                default:\r\n                    Logger.Warn(`${context}/minFilter: Invalid value (${minFilter})`);\r\n                    return Texture.LINEAR_LINEAR_MIPLINEAR;\r\n            }\r\n        } else {\r\n            if (magFilter !== TextureMagFilter.NEAREST) {\r\n                Logger.Warn(`${context}/magFilter: Invalid value (${magFilter})`);\r\n            }\r\n\r\n            switch (minFilter) {\r\n                case TextureMinFilter.NEAREST:\r\n                    return Texture.NEAREST_NEAREST;\r\n                case TextureMinFilter.LINEAR:\r\n                    return Texture.NEAREST_LINEAR;\r\n                case TextureMinFilter.NEAREST_MIPMAP_NEAREST:\r\n                    return Texture.NEAREST_NEAREST_MIPNEAREST;\r\n                case TextureMinFilter.LINEAR_MIPMAP_NEAREST:\r\n                    return Texture.NEAREST_LINEAR_MIPNEAREST;\r\n                case TextureMinFilter.NEAREST_MIPMAP_LINEAR:\r\n                    return Texture.NEAREST_NEAREST_MIPLINEAR;\r\n                case TextureMinFilter.LINEAR_MIPMAP_LINEAR:\r\n                    return Texture.NEAREST_LINEAR_MIPLINEAR;\r\n                default:\r\n                    Logger.Warn(`${context}/minFilter: Invalid value (${minFilter})`);\r\n                    return Texture.NEAREST_NEAREST_MIPNEAREST;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _GetTypedArrayConstructor(context: string, componentType: AccessorComponentType): TypedArrayConstructor {\r\n        try {\r\n            return GetTypedArrayConstructor(componentType);\r\n        } catch (e) {\r\n            throw new Error(`${context}: ${e.message}`);\r\n        }\r\n    }\r\n\r\n    private static _GetTypedArray(context: string, componentType: AccessorComponentType, bufferView: ArrayBufferView, byteOffset: number | undefined, length: number): TypedArray {\r\n        const buffer = bufferView.buffer;\r\n        byteOffset = bufferView.byteOffset + (byteOffset || 0);\r\n\r\n        const constructor = GLTFLoader._GetTypedArrayConstructor(`${context}/componentType`, componentType);\r\n\r\n        const componentTypeLength = VertexBuffer.GetTypeByteLength(componentType);\r\n        if (byteOffset % componentTypeLength !== 0) {\r\n            // HACK: Copy the buffer if byte offset is not a multiple of component type byte length.\r\n            Logger.Warn(`${context}: Copying buffer as byte offset (${byteOffset}) is not a multiple of component type byte length (${componentTypeLength})`);\r\n            return new constructor(buffer.slice(byteOffset, byteOffset + length * componentTypeLength), 0);\r\n        }\r\n\r\n        return new constructor(buffer, byteOffset, length);\r\n    }\r\n\r\n    private static _GetNumComponents(context: string, type: string): number {\r\n        switch (type) {\r\n            case \"SCALAR\":\r\n                return 1;\r\n            case \"VEC2\":\r\n                return 2;\r\n            case \"VEC3\":\r\n                return 3;\r\n            case \"VEC4\":\r\n                return 4;\r\n            case \"MAT2\":\r\n                return 4;\r\n            case \"MAT3\":\r\n                return 9;\r\n            case \"MAT4\":\r\n                return 16;\r\n        }\r\n\r\n        throw new Error(`${context}: Invalid type (${type})`);\r\n    }\r\n\r\n    private static _ValidateUri(uri: string): boolean {\r\n        return Tools.IsBase64(uri) || uri.indexOf(\"..\") === -1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _GetDrawMode(context: string, mode: number | undefined): number {\r\n        if (mode == undefined) {\r\n            mode = MeshPrimitiveMode.TRIANGLES;\r\n        }\r\n\r\n        switch (mode) {\r\n            case MeshPrimitiveMode.POINTS:\r\n                return Material.PointListDrawMode;\r\n            case MeshPrimitiveMode.LINES:\r\n                return Material.LineListDrawMode;\r\n            case MeshPrimitiveMode.LINE_LOOP:\r\n                return Material.LineLoopDrawMode;\r\n            case MeshPrimitiveMode.LINE_STRIP:\r\n                return Material.LineStripDrawMode;\r\n            case MeshPrimitiveMode.TRIANGLES:\r\n                return Material.TriangleFillMode;\r\n            case MeshPrimitiveMode.TRIANGLE_STRIP:\r\n                return Material.TriangleStripDrawMode;\r\n            case MeshPrimitiveMode.TRIANGLE_FAN:\r\n                return Material.TriangleFanDrawMode;\r\n        }\r\n\r\n        throw new Error(`${context}: Invalid mesh primitive mode (${mode})`);\r\n    }\r\n\r\n    private _compileMaterialsAsync(): Promise<void> {\r\n        this._parent._startPerformanceCounter(\"Compile materials\");\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        if (this._gltf.materials) {\r\n            for (const material of this._gltf.materials) {\r\n                if (material._data) {\r\n                    for (const babylonDrawMode in material._data) {\r\n                        const babylonData = material._data[babylonDrawMode];\r\n                        for (const babylonMesh of babylonData.babylonMeshes) {\r\n                            // Ensure nonUniformScaling is set if necessary.\r\n                            babylonMesh.computeWorldMatrix(true);\r\n\r\n                            const babylonMaterial = babylonData.babylonMaterial;\r\n                            promises.push(babylonMaterial.forceCompilationAsync(babylonMesh));\r\n                            promises.push(babylonMaterial.forceCompilationAsync(babylonMesh, { useInstances: true }));\r\n                            if (this._parent.useClipPlane) {\r\n                                promises.push(babylonMaterial.forceCompilationAsync(babylonMesh, { clipPlane: true }));\r\n                                promises.push(babylonMaterial.forceCompilationAsync(babylonMesh, { clipPlane: true, useInstances: true }));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {\r\n            this._parent._endPerformanceCounter(\"Compile materials\");\r\n        });\r\n    }\r\n\r\n    private _compileShadowGeneratorsAsync(): Promise<void> {\r\n        this._parent._startPerformanceCounter(\"Compile shadow generators\");\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        const lights = this._babylonScene.lights;\r\n        for (const light of lights) {\r\n            const generator = light.getShadowGenerator();\r\n            if (generator) {\r\n                promises.push(generator.forceCompilationAsync());\r\n            }\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {\r\n            this._parent._endPerformanceCounter(\"Compile shadow generators\");\r\n        });\r\n    }\r\n\r\n    private _forEachExtensions(action: (extension: IGLTFLoaderExtension) => void): void {\r\n        for (const extension of this._extensions) {\r\n            if (extension.enabled) {\r\n                action(extension);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _applyExtensions<T>(property: IProperty, functionName: string, actionAsync: (extension: IGLTFLoaderExtension) => Nullable<T> | undefined): Nullable<T> {\r\n        for (const extension of this._extensions) {\r\n            if (extension.enabled) {\r\n                const id = `${extension.name}.${functionName}`;\r\n                const loaderProperty = property as ILoaderProperty;\r\n                loaderProperty._activeLoaderExtensionFunctions = loaderProperty._activeLoaderExtensionFunctions || {};\r\n                const activeLoaderExtensionFunctions = loaderProperty._activeLoaderExtensionFunctions;\r\n                if (!activeLoaderExtensionFunctions[id]) {\r\n                    activeLoaderExtensionFunctions[id] = true;\r\n\r\n                    try {\r\n                        const result = actionAsync(extension);\r\n                        if (result) {\r\n                            return result;\r\n                        }\r\n                    } finally {\r\n                        delete activeLoaderExtensionFunctions[id];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _extensionsOnLoading(): void {\r\n        this._forEachExtensions((extension) => extension.onLoading && extension.onLoading());\r\n    }\r\n\r\n    private _extensionsOnReady(): void {\r\n        this._forEachExtensions((extension) => extension.onReady && extension.onReady());\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadSceneAsync(context: string, scene: IScene): Nullable<Promise<void>> {\r\n        return this._applyExtensions(scene, \"loadScene\", (extension) => extension.loadSceneAsync && extension.loadSceneAsync(context, scene));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return this._applyExtensions(node, \"loadNode\", (extension) => extension.loadNodeAsync && extension.loadNodeAsync(context, node, assign));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadCameraAsync(context: string, camera: ICamera, assign: (babylonCamera: Camera) => void): Nullable<Promise<Camera>> {\r\n        return this._applyExtensions(camera, \"loadCamera\", (extension) => extension.loadCameraAsync && extension.loadCameraAsync(context, camera, assign));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadVertexDataAsync(context: string, primitive: IMeshPrimitive, babylonMesh: Mesh): Nullable<Promise<Geometry>> {\r\n        return this._applyExtensions(primitive, \"loadVertexData\", (extension) => extension._loadVertexDataAsync && extension._loadVertexDataAsync(context, primitive, babylonMesh));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadMeshPrimitiveAsync(\r\n        context: string,\r\n        name: string,\r\n        node: INode,\r\n        mesh: IMesh,\r\n        primitive: IMeshPrimitive,\r\n        assign: (babylonMesh: AbstractMesh) => void\r\n    ): Nullable<Promise<AbstractMesh>> {\r\n        return this._applyExtensions(\r\n            primitive,\r\n            \"loadMeshPrimitive\",\r\n            (extension) => extension._loadMeshPrimitiveAsync && extension._loadMeshPrimitiveAsync(context, name, node, mesh, primitive, assign)\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadMaterialAsync(\r\n        context: string,\r\n        material: IMaterial,\r\n        babylonMesh: Nullable<Mesh>,\r\n        babylonDrawMode: number,\r\n        assign: (babylonMaterial: Material) => void\r\n    ): Nullable<Promise<Material>> {\r\n        return this._applyExtensions(\r\n            material,\r\n            \"loadMaterial\",\r\n            (extension) => extension._loadMaterialAsync && extension._loadMaterialAsync(context, material, babylonMesh, babylonDrawMode, assign)\r\n        );\r\n    }\r\n\r\n    private _extensionsCreateMaterial(context: string, material: IMaterial, babylonDrawMode: number): Nullable<Material> {\r\n        return this._applyExtensions(material, \"createMaterial\", (extension) => extension.createMaterial && extension.createMaterial(context, material, babylonDrawMode));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return this._applyExtensions(\r\n            material,\r\n            \"loadMaterialProperties\",\r\n            (extension) => extension.loadMaterialPropertiesAsync && extension.loadMaterialPropertiesAsync(context, material, babylonMaterial)\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadTextureInfoAsync(context: string, textureInfo: ITextureInfo, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return this._applyExtensions(textureInfo, \"loadTextureInfo\", (extension) => extension.loadTextureInfoAsync && extension.loadTextureInfoAsync(context, textureInfo, assign));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadTextureAsync(context: string, texture: ITexture, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return this._applyExtensions(texture, \"loadTexture\", (extension) => extension._loadTextureAsync && extension._loadTextureAsync(context, texture, assign));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadAnimationAsync(context: string, animation: IAnimation): Nullable<Promise<AnimationGroup>> {\r\n        return this._applyExtensions(animation, \"loadAnimation\", (extension) => extension.loadAnimationAsync && extension.loadAnimationAsync(context, animation));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadAnimationChannelAsync(\r\n        context: string,\r\n        animationContext: string,\r\n        animation: IAnimation,\r\n        channel: IAnimationChannel,\r\n        onLoad: (babylonAnimatable: IAnimatable, babylonAnimation: Animation) => void\r\n    ): Nullable<Promise<void>> {\r\n        return this._applyExtensions(\r\n            animation,\r\n            \"loadAnimationChannel\",\r\n            (extension) => extension._loadAnimationChannelAsync && extension._loadAnimationChannelAsync(context, animationContext, animation, channel, onLoad)\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadSkinAsync(context: string, node: INode, skin: ISkin): Nullable<Promise<void>> {\r\n        return this._applyExtensions(skin, \"loadSkin\", (extension) => extension._loadSkinAsync && extension._loadSkinAsync(context, node, skin));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadUriAsync(context: string, property: IProperty, uri: string): Nullable<Promise<ArrayBufferView>> {\r\n        return this._applyExtensions(property, \"loadUri\", (extension) => extension._loadUriAsync && extension._loadUriAsync(context, property, uri));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadBufferViewAsync(context: string, bufferView: IBufferView): Nullable<Promise<ArrayBufferView>> {\r\n        return this._applyExtensions(bufferView, \"loadBufferView\", (extension) => extension.loadBufferViewAsync && extension.loadBufferViewAsync(context, bufferView));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadBufferAsync(context: string, buffer: IBuffer, byteOffset: number, byteLength: number): Nullable<Promise<ArrayBufferView>> {\r\n        return this._applyExtensions(buffer, \"loadBuffer\", (extension) => extension.loadBufferAsync && extension.loadBufferAsync(context, buffer, byteOffset, byteLength));\r\n    }\r\n\r\n    /**\r\n     * Helper method called by a loader extension to load an glTF extension.\r\n     * @param context The context when loading the asset\r\n     * @param property The glTF property to load the extension from\r\n     * @param extensionName The name of the extension to load\r\n     * @param actionAsync The action to run\r\n     * @returns The promise returned by actionAsync or null if the extension does not exist\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/naming-convention\r\n    public static LoadExtensionAsync<TExtension = unknown, TResult = void>(\r\n        context: string,\r\n        property: IProperty,\r\n        extensionName: string,\r\n        actionAsync: (extensionContext: string, extension: TExtension) => Nullable<Promise<TResult>>\r\n    ): Nullable<Promise<TResult>> {\r\n        if (!property.extensions) {\r\n            return null;\r\n        }\r\n\r\n        const extensions = property.extensions;\r\n\r\n        const extension = extensions[extensionName] as TExtension;\r\n        if (!extension) {\r\n            return null;\r\n        }\r\n\r\n        return actionAsync(`${context}/extensions/${extensionName}`, extension);\r\n    }\r\n\r\n    /**\r\n     * Helper method called by a loader extension to load a glTF extra.\r\n     * @param context The context when loading the asset\r\n     * @param property The glTF property to load the extra from\r\n     * @param extensionName The name of the extension to load\r\n     * @param actionAsync The action to run\r\n     * @returns The promise returned by actionAsync or null if the extra does not exist\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/naming-convention\r\n    public static LoadExtraAsync<TExtra = unknown, TResult = void>(\r\n        context: string,\r\n        property: IProperty,\r\n        extensionName: string,\r\n        actionAsync: (extraContext: string, extra: TExtra) => Nullable<Promise<TResult>>\r\n    ): Nullable<Promise<TResult>> {\r\n        if (!property.extras) {\r\n            return null;\r\n        }\r\n\r\n        const extras = property.extras;\r\n\r\n        const extra = extras[extensionName] as TExtra;\r\n        if (!extra) {\r\n            return null;\r\n        }\r\n\r\n        return actionAsync(`${context}/extras/${extensionName}`, extra);\r\n    }\r\n\r\n    /**\r\n     * Checks for presence of an extension.\r\n     * @param name The name of the extension to check\r\n     * @returns A boolean indicating the presence of the given extension name in `extensionsUsed`\r\n     */\r\n    public isExtensionUsed(name: string): boolean {\r\n        return !!this._gltf.extensionsUsed && this._gltf.extensionsUsed.indexOf(name) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Increments the indentation level and logs a message.\r\n     * @param message The message to log\r\n     */\r\n    public logOpen(message: string): void {\r\n        this._parent._logOpen(message);\r\n    }\r\n\r\n    /**\r\n     * Decrements the indentation level.\r\n     */\r\n    public logClose(): void {\r\n        this._parent._logClose();\r\n    }\r\n\r\n    /**\r\n     * Logs a message\r\n     * @param message The message to log\r\n     */\r\n    public log(message: string): void {\r\n        this._parent._log(message);\r\n    }\r\n\r\n    /**\r\n     * Starts a performance counter.\r\n     * @param counterName The name of the performance counter\r\n     */\r\n    public startPerformanceCounter(counterName: string): void {\r\n        this._parent._startPerformanceCounter(counterName);\r\n    }\r\n\r\n    /**\r\n     * Ends a performance counter.\r\n     * @param counterName The name of the performance counter\r\n     */\r\n    public endPerformanceCounter(counterName: string): void {\r\n        this._parent._endPerformanceCounter(counterName);\r\n    }\r\n}\r\n\r\nGLTFFileLoader._CreateGLTF2Loader = (parent) => new GLTFLoader(parent);\r\n"],
  "mappings": "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",
  "names": ["data", "GLTFLoaderCoordinateSystemMode", "GLTFLoaderAnimationStartMode", "GLTFLoaderState", "request", "data", "readAsync", "chunkLength", "chunkFormat", "_a"]
}
