{
  "version": 3,
  "sources": ["../../../dev/loaders/src/glTF/2.0/Extensions/KHR_node_selectability.ts"],
  "sourcesContent": ["import { FlowGraphBlockNames } from \"core/FlowGraph/Blocks/flowGraphBlockNames\";\nimport type { GLTFLoader } from \"../glTFLoader\";\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nimport { addNewInteractivityFlowGraphMapping } from \"./KHR_interactivity/declarationMapper\";\nimport type { INode } from \"../glTFLoaderInterfaces\";\nimport { AddObjectAccessorToKey } from \"./objectModelMapping\";\n\nconst NAME = \"KHR_node_selectability\";\n\ndeclare module \"../../glTFFileLoader\" {\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\n    export interface GLTFLoaderExtensionOptions {\n        /**\n         * Defines options for the KHR_selectability extension.\n         */\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\n        [\"KHR_node_selectability\"]: {};\n    }\n}\n\n// add the interactivity mapping for the onSelect event\naddNewInteractivityFlowGraphMapping(\"event/onSelect\", NAME, {\n    // using GetVariable as the nodeIndex is a configuration and not a value (i.e. it's not mutable)\n    blocks: [FlowGraphBlockNames.MeshPickEvent, FlowGraphBlockNames.GetVariable, FlowGraphBlockNames.IndexOf, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n    configuration: {\n        stopPropagation: { name: \"stopPropagation\" },\n        nodeIndex: {\n            name: \"variable\",\n            toBlock: FlowGraphBlockNames.GetVariable,\n            dataTransformer(data) {\n                return [\"pickedMesh_\" + data[0]];\n            },\n        },\n    },\n    outputs: {\n        values: {\n            selectedNodeIndex: { name: \"index\", toBlock: FlowGraphBlockNames.IndexOf },\n            controllerIndex: { name: \"pointerId\" },\n            selectionPoint: { name: \"pickedPoint\" },\n            selectionRayOrigin: { name: \"pickOrigin\" },\n        },\n        flows: {\n            out: { name: \"done\" },\n        },\n    },\n    interBlockConnectors: [\n        {\n            input: \"asset\",\n            output: \"value\",\n            inputBlockIndex: 0,\n            outputBlockIndex: 1,\n            isVariable: true,\n        },\n        {\n            input: \"array\",\n            output: \"nodes\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 3,\n            isVariable: true,\n        },\n        {\n            input: \"object\",\n            output: \"pickedMesh\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 0,\n            isVariable: true,\n        },\n    ],\n    extraProcessor(gltfBlock, _declaration, _mapping, _arrays, serializedObjects, context, globalGLTF) {\n        // add the glTF to the configuration of the last serialized object\n        const serializedObject = serializedObjects[serializedObjects.length - 1];\n        serializedObject.config = serializedObject.config || {};\n        serializedObject.config.glTF = globalGLTF;\n        // find the listener nodeIndex value\n        const nodeIndex = gltfBlock.configuration?.[\"nodeIndex\"]?.value[0];\n        if (nodeIndex === undefined || typeof nodeIndex !== \"number\") {\n            throw new Error(\"nodeIndex not found in configuration\");\n        }\n        const variableName = \"pickedMesh_\" + nodeIndex;\n        // find the nodeIndex value\n        serializedObjects[1].config.variable = variableName;\n        context._userVariables[variableName] = {\n            className: \"Mesh\",\n            id: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.id,\n            uniqueId: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.uniqueId,\n        };\n        return serializedObjects;\n    },\n});\n\n// object model extension for selectable\nAddObjectAccessorToKey(\"/nodes/{}/extensions/KHR_node_selectability/selectable\", {\n    get: (node: INode) => {\n        const tn = node._babylonTransformNode as any;\n        if (tn && tn.isPickable !== undefined) {\n            return tn.isPickable;\n        }\n        return true;\n    },\n    set: (value: boolean, node: INode) => {\n        node._primitiveBabylonMeshes?.forEach((mesh) => {\n            mesh.isPickable = value;\n        });\n    },\n    getTarget: (node: INode) => node._babylonTransformNode,\n    getPropertyName: [() => \"isPickable\"],\n    type: \"boolean\",\n});\n\n/**\n * Loader extension for KHR_selectability\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_node_selectability implements IGLTFLoaderExtension {\n    /**\n     * The name of this extension.\n     */\n    public readonly name = NAME;\n    /**\n     * Defines whether this extension is enabled.\n     */\n    public enabled: boolean;\n\n    private _loader: GLTFLoader;\n\n    /**\n     * @internal\n     */\n    constructor(loader: GLTFLoader) {\n        this._loader = loader;\n        this.enabled = loader.isExtensionUsed(NAME);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-misused-promises\n    public async onReady(): Promise<void> {\n        this._loader.gltf.nodes?.forEach((node) => {\n            if (node.extensions?.KHR_node_selectability && node.extensions?.KHR_node_selectability.selectable === false) {\n                node._babylonTransformNode?.getChildMeshes().forEach((mesh) => {\n                    mesh.isPickable = false;\n                });\n            }\n        });\n    }\n\n    public dispose() {\n        (this._loader as any) = null;\n    }\n}\n\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_node_selectability(loader));\n"],
  "mappings": ";;;;;;;;;;;;AAQA,IAAM,OAAO;AAcb,oCAAoC,kBAAkB,MAAM;;EAExD,QAAQ,CAAA,+BAAA,6BAAA,yBAAkG,6CAA6C;EACvJ,eAAe;IACX,iBAAiB,EAAE,MAAM,kBAAiB;IAC1C,WAAW;MACP,MAAM;MACN,SAAO;MACP,gBAAgB,MAAI;AAChB,eAAO,CAAC,gBAAgB,KAAK,CAAC,CAAC;MACnC;;;EAGR,SAAS;IACL,QAAQ;MACJ,mBAAmB;QAAE,MAAM;QAAS,SAAO;;MAA6B;MACxE,iBAAiB,EAAE,MAAM,YAAW;MACpC,gBAAgB,EAAE,MAAM,cAAa;MACrC,oBAAoB,EAAE,MAAM,aAAY;;IAE5C,OAAO;MACH,KAAK,EAAE,MAAM,OAAM;;;EAG3B,sBAAsB;IAClB;MACI,OAAO;MACP,QAAQ;MACR,iBAAiB;MACjB,kBAAkB;MAClB,YAAY;;IAEhB;MACI,OAAO;MACP,QAAQ;MACR,iBAAiB;MACjB,kBAAkB;MAClB,YAAY;;IAEhB;MACI,OAAO;MACP,QAAQ;MACR,iBAAiB;MACjB,kBAAkB;MAClB,YAAY;;;EAGpB,eAAe,WAAW,cAAc,UAAU,SAAS,mBAAmB,SAAS,YAAU;AAlErG;AAoEQ,UAAM,mBAAmB,kBAAkB,kBAAkB,SAAS,CAAC;AACvE,qBAAiB,SAAS,iBAAiB,UAAU,CAAA;AACrD,qBAAiB,OAAO,OAAO;AAE/B,UAAM,aAAY,qBAAU,kBAAV,mBAA0B,iBAA1B,mBAAwC,MAAM;AAChE,QAAI,cAAc,UAAa,OAAO,cAAc,UAAU;AAC1D,YAAM,IAAI,MAAM,sCAAsC;IAC1D;AACA,UAAM,eAAe,gBAAgB;AAErC,sBAAkB,CAAC,EAAE,OAAO,WAAW;AACvC,YAAQ,eAAe,YAAY,IAAI;MACnC,WAAW;MACX,KAAI,oDAAY,UAAZ,mBAAoB,WAAW,0BAA/B,mBAAsD;MAC1D,WAAU,oDAAY,UAAZ,mBAAoB,WAAW,0BAA/B,mBAAsD;;AAEpE,WAAO;EACX;CACH;AAGD,uBAAuB,0DAA0D;EAC7E,KAAK,CAAC,SAAe;AACjB,UAAM,KAAK,KAAK;AAChB,QAAI,MAAM,GAAG,eAAe,QAAW;AACnC,aAAO,GAAG;IACd;AACA,WAAO;EACX;EACA,KAAK,CAAC,OAAgB,SAAe;AAjGzC;AAkGQ,eAAK,4BAAL,mBAA8B,QAAQ,CAAC,SAAQ;AAC3C,WAAK,aAAa;IACtB;EACJ;EACA,WAAW,CAAC,SAAgB,KAAK;EACjC,iBAAiB,CAAC,MAAM,YAAY;EACpC,MAAM;CACT;AAMK,IAAO,yBAAP,MAA6B;;;;EAe/B,YAAY,QAAkB;AAXd,SAAA,OAAO;AAYnB,SAAK,UAAU;AACf,SAAK,UAAU,OAAO,gBAAgB,IAAI;EAC9C;;EAGO,MAAM,UAAO;AApIxB;AAqIQ,eAAK,QAAQ,KAAK,UAAlB,mBAAyB,QAAQ,CAAC,SAAQ;AArIlD,UAAAA,KAAA;AAsIY,YAAIA,MAAA,KAAK,eAAL,gBAAAA,IAAiB,6BAA0B,UAAK,eAAL,mBAAiB,uBAAuB,gBAAe,OAAO;AACzG,mBAAK,0BAAL,mBAA4B,iBAAiB,QAAQ,CAAC,SAAQ;AAC1D,eAAK,aAAa;QACtB;MACJ;IACJ;EACJ;EAEO,UAAO;AACT,SAAK,UAAkB;EAC5B;;AAGJ,wBAAwB,IAAI;AAC5B,sBAAsB,MAAM,MAAM,CAAC,WAAW,IAAI,uBAAuB,MAAM,CAAC;",
  "names": ["_a"]
}
