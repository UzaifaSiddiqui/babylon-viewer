{
  "version": 3,
  "sources": ["../../../dev/core/src/Materials/Textures/cubeTexture.ts", "../../../dev/core/src/Materials/Textures/rawCubeTexture.ts"],
  "sourcesContent": ["import { serialize, serializeAsMatrix, serializeAsVector3 } from \"../../Misc/decorators\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"../../Maths/math.vector\";\r\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../../Materials/Textures/texture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { GetClass, RegisterClass } from \"../../Misc/typeStore\";\r\nimport type { AbstractEngine } from \"../../Engines/abstractEngine\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { SerializationHelper } from \"../../Misc/decorators.serialization\";\r\n\r\nimport \"../../Engines/AbstractEngine/abstractEngine.cubeTexture\";\r\n\r\n/**\r\n * Defines the available options when creating a cube texture\r\n */\r\nexport interface ICubeTextureCreationOptions {\r\n    /** Defines the suffixes add to the picture name in case six images are in use like _px.jpg */\r\n    extensions?: string[];\r\n\r\n    /** noMipmap defines if mipmaps should be created or not */\r\n    noMipmap?: boolean;\r\n\r\n    /** files defines the six files to load for the different faces in that order: px, py, pz, nx, ny, nz */\r\n    files?: string[];\r\n\r\n    /** buffer to load instead of loading the data from the url */\r\n    buffer?: ArrayBufferView;\r\n\r\n    /** onLoad defines a callback triggered at the end of the file load if no errors occurred */\r\n    onLoad?: () => void;\r\n\r\n    /** onError defines a callback triggered in case of error during load */\r\n    onError?: (message?: string, exception?: any) => void;\r\n\r\n    /** format defines the internal format to use for the texture once loaded */\r\n    format?: number;\r\n\r\n    /** prefiltered defines whether or not the texture is created from prefiltered data */\r\n    prefiltered?: boolean;\r\n\r\n    /** forcedExtension defines the extensions to use (force a special type of file to load) in case it is different from the file name */\r\n    forcedExtension?: any;\r\n\r\n    /** createPolynomials defines whether or not to create polynomial harmonics from the texture data if necessary */\r\n    createPolynomials?: boolean;\r\n\r\n    /** lodScale defines the scale applied to environment texture. This manages the range of LOD level used for IBL according to the roughness */\r\n    lodScale?: number;\r\n\r\n    /** lodOffset defines the offset applied to environment texture. This manages first LOD level used for IBL according to the roughness */\r\n    lodOffset?: number;\r\n\r\n    /** loaderOptions options to be passed to the loader */\r\n    loaderOptions?: any;\r\n\r\n    /** useSRGBBuffer Defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU) (default: false) */\r\n    useSRGBBuffer?: boolean;\r\n}\r\n\r\n// The default scale applied to environment texture. This manages the range of LOD level used for IBL according to the roughness\r\nconst DefaultLodScale = 0.8;\r\n\r\n/**\r\n * Class for creating a cube texture\r\n */\r\nexport class CubeTexture extends BaseTexture {\r\n    private _delayedOnLoad: Nullable<() => void>;\r\n    private _delayedOnError: Nullable<(message?: string, exception?: any) => void>;\r\n    private _lodScale: number;\r\n    private _lodOffset: number;\r\n\r\n    /**\r\n     * Observable triggered once the texture has been loaded.\r\n     */\r\n    public onLoadObservable: Observable<CubeTexture> = new Observable<CubeTexture>();\r\n\r\n    /**\r\n     * The url of the texture\r\n     */\r\n    @serialize()\r\n    public url: string;\r\n\r\n    /**\r\n     * Gets or sets the center of the bounding box associated with the cube texture.\r\n     * It must define where the camera used to render the texture was set\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#using-local-cubemap-mode\r\n     */\r\n    @serializeAsVector3()\r\n    public boundingBoxPosition = Vector3.Zero();\r\n\r\n    private _boundingBoxSize: Vector3;\r\n\r\n    /**\r\n     * Gets or sets the size of the bounding box associated with the cube texture\r\n     * When defined, the cubemap will switch to local mode\r\n     * @see https://community.arm.com/graphics/b/blog/posts/reflections-based-on-local-cubemaps-in-unity\r\n     * @example https://www.babylonjs-playground.com/#RNASML\r\n     */\r\n    public set boundingBoxSize(value: Vector3) {\r\n        if (this._boundingBoxSize && this._boundingBoxSize.equals(value)) {\r\n            return;\r\n        }\r\n        this._boundingBoxSize = value;\r\n        const scene = this.getScene();\r\n        if (scene) {\r\n            scene.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the bounding box size\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#using-local-cubemap-mode\r\n     */\r\n    @serializeAsVector3()\r\n    public get boundingBoxSize(): Vector3 {\r\n        return this._boundingBoxSize;\r\n    }\r\n\r\n    protected _rotationY: number = 0;\r\n\r\n    /**\r\n     * Sets texture matrix rotation angle around Y axis in radians.\r\n     */\r\n    @serialize(\"rotationY\")\r\n    public set rotationY(value: number) {\r\n        this._rotationY = value;\r\n        this.setReflectionTextureMatrix(Matrix.RotationY(this._rotationY));\r\n    }\r\n    /**\r\n     * Gets texture matrix rotation angle around Y axis radians.\r\n     */\r\n    public get rotationY(): number {\r\n        return this._rotationY;\r\n    }\r\n\r\n    /**\r\n     * Are mip maps generated for this texture or not.\r\n     */\r\n    public override get noMipmap(): boolean {\r\n        return this._noMipmap;\r\n    }\r\n\r\n    private _noMipmap: boolean;\r\n\r\n    /** @internal */\r\n    @serialize(\"files\")\r\n    public _files: Nullable<string[]> = null;\r\n\r\n    @serialize(\"forcedExtension\")\r\n    protected _forcedExtension: Nullable<string> = null;\r\n\r\n    /**\r\n     * Gets the forced extension (if any)\r\n     */\r\n    public get forcedExtension(): Nullable<string> {\r\n        return this._forcedExtension;\r\n    }\r\n\r\n    @serialize(\"extensions\")\r\n    private _extensions: Nullable<string[]> = null;\r\n\r\n    @serializeAsMatrix(\"textureMatrix\")\r\n    private _textureMatrix: Matrix;\r\n\r\n    @serializeAsMatrix(\"textureMatrixRefraction\")\r\n    private _textureMatrixRefraction: Matrix = new Matrix();\r\n\r\n    private _format: number;\r\n    private _createPolynomials: boolean;\r\n    private _loaderOptions: any;\r\n    private _useSRGBBuffer?: boolean;\r\n    private _buffer: Nullable<ArrayBufferView> = null;\r\n\r\n    /**\r\n     * Creates a cube texture from an array of image urls\r\n     * @param files defines an array of image urls\r\n     * @param scene defines the hosting scene\r\n     * @param noMipmap specifies if mip maps are not used\r\n     * @returns a cube texture\r\n     */\r\n    public static CreateFromImages(files: string[], scene: Scene, noMipmap?: boolean): CubeTexture {\r\n        let rootUrlKey = \"\";\r\n\r\n        for (const url of files) {\r\n            rootUrlKey += url;\r\n        }\r\n\r\n        return new CubeTexture(rootUrlKey, scene, null, noMipmap, files);\r\n    }\r\n\r\n    /**\r\n     * Creates and return a texture created from prefilterd data by tools like IBL Baker or Lys.\r\n     * @param url defines the url of the prefiltered texture\r\n     * @param scene defines the scene the texture is attached to\r\n     * @param forcedExtension defines the extension of the file if different from the url\r\n     * @param createPolynomials defines whether or not to create polynomial harmonics from the texture data if necessary\r\n     * @returns the prefiltered texture\r\n     */\r\n    public static CreateFromPrefilteredData(url: string, scene: Scene, forcedExtension: any = null, createPolynomials: boolean = true) {\r\n        const oldValue = scene.useDelayedTextureLoading;\r\n        scene.useDelayedTextureLoading = false;\r\n\r\n        const result = new CubeTexture(url, scene, null, false, null, null, null, undefined, true, forcedExtension, createPolynomials);\r\n\r\n        scene.useDelayedTextureLoading = oldValue;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a cube texture to use with reflection for instance. It can be based upon dds or six images as well\r\n     * as prefiltered data.\r\n     * @param rootUrl defines the url of the texture or the root name of the six images\r\n     * @param sceneOrEngine defines the scene or engine the texture is attached to\r\n     * @param extensionsOrOptions defines the suffixes add to the picture name in case six images are in use like _px.jpg or set of all options to create the cube texture\r\n     * @param noMipmap defines if mipmaps should be created or not\r\n     * @param files defines the six files to load for the different faces in that order: px, py, pz, nx, ny, nz\r\n     * @param onLoad defines a callback triggered at the end of the file load if no errors occurred\r\n     * @param onError defines a callback triggered in case of error during load\r\n     * @param format defines the internal format to use for the texture once loaded\r\n     * @param prefiltered defines whether or not the texture is created from prefiltered data\r\n     * @param forcedExtension defines the extensions to use (force a special type of file to load) in case it is different from the file name\r\n     * @param createPolynomials defines whether or not to create polynomial harmonics from the texture data if necessary\r\n     * @param lodScale defines the scale applied to environment texture. This manages the range of LOD level used for IBL according to the roughness\r\n     * @param lodOffset defines the offset applied to environment texture. This manages first LOD level used for IBL according to the roughness\r\n     * @param loaderOptions options to be passed to the loader\r\n     * @param useSRGBBuffer Defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU) (default: false)\r\n     * @returns the cube texture\r\n     */\r\n    constructor(\r\n        rootUrl: string,\r\n        sceneOrEngine: Scene | AbstractEngine,\r\n        extensionsOrOptions: Nullable<string[] | ICubeTextureCreationOptions> = null,\r\n        noMipmap: boolean = false,\r\n        files: Nullable<string[]> = null,\r\n        onLoad: Nullable<() => void> = null,\r\n        onError: Nullable<(message?: string, exception?: any) => void> = null,\r\n        format: number = Constants.TEXTUREFORMAT_RGBA,\r\n        prefiltered = false,\r\n        forcedExtension: any = null,\r\n        createPolynomials: boolean = false,\r\n        lodScale: number = DefaultLodScale,\r\n        lodOffset: number = 0,\r\n        loaderOptions?: any,\r\n        useSRGBBuffer?: boolean\r\n    ) {\r\n        super(sceneOrEngine);\r\n\r\n        this.name = rootUrl;\r\n        this.url = rootUrl;\r\n        this._noMipmap = noMipmap;\r\n        this.hasAlpha = false;\r\n        this.isCube = true;\r\n        this._textureMatrix = Matrix.Identity();\r\n        this.coordinatesMode = Texture.CUBIC_MODE;\r\n\r\n        let extensions: Nullable<string[]> = null;\r\n        let buffer: Nullable<ArrayBufferView> = null;\r\n\r\n        if (extensionsOrOptions !== null && !Array.isArray(extensionsOrOptions)) {\r\n            extensions = extensionsOrOptions.extensions ?? null;\r\n            this._noMipmap = extensionsOrOptions.noMipmap ?? false;\r\n            files = extensionsOrOptions.files ?? null;\r\n            buffer = extensionsOrOptions.buffer ?? null;\r\n            this._format = extensionsOrOptions.format ?? Constants.TEXTUREFORMAT_RGBA;\r\n            prefiltered = extensionsOrOptions.prefiltered ?? false;\r\n            forcedExtension = extensionsOrOptions.forcedExtension ?? null;\r\n            this._createPolynomials = extensionsOrOptions.createPolynomials ?? false;\r\n            this._lodScale = extensionsOrOptions.lodScale ?? DefaultLodScale;\r\n            this._lodOffset = extensionsOrOptions.lodOffset ?? 0;\r\n            this._loaderOptions = extensionsOrOptions.loaderOptions;\r\n            this._useSRGBBuffer = extensionsOrOptions.useSRGBBuffer;\r\n            onLoad = extensionsOrOptions.onLoad ?? null;\r\n            onError = extensionsOrOptions.onError ?? null;\r\n        } else {\r\n            this._noMipmap = noMipmap;\r\n            this._format = format;\r\n            this._createPolynomials = createPolynomials;\r\n            extensions = extensionsOrOptions;\r\n            this._loaderOptions = loaderOptions;\r\n            this._useSRGBBuffer = useSRGBBuffer;\r\n            this._lodScale = lodScale;\r\n            this._lodOffset = lodOffset;\r\n        }\r\n\r\n        if (!rootUrl && !files) {\r\n            return;\r\n        }\r\n\r\n        this.updateURL(rootUrl, forcedExtension, onLoad, prefiltered, onError, extensions, this.getScene()?.useDelayedTextureLoading, files, buffer);\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the texture useful for serialization or dynamic coding.\r\n     * @returns \"CubeTexture\"\r\n     */\r\n    public override getClassName(): string {\r\n        return \"CubeTexture\";\r\n    }\r\n\r\n    /**\r\n     * Update the url (and optional buffer) of this texture if url was null during construction.\r\n     * @param url the url of the texture\r\n     * @param forcedExtension defines the extension to use\r\n     * @param onLoad callback called when the texture is loaded  (defaults to null)\r\n     * @param prefiltered Defines whether the updated texture is prefiltered or not\r\n     * @param onError callback called if there was an error during the loading process (defaults to null)\r\n     * @param extensions defines the suffixes add to the picture name in case six images are in use like _px.jpg...\r\n     * @param delayLoad defines if the texture should be loaded now (false by default)\r\n     * @param files defines the six files to load for the different faces in that order: px, py, pz, nx, ny, nz\r\n     * @param buffer the buffer to use instead of loading from the url\r\n     */\r\n    public updateURL(\r\n        url: string,\r\n        forcedExtension: Nullable<string> = null,\r\n        onLoad: Nullable<() => void> = null,\r\n        prefiltered: boolean = false,\r\n        onError: Nullable<(message?: string, exception?: any) => void> = null,\r\n        extensions: Nullable<string[]> = null,\r\n        delayLoad = false,\r\n        files: Nullable<string[]> = null,\r\n        buffer: Nullable<ArrayBufferView> = null\r\n    ): void {\r\n        if (!this.name || this.name.startsWith(\"data:\")) {\r\n            this.name = url;\r\n        }\r\n        this.url = url;\r\n\r\n        if (forcedExtension) {\r\n            this._forcedExtension = forcedExtension;\r\n        }\r\n\r\n        const lastDot = url.lastIndexOf(\".\");\r\n        const extension = forcedExtension ? forcedExtension : lastDot > -1 ? url.substring(lastDot).toLowerCase() : \"\";\r\n        const isDDS = extension.indexOf(\".dds\") === 0;\r\n        const isEnv = extension.indexOf(\".env\") === 0;\r\n        const isBasis = extension.indexOf(\".basis\") === 0;\r\n\r\n        if (isEnv) {\r\n            this.gammaSpace = false;\r\n            this._prefiltered = false;\r\n            this.anisotropicFilteringLevel = 1;\r\n        } else {\r\n            this._prefiltered = prefiltered;\r\n\r\n            if (prefiltered) {\r\n                this.gammaSpace = false;\r\n                this.anisotropicFilteringLevel = 1;\r\n            }\r\n        }\r\n\r\n        if (files) {\r\n            this._files = files;\r\n        } else {\r\n            if (!isBasis && !isEnv && !isDDS && !extensions) {\r\n                extensions = [\"_px.jpg\", \"_py.jpg\", \"_pz.jpg\", \"_nx.jpg\", \"_ny.jpg\", \"_nz.jpg\"];\r\n            }\r\n\r\n            this._files = this._files || [];\r\n            this._files.length = 0;\r\n\r\n            if (extensions) {\r\n                for (let index = 0; index < extensions.length; index++) {\r\n                    this._files.push(url + extensions[index]);\r\n                }\r\n                this._extensions = extensions;\r\n            }\r\n        }\r\n\r\n        this._buffer = buffer;\r\n\r\n        if (delayLoad) {\r\n            this.delayLoadState = Constants.DELAYLOADSTATE_NOTLOADED;\r\n            this._delayedOnLoad = onLoad;\r\n            this._delayedOnError = onError;\r\n        } else {\r\n            this._loadTexture(onLoad, onError);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delays loading of the cube texture\r\n     * @param forcedExtension defines the extension to use\r\n     */\r\n    public override delayLoad(forcedExtension?: string): void {\r\n        if (this.delayLoadState !== Constants.DELAYLOADSTATE_NOTLOADED) {\r\n            return;\r\n        }\r\n        if (forcedExtension) {\r\n            this._forcedExtension = forcedExtension;\r\n        }\r\n\r\n        this.delayLoadState = Constants.DELAYLOADSTATE_LOADED;\r\n        this._loadTexture(this._delayedOnLoad, this._delayedOnError);\r\n    }\r\n\r\n    /**\r\n     * Returns the reflection texture matrix\r\n     * @returns the reflection texture matrix\r\n     */\r\n    public override getReflectionTextureMatrix(): Matrix {\r\n        return this._textureMatrix;\r\n    }\r\n\r\n    /**\r\n     * Sets the reflection texture matrix\r\n     * @param value Reflection texture matrix\r\n     */\r\n    public setReflectionTextureMatrix(value: Matrix): void {\r\n        if (value.updateFlag === this._textureMatrix.updateFlag) {\r\n            return;\r\n        }\r\n\r\n        if (value.isIdentity() !== this._textureMatrix.isIdentity()) {\r\n            this.getScene()?.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag, (mat) => mat.getActiveTextures().indexOf(this) !== -1);\r\n        }\r\n\r\n        this._textureMatrix = value;\r\n\r\n        if (!this.getScene()?.useRightHandedSystem) {\r\n            return;\r\n        }\r\n\r\n        const scale = TmpVectors.Vector3[0];\r\n        const quat = TmpVectors.Quaternion[0];\r\n        const trans = TmpVectors.Vector3[1];\r\n\r\n        this._textureMatrix.decompose(scale, quat, trans);\r\n\r\n        quat.z *= -1; // these two operations correspond to negating the x and y euler angles\r\n        quat.w *= -1;\r\n\r\n        Matrix.ComposeToRef(scale, quat, trans, this._textureMatrixRefraction);\r\n    }\r\n\r\n    /**\r\n     * Gets a suitable rotate/transform matrix when the texture is used for refraction.\r\n     * There's a separate function from getReflectionTextureMatrix because refraction requires a special configuration of the matrix in right-handed mode.\r\n     * @returns The refraction matrix\r\n     */\r\n    public override getRefractionTextureMatrix(): Matrix {\r\n        return this.getScene()?.useRightHandedSystem ? this._textureMatrixRefraction : this._textureMatrix;\r\n    }\r\n\r\n    private _loadTexture(onLoad: Nullable<() => void> = null, onError: Nullable<(message?: string, exception?: any) => void> = null) {\r\n        const scene = this.getScene();\r\n        const oldTexture = this._texture;\r\n        this._texture = this._getFromCache(this.url, this._noMipmap, undefined, undefined, this._useSRGBBuffer, this.isCube);\r\n\r\n        const onLoadProcessing = () => {\r\n            this.onLoadObservable.notifyObservers(this);\r\n            if (oldTexture) {\r\n                oldTexture.dispose();\r\n                this.getScene()?.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n            }\r\n            if (onLoad) {\r\n                onLoad();\r\n            }\r\n        };\r\n\r\n        const errorHandler = (message?: string, exception?: any) => {\r\n            this._loadingError = true;\r\n            this._errorObject = { message, exception };\r\n            if (onError) {\r\n                onError(message, exception);\r\n            }\r\n            Texture.OnTextureLoadErrorObservable.notifyObservers(this);\r\n        };\r\n\r\n        if (!this._texture) {\r\n            if (this._prefiltered) {\r\n                this._texture = this._getEngine()!.createPrefilteredCubeTexture(\r\n                    this.url,\r\n                    scene,\r\n                    this._lodScale,\r\n                    this._lodOffset,\r\n                    onLoad,\r\n                    errorHandler,\r\n                    this._format,\r\n                    this._forcedExtension,\r\n                    this._createPolynomials\r\n                );\r\n            } else {\r\n                this._texture = this._getEngine()!.createCubeTexture(\r\n                    this.url,\r\n                    scene,\r\n                    this._files,\r\n                    this._noMipmap,\r\n                    onLoad,\r\n                    errorHandler,\r\n                    this._format,\r\n                    this._forcedExtension,\r\n                    false,\r\n                    this._lodScale,\r\n                    this._lodOffset,\r\n                    null,\r\n                    this._loaderOptions,\r\n                    !!this._useSRGBBuffer,\r\n                    this._buffer\r\n                );\r\n            }\r\n\r\n            this._texture?.onLoadedObservable.add(() => this.onLoadObservable.notifyObservers(this));\r\n        } else {\r\n            if (this._texture.isReady) {\r\n                Tools.SetImmediate(() => onLoadProcessing());\r\n            } else {\r\n                this._texture.onLoadedObservable.add(() => onLoadProcessing());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses text to create a cube texture\r\n     * @param parsedTexture define the serialized text to read from\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root url of the cube texture\r\n     * @returns a cube texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): CubeTexture {\r\n        const texture = SerializationHelper.Parse(\r\n            () => {\r\n                let prefiltered: boolean = false;\r\n                if (parsedTexture.prefiltered) {\r\n                    prefiltered = parsedTexture.prefiltered;\r\n                }\r\n                return new CubeTexture(\r\n                    rootUrl + (parsedTexture.url ?? parsedTexture.name),\r\n                    scene,\r\n                    parsedTexture.extensions,\r\n                    false,\r\n                    parsedTexture.files || null,\r\n                    null,\r\n                    null,\r\n                    undefined,\r\n                    prefiltered,\r\n                    parsedTexture.forcedExtension\r\n                );\r\n            },\r\n            parsedTexture,\r\n            scene\r\n        );\r\n\r\n        // Local Cubemaps\r\n        if (parsedTexture.boundingBoxPosition) {\r\n            texture.boundingBoxPosition = Vector3.FromArray(parsedTexture.boundingBoxPosition);\r\n        }\r\n        if (parsedTexture.boundingBoxSize) {\r\n            texture.boundingBoxSize = Vector3.FromArray(parsedTexture.boundingBoxSize);\r\n        }\r\n\r\n        // Animations\r\n        if (parsedTexture.animations) {\r\n            for (let animationIndex = 0; animationIndex < parsedTexture.animations.length; animationIndex++) {\r\n                const parsedAnimation = parsedTexture.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    texture.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n        }\r\n\r\n        return texture;\r\n    }\r\n\r\n    /**\r\n     * Makes a clone, or deep copy, of the cube texture\r\n     * @returns a new cube texture\r\n     */\r\n    public override clone(): CubeTexture {\r\n        let uniqueId = 0;\r\n\r\n        const newCubeTexture = SerializationHelper.Clone(() => {\r\n            const cubeTexture = new CubeTexture(this.url, this.getScene() || this._getEngine()!, this._extensions, this._noMipmap, this._files);\r\n            uniqueId = cubeTexture.uniqueId;\r\n\r\n            return cubeTexture;\r\n        }, this);\r\n\r\n        newCubeTexture.uniqueId = uniqueId;\r\n\r\n        return newCubeTexture;\r\n    }\r\n}\r\n\r\nTexture._CubeTextureParser = CubeTexture.Parse;\r\n// Some exporters relies on Tools.Instantiate\r\nRegisterClass(\"BABYLON.CubeTexture\", CubeTexture);\r\n", "import { SerializationHelper } from \"../../Misc/decorators.serialization\";\r\nimport { _UpdateRGBDAsync as UpdateRGBDAsyncEnvTools } from \"../../Misc/environmentTextureTools\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { SphericalPolynomial } from \"../../Maths/sphericalPolynomial\";\r\nimport { InternalTextureSource } from \"./internalTexture\";\r\nimport { CubeTexture } from \"./cubeTexture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\n\r\n/**\r\n * Raw cube texture where the raw buffers are passed in\r\n */\r\nexport class RawCubeTexture extends CubeTexture {\r\n    /**\r\n     * Creates a cube texture where the raw buffers are passed in.\r\n     * @param scene defines the scene the texture is attached to\r\n     * @param data defines the array of data to use to create each face\r\n     * @param size defines the size of the textures\r\n     * @param format defines the format of the data\r\n     * @param type defines the type of the data (like Engine.TEXTURETYPE_UNSIGNED_BYTE)\r\n     * @param generateMipMaps  defines if the engine should generate the mip levels\r\n     * @param invertY defines if data must be stored with Y axis inverted\r\n     * @param samplingMode defines the required sampling mode (like Texture.NEAREST_SAMPLINGMODE)\r\n     * @param compression defines the compression used (null by default)\r\n     */\r\n    constructor(\r\n        scene: Scene,\r\n        data: Nullable<ArrayBufferView[]>,\r\n        size: number,\r\n        format: number = Constants.TEXTUREFORMAT_RGBA,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n        generateMipMaps: boolean = false,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        compression: Nullable<string> = null\r\n    ) {\r\n        super(\"\", scene);\r\n\r\n        this._texture = scene.getEngine().createRawCubeTexture(data, size, format, type, generateMipMaps, invertY, samplingMode, compression);\r\n    }\r\n\r\n    /**\r\n     * Updates the raw cube texture.\r\n     * @param data defines the data to store\r\n     * @param format defines the data format\r\n     * @param type defines the type fo the data (Engine.TEXTURETYPE_UNSIGNED_BYTE by default)\r\n     * @param invertY defines if data must be stored with Y axis inverted\r\n     * @param compression defines the compression used (null by default)\r\n     */\r\n    public update(data: ArrayBufferView[], format: number, type: number, invertY: boolean, compression: Nullable<string> = null): void {\r\n        this._texture!.getEngine().updateRawCubeTexture(this._texture!, data, format, type, invertY, compression);\r\n    }\r\n\r\n    /**\r\n     * Updates a raw cube texture with RGBD encoded data.\r\n     * @param data defines the array of data [mipmap][face] to use to create each face\r\n     * @param sphericalPolynomial defines the spherical polynomial for irradiance\r\n     * @param lodScale defines the scale applied to environment texture. This manages the range of LOD level used for IBL according to the roughness\r\n     * @param lodOffset defines the offset applied to environment texture. This manages first LOD level used for IBL according to the roughness\r\n     * @returns a promise that resolves when the operation is complete\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    public updateRGBDAsync(data: ArrayBufferView[][], sphericalPolynomial: Nullable<SphericalPolynomial> = null, lodScale: number = 0.8, lodOffset: number = 0): Promise<void> {\r\n        // eslint-disable-next-line github/no-then\r\n        return UpdateRGBDAsyncEnvTools(this._texture!, data, sphericalPolynomial, lodScale, lodOffset).then(() => {});\r\n    }\r\n\r\n    /**\r\n     * Clones the raw cube texture.\r\n     * @returns a new cube texture\r\n     */\r\n    public override clone(): CubeTexture {\r\n        return SerializationHelper.Clone(() => {\r\n            const scene = this.getScene()!;\r\n            const internalTexture = this._texture!;\r\n\r\n            const texture = new RawCubeTexture(\r\n                scene,\r\n                internalTexture._bufferViewArray,\r\n                internalTexture.width,\r\n                internalTexture.format,\r\n                internalTexture.type,\r\n                internalTexture.generateMipMaps,\r\n                internalTexture.invertY,\r\n                internalTexture.samplingMode,\r\n                internalTexture._compression\r\n            );\r\n\r\n            if (internalTexture.source === InternalTextureSource.CubeRawRGBD) {\r\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                texture.updateRGBDAsync(\r\n                    internalTexture._bufferViewArrayArray!,\r\n                    internalTexture._sphericalPolynomial,\r\n                    internalTexture._lodGenerationScale,\r\n                    internalTexture._lodGenerationOffset\r\n                );\r\n            }\r\n\r\n            return texture;\r\n        }, this);\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["_a"]
}
