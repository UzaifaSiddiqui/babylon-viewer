{
  "version": 3,
  "sources": ["../../../dev/loaders/src/glTF/2.0/Extensions/KHR_interactivity/declarationMapper.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/naming-convention */\nimport type { IKHRInteractivity_Declaration, IKHRInteractivity_Graph, IKHRInteractivity_Node } from \"babylonjs-gltf2interface\";\nimport { FlowGraphBlockNames } from \"core/FlowGraph/Blocks/flowGraphBlockNames\";\nimport { Logger } from \"core/Misc/logger\";\nimport type { ISerializedFlowGraphBlock, ISerializedFlowGraphContext } from \"core/FlowGraph/typeDefinitions\";\nimport type { InteractivityEvent, InteractivityGraphToFlowGraphParser } from \"./interactivityGraphParser\";\nimport type { IGLTF } from \"../../glTFLoaderInterfaces\";\nimport { FlowGraphTypes, getAnimationTypeByFlowGraphType } from \"core/FlowGraph/flowGraphRichTypes\";\n\ninterface IGLTFToFlowGraphMappingObject<I = any, O = any> {\n    /**\n     * The name of the property in the FlowGraph block.\n     */\n    name: string;\n    /**\n     * The type of the property in the glTF specs.\n     * If not provided will be inferred.\n     */\n    gltfType?: string;\n    /**\n     * The type of the property in the FlowGraph block.\n     * If not defined it equals the glTF type.\n     */\n    flowGraphType?: string;\n    /**\n     * A function that transforms the data from the glTF to the FlowGraph block.\n     */\n    dataTransformer?: (data: I[], parser: InteractivityGraphToFlowGraphParser) => O[];\n    /**\n     * If the property is in the options passed to the constructor of the block.\n     */\n    inOptions?: boolean;\n\n    /**\n     * If the property is a pointer to a value.\n     * This will add an extra JsonPointerParser block to the graph.\n     */\n    isPointer?: boolean;\n\n    /**\n     * If the property is an index to a value.\n     * if defined this will be the name of the array to find the object in.\n     */\n    isVariable?: boolean;\n\n    /**\n     * the name of the class type this value will be mapped to.\n     * This is used if we generate more than one block for a single glTF node.\n     * Defaults to the first block in the mapping.\n     */\n    toBlock?: FlowGraphBlockNames;\n\n    /**\n     * Used in configuration values. If defined, this will be the default value, if no value is provided.\n     */\n    defaultValue?: O;\n}\n\nexport interface IGLTFToFlowGraphMapping {\n    /**\n     * The type of the FlowGraph block(s).\n     * Typically will be a single element in an array.\n     * When adding blocks defined in this module use the KHR_interactivity prefix.\n     */\n    blocks: (FlowGraphBlockNames | string)[];\n    /**\n     * The inputs of the glTF node mapped to the FlowGraph block.\n     */\n    inputs?: {\n        /**\n         * The value inputs of the glTF node mapped to the FlowGraph block.\n         */\n        values?: { [originName: string]: IGLTFToFlowGraphMappingObject };\n        /**\n         * The flow inputs of the glTF node mapped to the FlowGraph block.\n         */\n        flows?: { [originName: string]: IGLTFToFlowGraphMappingObject };\n    };\n    /**\n     * The outputs of the glTF node mapped to the FlowGraph block.\n     */\n    outputs?: {\n        /**\n         * The value outputs of the glTF node mapped to the FlowGraph block.\n         */\n        values?: { [originName: string]: IGLTFToFlowGraphMappingObject };\n        /**\n         * The flow outputs of the glTF node mapped to the FlowGraph block.\n         */\n        flows?: { [originName: string]: IGLTFToFlowGraphMappingObject };\n    };\n    /**\n     * The configuration of the glTF node mapped to the FlowGraph block.\n     * This information is usually passed to the constructor of the block.\n     */\n    configuration?: { [originName: string]: IGLTFToFlowGraphMappingObject };\n\n    /**\n     * If we generate more than one block for a single glTF node, this mapping will be used to map\n     * between the flowGraph classes.\n     */\n    typeToTypeMapping?: { [originName: string]: IGLTFToFlowGraphMappingObject };\n\n    /**\n     * The connections between two or more blocks.\n     * This is used to connect the blocks in the graph\n     */\n    interBlockConnectors?: {\n        /**\n         * The name of the input connection in the first block.\n         */\n        input: string;\n        /**\n         * The name of the output connection in the second block.\n         */\n        output: string;\n\n        /**\n         * The index of the block in the array of blocks that corresponds to the input.\n         */\n        inputBlockIndex: number;\n        /**\n         * The index of the block in the array of blocks that corresponds to the output.\n         */\n        outputBlockIndex: number;\n        /**\n         * If the connection is a variable connection or a flow connection.\n         */\n        isVariable?: boolean;\n    }[];\n\n    /**\n     * This optional function will allow to validate the node, according to the glTF specs.\n     * For example, if a node has a configuration object, it must be present and correct.\n     * This is a basic node-based validation.\n     * This function is expected to return false and log the error if the node is not valid.\n     * Note that this function can also modify the node, if needed.\n     *\n     * @param gltfBlock the glTF node to validate\n     * @param glTFObject the glTF object\n     * @returns true if validated, false if not.\n     */\n    validation?: (gltfBlock: IKHRInteractivity_Node, interactivityGraph: IKHRInteractivity_Graph, glTFObject?: IGLTF) => { valid: boolean; error?: string };\n\n    /**\n     * This is used if we need extra information for the constructor/options that is not provided directly by the glTF node.\n     * This function can return more than one node, if extra nodes are needed for this block to function correctly.\n     * Returning more than one block will usually happen when a json pointer was provided.\n     *\n     * @param gltfBlock the glTF node\n     * @param mapping the mapping object\n     * @param arrays the arrays of the interactivity object\n     * @param serializedObjects the serialized object\n     * @returns an array of serialized nodes that will be added to the graph.\n     */\n    extraProcessor?: (\n        gltfBlock: IKHRInteractivity_Node,\n        declaration: IKHRInteractivity_Declaration,\n        mapping: IGLTFToFlowGraphMapping,\n        parser: InteractivityGraphToFlowGraphParser,\n        serializedObjects: ISerializedFlowGraphBlock[],\n        context: ISerializedFlowGraphContext,\n        globalGLTF?: IGLTF\n    ) => ISerializedFlowGraphBlock[];\n}\n\nexport function getMappingForFullOperationName(fullOperationName: string) {\n    const [op, extension] = fullOperationName.split(\":\");\n    return getMappingForDeclaration({ op, extension });\n}\n\nexport function getMappingForDeclaration(declaration: IKHRInteractivity_Declaration, returnNoOpIfNotAvailable: boolean = true): IGLTFToFlowGraphMapping | undefined {\n    const mapping = declaration.extension ? gltfExtensionsToFlowGraphMapping[declaration.extension]?.[declaration.op] : gltfToFlowGraphMapping[declaration.op];\n    if (!mapping) {\n        Logger.Warn(`No mapping found for operation ${declaration.op} and extension ${declaration.extension || \"KHR_interactivity\"}`);\n        if (returnNoOpIfNotAvailable) {\n            const inputs: IGLTFToFlowGraphMapping[\"inputs\"] = {};\n            const outputs: IGLTFToFlowGraphMapping[\"outputs\"] = {\n                flows: {},\n            };\n            if (declaration.inputValueSockets) {\n                inputs.values = {};\n                for (const key in declaration.inputValueSockets) {\n                    inputs.values[key] = {\n                        name: key,\n                    };\n                }\n            }\n            if (declaration.outputValueSockets) {\n                outputs.values = {};\n                Object.keys(declaration.outputValueSockets).forEach((key) => {\n                    outputs.values![key] = {\n                        name: key,\n                    };\n                });\n            }\n            return {\n                blocks: [], // no blocks, just mapping\n                inputs,\n                outputs,\n            };\n        }\n    }\n    return mapping;\n}\n\n/**\n * This function will add new mapping to glTF interactivity.\n * Other extensions can define new types of blocks, this is the way to let interactivity know how to parse them.\n * @param key the type of node, i.e. \"variable/get\"\n * @param extension the extension of the interactivity operation, i.e. \"KHR_selectability\"\n * @param mapping The mapping object. See documentation or examples below.\n */\nexport function addNewInteractivityFlowGraphMapping(key: string, extension: string, mapping: IGLTFToFlowGraphMapping) {\n    gltfExtensionsToFlowGraphMapping[extension] ||= {};\n    gltfExtensionsToFlowGraphMapping[extension][key] = mapping;\n}\n\nconst gltfExtensionsToFlowGraphMapping: { [extension: string]: { [key: string]: IGLTFToFlowGraphMapping } } = {\n    /**\n     * This is the BABYLON extension for glTF interactivity.\n     * It defines babylon-specific blocks and operations.\n     */\n    BABYLON: {\n        /**\n         * flow/log is a flow node that logs input to the console.\n         * It has \"in\" and \"out\" flows, and takes a message as input.\n         * The message can be any type of value.\n         * The message is logged to the console when the \"in\" flow is triggered.\n         * The \"out\" flow is triggered when the message is logged.\n         */\n        \"flow/log\": {\n            blocks: [FlowGraphBlockNames.ConsoleLog],\n            inputs: {\n                values: {\n                    message: { name: \"message\" },\n                },\n            },\n        },\n    },\n};\n\n// this mapper is just a way to convert the glTF nodes to FlowGraph nodes in terms of input/output connection names and values.\nconst gltfToFlowGraphMapping: { [key: string]: IGLTFToFlowGraphMapping } = {\n    \"event/onStart\": {\n        blocks: [FlowGraphBlockNames.SceneReadyEvent],\n        outputs: {\n            flows: {\n                out: { name: \"done\" },\n            },\n        },\n    },\n    \"event/onTick\": {\n        blocks: [FlowGraphBlockNames.SceneTickEvent],\n        inputs: {},\n        outputs: {\n            values: {\n                timeSinceLastTick: { name: \"deltaTime\", gltfType: \"number\" /*, dataTransformer: (time: number) => time / 1000*/ },\n            },\n            flows: {\n                out: { name: \"done\" },\n            },\n        },\n    },\n    \"event/send\": {\n        blocks: [FlowGraphBlockNames.SendCustomEvent],\n        extraProcessor(gltfBlock, declaration, _mapping, parser, serializedObjects) {\n            // set eventId and eventData. The configuration object of the glTF should have a single object.\n            // validate that we are running it on the right block.\n            if (declaration.op !== \"event/send\" || !gltfBlock.configuration || Object.keys(gltfBlock.configuration).length !== 1) {\n                throw new Error(\"Receive event should have a single configuration object, the event itself\");\n            }\n            const eventConfiguration = gltfBlock.configuration[\"event\"];\n            const eventId = eventConfiguration.value[0];\n            if (typeof eventId !== \"number\") {\n                throw new Error(\"Event id should be a number\");\n            }\n            const event: InteractivityEvent = parser.arrays.events[eventId];\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.eventId = event.eventId;\n            serializedObject.config.eventData = event.eventData;\n            return serializedObjects;\n        },\n    },\n    \"event/receive\": {\n        blocks: [FlowGraphBlockNames.ReceiveCustomEvent],\n        outputs: {\n            flows: {\n                out: { name: \"done\" },\n            },\n        },\n        validation(gltfBlock, interactivityGraph) {\n            if (!gltfBlock.configuration) {\n                Logger.Error(\"Receive event should have a configuration object\");\n                return { valid: false, error: \"Receive event should have a configuration object\" };\n            }\n            const eventConfiguration = gltfBlock.configuration[\"event\"];\n            if (!eventConfiguration) {\n                Logger.Error(\"Receive event should have a single configuration object, the event itself\");\n                return { valid: false, error: \"Receive event should have a single configuration object, the event itself\" };\n            }\n            const eventId = eventConfiguration.value[0];\n            if (typeof eventId !== \"number\") {\n                Logger.Error(\"Event id should be a number\");\n                return { valid: false, error: \"Event id should be a number\" };\n            }\n            const event = interactivityGraph.events?.[eventId];\n            if (!event) {\n                Logger.Error(`Event with id ${eventId} not found`);\n                return { valid: false, error: `Event with id ${eventId} not found` };\n            }\n            return { valid: true };\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, parser, serializedObjects) {\n            // set eventId and eventData. The configuration object of the glTF should have a single object.\n            // validate that we are running it on the right block.\n            if (declaration.op !== \"event/receive\" || !gltfBlock.configuration || Object.keys(gltfBlock.configuration).length !== 1) {\n                throw new Error(\"Receive event should have a single configuration object, the event itself\");\n            }\n            const eventConfiguration = gltfBlock.configuration[\"event\"];\n            const eventId = eventConfiguration.value[0];\n            if (typeof eventId !== \"number\") {\n                throw new Error(\"Event id should be a number\");\n            }\n            const event: InteractivityEvent = parser.arrays.events[eventId];\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.eventId = event.eventId;\n            serializedObject.config.eventData = event.eventData;\n            return serializedObjects;\n        },\n    },\n    \"math/e\": getSimpleInputMapping(FlowGraphBlockNames.E),\n    \"math/pi\": getSimpleInputMapping(FlowGraphBlockNames.PI),\n    \"math/inf\": getSimpleInputMapping(FlowGraphBlockNames.Inf),\n    \"math/nan\": getSimpleInputMapping(FlowGraphBlockNames.NaN),\n    \"math/abs\": getSimpleInputMapping(FlowGraphBlockNames.Abs),\n    \"math/sign\": getSimpleInputMapping(FlowGraphBlockNames.Sign),\n    \"math/trunc\": getSimpleInputMapping(FlowGraphBlockNames.Trunc),\n    \"math/floor\": getSimpleInputMapping(FlowGraphBlockNames.Floor),\n    \"math/ceil\": getSimpleInputMapping(FlowGraphBlockNames.Ceil),\n    \"math/round\": {\n        blocks: [FlowGraphBlockNames.Round],\n        configuration: {},\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.roundHalfAwayFromZero = true;\n            return serializedObjects;\n        },\n    },\n    \"math/fract\": getSimpleInputMapping(FlowGraphBlockNames.Fraction),\n    \"math/neg\": getSimpleInputMapping(FlowGraphBlockNames.Negation),\n    \"math/add\": getSimpleInputMapping(FlowGraphBlockNames.Add, [\"a\", \"b\"], true),\n    \"math/sub\": getSimpleInputMapping(FlowGraphBlockNames.Subtract, [\"a\", \"b\"], true),\n    \"math/mul\": {\n        blocks: [FlowGraphBlockNames.Multiply],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.useMatrixPerComponent = true;\n            serializedObjects[0].config.preventIntegerFloatArithmetic = true;\n            // try to infer the type or fallback to Integer\n            // check the gltf block for the inputs, see if they have a type\n            let type = -1;\n            Object.keys(_gltfBlock.values || {}).find((value) => {\n                if (_gltfBlock.values?.[value].type !== undefined) {\n                    type = _gltfBlock.values[value].type;\n                    return true;\n                }\n                return false;\n            });\n            if (type !== -1) {\n                serializedObjects[0].config.type = _parser.arrays.types[type].flowGraphType;\n            }\n            return serializedObjects;\n        },\n        validation(gltfBlock) {\n            if (gltfBlock.values) {\n                // make sure types are the same\n                return ValidateTypes(gltfBlock);\n            }\n            return { valid: true };\n        },\n    },\n    \"math/div\": getSimpleInputMapping(FlowGraphBlockNames.Divide, [\"a\", \"b\"], true),\n    \"math/rem\": getSimpleInputMapping(FlowGraphBlockNames.Modulo, [\"a\", \"b\"]),\n    \"math/min\": getSimpleInputMapping(FlowGraphBlockNames.Min, [\"a\", \"b\"]),\n    \"math/max\": getSimpleInputMapping(FlowGraphBlockNames.Max, [\"a\", \"b\"]),\n    \"math/clamp\": getSimpleInputMapping(FlowGraphBlockNames.Clamp, [\"a\", \"b\", \"c\"]),\n    \"math/saturate\": getSimpleInputMapping(FlowGraphBlockNames.Saturate),\n    \"math/mix\": getSimpleInputMapping(FlowGraphBlockNames.MathInterpolation, [\"a\", \"b\", \"c\"]),\n    \"math/eq\": getSimpleInputMapping(FlowGraphBlockNames.Equality, [\"a\", \"b\"]),\n    \"math/lt\": getSimpleInputMapping(FlowGraphBlockNames.LessThan, [\"a\", \"b\"]),\n    \"math/le\": getSimpleInputMapping(FlowGraphBlockNames.LessThanOrEqual, [\"a\", \"b\"]),\n    \"math/gt\": getSimpleInputMapping(FlowGraphBlockNames.GreaterThan, [\"a\", \"b\"]),\n    \"math/ge\": getSimpleInputMapping(FlowGraphBlockNames.GreaterThanOrEqual, [\"a\", \"b\"]),\n    \"math/isnan\": getSimpleInputMapping(FlowGraphBlockNames.IsNaN),\n    \"math/isinf\": getSimpleInputMapping(FlowGraphBlockNames.IsInfinity),\n    \"math/select\": {\n        blocks: [FlowGraphBlockNames.Conditional],\n        inputs: {\n            values: {\n                condition: { name: \"condition\" },\n                // Should we validate those have the same type here, or assume it is already validated?\n                a: { name: \"onTrue\" },\n                b: { name: \"onFalse\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"output\" },\n            },\n        },\n    },\n    \"math/random\": {\n        blocks: [FlowGraphBlockNames.Random],\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/sin\": getSimpleInputMapping(FlowGraphBlockNames.Sin),\n    \"math/cos\": getSimpleInputMapping(FlowGraphBlockNames.Cos),\n    \"math/tan\": getSimpleInputMapping(FlowGraphBlockNames.Tan),\n    \"math/asin\": getSimpleInputMapping(FlowGraphBlockNames.Asin),\n    \"math/acos\": getSimpleInputMapping(FlowGraphBlockNames.Acos),\n    \"math/atan\": getSimpleInputMapping(FlowGraphBlockNames.Atan),\n    \"math/atan2\": getSimpleInputMapping(FlowGraphBlockNames.Atan2, [\"a\", \"b\"]),\n    \"math/sinh\": getSimpleInputMapping(FlowGraphBlockNames.Sinh),\n    \"math/cosh\": getSimpleInputMapping(FlowGraphBlockNames.Cosh),\n    \"math/tanh\": getSimpleInputMapping(FlowGraphBlockNames.Tanh),\n    \"math/asinh\": getSimpleInputMapping(FlowGraphBlockNames.Asinh),\n    \"math/acosh\": getSimpleInputMapping(FlowGraphBlockNames.Acosh),\n    \"math/atanh\": getSimpleInputMapping(FlowGraphBlockNames.Atanh),\n    \"math/exp\": getSimpleInputMapping(FlowGraphBlockNames.Exponential),\n    \"math/log\": getSimpleInputMapping(FlowGraphBlockNames.Log),\n    \"math/log2\": getSimpleInputMapping(FlowGraphBlockNames.Log2),\n    \"math/log10\": getSimpleInputMapping(FlowGraphBlockNames.Log10),\n    \"math/sqrt\": getSimpleInputMapping(FlowGraphBlockNames.SquareRoot),\n    \"math/cbrt\": getSimpleInputMapping(FlowGraphBlockNames.CubeRoot),\n    \"math/pow\": getSimpleInputMapping(FlowGraphBlockNames.Power, [\"a\", \"b\"]),\n    \"math/length\": getSimpleInputMapping(FlowGraphBlockNames.Length),\n    \"math/normalize\": getSimpleInputMapping(FlowGraphBlockNames.Normalize),\n    \"math/dot\": getSimpleInputMapping(FlowGraphBlockNames.Dot, [\"a\", \"b\"]),\n    \"math/cross\": getSimpleInputMapping(FlowGraphBlockNames.Cross, [\"a\", \"b\"]),\n    \"math/rotate2D\": getSimpleInputMapping(FlowGraphBlockNames.Rotate2D, [\"a\", \"b\"]),\n    \"math/rotate3D\": getSimpleInputMapping(FlowGraphBlockNames.Rotate3D, [\"a\", \"b\"]),\n    \"math/transform\": {\n        // glTF transform is vectorN with matrixN\n        blocks: [FlowGraphBlockNames.TransformVector],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/combine2\": {\n        blocks: [FlowGraphBlockNames.CombineVector2],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/combine3\": {\n        blocks: [FlowGraphBlockNames.CombineVector3],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/combine4\": {\n        blocks: [FlowGraphBlockNames.CombineVector4],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    // one input, N outputs! outputs named using numbers.\n    \"math/extract2\": {\n        blocks: [FlowGraphBlockNames.ExtractVector2],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n            },\n        },\n    },\n    \"math/extract3\": {\n        blocks: [FlowGraphBlockNames.ExtractVector3],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n            },\n        },\n    },\n    \"math/extract4\": {\n        blocks: [FlowGraphBlockNames.ExtractVector4],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n            },\n        },\n    },\n    \"math/transpose\": getSimpleInputMapping(FlowGraphBlockNames.Transpose),\n    \"math/determinant\": getSimpleInputMapping(FlowGraphBlockNames.Determinant),\n    \"math/inverse\": getSimpleInputMapping(FlowGraphBlockNames.InvertMatrix),\n    \"math/matmul\": getSimpleInputMapping(FlowGraphBlockNames.MatrixMultiplication, [\"a\", \"b\"]),\n    \"math/matCompose\": {\n        blocks: [FlowGraphBlockNames.MatrixCompose],\n        inputs: {\n            values: {\n                translation: { name: \"position\", gltfType: \"float3\" },\n                rotation: { name: \"rotationQuaternion\", gltfType: \"float4\" },\n                scale: { name: \"scaling\", gltfType: \"float3\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            const d = serializedObjects[0].dataInputs.find((input) => input.name === \"rotationQuaternion\");\n            if (!d) {\n                throw new Error(\"Rotation quaternion input not found\");\n            }\n            // if value is defined, set the type to quaternion\n            if (context._connectionValues[d.uniqueId]) {\n                context._connectionValues[d.uniqueId].type = FlowGraphTypes.Quaternion;\n            }\n            return serializedObjects;\n        },\n    },\n    \"math/matDecompose\": {\n        blocks: [FlowGraphBlockNames.MatrixDecompose],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                translation: { name: \"position\" },\n                rotation: { name: \"rotationQuaternion\" },\n                scale: { name: \"scaling\" },\n            },\n        },\n    },\n    \"math/quatConjugate\": getSimpleInputMapping(FlowGraphBlockNames.Conjugate, [\"a\"]),\n    \"math/quatMul\": {\n        blocks: [FlowGraphBlockNames.Multiply],\n        inputs: {\n            values: {\n                a: { name: \"a\", gltfType: \"vector4\" },\n                b: { name: \"b\", gltfType: \"vector4\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.type = FlowGraphTypes.Quaternion;\n            return serializedObjects;\n        },\n    },\n    \"math/quatAngleBetween\": getSimpleInputMapping(FlowGraphBlockNames.AngleBetween, [\"a\", \"b\"]),\n    \"math/quatFromAxisAngle\": {\n        blocks: [FlowGraphBlockNames.QuaternionFromAxisAngle],\n        inputs: {\n            values: {\n                axis: { name: \"a\", gltfType: \"float3\" },\n                angle: { name: \"b\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/quatToAxisAngle\": getSimpleInputMapping(FlowGraphBlockNames.AxisAngleFromQuaternion, [\"a\"]),\n    \"math/quatFromDirections\": getSimpleInputMapping(FlowGraphBlockNames.QuaternionFromDirections, [\"a\", \"b\"]),\n    \"math/combine2x2\": {\n        blocks: [FlowGraphBlockNames.CombineMatrix2D],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.inputIsColumnMajor = true;\n            return serializedObjects;\n        },\n    },\n    \"math/extract2x2\": {\n        blocks: [FlowGraphBlockNames.ExtractMatrix2D],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"float2x2\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n            },\n        },\n    },\n    \"math/combine3x3\": {\n        blocks: [FlowGraphBlockNames.CombineMatrix3D],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n                e: { name: \"input_4\", gltfType: \"number\" },\n                f: { name: \"input_5\", gltfType: \"number\" },\n                g: { name: \"input_6\", gltfType: \"number\" },\n                h: { name: \"input_7\", gltfType: \"number\" },\n                i: { name: \"input_8\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.inputIsColumnMajor = true;\n            return serializedObjects;\n        },\n    },\n    \"math/extract3x3\": {\n        blocks: [FlowGraphBlockNames.ExtractMatrix3D],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"float3x3\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n                \"4\": { name: \"output_4\" },\n                \"5\": { name: \"output_5\" },\n                \"6\": { name: \"output_6\" },\n                \"7\": { name: \"output_7\" },\n                \"8\": { name: \"output_8\" },\n            },\n        },\n    },\n    \"math/combine4x4\": {\n        blocks: [FlowGraphBlockNames.CombineMatrix],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n                e: { name: \"input_4\", gltfType: \"number\" },\n                f: { name: \"input_5\", gltfType: \"number\" },\n                g: { name: \"input_6\", gltfType: \"number\" },\n                h: { name: \"input_7\", gltfType: \"number\" },\n                i: { name: \"input_8\", gltfType: \"number\" },\n                j: { name: \"input_9\", gltfType: \"number\" },\n                k: { name: \"input_10\", gltfType: \"number\" },\n                l: { name: \"input_11\", gltfType: \"number\" },\n                m: { name: \"input_12\", gltfType: \"number\" },\n                n: { name: \"input_13\", gltfType: \"number\" },\n                o: { name: \"input_14\", gltfType: \"number\" },\n                p: { name: \"input_15\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.inputIsColumnMajor = true;\n            return serializedObjects;\n        },\n    },\n    \"math/extract4x4\": {\n        blocks: [FlowGraphBlockNames.ExtractMatrix],\n        configuration: {},\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n                \"4\": { name: \"output_4\" },\n                \"5\": { name: \"output_5\" },\n                \"6\": { name: \"output_6\" },\n                \"7\": { name: \"output_7\" },\n                \"8\": { name: \"output_8\" },\n                \"9\": { name: \"output_9\" },\n                \"10\": { name: \"output_10\" },\n                \"11\": { name: \"output_11\" },\n                \"12\": { name: \"output_12\" },\n                \"13\": { name: \"output_13\" },\n                \"14\": { name: \"output_14\" },\n                \"15\": { name: \"output_15\" },\n            },\n        },\n    },\n    \"math/not\": {\n        blocks: [FlowGraphBlockNames.BitwiseNot],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            // try to infer the type or fallback to Integer\n            const socketIn = serializedObjects[0].dataInputs[0];\n            serializedObjects[0].config.valueType = context._connectionValues[socketIn.uniqueId]?.type ?? FlowGraphTypes.Integer;\n            return serializedObjects;\n        },\n    },\n    \"math/and\": {\n        blocks: [FlowGraphBlockNames.BitwiseAnd],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            // try to infer the type or fallback to Integer\n            const socketInA = serializedObjects[0].dataInputs[0];\n            const socketInB = serializedObjects[0].dataInputs[1];\n            serializedObjects[0].config.valueType =\n                context._connectionValues[socketInA.uniqueId]?.type ?? context._connectionValues[socketInB.uniqueId]?.type ?? FlowGraphTypes.Integer;\n            return serializedObjects;\n        },\n    },\n    \"math/or\": {\n        blocks: [FlowGraphBlockNames.BitwiseOr],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            // try to infer the type or fallback to Integer\n            const socketInA = serializedObjects[0].dataInputs[0];\n            const socketInB = serializedObjects[0].dataInputs[1];\n            serializedObjects[0].config.valueType =\n                context._connectionValues[socketInA.uniqueId]?.type ?? context._connectionValues[socketInB.uniqueId]?.type ?? FlowGraphTypes.Integer;\n            return serializedObjects;\n        },\n    },\n    \"math/xor\": {\n        blocks: [FlowGraphBlockNames.BitwiseXor],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            // try to infer the type or fallback to Integer\n            const socketInA = serializedObjects[0].dataInputs[0];\n            const socketInB = serializedObjects[0].dataInputs[1];\n            serializedObjects[0].config.valueType =\n                context._connectionValues[socketInA.uniqueId]?.type ?? context._connectionValues[socketInB.uniqueId]?.type ?? FlowGraphTypes.Integer;\n            return serializedObjects;\n        },\n    },\n    \"math/asr\": getSimpleInputMapping(FlowGraphBlockNames.BitwiseRightShift, [\"a\", \"b\"]),\n    \"math/lsl\": getSimpleInputMapping(FlowGraphBlockNames.BitwiseLeftShift, [\"a\", \"b\"]),\n    \"math/clz\": getSimpleInputMapping(FlowGraphBlockNames.LeadingZeros),\n    \"math/ctz\": getSimpleInputMapping(FlowGraphBlockNames.TrailingZeros),\n    \"math/popcnt\": getSimpleInputMapping(FlowGraphBlockNames.OneBitsCounter),\n    \"math/rad\": getSimpleInputMapping(FlowGraphBlockNames.DegToRad),\n    \"math/deg\": getSimpleInputMapping(FlowGraphBlockNames.RadToDeg),\n    \"type/boolToInt\": getSimpleInputMapping(FlowGraphBlockNames.BooleanToInt),\n    \"type/boolToFloat\": getSimpleInputMapping(FlowGraphBlockNames.BooleanToFloat),\n    \"type/intToBool\": getSimpleInputMapping(FlowGraphBlockNames.IntToBoolean),\n    \"type/intToFloat\": getSimpleInputMapping(FlowGraphBlockNames.IntToFloat),\n    \"type/floatToInt\": getSimpleInputMapping(FlowGraphBlockNames.FloatToInt),\n    \"type/floatToBool\": getSimpleInputMapping(FlowGraphBlockNames.FloatToBoolean),\n\n    // flows\n    \"flow/sequence\": {\n        blocks: [FlowGraphBlockNames.Sequence],\n        extraProcessor(gltfBlock, _declaration, _mapping, _arrays, serializedObjects) {\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.outputSignalCount = Object.keys(gltfBlock.flows || []).length;\n            serializedObject.signalOutputs.forEach((output, index) => {\n                output.name = \"out_\" + index;\n            });\n            return serializedObjects;\n        },\n    },\n    \"flow/branch\": {\n        blocks: [FlowGraphBlockNames.Branch],\n        outputs: {\n            flows: {\n                true: { name: \"onTrue\" },\n                false: { name: \"onFalse\" },\n            },\n        },\n    },\n    \"flow/switch\": {\n        blocks: [FlowGraphBlockNames.Switch],\n        configuration: {\n            cases: { name: \"cases\", inOptions: true, defaultValue: [] },\n        },\n        inputs: {\n            values: {\n                selection: { name: \"case\" },\n                default: { name: \"default\" },\n            },\n        },\n        validation(gltfBlock) {\n            if (gltfBlock.configuration && gltfBlock.configuration.cases) {\n                const cases = gltfBlock.configuration.cases.value;\n                const onlyIntegers = cases.every((caseValue) => {\n                    // case value should be an integer. Since Number.isInteger(1.0) is true, we need to check if toString has only digits.\n                    return typeof caseValue === \"number\" && /^-?\\d+$/.test(caseValue.toString());\n                });\n                if (!onlyIntegers) {\n                    Logger.Warn(\"Switch cases should be integers. Using empty array instead.\");\n                    gltfBlock.configuration.cases.value = [] as number[];\n                    return { valid: true };\n                }\n                // check for duplicates\n                const uniqueCases = new Set(cases);\n                gltfBlock.configuration.cases.value = Array.from(uniqueCases) as number[];\n            }\n            return { valid: true };\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, _arrays, serializedObjects) {\n            // convert all names of output flow to out_$1 apart from \"default\"\n            if (declaration.op !== \"flow/switch\" || !gltfBlock.flows || Object.keys(gltfBlock.flows).length === 0) {\n                throw new Error(\"Switch should have a single configuration object, the cases array\");\n            }\n            const serializedObject = serializedObjects[0];\n            serializedObject.signalOutputs.forEach((output) => {\n                if (output.name !== \"default\") {\n                    output.name = \"out_\" + output.name;\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"flow/while\": {\n        blocks: [FlowGraphBlockNames.WhileLoop],\n        outputs: {\n            flows: {\n                loopBody: { name: \"executionFlow\" },\n            },\n        },\n    },\n    \"flow/for\": {\n        blocks: [FlowGraphBlockNames.ForLoop],\n        configuration: {\n            initialIndex: { name: \"initialIndex\", gltfType: \"number\", inOptions: true, defaultValue: 0 },\n        },\n        inputs: {\n            values: {\n                startIndex: { name: \"startIndex\", gltfType: \"number\" },\n                endIndex: { name: \"endIndex\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                index: { name: \"index\" },\n            },\n            flows: {\n                loopBody: { name: \"executionFlow\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects) {\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.incrementIndexWhenLoopDone = true;\n            return serializedObjects;\n        },\n    },\n    \"flow/doN\": {\n        blocks: [FlowGraphBlockNames.DoN],\n        configuration: {},\n        inputs: {\n            values: {\n                n: { name: \"maxExecutions\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                currentCount: { name: \"executionCount\" },\n            },\n        },\n    },\n    \"flow/multiGate\": {\n        blocks: [FlowGraphBlockNames.MultiGate],\n        configuration: {\n            isRandom: { name: \"isRandom\", gltfType: \"boolean\", inOptions: true, defaultValue: false },\n            isLoop: { name: \"isLoop\", gltfType: \"boolean\", inOptions: true, defaultValue: false },\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, _arrays, serializedObjects) {\n            if (declaration.op !== \"flow/multiGate\" || !gltfBlock.flows || Object.keys(gltfBlock.flows).length === 0) {\n                throw new Error(\"MultiGate should have a single configuration object, the number of output flows\");\n            }\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.outputSignalCount = Object.keys(gltfBlock.flows).length;\n            serializedObject.signalOutputs.forEach((output, index) => {\n                output.name = \"out_\" + index;\n            });\n            return serializedObjects;\n        },\n    },\n    \"flow/waitAll\": {\n        blocks: [FlowGraphBlockNames.WaitAll],\n        configuration: {\n            inputFlows: { name: \"inputSignalCount\", gltfType: \"number\", inOptions: true, defaultValue: 0 },\n        },\n        inputs: {\n            flows: {\n                reset: { name: \"reset\" },\n                \"[segment]\": { name: \"in_$1\" },\n            },\n        },\n        validation(gltfBlock) {\n            // check that the configuration value is an integer\n            if (typeof gltfBlock.configuration?.inputFlows?.value[0] !== \"number\") {\n                gltfBlock.configuration = gltfBlock.configuration || {\n                    inputFlows: { value: [0] },\n                };\n                gltfBlock.configuration.inputFlows.value = [0];\n            }\n            return { valid: true };\n        },\n    },\n    \"flow/throttle\": {\n        blocks: [FlowGraphBlockNames.Throttle],\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n    },\n    \"flow/setDelay\": {\n        blocks: [FlowGraphBlockNames.SetDelay],\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n    },\n    \"flow/cancelDelay\": {\n        blocks: [FlowGraphBlockNames.CancelDelay],\n    },\n    \"variable/get\": {\n        blocks: [FlowGraphBlockNames.GetVariable],\n        validation(gltfBlock) {\n            if (!gltfBlock.configuration?.variable?.value) {\n                Logger.Error(\"Variable get block should have a variable configuration\");\n                return { valid: false, error: \"Variable get block should have a variable configuration\" };\n            }\n            return { valid: true };\n        },\n        configuration: {\n            variable: {\n                name: \"variable\",\n                gltfType: \"number\",\n                flowGraphType: \"string\",\n                inOptions: true,\n                isVariable: true,\n                dataTransformer(index, parser) {\n                    return [parser.getVariableName(index[0])];\n                },\n            },\n        },\n    },\n    \"variable/set\": {\n        blocks: [FlowGraphBlockNames.SetVariable],\n        configuration: {\n            variable: {\n                name: \"variable\",\n                gltfType: \"number\",\n                flowGraphType: \"string\",\n                inOptions: true,\n                isVariable: true,\n                dataTransformer(index: number[], parser): string[] {\n                    return [parser.getVariableName(index[0])];\n                },\n            },\n        },\n    },\n    \"variable/setMultiple\": {\n        blocks: [FlowGraphBlockNames.SetVariable],\n        configuration: {\n            variables: {\n                name: \"variables\",\n                gltfType: \"number\",\n                flowGraphType: \"string\",\n                inOptions: true,\n                dataTransformer(index: number[][], parser): string[][] {\n                    return [index[0].map((i) => parser.getVariableName(i))];\n                },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            // variable/get configuration\n            const serializedGetVariable = serializedObjects[0];\n            serializedGetVariable.dataInputs.forEach((input) => {\n                input.name = parser.getVariableName(+input.name);\n            });\n\n            return serializedObjects;\n        },\n    },\n    \"variable/interpolate\": {\n        blocks: [\n            FlowGraphBlockNames.ValueInterpolation,\n            FlowGraphBlockNames.Context,\n            FlowGraphBlockNames.PlayAnimation,\n            FlowGraphBlockNames.BezierCurveEasing,\n            FlowGraphBlockNames.GetVariable,\n        ],\n        configuration: {\n            variable: {\n                name: \"propertyName\",\n                inOptions: true,\n                isVariable: true,\n                dataTransformer(index, parser) {\n                    return [parser.getVariableName(index[0])];\n                },\n            },\n            useSlerp: {\n                name: \"animationType\",\n                inOptions: true,\n                defaultValue: false,\n                dataTransformer: (value) => {\n                    if (value[0] === true) {\n                        return [FlowGraphTypes.Quaternion];\n                    } else {\n                        return [undefined];\n                    }\n                },\n            },\n        },\n        inputs: {\n            values: {\n                value: { name: \"value_1\" },\n                duration: { name: \"duration_1\", gltfType: \"number\" },\n                p1: { name: \"controlPoint1\", toBlock: FlowGraphBlockNames.BezierCurveEasing },\n                p2: { name: \"controlPoint2\", toBlock: FlowGraphBlockNames.BezierCurveEasing },\n            },\n            flows: {\n                in: { name: \"in\", toBlock: FlowGraphBlockNames.PlayAnimation },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\", toBlock: FlowGraphBlockNames.PlayAnimation },\n                out: { name: \"out\", toBlock: FlowGraphBlockNames.PlayAnimation },\n                done: { name: \"done\", toBlock: FlowGraphBlockNames.PlayAnimation },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"userVariables\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"animation\",\n                output: \"animation\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 0,\n                isVariable: true,\n            },\n            {\n                input: \"easingFunction\",\n                output: \"easingFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 3,\n                isVariable: true,\n            },\n            {\n                input: \"value_0\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 4,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            // is useSlerp is used, animationType should be set to be quaternion!\n            const serializedValueInterpolation = serializedObjects[0];\n            const propertyIndex = gltfBlock.configuration?.variable.value[0];\n            if (typeof propertyIndex !== \"number\") {\n                Logger.Error(\"Variable index is not defined for variable interpolation block\");\n                throw new Error(\"Variable index is not defined for variable interpolation block\");\n            }\n            const variable = parser.arrays.staticVariables[propertyIndex];\n            // if not set by useSlerp\n            if (typeof serializedValueInterpolation.config.animationType.value === \"undefined\") {\n                // get the value type\n                parser.arrays.staticVariables;\n                serializedValueInterpolation.config.animationType.value = getAnimationTypeByFlowGraphType(variable.type);\n            }\n\n            // variable/get configuration\n            const serializedGetVariable = serializedObjects[4];\n            serializedGetVariable.config ||= {};\n            serializedGetVariable.config.variable ||= {};\n            serializedGetVariable.config.variable.value = parser.getVariableName(propertyIndex);\n\n            // get the control points from the easing block\n            serializedObjects[3].config ||= {};\n\n            return serializedObjects;\n        },\n    },\n    \"pointer/get\": {\n        blocks: [FlowGraphBlockNames.GetProperty, FlowGraphBlockNames.JsonPointerParser],\n        configuration: {\n            pointer: { name: \"jsonPointer\", toBlock: FlowGraphBlockNames.JsonPointerParser },\n        },\n        inputs: {\n            values: {\n                \"[segment]\": { name: \"$1\", toBlock: FlowGraphBlockNames.JsonPointerParser },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"object\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"propertyName\",\n                output: \"propertyName\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"customGetFunction\",\n                output: \"getFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            serializedObjects.forEach((serializedObject) => {\n                // check if it is the json pointer block\n                if (serializedObject.className === FlowGraphBlockNames.JsonPointerParser) {\n                    serializedObject.config ||= {};\n                    serializedObject.config.outputValue = true;\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"pointer/set\": {\n        blocks: [FlowGraphBlockNames.SetProperty, FlowGraphBlockNames.JsonPointerParser],\n        configuration: {\n            pointer: { name: \"jsonPointer\", toBlock: FlowGraphBlockNames.JsonPointerParser },\n        },\n        inputs: {\n            values: {\n                // must be defined due to the array taking over\n                value: { name: \"value\" },\n                \"[segment]\": { name: \"$1\", toBlock: FlowGraphBlockNames.JsonPointerParser },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"object\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"propertyName\",\n                output: \"propertyName\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"customSetFunction\",\n                output: \"setFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            serializedObjects.forEach((serializedObject) => {\n                // check if it is the json pointer block\n                if (serializedObject.className === FlowGraphBlockNames.JsonPointerParser) {\n                    serializedObject.config ||= {};\n                    serializedObject.config.outputValue = true;\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"pointer/interpolate\": {\n        // interpolate, parse the pointer and play the animation generated. 3 blocks!\n        blocks: [FlowGraphBlockNames.ValueInterpolation, FlowGraphBlockNames.JsonPointerParser, FlowGraphBlockNames.PlayAnimation, FlowGraphBlockNames.BezierCurveEasing],\n        configuration: {\n            pointer: { name: \"jsonPointer\", toBlock: FlowGraphBlockNames.JsonPointerParser },\n        },\n        inputs: {\n            values: {\n                value: { name: \"value_1\" },\n                \"[segment]\": { name: \"$1\", toBlock: FlowGraphBlockNames.JsonPointerParser },\n                duration: { name: \"duration_1\", gltfType: \"number\" /*, inOptions: true */ },\n                p1: { name: \"controlPoint1\", toBlock: FlowGraphBlockNames.BezierCurveEasing },\n                p2: { name: \"controlPoint2\", toBlock: FlowGraphBlockNames.BezierCurveEasing },\n            },\n            flows: {\n                in: { name: \"in\", toBlock: FlowGraphBlockNames.PlayAnimation },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\", toBlock: FlowGraphBlockNames.PlayAnimation },\n                out: { name: \"out\", toBlock: FlowGraphBlockNames.PlayAnimation },\n                done: { name: \"done\", toBlock: FlowGraphBlockNames.PlayAnimation },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"object\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"propertyName\",\n                output: \"propertyName\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"customBuildAnimation\",\n                output: \"generateAnimationsFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"animation\",\n                output: \"animation\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 0,\n                isVariable: true,\n            },\n            {\n                input: \"easingFunction\",\n                output: \"easingFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 3,\n                isVariable: true,\n            },\n            {\n                input: \"value_0\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            serializedObjects.forEach((serializedObject) => {\n                // check if it is the json pointer block\n                if (serializedObject.className === FlowGraphBlockNames.JsonPointerParser) {\n                    serializedObject.config ||= {};\n                    serializedObject.config.outputValue = true;\n                } else if (serializedObject.className === FlowGraphBlockNames.ValueInterpolation) {\n                    serializedObject.config ||= {};\n                    Object.keys(gltfBlock.values || []).forEach((key) => {\n                        const value = gltfBlock.values?.[key];\n                        if (key === \"value\" && value) {\n                            // get the type of the value\n                            const type = value.type;\n                            if (type !== undefined) {\n                                serializedObject.config.animationType = parser.arrays.types[type].flowGraphType;\n                            }\n                        }\n                    });\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"animation/start\": {\n        blocks: [FlowGraphBlockNames.PlayAnimation, FlowGraphBlockNames.ArrayIndex, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n        inputs: {\n            values: {\n                animation: { name: \"index\", gltfType: \"number\", toBlock: FlowGraphBlockNames.ArrayIndex },\n                speed: { name: \"speed\", gltfType: \"number\" },\n                startTime: { name: \"from\", gltfType: \"number\", dataTransformer: (time: number[], parser) => [time[0] * parser._animationTargetFps] },\n                endTime: { name: \"to\", gltfType: \"number\", dataTransformer: (time: number[], parser) => [time[0] * parser._animationTargetFps] },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"animationGroup\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"array\",\n                output: \"animationGroups\",\n                inputBlockIndex: 1,\n                outputBlockIndex: 2,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects, _context, globalGLTF) {\n            // add the glTF to the configuration of the last serialized object\n            const serializedObject = serializedObjects[serializedObjects.length - 1];\n            serializedObject.config ||= {};\n            serializedObject.config.glTF = globalGLTF;\n            return serializedObjects;\n        },\n    },\n    \"animation/stop\": {\n        blocks: [FlowGraphBlockNames.StopAnimation, FlowGraphBlockNames.ArrayIndex, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n        inputs: {\n            values: {\n                animation: { name: \"index\", gltfType: \"number\", toBlock: FlowGraphBlockNames.ArrayIndex },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"animationGroup\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"array\",\n                output: \"animationGroups\",\n                inputBlockIndex: 1,\n                outputBlockIndex: 2,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects, _context, globalGLTF) {\n            // add the glTF to the configuration of the last serialized object\n            const serializedObject = serializedObjects[serializedObjects.length - 1];\n            serializedObject.config ||= {};\n            serializedObject.config.glTF = globalGLTF;\n            return serializedObjects;\n        },\n    },\n    \"animation/stopAt\": {\n        blocks: [FlowGraphBlockNames.StopAnimation, FlowGraphBlockNames.ArrayIndex, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n        configuration: {},\n        inputs: {\n            values: {\n                animation: { name: \"index\", gltfType: \"number\", toBlock: FlowGraphBlockNames.ArrayIndex },\n                stopTime: { name: \"stopAtFrame\", gltfType: \"number\", dataTransformer: (time: number[], parser) => [time[0] * parser._animationTargetFps] },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"animationGroup\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"array\",\n                output: \"animationGroups\",\n                inputBlockIndex: 1,\n                outputBlockIndex: 2,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects, _context, globalGLTF) {\n            // add the glTF to the configuration of the last serialized object\n            const serializedObject = serializedObjects[serializedObjects.length - 1];\n            serializedObject.config ||= {};\n            serializedObject.config.glTF = globalGLTF;\n            return serializedObjects;\n        },\n    },\n    \"math/switch\": {\n        blocks: [FlowGraphBlockNames.DataSwitch],\n        configuration: {\n            cases: { name: \"cases\", inOptions: true, defaultValue: [] },\n        },\n        inputs: {\n            values: {\n                selection: { name: \"case\" },\n            },\n        },\n        validation(gltfBlock) {\n            if (gltfBlock.configuration && gltfBlock.configuration.cases) {\n                const cases = gltfBlock.configuration.cases.value;\n                const onlyIntegers = cases.every((caseValue) => {\n                    // case value should be an integer. Since Number.isInteger(1.0) is true, we need to check if toString has only digits.\n                    return typeof caseValue === \"number\" && /^-?\\d+$/.test(caseValue.toString());\n                });\n                if (!onlyIntegers) {\n                    Logger.Warn(\"Switch cases should be integers. Using empty array instead.\");\n                    gltfBlock.configuration.cases.value = [] as number[];\n                    return { valid: true };\n                }\n                // check for duplicates\n                const uniqueCases = new Set(cases);\n                gltfBlock.configuration.cases.value = Array.from(uniqueCases) as number[];\n            }\n            return { valid: true };\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects) {\n            const serializedObject = serializedObjects[0];\n            serializedObject.dataInputs.forEach((input) => {\n                if (input.name !== \"default\" && input.name !== \"case\") {\n                    input.name = \"in_\" + input.name;\n                }\n            });\n            serializedObject.config ||= {};\n            serializedObject.config.treatCasesAsIntegers = true;\n            return serializedObjects;\n        },\n    },\n    \"debug/log\": {\n        blocks: [FlowGraphBlockNames.ConsoleLog],\n        configuration: {\n            message: { name: \"messageTemplate\", inOptions: true },\n        },\n    },\n};\n\n// aliases for backwards compatibility\ngltfToFlowGraphMapping[\"math/compose\"] = gltfToFlowGraphMapping[\"math/matCompose\"];\ngltfToFlowGraphMapping[\"math/decompose\"] = gltfToFlowGraphMapping[\"math/matDecompose\"];\n\nfunction getSimpleInputMapping(type: FlowGraphBlockNames, inputs: string[] = [\"a\"], inferType?: boolean): IGLTFToFlowGraphMapping {\n    return {\n        blocks: [type],\n        inputs: {\n            values: inputs.reduce(\n                (acc, input) => {\n                    acc[input] = { name: input };\n                    return acc;\n                },\n                {} as { [key: string]: { name: string } }\n            ),\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            if (inferType) {\n                // configure it to work the way glTF specifies\n                serializedObjects[0].config ||= {};\n                serializedObjects[0].config.preventIntegerFloatArithmetic = true;\n                // try to infer the type or fallback to Integer\n                // check the gltf block for the inputs, see if they have a type\n                let type = -1;\n                Object.keys(gltfBlock.values || {}).find((value) => {\n                    if (gltfBlock.values?.[value].type !== undefined) {\n                        type = gltfBlock.values[value].type;\n                        return true;\n                    }\n                    return false;\n                });\n                if (type !== -1) {\n                    serializedObjects[0].config.type = _parser.arrays.types[type].flowGraphType;\n                }\n            }\n            return serializedObjects;\n        },\n        validation(gltfBlock) {\n            if (inferType) {\n                // make sure types are the same\n                return ValidateTypes(gltfBlock);\n            }\n            return { valid: true };\n        },\n    };\n}\n\nfunction ValidateTypes(gltfBlock: IKHRInteractivity_Node): { valid: boolean; error?: string } {\n    if (gltfBlock.values) {\n        const types = Object.keys(gltfBlock.values)\n            .map((key) => gltfBlock.values![key].type)\n            .filter((type) => type !== undefined);\n        const allSameType = types.every((type) => type === types[0]);\n        if (!allSameType) {\n            return { valid: false, error: \"All inputs must be of the same type\" };\n        }\n    }\n    return { valid: true };\n}\n\nexport function getAllSupportedNativeNodeTypes(): string[] {\n    return Object.keys(gltfToFlowGraphMapping);\n}\n\n/**\n * \n * These are the nodes from the specs:\n\n### Math Nodes\n1. **Constants**\n   - E (`math/e`) FlowGraphBlockNames.E\n   - Pi (`math/pi`) FlowGraphBlockNames.PI\n   - Infinity (`math/inf`) FlowGraphBlockNames.Inf\n   - Not a Number (`math/nan`) FlowGraphBlockNames.NaN\n2. **Arithmetic Nodes**\n   - Absolute Value (`math/abs`) FlowGraphBlockNames.Abs\n   - Sign (`math/sign`) FlowGraphBlockNames.Sign\n   - Truncate (`math/trunc`) FlowGraphBlockNames.Trunc\n   - Floor (`math/floor`) FlowGraphBlockNames.Floor\n   - Ceil (`math/ceil`) FlowGraphBlockNames.Ceil\n   - Round (`math/round`)  FlowGraphBlockNames.Round\n   - Fraction (`math/fract`) FlowGraphBlockNames.Fract\n   - Negation (`math/neg`) FlowGraphBlockNames.Negation\n   - Addition (`math/add`) FlowGraphBlockNames.Add\n   - Subtraction (`math/sub`) FlowGraphBlockNames.Subtract\n   - Multiplication (`math/mul`) FlowGraphBlockNames.Multiply\n   - Division (`math/div`) FlowGraphBlockNames.Divide\n   - Remainder (`math/rem`) FlowGraphBlockNames.Modulo\n   - Minimum (`math/min`) FlowGraphBlockNames.Min\n   - Maximum (`math/max`) FlowGraphBlockNames.Max\n   - Clamp (`math/clamp`) FlowGraphBlockNames.Clamp\n   - Saturate (`math/saturate`) FlowGraphBlockNames.Saturate\n   - Interpolate (`math/mix`) FlowGraphBlockNames.MathInterpolation\n3. **Comparison Nodes**\n   - Equality (`math/eq`) FlowGraphBlockNames.Equality\n   - Less Than (`math/lt`) FlowGraphBlockNames.LessThan\n   - Less Than Or Equal To (`math/le`) FlowGraphBlockNames.LessThanOrEqual\n   - Greater Than (`math/gt`) FlowGraphBlockNames.GreaterThan\n   - Greater Than Or Equal To (`math/ge`) FlowGraphBlockNames.GreaterThanOrEqual\n4. **Special Nodes**\n   - Is Not a Number (`math/isnan`) FlowGraphBlockNames.IsNaN\n   - Is Infinity (`math/isinf`) FlowGraphBlockNames.IsInfinity\n   - Select (`math/select`) FlowGraphBlockNames.Conditional\n   - Switch (`math/switch`) FlowGraphBlockNames.DataSwitch\n   - Random (`math/random`) FlowGraphBlockNames.Random\n5. **Angle and Trigonometry Nodes**\n   - Degrees-To-Radians (`math/rad`) FlowGraphBlockNames.DegToRad\n   - Radians-To-Degrees (`math/deg`) FlowGraphBlockNames.RadToDeg\n   - Sine (`math/sin`)  FlowGraphBlockNames.Sin\n   - Cosine (`math/cos`) FlowGraphBlockNames.Cos\n   - Tangent (`math/tan`) FlowGraphBlockNames.Tan\n   - Arcsine (`math/asin`) FlowGraphBlockNames.Asin\n   - Arccosine (`math/acos`) FlowGraphBlockNames.Acos\n   - Arctangent (`math/atan`) FlowGraphBlockNames.Atan\n   - Arctangent 2 (`math/atan2`) FlowGraphBlockNames.Atan2\n6. **Hyperbolic Nodes**\n   - Hyperbolic Sine (`math/sinh`) FlowGraphBlockNames.Sinh\n   - Hyperbolic Cosine (`math/cosh`) FlowGraphBlockNames.Cosh\n   - Hyperbolic Tangent (`math/tanh`) FlowGraphBlockNames.Tanh\n   - Inverse Hyperbolic Sine (`math/asinh`) FlowGraphBlockNames.Asinh\n   - Inverse Hyperbolic Cosine (`math/acosh`) FlowGraphBlockNames.Acosh\n   - Inverse Hyperbolic Tangent (`math/atanh`) FlowGraphBlockNames.Atanh\n7. **Exponential Nodes**\n   - Exponent (`math/exp`) FlowGraphBlockNames.Exponential\n   - Natural Logarithm (`math/log`) FlowGraphBlockNames.Log\n   - Base-2 Logarithm (`math/log2`) FlowGraphBlockNames.Log2\n   - Base-10 Logarithm (`math/log10`) FlowGraphBlockNames.Log10\n   - Square Root (`math/sqrt`) FlowGraphBlockNames.SquareRoot\n   - Cube Root (`math/cbrt`) FlowGraphBlockNames.CubeRoot\n   - Power (`math/pow`) FlowGraphBlockNames.Power\n8. **Vector Nodes**\n   - Length (`math/length`) FlowGraphBlockNames.Length\n   - Normalize (`math/normalize`) FlowGraphBlockNames.Normalize\n   - Dot Product (`math/dot`) FlowGraphBlockNames.Dot\n   - Cross Product (`math/cross`) FlowGraphBlockNames.Cross\n   - Rotate 2D (`math/rotate2D`) FlowGraphBlockNames.Rotate2D\n   - Rotate 3D (`math/rotate3D`) FlowGraphBlockNames.Rotate3D\n   - Transform (`math/transform`) FlowGraphBlockNames.TransformVector\n9. **Matrix Nodes**\n   - Transpose (`math/transpose`) FlowGraphBlockNames.Transpose\n   - Determinant (`math/determinant`) FlowGraphBlockNames.Determinant\n   - Inverse (`math/inverse`) FlowGraphBlockNames.InvertMatrix\n   - Multiplication (`math/matmul`) FlowGraphBlockNames.MatrixMultiplication\n   - Compose (`math/matCompose`) FlowGraphBlockNames.MatrixCompose\n   - Decompose (`math/matDecompose`) FlowGraphBlockNames.MatrixDecompose\n10. **Quaternion Nodes**\n    - Conjugate (`math/quatConjugate`) FlowGraphBlockNames.Conjugate\n    - Multiplication (`math/quatMul`) FlowGraphBlockNames.Multiply\n    - Angle Between Quaternions (`math/quatAngleBetween`) FlowGraphBlockNames.AngleBetween\n    - Quaternion From Axis Angle (`math/quatFromAxisAngle`) FlowGraphBlockNames.QuaternionFromAxisAngle\n    - Quaternion To Axis Angle (`math/quatToAxisAngle`) FlowGraphBlockNames.QuaternionToAxisAngle\n    - Quaternion From Two Directional Vectors (`math/quatFromDirections`) FlowGraphBlockNames.QuaternionFromDirections\n11. **Swizzle Nodes**\n    - Combine (`math/combine2`, `math/combine3`, `math/combine4`, `math/combine2x2`, `math/combine3x3`, `math/combine4x4`)\n        FlowGraphBlockNames.CombineVector2, FlowGraphBlockNames.CombineVector3, FlowGraphBlockNames.CombineVector4\n        FlowGraphBlockNames.CombineMatrix2D, FlowGraphBlockNames.CombineMatrix3D, FlowGraphBlockNames.CombineMatrix\n    - Extract (`math/extract2`, `math/extract3`, `math/extract4`, `math/extract2x2`, `math/extract3x3`, `math/extract4x4`)\n        FlowGraphBlockNames.ExtractVector2, FlowGraphBlockNames.ExtractVector3, FlowGraphBlockNames.ExtractVector4\n        FlowGraphBlockNames.ExtractMatrix2D, FlowGraphBlockNames.ExtractMatrix3D, FlowGraphBlockNames.ExtractMatrix\n12. **Integer Arithmetic Nodes**\n    - Absolute Value (`math/abs`) FlowGraphBlockNames.Abs\n    - Sign (`math/sign`) FlowGraphBlockNames.Sign\n    - Negation (`math/neg`) FlowGraphBlockNames.Negation\n    - Addition (`math/add`) FlowGraphBlockNames.Add\n    - Subtraction (`math/sub`) FlowGraphBlockNames.Subtract\n    - Multiplication (`math/mul`) FlowGraphBlockNames.Multiply\n    - Division (`math/div`) FlowGraphBlockNames.Divide\n    - Remainder (`math/rem`) FlowGraphBlockNames.Modulo\n    - Minimum (`math/min`) FlowGraphBlockNames.Min\n    - Maximum (`math/max`) FlowGraphBlockNames.Max\n    - Clamp (`math/clamp`) FlowGraphBlockNames.Clamp\n13. **Integer Comparison Nodes**\n    - Equality (`math/eq`) FlowGraphBlockNames.Equality\n    - Less Than (`math/lt`) FlowGraphBlockNames.LessThan\n    - Less Than Or Equal To (`math/le`) FlowGraphBlockNames.LessThanOrEqual\n    - Greater Than (`math/gt`) FlowGraphBlockNames.GreaterThan\n    - Greater Than Or Equal To (`math/ge`) FlowGraphBlockNames.GreaterThanOrEqual\n14. **Integer Bitwise Nodes**\n    - Bitwise NOT (`math/not`) FlowGraphBlockNames.BitwiseNot\n    - Bitwise AND (`math/and`) FlowGraphBlockNames.BitwiseAnd\n    - Bitwise OR (`math/or`) FlowGraphBlockNames.BitwiseOr\n    - Bitwise XOR (`math/xor`) FlowGraphBlockNames.BitwiseXor\n    - Right Shift (`math/asr`) FlowGraphBlockNames.BitwiseRightShift\n    - Left Shift (`math/lsl`) FlowGraphBlockNames.BitwiseLeftShift\n    - Count Leading Zeros (`math/clz`) FlowGraphBlockNames.LeadingZeros\n    - Count Trailing Zeros (`math/ctz`) FlowGraphBlockNames.TrailingZeros\n    - Count One Bits (`math/popcnt`) FlowGraphBlockNames.OneBitsCounter\n15. **Boolean Arithmetic Nodes**\n    - Equality (`math/eq`) FlowGraphBlockNames.Equality\n    - Boolean NOT (`math/not`) FlowGraphBlockNames.BitwiseNot\n    - Boolean AND (`math/and`) FlowGraphBlockNames.BitwiseAnd\n    - Boolean OR (`math/or`) FlowGraphBlockNames.BitwiseOr\n    - Boolean XOR (`math/xor`) FlowGraphBlockNames.BitwiseXor\n\n### Type Conversion Nodes\n1. **Boolean Conversion Nodes**\n   - Boolean to Integer (`type/boolToInt`) FlowGraphBlockNames.BooleanToInt\n   - Boolean to Float (`type/boolToFloat`) FlowGraphBlockNames.BooleanToFloat\n2. **Integer Conversion Nodes**\n   - Integer to Boolean (`type/intToBool`) FlowGraphBlockNames.IntToBoolean\n   - Integer to Float (`type/intToFloat`) FlowGraphBlockNames.IntToFloat\n3. **Float Conversion Nodes**\n   - Float to Boolean (`type/floatToBool`) FlowGraphBlockNames.FloatToBoolean\n   - Float to Integer (`type/floatToInt`) FlowGraphBlockNames.FloatToInt\n\n### Control Flow Nodes\n1. **Sync Nodes**\n   - Sequence (`flow/sequence`) FlowGraphBlockNames.Sequence\n   - Branch (`flow/branch`) FlowGraphBlockNames.Branch\n   - Switch (`flow/switch`) FlowGraphBlockNames.Switch\n   - While Loop (`flow/while`) FlowGraphBlockNames.WhileLoop\n   - For Loop (`flow/for`) FlowGraphBlockNames.ForLoop\n   - Do N (`flow/doN`) FlowGraphBlockNames.DoN\n   - Multi Gate (`flow/multiGate`) FlowGraphBlockNames.MultiGate\n   - Wait All (`flow/waitAll`) FlowGraphBlockNames.WaitAll\n   - Throttle (`flow/throttle`) FlowGraphBlockNames.Throttle\n2. **Delay Nodes**\n   - Set Delay (`flow/setDelay`) FlowGraphBlockNames.SetDelay\n   - Cancel Delay (`flow/cancelDelay`) FlowGraphBlockNames.CancelDelay\n\n### State Manipulation Nodes\n1. **Custom Variable Access**\n   - Variable Get (`variable/get`) FlowGraphBlockNames.GetVariable\n   - Variable Set (`variable/set`) FlowGraphBlockNames.SetVariable\n   - Variable Interpolate (`variable/interpolate`)\n2. **Object Model Access** // TODO fully test this!!!\n   - JSON Pointer Template Parsing (`pointer/get`) [FlowGraphBlockNames.GetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Effective JSON Pointer Generation (`pointer/set`) [FlowGraphBlockNames.SetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Pointer Get (`pointer/get`) [FlowGraphBlockNames.GetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Pointer Set (`pointer/set`) [FlowGraphBlockNames.SetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Pointer Interpolate (`pointer/interpolate`) [FlowGraphBlockNames.ValueInterpolation, FlowGraphBlockNames.JsonPointerParser, FlowGraphBlockNames.PlayAnimation, FlowGraphBlockNames.Easing]\n\n### Animation Control Nodes\n1. **Animation Play** (`animation/start`) FlowGraphBlockNames.PlayAnimation\n2. **Animation Stop** (`animation/stop`) FlowGraphBlockNames.StopAnimation \n3. **Animation Stop At** (`animation/stopAt`) FlowGraphBlockNames.StopAnimation \n\n### Event Nodes\n1. **Lifecycle Event Nodes**\n   - On Start (`event/onStart`) FlowGraphBlockNames.SceneReadyEvent\n   - On Tick (`event/onTick`) FlowGraphBlockNames.SceneTickEvent\n2. **Custom Event Nodes**\n   - Receive (`event/receive`) FlowGraphBlockNames.ReceiveCustomEvent\n   - Send (`event/send`) FlowGraphBlockNames.SendCustomEvent\n\n */\n"],
  "mappings": "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",
  "names": ["_a", "type"]
}
