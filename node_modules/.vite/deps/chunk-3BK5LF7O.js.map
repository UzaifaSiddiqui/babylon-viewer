{
  "version": 3,
  "sources": ["../../../dev/loaders/src/glTF/glTFFileLoader.metadata.ts"],
  "sourcesContent": ["import type { ISceneLoaderPluginExtensions, ISceneLoaderPluginMetadata } from \"core/index\";\r\n\r\nexport const GLTFMagicBase64Encoded = \"Z2xURg\"; // \"glTF\" base64 encoded (without the quotes!)\r\n\r\nexport const GLTFFileLoaderMetadata = {\r\n    name: \"gltf\",\r\n\r\n    extensions: {\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        \".gltf\": { isBinary: false, mimeType: \"model/gltf+json\" },\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        \".glb\": { isBinary: true, mimeType: \"model/gltf-binary\" },\r\n    } as const satisfies ISceneLoaderPluginExtensions,\r\n\r\n    canDirectLoad(data: string): boolean {\r\n        return (\r\n            (data.indexOf(\"asset\") !== -1 && data.indexOf(\"version\") !== -1) ||\r\n            data.startsWith(\"data:base64,\" + GLTFMagicBase64Encoded) || // this is technically incorrect, but will continue to support for backcompat.\r\n            data.startsWith(\"data:;base64,\" + GLTFMagicBase64Encoded) ||\r\n            data.startsWith(\"data:application/octet-stream;base64,\" + GLTFMagicBase64Encoded) ||\r\n            data.startsWith(\"data:model/gltf-binary;base64,\" + GLTFMagicBase64Encoded)\r\n        );\r\n    },\r\n} as const satisfies ISceneLoaderPluginMetadata;\r\n"],
  "mappings": ";AAEO,IAAM,yBAAyB;AAE/B,IAAM,yBAAyB;EAClC,MAAM;EAEN,YAAY;;IAER,SAAS,EAAE,UAAU,OAAO,UAAU,kBAAiB;;IAEvD,QAAQ,EAAE,UAAU,MAAM,UAAU,oBAAmB;;EAG3D,cAAc,MAAY;AACtB,WACK,KAAK,QAAQ,OAAO,MAAM,MAAM,KAAK,QAAQ,SAAS,MAAM,MAC7D,KAAK,WAAW,iBAAiB,sBAAsB;IACvD,KAAK,WAAW,kBAAkB,sBAAsB,KACxD,KAAK,WAAW,0CAA0C,sBAAsB,KAChF,KAAK,WAAW,mCAAmC,sBAAsB;EAEjF;;",
  "names": []
}
